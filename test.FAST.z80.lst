0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hex . /dec"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hex . /dec `\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 38               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 38               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 38               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 38               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 38               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 38               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 38               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 38               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 38               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 38               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 34               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 38               LD   (RST08),HL   
0094   22 D2 38               LD   (RST10),HL   
0097   22 D4 38               LD   (RST18),HL   
009A   22 D6 38               LD   (RST20),HL   
009D   22 D8 38               LD   (RST28),HL   
00A0   22 DA 38               LD   (RST30),HL   
00A3   22 DE 38               LD   (INTVEC),HL   
00A6   22 E0 38               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 38               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 38               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 10               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  MINTY programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of MINTY code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put MINTY code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   0C                     DB   lsb(dquote_)   ; "     2
0182   04                     DB   lsb(hash_)   ; #     1
0183   09                     DB   lsb(dollar_)   ; $     1
0184   12                     DB   lsb(percent_)   ; %     1
0185   73                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   18                     DB   lsb(lparen_)   ; (     1
0188   6B                     DB   lsb(rparen_)   ; )     1
0189   A5                     DB   lsb(star_)   ; *     1
018A   C9                     DB   lsb(plus_)   ; +     1
018B   06                     DB   lsb(comma_)   ; ,     2
018C   7D                     DB   lsb(minus_)   ; -     1
018D   0F                     DB   lsb(dot_)   ; .     2
018E   1B                     DB   lsb(slash_)   ; /	    1
018F   1E                     DB   lsb(num_)   ; 0     1
0190   1E                     DB   lsb(num_)   ; 1
0191   1E                     DB   lsb(num_)   ; 2
0192   1E                     DB   lsb(num_)   ; 3
0193   1E                     DB   lsb(num_)   ; 4
0194   1E                     DB   lsb(num_)   ; 5
0195   1E                     DB   lsb(num_)   ; 6
0196   1E                     DB   lsb(num_)   ; 7
0197   1E                     DB   lsb(num_)   ; 8
0198   1E                     DB   lsb(num_)   ; 9
0199   04                     DB   lsb(colon_)   ; :     2
019A   5E                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   15                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   E5                     DB   lsb(upcase_)   ; A     1
01A1   E5                     DB   lsb(upcase_)   ; B
01A2   E5                     DB   lsb(upcase_)   ; C
01A3   E5                     DB   lsb(upcase_)   ; D
01A4   E5                     DB   lsb(upcase_)   ; E
01A5   E5                     DB   lsb(upcase_)   ; F
01A6   E5                     DB   lsb(upcase_)   ; G
01A7   E5                     DB   lsb(upcase_)   ; h
01A8   E5                     DB   lsb(upcase_)   ; I
01A9   E5                     DB   lsb(upcase_)   ; J
01AA   E5                     DB   lsb(upcase_)   ; K
01AB   E5                     DB   lsb(upcase_)   ; L
01AC   E5                     DB   lsb(upcase_)   ; M
01AD   E5                     DB   lsb(upcase_)   ; N
01AE   E5                     DB   lsb(upcase_)   ; O
01AF   E5                     DB   lsb(upcase_)   ; p
01B0   E5                     DB   lsb(upcase_)   ; Q
01B1   E5                     DB   lsb(upcase_)   ; R
01B2   E5                     DB   lsb(upcase_)   ; S
01B3   E5                     DB   lsb(upcase_)   ; T
01B4   E5                     DB   lsb(upcase_)   ; U
01B5   E5                     DB   lsb(upcase_)   ; V
01B6   E5                     DB   lsb(upcase_)   ; W
01B7   E5                     DB   lsb(upcase_)   ; X
01B8   E5                     DB   lsb(upcase_)   ; Y
01B9   E5                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 36                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 37                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   26 39                  DW   HEAP   ; vHeapPtr start of the free mem
01E4   00 35                  DW   NAMES   ; vNamesPtr
01E6   00 00                  DW   NUL   ; vRecurPtr
01E8   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E9   0A                     DB   10   ; vNumBase = 10
01EA   24                     DB   "$"   ; vHexPrefix
01EB   FF                     DB   TRUE   ; vEcho
01EC   00                     DB   FALSE   ; vStrMode
01ED   00                     DB   0   
01EE   00                     DB   0   
01EF   00                     DB   0   
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 49 4E 54 59 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMINTY V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                COLON_:      
0204                HASH_:       
0204   DD E9                  JP   (ix)   
0206                COMMA_:      
0206   C3 53 08               JP   comma   
0209                DOLLAR_:      
0209   C3 FB 08               JP   dollar   
020C                DQUOTE_:      
020C                QUOTE_:      
020C   C3 25 09               JP   quote   
020F                DOT_:        
020F   C3 00 04               JP   dot   
0212                PERCENT_:      
0212   C3 3F 09               JP   percent   
0215                QUESTION_:      
0215   C3 18 09               JP   question   
0218                LPAREN_:      
0218   C3 CB 03               JP   lbrace   
021B                SLASH_:      
021B   C3 00 05               JP   slash   
021E                NUM_:        
021E   C3 74 09               JP   num   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 B6 0A               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 9E 0A               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 AF 0A               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA 16 0B               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA FA 0A               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA BD 0A               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 C2 0A               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                SEMICOLON_:      
025E                SEMICOLON:      
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A F0 38               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   C3 AF 0C               JP   variable   
026B                             ;                               4
026B                RPAREN_:      
026B                             ; jp rparen
026B                RPAREN:      
026B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
026E   FD 46 09               LD   b,(iy+9)   
0271   DD E9                  JP   (ix)   
0273                             ; & and                          14
0273                             ; a b -- c
0273                AMPER_:      
0273                AMPER:       
0273                AND:         
0273   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0274   E1                     POP   hl   
0275   7B                     LD   a,e   
0276   A5                     AND   l   
0277   6F                     LD   l,a   
0278   7A                     LD   a,d   
0279   A4                     AND   h   
027A   67                     LD   h,a   
027B   18 5B                  JR   add3   
027D                             ; - sub
027D                             ; a b -- c
027D                             ; -- sub
027D                             ; b1 -- b2
027D                             ; -= sub
027D                             ; a b1 -- b2
027D                MINUS_:      
027D                MINUS:       
027D   03                     INC   bc   ; check if sign of a number
027E   0A                     LD   a,(bc)   
027F   0B                     DEC   bc   
0280   FE 30                  CP   "0"   
0282   38 05                  JR   c,sub   
0284   FE 3A                  CP   "9"+1   
0286   DA 74 09               JP   c,num   
0289                SUB:         ; Subtract the value 2nd on stack from top of stack
0289   E1                     POP   hl   ; hl = arg_b
028A   03                     INC   bc   
028B   FE 2D                  CP   "-"   
028D   20 04                  JR   nz,sub1   
028F   2B                     DEC   hl   ; --
0290   C3 A0 0A               JP   assign0   
0293                SUB1:        
0293   D1                     POP   de   ; de = arg_a
0294   FE 3D                  CP   "="   
0296   28 02                  JR   z,sub2   
0298   0B                     DEC   bc   ; -
0299   EB                     EX   de,hl   
029A                SUB2:        
029A   B7                     OR   a   ; -=
029B   ED 52                  SBC   hl,de   
029D                SUB3:        
029D   FE 3D                  CP   "="   
029F   CA A0 0A               JP   z,assign0   
02A2   E5                     PUSH   hl   
02A3   DD E9                  JP   (ix)   
02A5                STAR_:       ; 21
02A5                STAR:        
02A5   03                     INC   bc   ; check for ** spread
02A6   0A                     LD   a,(bc)   
02A7   FE 2A                  CP   "*"   
02A9   CA D6 0A               JP   z,spread   
02AC   0B                     DEC   bc   
02AD                MUL:         
02AD   D1                     POP   de   ; get first value
02AE   E1                     POP   hl   
02AF                MUL2:        
02AF   C5                     PUSH   bc   ; Preserve the IP
02B0   44 4D                  LD   bc,hl   ; bc = 2nd value
02B2   21 00 00               LD   hl,0   
02B5   3E 10                  LD   a,16   
02B7                MUL3:        
02B7   29                     ADD   hl,hl   
02B8   CB 13                  RL   e   
02BA   CB 12                  RL   d   
02BC   30 04                  JR   nc,$+6   
02BE   09                     ADD   hl,bc   
02BF   30 01                  JR   nc,$+3   
02C1   13                     INC   de   
02C2   3D                     DEC   a   
02C3   20 F2                  JR   nz,mul3   
02C5   C1                     POP   bc   ; Restore the IP
02C6   C3 D8 02               JP   add3   
02C9                             ; + add                         25
02C9                             ; a b -- c
02C9                PLUS_:       
02C9                PLUS:        
02C9                ADD:         
02C9   03                     INC   bc   
02CA   0A                     LD   a,(bc)   
02CB   FE 2B                  CP   "+"   ; ++ increment variable
02CD   20 05                  JR   nz,add1   
02CF   E1                     POP   hl   
02D0   23                     INC   hl   
02D1   C3 A0 0A               JP   assign0   
02D4                ADD1:        
02D4   0B                     DEC   bc   
02D5   D1                     POP   de   ; second term
02D6   E1                     POP   hl   ; first term
02D7   19                     ADD   hl,de   
02D8                ADD3:        
02D8   03                     INC   bc   
02D9   0A                     LD   a,(bc)   
02DA   FE 3D                  CP   "="   
02DC   28 04                  JR   z,add4   
02DE   0B                     DEC   bc   
02DF   E5                     PUSH   hl   
02E0   DD E9                  JP   (ix)   
02E2                ADD4:        
02E2   C3 A0 0A               JP   assign0   
02E5                             ;                               18
02E5                UPCASE_:      
02E5                UPCASE:      
02E5   0A                     LD   a,(bc)   ; a = identifier char
02E6   D6 41                  SUB   "A"   ; "A" = 0
02E8   18 1B                  JR   ident1   
02EA                             ;********************** PAGE 2 END *********************************************
02EA                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 38                  LD   h,msb(VARS)   
0309   22 FA 38               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 68 0B               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 EB 0E               JP   error   
0343                LAMBDA2:      
0343   CD 9E 0B               CALL   parseBlock   
0346   CD 0D 0C               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 08 39            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EA 38               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A F0 38               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EA 38            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EA 38               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 08 39            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA 11 0A               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 44 0A               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA 11 0A               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 38            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 38            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 4E 0B               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD 9E 0B               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 D8 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 A4 09               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 F1 08               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B FA 38            LD   de,(vPointer)   
03ED   21 FA 38               LD   hl,vPointer   
03F0   C3 AF 0C               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   03                     INC   bc   
0401   0A                     LD   a,(bc)   
0402   FE 61                  CP   "a"   ; .a print array
0404   28 0B                  JR   z,printArray   
0406   FE 63                  CP   "c"   ; .c print char
0408   28 0A                  JR   z,printChar   
040A   FE 73                  CP   "s"   ; .s print string
040C   28 15                  JR   z,printString   
040E   0B                     DEC   bc   
040F   18 27                  JR   printNumber   ; .  print number, fall through
0411                PRINTARRAY:      ; TODO
0411   C3 4E 0B               JP   dotNext   
0414                             ; .c print char
0414                             ; char --
0414                PRINTCHAR:      
0414   E1                     POP   hl   ; a = char
0415   7D                     LD   a,l   
0416   ED 5B E8 38            LD   de,(vBufPtr)   ; de = buffer*
041A   12                     LD   (de),a   
041B   13                     INC   de   
041C   ED 53 E8 38            LD   (vBufPtr),de   ; save buffer*'
0420   C3 4E 0B               JP   dotNext   
0423                             ; .s print string
0423                             ; string* --
0423                PRINTSTRING:      
0423   E1                     POP   hl   ; hl = string*
0424   ED 5B E8 38            LD   de,(vBufPtr)   ; de = buffer*
0428   18 03                  JR   printString1   
042A                PRINTSTRING0:      
042A   12                     LD   (de),a   ; a -> buffer*
042B   13                     INC   de   ; string*++,
042C   23                     INC   hl   
042D                PRINTSTRING1:      
042D   7E                     LD   a,(hl)   ; a <- string*
042E   B7                     OR   a   ; if NUL exit loop
042F   20 F9                  JR   nz,printString0   
0431   ED 53 E8 38            LD   (vBufPtr),de   ; save buffer*' in pointer
0435   C3 4E 0B               JP   dotNext   
0438                             ; . print decimal
0438                             ; value --
0438                PRINTNUMBER:      
0438   3A F1 38               LD   a,(vNumBase)   
043B   FE 10                  CP   16   
043D   CA 60 04               JP   z,printHex   ; else falls through
0440   C3 43 04               JP   printDec   
0443                             ; print decimal                 ; 70
0443                             ; value --
0443                PRINTDEC:      
0443   ED 5B E8 38            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0447   D9                     EXX      
0448   E1                     POP   hl   ; hl = value
0449   3A F0 38               LD   a,(vDataWidth)   
044C   3D                     DEC   a   
044D   20 02                  JR   nz,printDec1   
044F   26 00                  LD   h,0   
0451                PRINTDEC1:      
0451   CD 21 0D               CALL   formatDec   
0454   D9                     EXX      ; de = buffer*' bc = IP
0455   3E 20                  LD   a," "   ; append space to buffer
0457   12                     LD   (de),a   
0458   13                     INC   de   ; string*++,
0459   ED 53 E8 38            LD   (vBufPtr),de   ; update buffer* with buffer*'
045D   C3 4E 0B               JP   dotNext   
0460                             ; buffer hex                    37
0460                             ; value --
0460                PRINTHEX:      
0460   ED 5B E8 38            LD   de,(vBufPtr)   
0464   3A F2 38               LD   a,(vHexPrefix)   ; "$"
0467   B7                     OR   a   ; skip if null
0468   28 02                  JR   z,printHex1   
046A   12                     LD   (de),a   
046B   13                     INC   de   ; string*++,
046C                PRINTHEX1:      
046C   E1                     POP   hl   ; hl = value
046D   3A F0 38               LD   a,(vDataWidth)   
0470   3D                     DEC   a   
0471   28 04                  JR   z,printHex2   
0473   7C                     LD   a,h   
0474   CD 86 04               CALL   printHex3   
0477                PRINTHEX2:      
0477   7D                     LD   a,l   
0478   CD 86 04               CALL   printHex3   
047B   3E 20                  LD   a," "   ; append space to buffer
047D   12                     LD   (de),a   
047E   13                     INC   de   ; string*++,
047F   ED 53 E8 38            LD   (vBufPtr),de   
0483   C3 4E 0B               JP   dotNext   
0486                PRINTHEX3:      
0486   F5                     PUSH   af   
0487   1F                     RRA      
0488   1F                     RRA      
0489   1F                     RRA      
048A   1F                     RRA      
048B   CD 8F 04               CALL   printHex4   
048E   F1                     POP   af   
048F                PRINTHEX4:      
048F   E6 0F                  AND   0x0F   
0491   C6 90                  ADD   a,0x90   
0493   27                     DAA      
0494   CE 40                  ADC   a,0x40   
0496   27                     DAA      
0497   12                     LD   (de),a   
0498   13                     INC   de   ; string*++,
0499   C9                     RET      
049A                             ;********************** PAGE 4 END *********************************************
049A                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA 29 08               JP   z,comment   
0507   CD DC 0C               CALL   identHash   
050A   21 32 08               LD   hl,error1   
050D   CD EE 0C               CALL   commandTable   
0510   68 00 00 00 00 71 00 00 00 00 00 00 00 1F 00 00 DB   lsb(div_),0,0,0,0,lsb(f_),0,0,0,0,0,0,0,lsb(word_),0,0   
0520   00 00 00 02 10 00 61 00 00 00 00 00 00 85 00 00 DB   0,0,0,lsb(t_),lsb(abs_),0,lsb(dec_),0,0,0,0,0,0,lsb(in_),0,0   
0530   00 00 2C 1E 00 00 00 00 00 3B 00 00 00 00 00 00 DB   0,0,lsb(cgo_),lsb(aln_),0,0,0,0,0,lsb(cll_),0,0,0,0,0,0   
0540   34 00 00 00 00 44 00 00 29 00 00 80 00 00 00 00 DB   lsb(cls_),0,0,0,0,lsb(cmv_),0,0,lsb(bye_),0,0,lsb(hex_),0,0,0,0   
0550   00 52 00 00 6B 00 00 90 00 00 00 C4 00 9C CC A8 DB   0,lsb(cur_),0,0,lsb(echo_),0,0,lsb(max_),0,0,0,lsb(sbb_),0,lsb(min_),lsb(sbe_),lsb(nil_)   
0560   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0   
0570   00 00 27 00 00 39 00 00 00 00 00 FB 00 00 74 00 DB   0,0,lsb(args_),0,0,lsb(var_),0,0,0,0,0,lsb(sln_),0,0,lsb(frac_),0   
0580   00 B4 00 AB 00 00 00 BA 7A 00 00 00 00 00 00 00 DB   0,lsb(recur_),0,lsb(out_),0,0,0,lsb(return_),lsb(free_),0,0,0,0,0,0,0   
0590   00 00 00 00 00 00 00 00 00 1E 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,0,0,lsb(xor_),lsb(sys_),0,0,0,0,0   
05A0   00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,lsb(byte_),0,0,0,0,0,0,0,0,0,0,0,0,0   
05B0   00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,lsb(alloc_),0,0,0,0,0,0,0,0,0,0,0,0,0   
05C0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0B DB   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,lsb(scmp_)   
05D0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0   
05E0   00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,lsb(while_),0,0,0,0,0,0,0,0,0,0,0,0,0   
05F0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0   
0600   00 00 00 16 00 00 00 00 00 00 00 00 00 00 00 13 DB   0,0,0,lsb(void_),0,0,0,0,0,0,0,0,0,0,0,lsb(select_)   
0610                             ;********************** PAGE 5 END *********************************************
0610                             ;********************** PAGE 6 BEGIN *********************************************
0610                             ; /abs absolute
0610                             ; num -- num
0610                ABS_:        
0610                ABSOLUTE:      
0610   E1                     POP   hl   
0611   CB 7C                  BIT   7,h   
0613   28 06                  JR   z,absolute1   
0615   AF                     XOR   a   
0616   95                     SUB   l   
0617   6F                     LD   l,a   
0618   9F                     SBC   a,a   
0619   94                     SUB   h   
061A   67                     LD   h,a   
061B                ABSOLUTE1:      
061B   E5                     PUSH   hl   
061C   DD E9                  JP   (ix)   
061E                             ; /aln length of an array, num elements
061E                             ; array* -- num
061E                ALN_:        
061E                ARRAYLENGTH:      
061E   E1                     POP   hl   
061F   2B                     DEC   hl   ; msb size
0620   56                     LD   d,(hl)   
0621   2B                     DEC   hl   ; lsb size
0622   5E                     LD   e,(hl)   
0623   EB                     EX   de,hl   
0624                ARRAYLENGTH1:      
0624   E5                     PUSH   hl   
0625   DD E9                  JP   (ix)   
0627                             ; /args
0627                ARGS_:       
0627   DD E9                  JP   (ix)   
0629                             ; /bye
0629                BYE_:        
0629   C3 14 0E               JP   coldBoot0   
062C                             ; /cgo cursorGo
062C                             ; row column --
062C                CGO_:        
062C                CURSORGO:      
062C   D1                     POP   de   
062D   E1                     POP   hl   
062E   62                     LD   h,d   
062F   CD 4C 0F               CALL   ansiGoto   
0632   DD E9                  JP   (ix)   
0634                             ; /cls clear screen
0634                             ; --
0634                CLS_:        
0634                CLEARSCREEN:      
0634   CD 34 0F               CALL   ansiClearScreen   
0637   DD E9                  JP   (ix)   
0639                             ; /var
0639                VAR_:        
0639   DD E9                  JP   (ix)   
063B                             ; /cll clear line
063B                             ; num --
063B                CLL_:        
063B                CLEARLINE:      
063B   E1                     POP   hl   
063C   7D                     LD   a,l   
063D   E6 03                  AND   $03   
063F   CD 3D 0F               CALL   ansiClearLine   
0642   DD E9                  JP   (ix)   
0644                             ; /cmv cursor move
0644                             ; x dir --
0644                CMV_:        
0644                CURSORMOVE:      
0644   E1                     POP   hl   
0645   7D                     LD   a,l   
0646   E6 03                  AND   $03   
0648   C6 41                  ADD   a,"A"   
064A   67                     LD   h,a   
064B   D1                     POP   de   
064C   6B                     LD   l,e   
064D   CD 69 0F               CALL   ansiMove   
0650                CURSORMOVE1:      
0650   DD E9                  JP   (ix)   
0652                             ; /cur cursor hide / show
0652                             ; bool --
0652                CUR_:        
0652                CURSORSHOW:      
0652   E1                     POP   hl   
0653   23                     INC   hl   
0654   7D                     LD   a,l   
0655   B4                     OR   h   
0656   3E 68                  LD   a,"h"   
0658   28 02                  JR   z,cursorShow1   
065A   3E 6C                  LD   a,"l"   
065C                CURSORSHOW1:      
065C   CD 88 0F               CALL   ansiCursorShow   
065F   DD E9                  JP   (ix)   
0661                DEC_:        
0661                DECBASE:      
0661   3E 0A                  LD   a,10   
0663                DECBASE1:      
0663   32 F1 38               LD   (vNumBase),a   
0666   DD E9                  JP   (ix)   
0668                             ; /div
0668                DIV_:        
0668   C3 38 08               JP   div1   
066B                             ; /ech
066B                             ; bool --
066B                ECHO_:       
066B                ECHO:        
066B   E1                     POP   hl   
066C   22 F3 38               LD   (vEcho),hl   
066F   DD E9                  JP   (ix)   
0671                             ; /f
0671                F_:          
0671   C3 D0 0A               JP   false1   
0674                             ; /frac
0674                FRAC_:       
0674                REMAIN:      
0674   2A FC 38               LD   hl,(vRemain)   
0677   E5                     PUSH   hl   
0678   DD E9                  JP   (ix)   
067A                             ; /free
067A                             ; adr --
067A                FREE_:       
067A                MEMFREE:      
067A   E1                     POP   hl   
067B                MEMFREE1:      
067B   22 EA 38               LD   (vHeapPtr),hl   
067E   DD E9                  JP   (ix)   
0680                HEX_:        
0680   3E 10                  LD   a,16   
0682   C3 63 06               JP   decBase1   
0685                             ; Z80 port input
0685                             ; /in
0685                             ; port -- value
0685                IN_:         
0685                INPUT:       
0685   E1                     POP   hl   
0686   59                     LD   e,c   ; save IP
0687   4D                     LD   c,l   
0688   ED 68                  IN   l,(c)   
068A   26 00                  LD   h,0   
068C   4B                     LD   c,e   ; restore IP
068D   E5                     PUSH   hl   
068E   DD E9                  JP   (ix)   
0690                             ; /max maximum
0690                             ; a b -- c
0690                MAX_:        
0690                MAXIMUM:      
0690   E1                     POP   hl   
0691   D1                     POP   de   
0692   E5                     PUSH   hl   
0693   B3                     OR   e   
0694   ED 52                  SBC   hl,de   
0696   30 02                  JR   nc,maximum1   
0698   E1                     POP   hl   
0699   D5                     PUSH   de   
069A                MAXIMUM1:      
069A   DD E9                  JP   (ix)   
069C                             ; /min minimum
069C                             ; a b -- c
069C                MIN_:        
069C                MINIMUM:      
069C   E1                     POP   hl   
069D   D1                     POP   de   
069E   E5                     PUSH   hl   
069F   B3                     OR   e   
06A0   ED 52                  SBC   hl,de   
06A2   38 02                  JR   c,minimum1   
06A4   E1                     POP   hl   
06A5   D5                     PUSH   de   
06A6                MINIMUM1:      
06A6   DD E9                  JP   (ix)   
06A8                             ; /nil
06A8                NIL_:        
06A8   C3 D0 0A               JP   null1   
06AB                             ; /o Z80 port output
06AB                             ; value port --
06AB                OUT_:        
06AB                OUTPUT:      
06AB   E1                     POP   hl   
06AC   59                     LD   e,c   ; save IP
06AD   4D                     LD   c,l   
06AE   E1                     POP   hl   
06AF   ED 69                  OUT   (c),l   
06B1   4B                     LD   c,e   ; restore IP
06B2   DD E9                  JP   (ix)   
06B4                             ; /rec
06B4                RECUR_:      
06B4                RECUR:       
06B4   E1                     POP   hl   
06B5   22 EE 38               LD   (vRecurPtr),hl   
06B8   DD E9                  JP   (ix)   
06BA                             ; /ret
06BA                             ; --
06BA                RETURN_:      
06BA                RETURN:      
06BA   E1                     POP   hl   ; hl = condition, exit if true
06BB   7D                     LD   a,l   
06BC   B4                     OR   h   
06BD   20 02                  JR   nz,return1   
06BF   DD E9                  JP   (ix)   
06C1                RETURN1:      
06C1   C3 A4 09               JP   blockEnd   
06C4                             ; /sbb
06C4                SBB_:        
06C4                STRINGBEGIN:      
06C4   21 FF FF               LD   hl,TRUE   ; string mode = true
06C7   22 F4 38               LD   (vStrMode),hl   
06CA   18 27                  JR   stringEnd1   ; save hl in vBufPtr
06CC                             ; /sbe
06CC                             ; -- str*
06CC                SBE_:        
06CC                STRINGEND:      
06CC   21 00 00               LD   hl,FALSE   ; string mode = false
06CF   22 F4 38               LD   (vStrMode),hl   
06D2   2A E8 38               LD   hl,(vBufPtr)   ; append NUL to string
06D5   AF                     XOR   a   
06D6   77                     LD   (hl),a   
06D7   23                     INC   hl   ; hl = string_end*
06D8   ED 43 08 39            LD   (vTemp1),bc   ; save IP
06DC   11 00 37               LD   de,BUFFER   ; de = string*
06DF   B7                     OR   a   ; bc = size
06E0   ED 52                  SBC   hl,de   
06E2   44 4D                  LD   bc,hl   
06E4   2A EA 38               LD   hl,(vHeapPtr)   ; hl = hstring*
06E7   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06E8   D5                     PUSH   de   ; return hstring*
06E9   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06EB   ED 53 EA 38            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06EF   ED 4B 08 39            LD   bc,(vTemp1)   ; restore IP
06F3                STRINGEND1:      
06F3   21 00 37               LD   hl,BUFFER   ; reset vBufPtr
06F6   22 E8 38               LD   (vBufPtr),hl   
06F9   DD E9                  JP   (ix)   
06FB                             ; /sln
06FB                SLN_:        
06FB   D1                     POP   de   
06FC   CD E5 0D               CALL   stringLength   
06FF   E5                     PUSH   hl   
0700   DD E9                  JP   (ix)   
0702                             ; /t
0702                T_:          
0702   C3 CA 0A               JP   true1   
0705                             ; 13
0705                             ; /whi while true else break from loop
0705                             ; --
0705                WHILE_:      
0705                WHILE:       
0705   E1                     POP   hl   ; hl = condition, break if false
0706   7D                     LD   a,l   
0707   B4                     OR   h   
0708   28 02                  JR   z,while1   
070A   DD E9                  JP   (ix)   
070C                WHILE1:      
070C   FD 5D                  LD   e,iyl   ; get block* just under stack frame
070E   FD 54                  LD   d,iyh   
0710   21 08 00               LD   hl,8   
0713   19                     ADD   hl,de   
0714   23                     INC   hl   
0715   23                     INC   hl   
0716   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0719   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
071C   C3 A4 09               JP   blockEnd   
071F                             ; /wrd
071F                WORD_:       
071F                WORDMODE:      
071F   3E 02                  LD   a,2   
0721   C3 06 08               JP   byteMode1   
0724                             ;********************** PAGE 6 END *********************************************
0724                          ALIGN   $100   
0800                             ;********************** PAGE 7 BEGIN *********************************************
0800                             ; /sys
0800                SYS_:        
0800   DD E9                  JP   (ix)   
0802                             ; /alloc
0802                             ; size -- adr
0802                ALLOC_:      
0802                MEMALLOCATE:      
0802   DD E9                  JP   (ix)   
0804                             ; /byt
0804                BYTE_:       
0804                BYTEMODE:      
0804   3E 01                  LD   a,1   
0806                BYTEMODE1:      
0806   32 F0 38               LD   (vDataWidth),a   
0809   DD E9                  JP   (ix)   
080B                             ; /scp string compare
080B                SCMP_:       
080B   D1                     POP   de   
080C   E1                     POP   hl   
080D   CD D0 0D               CALL   stringCompare   
0810   E5                     PUSH   hl   
0811   DD E9                  JP   (ix)   
0813                             ; select case from an associative array of cases
0813                             ; bool cases* --
0813                SELECT_:      
0813   C3 CA 08               JP   select   
0816                             ; /voi clear out returned values
0816                             ; ?? --
0816                VOID_:       
0816                VOID:        
0816   FD 5D                  LD   e,iyl   
0818   FD 54                  LD   d,iyh   
081A   EB                     EX   de,hl   
081B   F9                     LD   sp,hl   
081C   DD E9                  JP   (ix)   
081E                             ; /xor
081E                XOR_:        
081E   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
081F                XOR1:        
081F   E1                     POP   hl   
0820   7B                     LD   a,e   
0821   AD                     XOR   l   
0822   6F                     LD   l,a   
0823   7A                     LD   a,d   
0824   AC                     XOR   h   
0825   67                     LD   h,a   
0826   C3 D8 02               JP   add3   
0829                             ;*******************************************************************
0829                             ; implementations continued
0829                             ;*******************************************************************
0829                             ; //
0829                COMMENT:      
0829   03                     INC   bc   ; point to next char
082A   0A                     LD   a,(bc)   
082B   FE 20                  CP   " "   ; terminate on any char less than SP
082D   30 FA                  JR   nc,comment   
082F   0B                     DEC   bc   
0830   DD E9                  JP   (ix)   
0832                ERROR1:      
0832   21 01 00               LD   hl,1   ; error 1: unknown command
0835   C3 EB 0E               JP   error   
0838                DIV1:        
0838   E1                     POP   hl   ; hl = arg_b
0839   D1                     POP   de   ; de = arg_a
083A   03                     INC   bc   
083B   0A                     LD   a,(bc)   
083C   FE 3D                  CP   "="   
083E   28 02                  JR   z,div2   
0840   0B                     DEC   bc   ; /
0841   EB                     EX   de,hl   
0842                DIV2:        
0842   F5                     PUSH   af   ; preserve af, bc
0843   C5                     PUSH   bc   
0844   44 4D                  LD   bc,hl   
0846   CD 35 0B               CALL   divide   
0849   EB                     EX   de,hl   
084A   ED 53 FC 38            LD   (vRemain),de   
084E   C1                     POP   bc   ; restore
084F   F1                     POP   af   
0850   C3 9D 02               JP   sub3   
0853                COMMA:       
0853   03                     INC   bc   
0854   0A                     LD   a,(bc)   
0855   FE 63                  CP   "c"   ; .c print char
0857   28 07                  JR   z,readChar   
0859   FE 73                  CP   "s"   ; .s print string
085B   28 0C                  JR   z,readString   
085D   0B                     DEC   bc   
085E   18 2B                  JR   readNumber   ; .  print number, fall through
0860                READCHAR:      
0860   CD 81 00               CALL   getchar   
0863   26 00                  LD   h,0   
0865   6F                     LD   l,a   
0866   E5                     PUSH   hl   
0867   DD E9                  JP   (ix)   
0869                READSTRING:      
0869   ED 5B EA 38            LD   de,(vHeapPtr)   
086D   D5                     PUSH   de   ; return start of string
086E                READSTRING1:      
086E   CD 81 00               CALL   getchar   
0871   FE 0D                  CP   "\r"   
0873   28 0D                  JR   z,readString2   
0875   12                     LD   (de),a   
0876   13                     INC   de   
0877   3A F3 38               LD   a,(vEcho)   
087A   3C                     INC   a   
087B   20 F1                  JR   nz,readString1   
087D   CD 85 00               CALL   putchar   
0880   18 EC                  JR   readString1   
0882                READSTRING2:      
0882   AF                     XOR   a   
0883   12                     LD   (de),a   
0884   13                     INC   de   
0885   ED 53 EA 38            LD   (vHeapPtr),de   
0889   DD E9                  JP   (ix)   
088B                READNUMBER:      
088B   DD E5                  PUSH   ix   
088D                          ;*Macro unroll:  PERFORM readString
088D   DD 21 94 08            LD   ix,performM_1638S1185   
0891   C3 69 08               JP   readString   
0894                PERFORMM_1638S1185:      
0894   60 69                  LD   hl,bc   ; save bc, hl = string*
0896   E3                     EX   (sp),hl   
0897   22 EA 38               LD   (vHeapPtr),hl   ; restore heap* to before string
089A   44 4D                  LD   bc,hl   
089C   0A                     LD   a,(bc)   
089D   FE 2D                  CP   "-"   
089F   28 11                  JR   z,readNumber1   
08A1   FE 24                  CP   "$"   
08A3   28 17                  JR   z,readNumber2   
08A5   FE 30                  CP   "0"   
08A7   30 09                  JR   nc,readNumber1   
08A9   FE 3A                  CP   "9"+1   
08AB   38 05                  JR   c,readNumber1   
08AD   21 00 00               LD   hl,0   
08B0   18 12                  JR   readNumber3   
08B2                READNUMBER1:      
08B2                          ;*Macro unroll:  PERFORM num
08B2   DD 21 B9 08            LD   ix,performM_1655S1202   
08B6   C3 74 09               JP   num   
08B9                PERFORMM_1655S1202:      
08B9   E1                     POP   hl   
08BA   18 08                  JR   readNumber3   
08BC                READNUMBER2:      
08BC                          ;*Macro unroll:  PERFORM hexNum
08BC   DD 21 C3 08            LD   ix,performM_1659S1206   
08C0   C3 FB 08               JP   hexNum   
08C3                PERFORMM_1659S1206:      
08C3   E1                     POP   hl   
08C4                READNUMBER3:      
08C4   C1                     POP   bc   
08C5   DD E1                  POP   ix   
08C7   E5                     PUSH   hl   
08C8   DD E9                  JP   (ix)   
08CA                SELECT:      
08CA   E1                     POP   hl   ; hl = case associative array [ key1 value1 ... ]
08CB   D1                     POP   de   ; de = select key
08CC   C5                     PUSH   bc   ; save IP
08CD   2B                     DEC   hl   ; bc = array length
08CE   46                     LD   b,(hl)   
08CF   2B                     DEC   hl   
08D0   4E                     LD   c,(hl)   
08D1   23                     INC   hl   
08D2   23                     INC   hl   
08D3   18 15                  JR   select2   
08D5                SELECT1:      
08D5   7E                     LD   a,(hl)   ; compare lsb case key with lsb select key, hl++
08D6   BB                     CP   e   
08D7   23                     INC   hl   ; hl++, flags are unaltered
08D8   20 0C                  JR   nz,select1a   
08DA   7E                     LD   a,(hl)   ; compare msb case key with msb select key, hl++
08DB   BA                     CP   d   
08DC   23                     INC   hl   ; hl++, flags are unaltered
08DD   20 08                  JR   nz,select1b   
08DF   5E                     LD   e,(hl)   
08E0   23                     INC   hl   
08E1   56                     LD   d,(hl)   
08E2   C1                     POP   bc   
08E3   C3 A0 03               JP   go1   
08E6                SELECT1A:      
08E6   23                     INC   hl   
08E7                SELECT1B:      
08E7   23                     INC   hl   
08E8   23                     INC   hl   
08E9   0B                     DEC   bc   
08EA                SELECT2:      
08EA   79                     LD   a,c   
08EB   B0                     OR   b   
08EC   20 E7                  JR   nz,select1   
08EE   C1                     POP   bc   
08EF   DD E9                  JP   (ix)   
08F1                             ; ~ bitwise invert
08F1                TILDE:       
08F1                INVERT:      
08F1   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
08F2   7D                     LD   a,l   
08F3   2F                     CPL      
08F4   6F                     LD   l,a   
08F5   7C                     LD   a,h   
08F6   2F                     CPL      
08F7   67                     LD   h,a   
08F8   C3 D8 02               JP   add3   
08FB                             ; $ hex                         ; 22
08FB                DOLLAR:      
08FB                HEXNUM:      
08FB   21 00 00               LD   hl,0   ; Clear hl to accept the number
08FE                HEXNUM1:      
08FE   03                     INC   bc   
08FF   0A                     LD   a,(bc)   ; Get the character which is a numeral
0900   CB 77                  BIT   6,a   ; is it uppercase alpha?
0902   28 02                  JR   z,hexnum2   ; no a decimal
0904   D6 07                  SUB   7   ; sub 7  to make $a - $F
0906                HEXNUM2:      
0906   D6 30                  SUB   $30   ; form decimal digit
0908   DA 96 09               JP   c,num2   
090B   FE 10                  CP   $0F+1   
090D   D2 96 09               JP   nc,num2   
0910   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0911   29                     ADD   hl,hl   ; 4X
0912   29                     ADD   hl,hl   ; 8X
0913   29                     ADD   hl,hl   ; 16X
0914   85                     ADD   a,l   ; add into bottom of hl
0915   6F                     LD   l,a   
0916   18 E6                  JR   hexnum1   
0918                             ; ? if                            23
0918                             ; condition then else -- value
0918                QUESTION:      
0918                IF:          
0918   D1                     POP   de   ; de = else
0919   E1                     POP   hl   ; hl = then
091A   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
091B   7C                     LD   a,h   
091C   B5                     OR   l   
091D   E1                     POP   hl   ; hl = then
091E   CA A0 03               JP   z,go1   ; if z de = else
0921   EB                     EX   de,hl   ; condition = false, de = then
0922   C3 A0 03               JP   go1   
0925                             ; string                        ;38
0925                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0925                QUOTE:       
0925                STRING:      
0925   2A EA 38               LD   hl,(vHeapPtr)   ; hl = heap*
0928   E5                     PUSH   hl   ; save start of string
0929   0A                     LD   a,(bc)   
092A   5F                     LD   e,a   ; e = matching terminator
092B   03                     INC   bc   ; point to next char
092C   18 03                  JR   string2   
092E                STRING1:      
092E   77                     LD   (hl),a   
092F   23                     INC   hl   ; increase count
0930   03                     INC   bc   ; point to next char
0931                STRING2:      
0931   0A                     LD   a,(bc)   
0932   BB                     CP   e   ; is it the string terminator
0933   28 02                  JR   z,string3   
0935   18 F7                  JR   string1   
0937                STRING3:      
0937   AF                     XOR   a   ; write NUL to terminate string
0938   77                     LD   (hl),a   ; hl = end of string
0939   23                     INC   hl   
093A   22 EA 38               LD   (vHeapPtr),hl   ; bump heap* to after end of string
093D   DD E9                  JP   (ix)   
093F                             ; %a .. %z                      43
093F                             ; -- value
093F                             ; returns value of arg
093F                PERCENT:      
093F                ARG:         
093F   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0942   FD 56 05               LD   d,(iy+5)   
0945   EB                     EX   de,hl   
0946   7D                     LD   a,l   ; arg_list* == null, skip
0947   B4                     OR   h   
0948   28 1A                  JR   z,arg0a   
094A   23                     INC   hl   ; a = num_args, hl = arg_list*
094B   7E                     LD   a,(hl)   
094C   23                     INC   hl   
094D   B7                     OR   a   
094E   28 14                  JR   z,arg0a   ; num_args == 0, skip
0950   5F                     LD   e,a   ; e = a = num_args
0951   03                     INC   bc   ; a = next char = dollar_name
0952   0A                     LD   a,(bc)   
0953   C5                     PUSH   bc   ; save IP
0954   43                     LD   b,e   ; b = e = num_args
0955   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0958   FD 56 03               LD   d,(iy+3)   
095B                ARG0:        
095B   1B                     DEC   de   ; a = dollar_name, de = next arg*
095C   1B                     DEC   de   
095D   BE                     CP   (hl)   
095E   28 09                  JR   z,arg1   
0960   23                     INC   hl   ; hl = next arg_list*
0961   10 F8                  DJNZ   arg0   
0963   C1                     POP   bc   ; no match, restore IP
0964                ARG0A:       
0964   11 00 00               LD   de,0   ; return 0
0967   18 08                  JR   arg1a   
0969                ARG1:        
0969   C1                     POP   bc   ; restore IP
096A   EB                     EX   de,hl   ; hl = arg*
096B   22 FA 38               LD   (vPointer),hl   ; store arg* in setter
096E   5E                     LD   e,(hl)   
096F   23                     INC   hl   
0970   56                     LD   d,(hl)   ; de = arg
0971                ARG1A:       
0971   D5                     PUSH   de   ; push arg
0972   DD E9                  JP   (ix)   
0974                             ; 0..9 number                   37
0974                NUM:         
0974   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0977   0A                     LD   a,(bc)   ; Get numeral or -
0978   FE 2D                  CP   "-"   
097A   20 01                  JR   nz,num0   
097C   03                     INC   bc   ; move to next char, no flags affected
097D                NUM0:        
097D   08                     EX   af,af'   ; save zero flag = 0 for later
097E                NUM1:        
097E   0A                     LD   a,(bc)   ; read digit
097F   D6 30                  SUB   "0"   ; less than 0?
0981   38 13                  JR   c,num2   ; not a digit, exit loop
0983   FE 0A                  CP   10   ; greater that 9?
0985   30 0F                  JR   nc,num2   ; not a digit, exit loop
0987   03                     INC   bc   ; inc IP
0988   54 5D                  LD   de,hl   ; multiply hl * 10
098A   29                     ADD   hl,hl   
098B   29                     ADD   hl,hl   
098C   19                     ADD   hl,de   
098D   29                     ADD   hl,hl   
098E   85                     ADD   a,l   ; add digit in a to hl
098F   6F                     LD   l,a   
0990   3E 00                  LD   a,0   
0992   8C                     ADC   a,h   
0993   67                     LD   h,a   
0994   18 E8                  JR   num1   
0996                NUM2:        
0996   0B                     DEC   bc   
0997   08                     EX   af,af'   ; restore zero flag
0998   20 07                  JR   nz,num3   
099A   EB                     EX   de,hl   ; negate the value of hl
099B   21 00 00               LD   hl,0   
099E   B7                     OR   a   ; jump to sub2
099F   ED 52                  SBC   hl,de   
09A1                NUM3:        
09A1   E5                     PUSH   hl   ; Put the number on the stack
09A2   DD E9                  JP   (ix)   ; and process the next character
09A4                             ; }                               58
09A4                RBRACE:      
09A4                BLOCKEND:      
09A4   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
09A7   FD 56 01               LD   d,(iy+1)   
09AA   ED 53 08 39            LD   (vTemp1),de   
09AE   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
09B1   FD 56 07               LD   d,(iy+7)   
09B4   ED 53 0A 39            LD   (vTemp2),de   
09B8   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
09BB   FD 56 03               LD   d,(iy+3)   
09BE   EB                     EX   de,hl   
09BF   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
09C2   FD 56 01               LD   d,(iy+1)   
09C5   13                     INC   de   ; for carry flag <=
09C6   B7                     OR   a   
09C7   ED 52                  SBC   hl,de   
09C9   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
09CB   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
09CD   FD 5D                  LD   e,iyl   
09CF   21 08 00               LD   hl,8   
09D2   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
09D3   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
09D4   18 0C                  JR   blockEnd2   
09D6                BLOCKEND1:      ; same scope
09D6   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
09D9   FD 56 03               LD   d,(iy+3)   
09DC   EB                     EX   de,hl   
09DD   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
09DF   FD 5D                  LD   e,iyl   
09E1   EB                     EX   de,hl   
09E2                BLOCKEND2:      
09E2   44 4D                  LD   bc,hl   ; bc = hl = BP
09E4   B7                     OR   a   ; hl = BP - SP = count
09E5   ED 72                  SBC   hl,sp   
09E7   7D                     LD   a,l   
09E8   B4                     OR   h   
09E9   28 09                  JR   z,blockEnd3   
09EB   C5                     PUSH   bc   ; bc = count, hl = BP
09EC   44 4D                  LD   bc,hl   
09EE   E1                     POP   hl   
09EF   2B                     DEC   hl   ; hl = BP-1
09F0   1B                     DEC   de   ; de = args*-1
09F1   ED B8                  LDDR      
09F3   13                     INC   de   
09F4                BLOCKEND3:      
09F4   EB                     EX   de,hl   ; sp = de = new tos*
09F5   F9                     LD   sp,hl   
09F6   ED 4B 0A 39            LD   bc,(vTemp2)   
09FA   FD 2A 08 39            LD   iy,(vTemp1)   
09FE   ED 5B EE 38            LD   de,(vRecurPtr)   ; de = recur vector
0A02   7B                     LD   a,e   ; check for NUL
0A03   B2                     OR   d   
0A04   20 02                  JR   nz,blockEnd4   
0A06   DD E9                  JP   (ix)   
0A08                BLOCKEND4:      
0A08   21 00 00               LD   hl,0   ; clear recur vector
0A0B   22 EE 38               LD   (vRecurPtr),hl   
0A0E   C3 A0 03               JP   go1   ; execute de
0A11                GOBLOCK:      
0A11   ED 53 08 39            LD   (vTemp1),de   ; save de
0A15   21 00 34               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0A18   FD 54                  LD   d,iyh   
0A1A   FD 5D                  LD   e,iyl   
0A1C   B7                     OR   a   ; if stack* == BP then this is the root_scope
0A1D   ED 52                  SBC   hl,de   
0A1F   ED 5B 08 39            LD   de,(vTemp1)   ; restore de
0A23   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0A24   B4                     OR   h   
0A25   3E 00                  LD   a,0   
0A27   28 6A                  JR   z,goFunc8   
0A29   C5                     PUSH   bc   ; push IP
0A2A   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0A2D   FD 46 05               LD   b,(iy+5)   
0A30   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0A33   FD 66 03               LD   h,(iy+3)   
0A36                GOBLOCK2:      
0A36   C5                     PUSH   bc   ; arg_list*
0A37   E5                     PUSH   hl   ; first_arg*
0A38   FD E5                  PUSH   iy   ; push BP
0A3A   FD 21 00 00            LD   iy,0   ; BP = SP
0A3E   FD 39                  ADD   iy,sp   
0A40                GOBLOCK3:      
0A40   42 4B                  LD   bc,de   ; bc = de = block*-1
0A42   DD E9                  JP   (ix)   
0A44                GOFUNC:      ; execute func
0A44   EB                     EX   de,hl   ; hl = func*
0A45   5E                     LD   e,(hl)   ; de = partial_array*
0A46   23                     INC   hl   
0A47   56                     LD   d,(hl)   
0A48   23                     INC   hl   
0A49   7B                     LD   a,e   ; if partial_array* == null skip
0A4A   B2                     OR   d   
0A4B   28 21                  JR   z,goFunc3   
0A4D   ED 43 08 39            LD   (vTemp1),bc   
0A51   22 0A 39               LD   (vTemp2),hl   ; save bc,hl
0A54   EB                     EX   de,hl   ; hl = partial_array*
0A55   2B                     DEC   hl   ; bc = count
0A56   46                     LD   b,(hl)   
0A57   2B                     DEC   hl   
0A58   4E                     LD   c,(hl)   
0A59   23                     INC   hl   ; hl = array data*
0A5A   23                     INC   hl   
0A5B   18 06                  JR   goFunc2   ; push each item on stack
0A5D                GOFUNC1:      
0A5D   5E                     LD   e,(hl)   ; de = partial item
0A5E   23                     INC   hl   
0A5F   56                     LD   d,(hl)   
0A60   23                     INC   hl   
0A61   D5                     PUSH   de   ; push on stack
0A62   0B                     DEC   bc   
0A63                GOFUNC2:      
0A63   79                     LD   a,c   ; if count != 0 then loop
0A64   B0                     OR   b   
0A65   20 F6                  JR   nz,goFunc1   
0A67   ED 4B 08 39            LD   bc,(vTemp1)   ; restore bc
0A6B   2A 0A 39               LD   hl,(vTemp2)   ; restore hl
0A6E                GOFUNC3:      
0A6E   5E                     LD   e,(hl)   ; de = block*
0A6F   23                     INC   hl   
0A70   56                     LD   d,(hl)   
0A71   23                     INC   hl   
0A72   ED 53 08 39            LD   (vTemp1),de   ; save block*
0A76   5E                     LD   e,(hl)   ; de = arg_list*
0A77   23                     INC   hl   
0A78   56                     LD   d,(hl)   
0A79   23                     INC   hl   
0A7A   EB                     EX   de,hl   ; hl = arg_list*
0A7B   ED 5B 08 39            LD   de,(vTemp1)   ; restore de = block*
0A7F   7D                     LD   a,l   ; if arg_list* == null a = 0
0A80   B4                     OR   h   
0A81   20 03                  JR   nz,goFunc4   
0A83   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0A84   18 0D                  JR   goFunc8   
0A86                GOFUNC4:      ; allocate locals
0A86   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0A87   18 03                  JR   goFunc6   
0A89                GOFUNC5:      ; loop
0A89   3B                     DEC   sp   
0A8A   3B                     DEC   sp   
0A8B   3D                     DEC   a   
0A8C                GOFUNC6:      
0A8C   B7                     OR   a   
0A8D   20 FA                  JR   nz,goFunc5   ; end loop
0A8F                GOFUNC7:      
0A8F   23                     INC   hl   ; a = num_args* x 2
0A90   7E                     LD   a,(hl)   
0A91   2B                     DEC   hl   
0A92   87                     ADD   a,a   ; a *= 2
0A93                GOFUNC8:      
0A93   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0A94   44 4D                  LD   bc,hl   
0A96   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0A99   85                     ADD   a,l   
0A9A   6F                     LD   l,a   
0A9B   39                     ADD   hl,sp   
0A9C   18 98                  JR   goBlock2   
0A9E                             ; =                              21
0A9E                             ; value _oldValue --            ; uses address in vPointer 15
0A9E                ASSIGN:      
0A9E   E1                     POP   hl   ; discard last accessed value
0A9F   E1                     POP   hl   ; hl = new value
0AA0                ASSIGN0:      
0AA0   EB                     EX   de,hl   ; de = new value
0AA1   2A FA 38               LD   hl,(vPointer)   
0AA4                ASSIGN1:      ; entry point from defineEnd
0AA4   73                     LD   (hl),e   
0AA5   3A F0 38               LD   a,(vDataWidth)   
0AA8   3D                     DEC   a   ; is it byte?
0AA9   28 02                  JR   z,assign2   
0AAB   23                     INC   hl   
0AAC   72                     LD   (hl),d   
0AAD                ASSIGN2:      
0AAD   DD E9                  JP   (ix)   
0AAF                             ; hl = value1, de = value2
0AAF                             ; hl = result
0AAF                EQUALS:      
0AAF   B7                     OR   a   ; reset the carry flag
0AB0   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0AB2   28 16                  JR   z,true1   
0AB4   18 1A                  JR   false1   
0AB6                NOTEQUALS:      
0AB6   B7                     OR   a   ; reset the carry flag
0AB7   ED 52                  SBC   hl,de   
0AB9   20 0F                  JR   nz,true1   
0ABB   18 13                  JR   false1   
0ABD                             ; hl = value1 de = value2
0ABD                             ; hl = result
0ABD                LESSTHANEQ:      
0ABD   B7                     OR   a   
0ABE   ED 52                  SBC   hl,de   
0AC0   18 05                  JR   lessthan1   
0AC2                             ; hl = value1 de = value2
0AC2                             ; hl = result
0AC2                LESSTHAN:      
0AC2   B7                     OR   a   
0AC3   ED 52                  SBC   hl,de   
0AC5   28 09                  JR   z,false1   
0AC7                LESSTHAN1:      
0AC7   FA D0 0A               JP   m,false1   
0ACA                TRUE1:       
0ACA   21 FF FF               LD   hl,TRUE   
0ACD   E5                     PUSH   hl   
0ACE   DD E9                  JP   (ix)   
0AD0                NULL1:       
0AD0                FALSE1:      
0AD0   21 00 00               LD   hl,FALSE   
0AD3   E5                     PUSH   hl   
0AD4   DD E9                  JP   (ix)   
0AD6                SPREAD:      
0AD6   E1                     POP   hl   ; hl = array*
0AD7   ED 43 08 39            LD   (vTemp1),bc   ; save bc
0ADB   2B                     DEC   hl   ; bc = length
0ADC   46                     LD   b,(hl)   
0ADD   2B                     DEC   hl   
0ADE   4E                     LD   c,(hl)   
0ADF   23                     INC   hl   ; move back to array 0
0AE0   23                     INC   hl   
0AE1   18 0D                  JR   spread3   
0AE3                SPREAD1:      
0AE3   5E                     LD   e,(hl)   ; e = lsb data at hl
0AE4   23                     INC   hl   
0AE5   3A F0 38               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0AE8   57                     LD   d,a   
0AE9   15                     DEC   d   
0AEA   28 02                  JR   z,spread2   
0AEC   56                     LD   d,(hl)   ; d = msb data at hl
0AED   23                     INC   hl   
0AEE                SPREAD2:      
0AEE   D5                     PUSH   de   ; return de
0AEF   0B                     DEC   bc   ; count--
0AF0                SPREAD3:      
0AF0   79                     LD   a,c   ; exit loop if bc == 0
0AF1   B0                     OR   b   
0AF2   20 EF                  JR   nz,spread1   
0AF4   ED 4B 08 39            LD   bc,(vTemp1)   ; restore bc
0AF8   DD E9                  JP   (ix)   
0AFA                             ; shiftLeft
0AFA                             ; value count <<
0AFA                             ; count variable <<=
0AFA                SHIFTLEFT:      
0AFA   E1                     POP   hl   ; de = arg_a, hl = arg_b
0AFB   D1                     POP   de   
0AFC   03                     INC   bc   
0AFD   0A                     LD   a,(bc)   
0AFE   FE 3D                  CP   "="   
0B00   28 02                  JR   z,shiftLeft2   
0B02   0B                     DEC   bc   
0B03   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0B04                SHIFTLEFT2:      
0B04   ED 43 08 39            LD   (vTemp1),bc   ; save IP
0B08   43                     LD   b,e   ; b = loop counter
0B09   04                     INC   b   ; test for counter=0 case
0B0A   18 01                  JR   shiftLeft4   
0B0C                SHIFTLEFT3:      
0B0C   29                     ADD   hl,hl   ; left shift hl
0B0D                SHIFTLEFT4:      
0B0D   10 FD                  DJNZ   shiftLeft3   
0B0F   ED 4B 08 39            LD   bc,(vTemp1)   ; restore IP
0B13   C3 9D 02               JP   sub3   
0B16                             ; shiftRight
0B16                             ; value count >>
0B16                             ; count variable >>=
0B16                SHIFTRIGHT:      
0B16   E1                     POP   hl   ; de = arg_a, hl = arg_b
0B17   D1                     POP   de   
0B18   03                     INC   bc   
0B19   0A                     LD   a,(bc)   
0B1A   FE 3D                  CP   "="   
0B1C   28 02                  JR   z,shiftRight2   
0B1E   0B                     DEC   bc   
0B1F   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0B20                SHIFTRIGHT2:      
0B20   ED 43 08 39            LD   (vTemp1),bc   ; save IP
0B24   43                     LD   b,e   ; b = loop counter
0B25   04                     INC   b   ; test for counter=0 case
0B26   18 04                  JR   shiftRight4   
0B28                SHIFTRIGHT3:      
0B28   CB 3C                  SRL   h   ; right shift hl
0B2A   CB 1D                  RR   l   
0B2C                SHIFTRIGHT4:      
0B2C   10 FA                  DJNZ   shiftRight3   
0B2E   ED 4B 08 39            LD   bc,(vTemp1)   ; restore IP
0B32   C3 9D 02               JP   sub3   
0B35                             ; division subroutine.
0B35                             ; bc: divisor, de: dividend, hl: remainder
0B35                DIVIDE:      
0B35   21 00 00               LD   hl,0   ; zero the remainder
0B38   3E 10                  LD   a,16   ; loop counter
0B3A                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0B3A   CB 21                  SLA   c   
0B3C   CB 10                  RL   b   
0B3E   ED 6A                  ADC   hl,hl   
0B40   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0B42   38 03                  JR   c,divide2   
0B44   0C                     INC   c   
0B45   18 01                  JR   divide3   
0B47                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0B47   19                     ADD   hl,de   
0B48                DIVIDE3:      
0B48   3D                     DEC   a   
0B49   20 EF                  JR   nz,divide1   
0B4B   50 59                  LD   de,bc   ; result from bc to de
0B4D   C9                     RET      
0B4E                DOTNEXT:      
0B4E   3A F4 38               LD   a,(vStrMode)   ; if string mode then exit
0B51   3C                     INC   a   
0B52   20 02                  JR   nz,dotNext1   
0B54   DD E9                  JP   (ix)   
0B56                DOTNEXT1:      
0B56   11 00 37               LD   de,BUFFER   
0B59   2A E8 38               LD   hl,(vBufPtr)   
0B5C   36 00                  LD   (hl),0   ; store NUL at end of string
0B5E   ED 53 E8 38            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0B62   EB                     EX   de,hl   ; hl = BUFFER
0B63   CD 19 0D               CALL   putstr   
0B66   DD E9                  JP   (ix)   
0B68                             ; arg_list - parses arg_list e.g. ab:c
0B68                             ; -- arg_list*
0B68                PARSEARGS:      
0B68   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0B6B   2A EA 38               LD   hl,(vHeapPtr)   ; hl = heap*
0B6E   E5                     PUSH   hl   ; save start of arg_list
0B6F   23                     INC   hl   ; skip length fields to start of string
0B70   23                     INC   hl   
0B71   03                     INC   bc   ; point to next char
0B72                PARSEARGS1:      
0B72   0A                     LD   a,(bc)   
0B73   FE 3A                  CP   ":"   ; ":" switches from args to locals
0B75   20 03                  JR   nz,parseArgs1a   
0B77   14                     INC   d   ; non zero value local count acts as flag
0B78   18 10                  JR   parseArgs3   
0B7A                PARSEARGS1A:      
0B7A   FE 61                  CP   "a"   ; < "a" terminates arg_list
0B7C   38 0F                  JR   c,parseArgs4   
0B7E   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0B80   30 0B                  JR   nc,parseArgs4   
0B82                PARSEARGS2:      
0B82   77                     LD   (hl),a   
0B83   23                     INC   hl   
0B84   1C                     INC   e   ; increase arg count
0B85   AF                     XOR   a   
0B86   B2                     OR   d   
0B87   28 01                  JR   z,parseArgs3   
0B89   14                     INC   d   ; if d > 0 increase local count
0B8A                PARSEARGS3:      
0B8A   03                     INC   bc   ; point to next char
0B8B   18 E5                  JR   parseArgs1   
0B8D                PARSEARGS4:      
0B8D   0B                     DEC   bc   
0B8E   AF                     XOR   a   
0B8F   B2                     OR   d   
0B90   28 01                  JR   z,parseArgs5   
0B92   15                     DEC   d   ; remove initial inc
0B93                PARSEARGS5:      
0B93   23                     INC   hl   
0B94   22 EA 38               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B97   E1                     POP   hl   ; hl = start of arg_list
0B98   72                     LD   (hl),d   ; write number of locals at start - 1
0B99   23                     INC   hl   
0B9A   73                     LD   (hl),e   ; write number of args + locals at start - 2
0B9B   2B                     DEC   hl   
0B9C   E3                     EX   (sp),hl   
0B9D   E9                     JP   (hl)   
0B9E                             ; create block: parses block e.g. 00bbIC4uLi4g
0B9E                             ; -- block*
0B9E                PARSEBLOCK:      
0B9E   C5                     PUSH   bc   ; return pointer to first { of block
0B9F   03                     INC   bc   
0BA0   16 01                  LD   d,1   ; nesting: count first parenthesis
0BA2                PARSEBLOCK1:      ; Skip to end of definition
0BA2   0A                     LD   a,(bc)   ; Get the next character
0BA3   03                     INC   bc   ; Point to next character
0BA4   FE 21                  CP   " " + 1   ; ignore whitespace
0BA6   38 FA                  JR   c,parseBlock1   
0BA8   FE 27                  CP   "'"   ; quote char
0BAA   28 0F                  JR   z,parseBlock2   
0BAC   FE 22                  CP   DQ   ; double quote char
0BAE   28 0B                  JR   z,parseBlock2   
0BB0   FE 60                  CP   "`"   ; grave char
0BB2   28 07                  JR   z,parseBlock2   
0BB4   CB 7A                  BIT   7,d   
0BB6   20 EA                  JR   nz,parseBlock1   
0BB8   C3 C1 0B               JP   parseBlock3   
0BBB                PARSEBLOCK2:      
0BBB   3E 80                  LD   a,$80   
0BBD   AA                     XOR   d   
0BBE   57                     LD   d,a   
0BBF   18 E1                  JR   parseBlock1   
0BC1                PARSEBLOCK3:      
0BC1   FE 28                  CP   "("   
0BC3   28 16                  JR   z,parseBlock4   
0BC5   FE 7B                  CP   "{"   
0BC7   28 12                  JR   z,parseBlock4   
0BC9   FE 5B                  CP   "["   
0BCB   28 0E                  JR   z,parseBlock4   
0BCD   FE 29                  CP   ")"   
0BCF   28 0D                  JR   z,parseBlock5   
0BD1   FE 7D                  CP   "}"   
0BD3   28 09                  JR   z,parseBlock5   
0BD5   FE 5D                  CP   "]"   
0BD7   28 05                  JR   z,parseBlock5   
0BD9   18 C7                  JR   parseBlock1   
0BDB                PARSEBLOCK4:      
0BDB   14                     INC   d   
0BDC   18 C4                  JR   parseBlock1   
0BDE                PARSEBLOCK5:      
0BDE   15                     DEC   d   
0BDF   20 C1                  JR   nz,parseBlock1   ; get the next element
0BE1   60 69                  LD   hl,bc   ; hl = IP
0BE3   11 26 39               LD   de,HEAP   ; is IP pointing to object in heap
0BE6   B7                     OR   a   ; IP - HEAP
0BE7   ED 52                  SBC   hl,de   
0BE9   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0BEB   28 1C                  JR   z,parseBlock6   
0BED   60 69                  LD   hl,bc   ; hl = IP
0BEF   D1                     POP   de   ; de = block*
0BF0   ED 43 08 39            LD   (vTemp1),bc   ; save IP
0BF4   B7                     OR   a   ; bc = size
0BF5   ED 52                  SBC   hl,de   
0BF7   44 4D                  LD   bc,hl   
0BF9   EB                     EX   de,hl   ; hl = block* de = heap*
0BFA   ED 5B EA 38            LD   de,(vHeapPtr)   
0BFE   D5                     PUSH   de   ; return hblock*
0BFF   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0C01   ED 53 EA 38            LD   (vHeapPtr),de   ; heap* += size
0C05   ED 4B 08 39            LD   bc,(vTemp1)   ; restore IP
0C09                PARSEBLOCK6:      
0C09   0B                     DEC   bc   ; balanced, exit
0C0A   E1                     POP   hl   ; hl = block*
0C0B   E3                     EX   (sp),hl   ; return to caller
0C0C   E9                     JP   (hl)   
0C0D                             ; create function
0C0D                             ; arg_list* block* -- func*
0C0D                CREATEFUNC:      
0C0D   E1                     POP   hl   ; save retrn address
0C0E   22 0C 39               LD   (vTemp3),hl   
0C11   ED 43 08 39            LD   (vTemp1),bc   ; save IP
0C15   E1                     POP   hl   ; hl = block*
0C16   22 0A 39               LD   (vTemp2),hl   ; save block*
0C19   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0C1C   FD 56 05               LD   d,(iy+5)   
0C1F   7B                     LD   a,e   ; if arg_list == null then make a func
0C20   B2                     OR   d   
0C21   20 09                  JR   nz,createFunc0   
0C23   21 00 00               LD   hl,0   ; partial_array = null
0C26   ED 5B EA 38            LD   de,(vHeapPtr)   ; de = compile*
0C2A   18 65                  JR   createFunc5   
0C2C                CREATEFUNC0:      
0C2C   E1                     POP   hl   ; hl = inner_arg_list*
0C2D   E5                     PUSH   hl   ; save inner_arg_list
0C2E   ED 5B EA 38            LD   de,(vHeapPtr)   ; de = compile*
0C32   7E                     LD   a,(hl)   ; compile inner_num_locals
0C33   4F                     LD   c,a   ; b = inner_num_locals
0C34   12                     LD   (de),a   
0C35   23                     INC   hl   
0C36   13                     INC   de   
0C37   7E                     LD   a,(hl)   ; compile inner_length
0C38   12                     LD   (de),a   
0C39   91                     SUB   c   ; a = inner_num args
0C3A   23                     INC   hl   
0C3B   13                     INC   de   
0C3C   B7                     OR   a   ; compile args if inner_length > 0
0C3D   28 05                  JR   z,createFunc1   
0C3F   4F                     LD   c,a   ; bc = a
0C40   06 00                  LD   b,0   
0C42   ED B0                  LDIR      
0C44                CREATEFUNC1:      
0C44   EB                     EX   de,hl   ; hl = outer_arg_list
0C45   FD 5E 04               LD   e,(iy+4)   
0C48   FD 56 05               LD   d,(iy+5)   
0C4B   EB                     EX   de,hl   
0C4C   23                     INC   hl   ; a = outer_length
0C4D   7E                     LD   a,(hl)   
0C4E   23                     INC   hl   
0C4F   B7                     OR   a   
0C50   28 05                  JR   z,createFunc2   
0C52   4F                     LD   c,a   
0C53   06 00                  LD   b,0   
0C55   ED B0                  LDIR      ; append outer_args
0C57                CREATEFUNC2:      ; a = outer_length
0C57   47                     LD   b,a   ; b = a = outer_length
0C58   2A EA 38               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0C5B   23                     INC   hl   
0C5C   7E                     LD   a,(hl)   ; add outer_length to new length
0C5D   80                     ADD   a,b   
0C5E   77                     LD   (hl),a   
0C5F   2B                     DEC   hl   
0C60   78                     LD   a,b   ; save outer_length in a'
0C61   08                     EX   af,af'   
0C62   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0C63   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0C64   B7                     OR   a   
0C65   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0C67   4F                     LD   c,a   ; c = inner_num_locals
0C68   06 00                  LD   b,0   ; bc = inner_num_locals
0C6A   23                     INC   hl   ; a = inner_length
0C6B   7E                     LD   a,(hl)   
0C6C   91                     SUB   c   ; a = inner_num_args
0C6D   23                     INC   hl   ; hl = inner_arg_chars
0C6E   85                     ADD   a,l   ; hl += a
0C6F   6F                     LD   l,a   
0C70   3E 00                  LD   a,0   
0C72   84                     ADD   a,h   
0C73   67                     LD   h,a   
0C74   ED B0                  LDIR      ; append inner_locals
0C76                CREATEFUNC2A:      
0C76   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0C77   12                     LD   (de),a   ; compile partial_array length field
0C78   13                     INC   de   
0C79   AF                     XOR   a   
0C7A   12                     LD   (de),a   
0C7B   13                     INC   de   
0C7C   D5                     PUSH   de   ; push partial_array*
0C7D   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0C7E   FD 5E 02               LD   e,(iy+2)   
0C81   FD 56 03               LD   d,(iy+3)   
0C84   EB                     EX   de,hl   
0C85                CREATEFUNC3:      
0C85   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0C86   4E                     LD   c,(hl)   
0C87   2B                     DEC   hl   
0C88   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0C89   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0C8A   13                     INC   de   
0C8B   79                     LD   a,c   
0C8C   12                     LD   (de),a   
0C8D   13                     INC   de   
0C8E   10 F5                  DJNZ   createFunc3   ; b = outer_length
0C90                CREATEFUNC4:      
0C90   E1                     POP   hl   ; hl = partial_array*
0C91                CREATEFUNC5:      
0C91   C1                     POP   bc   ; bc = new_arg_list*
0C92   D5                     PUSH   de   ; return new func*
0C93   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0C94   73                     LD   (hl),e   ; compile partial_array* to func
0C95   23                     INC   hl   
0C96   72                     LD   (hl),d   
0C97   23                     INC   hl   
0C98   ED 5B 0A 39            LD   de,(vTemp2)   ; de = block*
0C9C   73                     LD   (hl),e   ; compile block* to func
0C9D   23                     INC   hl   
0C9E   72                     LD   (hl),d   
0C9F   23                     INC   hl   
0CA0   71                     LD   (hl),c   ; compile new_arg_list* to func
0CA1   23                     INC   hl   
0CA2   70                     LD   (hl),b   
0CA3   23                     INC   hl   
0CA4   22 EA 38               LD   (vHeapPtr),hl   ; bump heap ptr
0CA7   ED 4B 08 39            LD   bc,(vTemp1)   ; restore IP
0CAB   2A 0C 39               LD   hl,(vTemp3)   ; jump to return address
0CAE   E9                     JP   (hl)   
0CAF                             ;*******************************************************************
0CAF                             ; general routines
0CAF                             ;*******************************************************************
0CAF                             ; hl = address
0CAF                VARIABLE:      
0CAF   22 FA 38               LD   (vPointer),hl   
0CB2   5E                     LD   e,(hl)   
0CB3   3A F0 38               LD   a,(vDataWidth)   
0CB6   3D                     DEC   a   
0CB7   16 00                  LD   d,0   
0CB9   28 03                  JR   z,constant   
0CBB   23                     INC   hl   
0CBC   56                     LD   d,(hl)   
0CBD   2B                     DEC   hl   
0CBE                CONSTANT:      
0CBE   D5                     PUSH   de   
0CBF   DD E9                  JP   (ix)   
0CC1                             ; followed by a table
0CC1                             ; indexed on the 0-25 lowercase letter
0CC1                             ; db lsb(addr)
0CC1                             ; the final item index 26 matches any other char
0CC1                CHARTABLE:      
0CC1   03                     INC   bc   
0CC2   0A                     LD   a,(bc)   
0CC3   FE 7B                  CP   "z"+1   
0CC5   30 10                  JR   nc,charTable3   
0CC7   D6 61                  SUB   "a"   
0CC9   38 0C                  JR   c,charTable3   
0CCB                CHARTABLE1:      
0CCB   E1                     POP   hl   
0CCC   85                     ADD   a,l   
0CCD   6F                     LD   l,a   
0CCE   7E                     LD   a,(hl)   ; must have the same msb as the table
0CCF   B7                     OR   a   ; a = 0, nop
0CD0   20 03                  JR   nz,charTable2   
0CD2   C3 32 08               JP   error1   
0CD5                CHARTABLE2:      
0CD5   6F                     LD   l,a   
0CD6   E9                     JP   (hl)   
0CD7                CHARTABLE3:      
0CD7   3E 1A                  LD   a,26   
0CD9   0B                     DEC   bc   
0CDA   18 EF                  JR   charTable1   
0CDC                             ; 8-bit hash string
0CDC                             ; bc = str
0CDC                             ; a = hash
0CDC                IDENTHASH:      
0CDC   16 00                  LD   d,0   
0CDE                IDENTHASH1:      
0CDE   0A                     LD   a,(bc)   ; e = a = char
0CDF   D6 61                  SUB   "a"   ; is char < "a"
0CE1   30 03                  JR   nc,identHash2   
0CE3   0B                     DEC   bc   
0CE4   7A                     LD   a,d   
0CE5   C9                     RET      
0CE6                IDENTHASH2:      ; not white space
0CE6   5F                     LD   e,a   
0CE7   7A                     LD   a,d   ; a = d = hash
0CE8   87                     ADD   a,a   ; a *= 2
0CE9   83                     ADD   a,e   ; a += char
0CEA   57                     LD   d,a   ; d = a
0CEB   03                     INC   bc   ; ip++
0CEC   18 F0                  JR   identHash1   
0CEE                             ; a = index
0CEE                             ; hl = default
0CEE                COMMANDTABLE:      
0CEE   E3                     EX   (sp),hl   ; hl = table* (sp) = default*
0CEF   54                     LD   d,h   ; d = msb(table*) + 1
0CF0   14                     INC   d   
0CF1   FE 80                  CP   $80   ; index > $80
0CF3   38 01                  JR   c,commandTable2   
0CF5   14                     INC   d   ; d = msb(table*) + 2
0CF6                COMMANDTABLE2:      
0CF6   85                     ADD   a,l   ; hl = dest**
0CF7   6F                     LD   l,a   
0CF8   5E                     LD   e,(hl)   ; e = lsb(dest*)
0CF9   B7                     OR   a   ; if zero use default*
0CFA   C8                     RET   z   
0CFB   EB                     EX   de,hl   ; hl = dest*
0CFC   D1                     POP   de   ; pop default*
0CFD   E9                     JP   (hl)   
0CFE                GETVARADDR:      
0CFE   21 00 00               LD   hl,0   
0D01   FE 7B                  CP   "z"+1   ; if a > z then exit
0D03   D0                     RET   nc   
0D04   D6 41                  SUB   "A"   ; a - 65
0D06   D8                     RET   c   ; if < A then exit
0D07   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0D09   38 05                  JR   c,getVarAddr1   
0D0B   D6 06                  SUB   "a"-("Z"+1)   
0D0D   FE 1A                  CP   "Z"-"A"+1   
0D0F   D8                     RET   c   ; if < a then exit
0D10                GETVARADDR1:      
0D10   87                     ADD   a,a   ; double a
0D11   6F                     LD   l,a   
0D12   26 38                  LD   h,msb(VARS)   
0D14   C9                     RET      
0D15                PUTSTR0:      
0D15   CD 85 00               CALL   putchar   
0D18   23                     INC   hl   
0D19                PUTSTR:      
0D19   7E                     LD   a,(hl)   
0D1A   B7                     OR   a   
0D1B   20 F8                  JR   nz,putstr0   
0D1D   C9                     RET      
0D1E                             ; hl = value
0D1E                             ; de = buffer*
0D1E                             ; a, bc, de, hl destroyed
0D1E                FORMATDEC0:      
0D1E   E5                     PUSH   hl   
0D1F   D9                     EXX      
0D20   E1                     POP   hl   
0D21                             ; hl = value
0D21                             ; de' = buffer*
0D21                             ; a, bc, de, hl destroyed
0D21                FORMATDEC:      
0D21   CB 7C                  BIT   7,h   
0D23   28 0C                  JR   z,formatDec2   
0D25   D9                     EXX      
0D26   3E 2D                  LD   a,"-"   
0D28   12                     LD   (de),a   
0D29   13                     INC   de   
0D2A   D9                     EXX      
0D2B   AF                     XOR   a   
0D2C   95                     SUB   l   
0D2D   6F                     LD   l,a   
0D2E   9F                     SBC   a,a   
0D2F   94                     SUB   h   
0D30   67                     LD   h,a   
0D31                FORMATDEC2:      
0D31   0E 00                  LD   c,0   ; leading zeros flag = false
0D33   11 F0 D8               LD   de,-10000   
0D36   CD 51 0D               CALL   formatDec4   
0D39   11 18 FC               LD   de,-1000   
0D3C   CD 51 0D               CALL   formatDec4   
0D3F   11 9C FF               LD   de,-100   
0D42   CD 51 0D               CALL   formatDec4   
0D45   1E F6                  LD   e,-10   
0D47   CD 51 0D               CALL   formatDec4   
0D4A   0C                     INC   c   ; flag = true for at least digit
0D4B   1E FF                  LD   e,-1   
0D4D   CD 51 0D               CALL   formatDec4   
0D50   C9                     RET      
0D51                FORMATDEC4:      
0D51   06 2F                  LD   b,"0"-1   
0D53                FORMATDEC5:      
0D53   04                     INC   b   
0D54   19                     ADD   hl,de   
0D55   38 FC                  JR   c,formatDec5   
0D57   ED 52                  SBC   hl,de   
0D59   3E 30                  LD   a,"0"   
0D5B   B8                     CP   b   
0D5C   20 05                  JR   nz,formatDec6   
0D5E   AF                     XOR   a   
0D5F   B1                     OR   c   
0D60   C8                     RET   z   
0D61   18 01                  JR   formatDec7   
0D63                FORMATDEC6:      
0D63   0C                     INC   c   
0D64                FORMATDEC7:      
0D64   78                     LD   a,b   
0D65   D9                     EXX      
0D66   12                     LD   (de),a   
0D67   13                     INC   de   
0D68   D9                     EXX      
0D69   C9                     RET      
0D6A                             ; **************************************************************************
0D6A                             ; calculate nesting value
0D6A                             ; a is char to be tested,
0D6A                             ; e is the nesting value (initially 0)
0D6A                             ; e is increased by ( and [
0D6A                             ; e is decreased by ) and ]
0D6A                             ; e has its bit 7 toggled by `
0D6A                             ; limited to 127 levels
0D6A                             ; **************************************************************************
0D6A                NESTING:      
0D6A   FE 27                  CP   "'"   ; quote char
0D6C   28 0A                  JR   z,nesting0   
0D6E   FE 22                  CP   DQ   ; double quote char
0D70   28 06                  JR   z,nesting0   
0D72   FE 60                  CP   "`"   ; grave char
0D74   28 02                  JR   z,nesting0   
0D76   18 0A                  JR   nesting1   
0D78                NESTING0:      
0D78   CB 7B                  BIT   7,e   
0D7A   28 03                  JR   z,nesting1a   
0D7C   CB BB                  RES   7,e   
0D7E   C9                     RET      
0D7F                NESTING1A:      
0D7F   CB FB                  SET   7,e   
0D81   C9                     RET      
0D82                NESTING1:      
0D82   CB 7B                  BIT   7,e   
0D84   C0                     RET   nz   
0D85   FE 7B                  CP   "{"   
0D87   28 08                  JR   z,nesting2   
0D89   FE 5B                  CP   "["   
0D8B   28 04                  JR   z,nesting2   
0D8D   FE 28                  CP   "("   
0D8F   20 02                  JR   nz,nesting3   
0D91                NESTING2:      
0D91   1C                     INC   e   
0D92   C9                     RET      
0D93                NESTING3:      
0D93   FE 7D                  CP   "}"   
0D95   28 07                  JR   z,nesting4   
0D97   FE 5D                  CP   "]"   
0D99   28 03                  JR   z,nesting4   
0D9B   FE 29                  CP   ")"   
0D9D   C0                     RET   nz   
0D9E                NESTING4:      
0D9E   1D                     DEC   e   
0D9F   C9                     RET      
0DA0                PROMPT:      
0DA0   CD B0 0D               CALL   printStr   
0DA3   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0DA8   C9                     RET      
0DA9                CRLF:        
0DA9   CD B0 0D               CALL   printStr   
0DAC   0D 0A 00               .CSTR   "\r\n"   
0DAF   C9                     RET      
0DB0                             ; prints a null teminated string
0DB0                             ; the string should be immediately following the call
0DB0                PRINTSTR:      
0DB0   E3                     EX   (sp),hl   ; swap			
0DB1   CD 19 0D               CALL   putstr   
0DB4   23                     INC   hl   ; inc past NUL
0DB5   E3                     EX   (sp),hl   ; put it back	
0DB6   C9                     RET      
0DB7                             ; hl = number to print in decimal
0DB7                PRINTNUM:      
0DB7   ED 5B E8 38            LD   de,(vBufPtr)   ; de' = buffer*
0DBB   CD 1E 0D               CALL   formatDec0   
0DBE   D9                     EXX      ; restore de = buffer*
0DBF   3E 00                  LD   a,0   ; append NUL to buffer
0DC1   12                     LD   (de),a   
0DC2   13                     INC   de   ; string*++,
0DC3   ED 53 E8 38            LD   (vBufPtr),de   ; update buffer* with buffer*'
0DC7   21 00 37               LD   hl,BUFFER   
0DCA   22 E8 38               LD   (vBufPtr),hl   ; reset vBufPtr to vHeapPtr
0DCD   C3 19 0D               JP   putstr   
0DD0                             ; Compares two null terminated strings.
0DD0                             ; de = string1* hl = string2* -- bool
0DD0                             ; returns: hl = bool
0DD0                STRINGCOMPARE:      
0DD0                STRINGCOMPARE1:      
0DD0   1A                     LD   a,(de)   
0DD1   BE                     CP   (hl)   
0DD2   20 07                  JR   nz,stringCompare2   
0DD4   B7                     OR   a   
0DD5   28 09                  JR   z,stringCompare3   
0DD7   13                     INC   de   
0DD8   23                     INC   hl   
0DD9   18 F5                  JR   stringCompare1   
0DDB                STRINGCOMPARE2:      
0DDB   21 00 00               LD   hl,FALSE   
0DDE   18 03                  JR   stringCompare4   
0DE0                STRINGCOMPARE3:      
0DE0   21 FF FF               LD   hl,TRUE   
0DE3                STRINGCOMPARE4:      
0DE3   E5                     PUSH   hl   
0DE4   C9                     RET      
0DE5                             ; string length
0DE5                             ; de = string*
0DE5                             ; returns: hl = length
0DE5                STRINGLENGTH:      
0DE5   21 00 00               LD   hl,0   
0DE8   18 02                  JR   stringLength2   
0DEA                STRINGLENGTH1:      
0DEA   13                     INC   de   
0DEB   23                     INC   hl   
0DEC                STRINGLENGTH2:      
0DEC   1A                     LD   a,(de)   
0DED   B7                     OR   a   
0DEE   20 FA                  JR   nz,stringLength1   
0DF0                STRINGLENGTH3:      
0DF0   C9                     RET      
0DF1                             ; 
0DF1                             ; MINTY interpreter
0DF1                             ; 
0DF1                INIT:        
0DF1   21 F0 01               LD   hl,titleStr   
0DF4   11 12 39               LD   de,titleBuf   
0DF7   06 14                  LD   b,20   
0DF9                INIT1:       
0DF9   1A                     LD   a,(de)   
0DFA   BE                     CP   (hl)   
0DFB   20 17                  JR   nz,coldBoot0   
0DFD   13                     INC   de   
0DFE   23                     INC   hl   
0DFF   10 F8                  DJNZ   init1   
0E01                WARMINIT:      
0E01   ED 4B FE 38            LD   bc,(vSavedIP)   ; restore IP
0E05   ED 7B 00 39            LD   sp,(vSavedDSP)   ; restore Data SP
0E09   FD 2A 02 39            LD   iy,(vSavedRSP)   ; restore Return SP
0E0D   DD 2A 04 39            LD   ix,(vSavedNext)   ; restore Next
0E11   C3 4B 0E               JP   start1   
0E14                COLDBOOT0:      
0E14   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0E17   11 12 39               LD   de,titleBuf   
0E1A   06 14                  LD   b,20   
0E1C   ED B0                  LDIR      
0E1E                COLDINIT:      
0E1E   21 DE 01               LD   hl,isysVars   
0E21   11 E6 38               LD   de,sysVars   
0E24   01 12 00               LD   bc,4 * 2 + 10   
0E27   ED B0                  LDIR      
0E29   21 00 38               LD   hl,vars   ; 52 vars LO HI
0E2C   06 34                  LD   b,26*2   
0E2E   AF                     XOR   a   
0E2F                COLDBOOT1:      
0E2F   77                     LD   (hl),a   
0E30   23                     INC   hl   
0E31   10 FC                  DJNZ   coldBoot1   
0E33   DD 21 C7 0E            LD   ix,NEXT   
0E37   FD 21 00 34            LD   iy,STACK   
0E3B   C9                     RET      
0E3C                COLDSTART:      
0E3C   31 00 34               LD   sp,STACK   
0E3F   CD 14 0E               CALL   coldBoot0   
0E42   C3 4B 0E               JP   start1   
0E45                START:       
0E45   31 00 34               LD   sp,STACK   ; start MINTY
0E48   CD F1 0D               CALL   init   ; setups
0E4B                START1:      
0E4B   21 12 39               LD   hl,titleBuf   
0E4E   CD 19 0D               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
0E51                INTERPRET:      
0E51   CD A0 0D               CALL   prompt   
0E54   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0E57   21 00 36               LD   hl,TIB   
0E5A   22 E6 38               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0E5D                INTERPRET2:      ; calculate nesting
0E5D   1E 00                  LD   e,0   ; initilize nesting value
0E5F   C5                     PUSH   bc   ; save offset into TIB,
0E60                             ; bc is also the count of chars in TIB
0E60   21 00 36               LD   hl,TIB   ; hl is start of TIB
0E63   18 06                  JR   interpret4   
0E65                INTERPRET3:      
0E65   7E                     LD   a,(hl)   ; a = char in TIB
0E66   23                     INC   hl   ; inc pointer into TIB
0E67   0B                     DEC   bc   ; dec count of chars in TIB
0E68   CD 6A 0D               CALL   nesting   ; update nesting value
0E6B                INTERPRET4:      
0E6B   79                     LD   a,c   ; is count zero?
0E6C   B0                     OR   b   
0E6D   20 F6                  JR   nz,interpret3   ; if not loop
0E6F   C1                     POP   bc   ; restore offset into TIB
0E70                INTERPRET5:      
0E70   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0E73   FE 20                  CP   $20   ; compare to space
0E75   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0E77   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0E79   28 31                  JR   z,interpret8   
0E7B   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0E7D   28 1A                  JR   z,interpret7   ; if anything else its macro/control
0E7F   FE 08                  CP   CTRL_H   
0E81   CA FD 0E               JP   z,backSpace_   
0E84   FE 0A                  CP   CTRL_J   
0E86   CA 0D 0F               JP   z,reEdit_   
0E89                INTERPRET5A:      
0E89   18 D2                  JR   interpret2   
0E8B                INTERPRET6:      
0E8B   21 00 36               LD   hl,TIB   
0E8E   09                     ADD   hl,bc   
0E8F   77                     LD   (hl),a   ; store the character in textbuf
0E90   03                     INC   bc   
0E91   CD 85 00               CALL   putchar   ; echo character to screen
0E94   CD 6A 0D               CALL   nesting   
0E97   18 D7                  JR   interpret5   ; wait for next character
0E99                INTERPRET7:      
0E99   21 00 36               LD   hl,TIB   
0E9C   09                     ADD   hl,bc   
0E9D   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0E9F   23                     INC   hl   
0EA0   36 0A                  LD   (hl),"\n"   
0EA2   23                     INC   hl   
0EA3   03                     INC   bc   
0EA4   03                     INC   bc   
0EA5   CD A9 0D               CALL   crlf   ; echo character to screen
0EA8   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0EA9   B7                     OR   a   
0EAA   20 C4                  JR   nz,interpret5   
0EAC                INTERPRET8:      
0EAC   21 00 36               LD   hl,TIB   
0EAF   09                     ADD   hl,bc   
0EB0   22 E6 38               LD   (vTIBPtr),hl   
0EB3   01 00 36               LD   bc,TIB   
0EB6   ED 43 FE 38            LD   (vSavedIP),bc   ; save IP
0EBA   ED 73 00 39            LD   (vSavedDSP),sp   ; save Data SP
0EBE   FD 22 02 39            LD   (vSavedRSP),iy   ; save Return SP
0EC2   DD 22 04 39            LD   (vSavedNext),ix   ; save Next
0EC6   0B                     DEC   bc   
0EC7                NEXT:        
0EC7   03                     INC   bc   ; Increment the IP
0EC8   0A                     LD   a,(bc)   ; Get the next character and dispatch
0EC9   FE 20                  CP   " "   ; whitespace?
0ECB   28 FA                  JR   z,next   ; space? ignore
0ECD   38 0D                  JR   c,next1   
0ECF   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0ED1   6F                     LD   l,a   ; index into table
0ED2   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0ED4   6E                     LD   l,(hl)   ; get low jump address
0ED5   24                     INC   h   ; page 2
0ED6   FE BA                  CP   "Z" - "!" + 1 + $80   
0ED8   38 01                  JR   c,next0   
0EDA   24                     INC   h   ; page 3
0EDB                NEXT0:       
0EDB   E9                     JP   (hl)   ; Jump to routine
0EDC                NEXT1:       
0EDC   FE 00                  CP   NUL   ; end of input string?
0EDE   28 03                  JR   z,exit   
0EE0   C3 51 0E               JP   interpret   ; no, other whitespace, macros?
0EE3                EXIT:        
0EE3   03                     INC   bc   
0EE4   60 69                  LD   hl,bc   
0EE6   E9                     JP   (hl)   
0EE7                RUN:         
0EE7   C1                     POP   bc   
0EE8   0B                     DEC   bc   
0EE9   DD E9                  JP   (ix)   
0EEB                ERROR:       
0EEB   E5                     PUSH   hl   
0EEC   CD E7 0E               CALL   run   
0EEF   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
0EFA   C3 51 0E               JP   interpret   
0EFD                BACKSPACE_:      
0EFD   79                     LD   a,c   
0EFE   B0                     OR   b   
0EFF   CA 5D 0E               JP   z,interpret2   
0F02   0B                     DEC   bc   
0F03   CD B0 0D               CALL   printStr   
0F06   08 20 08 00            .CSTR   "\b \b"   
0F0A   C3 5D 0E               JP   interpret2   
0F0D                REEDIT_:      
0F0D   CD B0 0D               CALL   printStr   
0F10   0D 3E 20 00            .CSTR   "\r> "   
0F14   21 00 36               LD   hl,TIB   
0F17   18 04                  JR   reEdit1   
0F19                REEDIT0:      
0F19   CD 85 00               CALL   putchar   
0F1C   23                     INC   hl   
0F1D                REEDIT1:      
0F1D   7E                     LD   a,(hl)   
0F1E   FE 0D                  CP   "\r"   
0F20   20 F7                  JR   nz,reEdit0   
0F22   11 00 36               LD   de,TIB   
0F25   B7                     OR   a   
0F26   ED 52                  SBC   hl,de   
0F28   44 4D                  LD   bc,hl   
0F2A   C3 5D 0E               JP   interpret2   
0F2D                ANSIPRINTSEQ:      
0F2D   CD B0 0D               CALL   printStr   
0F30   1B 5B 00               DB   ESC,"[",0   
0F33   C9                     RET      
0F34                             ; clears screen and sets cursor to 0,0
0F34                ANSICLEARSCREEN:      
0F34   CD B0 0D               CALL   printStr   
0F37   1B 5B                  DB   ESC,"["   
0F39   32 4A 00               DB   "2J",0   ; falls through
0F3C                             ; call ansiPrintStr
0F3C                             ; .cstr "H"
0F3C   C9                     RET      
0F3D                             ; a = 0:toEnd 1:toStart 2:entireLine
0F3D                ANSICLEARLINE:      
0F3D   C6 30                  ADD   a,"0"   ; ascii
0F3F   08                     EX   af,af'   ; save a
0F40   CD 2D 0F               CALL   ansiPrintSeq   
0F43   08                     EX   af,af'   ; restore
0F44   CD 85 00               CALL   putChar   
0F47   3E 4B                  LD   a,"K"   
0F49   C3 85 00               JP   putChar   
0F4C                             ; h = column, l = row
0F4C                ANSIGOTO:      
0F4C   D9                     EXX      ; save hl
0F4D   CD 2D 0F               CALL   ansiPrintSeq   
0F50   D9                     EXX      ; restore hl
0F51   7C                     LD   a,h   ; save column
0F52   08                     EX   af,af'   
0F53   26 00                  LD   h,0   ; print row
0F55   CD B7 0D               CALL   printNum   
0F58   3E 3B                  LD   a,";"   
0F5A   CD 85 00               CALL   putChar   
0F5D   08                     EX   af,af'   ; restore column
0F5E   6C                     LD   l,h   ; print column
0F5F   26 00                  LD   h,0   
0F61   CD B7 0D               CALL   printNum   
0F64   3E 48                  LD   a,"H"   
0F66   C3 85 00               JP   putChar   
0F69                             ; h = "A":Up "B":Down "C":Forward "D":Back
0F69                             ; l = amount
0F69                ANSIMOVE:      
0F69   D9                     EXX      ; save hl
0F6A   CD 2D 0F               CALL   ansiPrintSeq   
0F6D   D9                     EXX      ; restore hl
0F6E   7C                     LD   a,h   
0F6F   08                     EX   af,af'   ; save a
0F70   26 00                  LD   h,0   ; print amount
0F72   CD B7 0D               CALL   printNum   
0F75   08                     EX   af,af'   ; restore a
0F76   C3 85 00               JP   putChar   ; print direction code
0F79                             ; a = 0:normal 1:bold 2:low 4:underline 5:blink 7:reverse
0F79                ANSITEXTSTYLE:      
0F79   C6 30                  ADD   a,"0"   ; ascii
0F7B   08                     EX   af,af'   ; save a
0F7C   CD 2D 0F               CALL   ansiPrintSeq   
0F7F   08                     EX   af,af'   ; restore
0F80   CD 85 00               CALL   putChar   
0F83   3E 6D                  LD   a,"m"   
0F85   C3 85 00               JP   putChar   
0F88                             ; a = "h":show "l":hide
0F88                ANSICURSORSHOW:      
0F88   08                     EX   af,af'   ; save a
0F89   CD B0 0D               CALL   printStr   
0F8C   1B 5B                  DB   ESC,"["   
0F8E   3F 32 35 00            DB   "?25",0   
0F92   08                     EX   af,af'   ; restore
0F93   C3 85 00               JP   putChar   
0F96                          ALIGN   $100   
1000                TESTSSTART:      
1000                          ;*Macro unroll:  test "10 /hex .", 0
1000   31 00 34               LD   SP,STACK   
1003   CD 1E 0E               CALL   coldInit   
1006   CD AC 32               CALL   execStr   
1009   31 30 20 2F 68 65 78 20 2E 00 DB   "10 /hex .",0   
1013   E1                     POP   HL   
1014   E5                     PUSH   HL   
1015   11 00 00               LD   DE,0   
1018   B7                     OR   A   
1019   ED 52                  SBC   HL,DE   
101B   7D                     LD   A,L   
101C   B4                     OR   H   
101D   CA 85 10               JP   Z,expectM_2928S16   
1020   CD B0 0D               CALL   printStr   
1023   43 6F 64 65 3A 20 31 30 20 2F 68 65 78 20 2E 00 .CSTR   "Code: ","10 /hex ."   
1033   CD B0 0D               CALL   printStr   
1036   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1045   21 00 00               LD   hl,0   
1048   E5                     PUSH   hl   
1049   E5                     PUSH   hl   
104A   CD E7 0E               CALL   run   
104D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
105B   CD B0 0D               CALL   printStr   
105E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
106B   E1                     POP   hl   
106C   E5                     PUSH   hl   
106D   E5                     PUSH   hl   
106E   CD E7 0E               CALL   run   
1071   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
1084   76                     HALT      
1085                EXPECTM_2928S16:      
1085   E1                     POP   HL   
1086                          ;*Macro unroll:  test "7 3 / /frac", 10
1086   31 00 34               LD   SP,STACK   
1089   CD 1E 0E               CALL   coldInit   
108C   CD AC 32               CALL   execStr   
108F   37 20 33 20 2F 20 2F 66 72 61 63 00 DB   "7 3 / /frac",0   
109B   E1                     POP   HL   
109C   E5                     PUSH   HL   
109D   11 0A 00               LD   DE,10   
10A0   B7                     OR   A   
10A1   ED 52                  SBC   HL,DE   
10A3   7D                     LD   A,L   
10A4   B4                     OR   H   
10A5   CA 0F 11               JP   Z,expectM_2929S18   
10A8   CD B0 0D               CALL   printStr   
10AB   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 66 72 61 63 00 .CSTR   "Code: ","7 3 / /frac"   
10BD   CD B0 0D               CALL   printStr   
10C0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10CF   21 0A 00               LD   hl,10   
10D2   E5                     PUSH   hl   
10D3   E5                     PUSH   hl   
10D4   CD E7 0E               CALL   run   
10D7   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
10E5   CD B0 0D               CALL   printStr   
10E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10F5   E1                     POP   hl   
10F6   E5                     PUSH   hl   
10F7   E5                     PUSH   hl   
10F8   CD E7 0E               CALL   run   
10FB   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
110E   76                     HALT      
110F                EXPECTM_2929S18:      
110F   E1                     POP   HL   
1110   CD B0 0D               CALL   printStr   
1113   44 6F 6E 65 21 00      .CSTR   "Done!"   
1119   76                     HALT      
111A                          ;*Macro unroll:  test "/f", false
111A   31 00 34               LD   SP,STACK   
111D   CD 1E 0E               CALL   coldInit   
1120   CD AC 32               CALL   execStr   
1123   2F 66 00               DB   "/f",0   
1126   E1                     POP   HL   
1127   E5                     PUSH   HL   
1128   11 00 00               LD   DE,false   
112B   B7                     OR   A   
112C   ED 52                  SBC   HL,DE   
112E   7D                     LD   A,L   
112F   B4                     OR   H   
1130   CA 91 11               JP   Z,expectM_2933S23   
1133   CD B0 0D               CALL   printStr   
1136   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
113F   CD B0 0D               CALL   printStr   
1142   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1151   21 00 00               LD   hl,false   
1154   E5                     PUSH   hl   
1155   E5                     PUSH   hl   
1156   CD E7 0E               CALL   run   
1159   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1167   CD B0 0D               CALL   printStr   
116A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1177   E1                     POP   hl   
1178   E5                     PUSH   hl   
1179   E5                     PUSH   hl   
117A   CD E7 0E               CALL   run   
117D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
1190   76                     HALT      
1191                EXPECTM_2933S23:      
1191   E1                     POP   HL   
1192                          ;*Macro unroll:  test "/t", true
1192   31 00 34               LD   SP,STACK   
1195   CD 1E 0E               CALL   coldInit   
1198   CD AC 32               CALL   execStr   
119B   2F 74 00               DB   "/t",0   
119E   E1                     POP   HL   
119F   E5                     PUSH   HL   
11A0   11 FF FF               LD   DE,true   
11A3   B7                     OR   A   
11A4   ED 52                  SBC   HL,DE   
11A6   7D                     LD   A,L   
11A7   B4                     OR   H   
11A8   CA 09 12               JP   Z,expectM_2934S24   
11AB   CD B0 0D               CALL   printStr   
11AE   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
11B7   CD B0 0D               CALL   printStr   
11BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11C9   21 FF FF               LD   hl,true   
11CC   E5                     PUSH   hl   
11CD   E5                     PUSH   hl   
11CE   CD E7 0E               CALL   run   
11D1   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
11DF   CD B0 0D               CALL   printStr   
11E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11EF   E1                     POP   hl   
11F0   E5                     PUSH   hl   
11F1   E5                     PUSH   hl   
11F2   CD E7 0E               CALL   run   
11F5   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
1208   76                     HALT      
1209                EXPECTM_2934S24:      
1209   E1                     POP   HL   
120A                          ;*Macro unroll:  test "1", 1
120A   31 00 34               LD   SP,STACK   
120D   CD 1E 0E               CALL   coldInit   
1210   CD AC 32               CALL   execStr   
1213   31 00                  DB   "1",0   
1215   E1                     POP   HL   
1216   E5                     PUSH   HL   
1217   11 01 00               LD   DE,1   
121A   B7                     OR   A   
121B   ED 52                  SBC   HL,DE   
121D   7D                     LD   A,L   
121E   B4                     OR   H   
121F   CA 7F 12               JP   Z,expectM_2935S25   
1222   CD B0 0D               CALL   printStr   
1225   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
122D   CD B0 0D               CALL   printStr   
1230   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
123F   21 01 00               LD   hl,1   
1242   E5                     PUSH   hl   
1243   E5                     PUSH   hl   
1244   CD E7 0E               CALL   run   
1247   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1255   CD B0 0D               CALL   printStr   
1258   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1265   E1                     POP   hl   
1266   E5                     PUSH   hl   
1267   E5                     PUSH   hl   
1268   CD E7 0E               CALL   run   
126B   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
127E   76                     HALT      
127F                EXPECTM_2935S25:      
127F   E1                     POP   HL   
1280                          ;*Macro unroll:  test "2", 2
1280   31 00 34               LD   SP,STACK   
1283   CD 1E 0E               CALL   coldInit   
1286   CD AC 32               CALL   execStr   
1289   32 00                  DB   "2",0   
128B   E1                     POP   HL   
128C   E5                     PUSH   HL   
128D   11 02 00               LD   DE,2   
1290   B7                     OR   A   
1291   ED 52                  SBC   HL,DE   
1293   7D                     LD   A,L   
1294   B4                     OR   H   
1295   CA F5 12               JP   Z,expectM_2936S26   
1298   CD B0 0D               CALL   printStr   
129B   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
12A3   CD B0 0D               CALL   printStr   
12A6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12B5   21 02 00               LD   hl,2   
12B8   E5                     PUSH   hl   
12B9   E5                     PUSH   hl   
12BA   CD E7 0E               CALL   run   
12BD   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
12CB   CD B0 0D               CALL   printStr   
12CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12DB   E1                     POP   hl   
12DC   E5                     PUSH   hl   
12DD   E5                     PUSH   hl   
12DE   CD E7 0E               CALL   run   
12E1   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
12F4   76                     HALT      
12F5                EXPECTM_2936S26:      
12F5   E1                     POP   HL   
12F6                          ;*Macro unroll:  test "1", 1
12F6   31 00 34               LD   SP,STACK   
12F9   CD 1E 0E               CALL   coldInit   
12FC   CD AC 32               CALL   execStr   
12FF   31 00                  DB   "1",0   
1301   E1                     POP   HL   
1302   E5                     PUSH   HL   
1303   11 01 00               LD   DE,1   
1306   B7                     OR   A   
1307   ED 52                  SBC   HL,DE   
1309   7D                     LD   A,L   
130A   B4                     OR   H   
130B   CA 6B 13               JP   Z,expectM_2937S27   
130E   CD B0 0D               CALL   printStr   
1311   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
1319   CD B0 0D               CALL   printStr   
131C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
132B   21 01 00               LD   hl,1   
132E   E5                     PUSH   hl   
132F   E5                     PUSH   hl   
1330   CD E7 0E               CALL   run   
1333   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1341   CD B0 0D               CALL   printStr   
1344   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1351   E1                     POP   hl   
1352   E5                     PUSH   hl   
1353   E5                     PUSH   hl   
1354   CD E7 0E               CALL   run   
1357   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
136A   76                     HALT      
136B                EXPECTM_2937S27:      
136B   E1                     POP   HL   
136C                          ;*Macro unroll:  test "0", 0
136C   31 00 34               LD   SP,STACK   
136F   CD 1E 0E               CALL   coldInit   
1372   CD AC 32               CALL   execStr   
1375   30 00                  DB   "0",0   
1377   E1                     POP   HL   
1378   E5                     PUSH   HL   
1379   11 00 00               LD   DE,0   
137C   B7                     OR   A   
137D   ED 52                  SBC   HL,DE   
137F   7D                     LD   A,L   
1380   B4                     OR   H   
1381   CA E1 13               JP   Z,expectM_2938S28   
1384   CD B0 0D               CALL   printStr   
1387   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
138F   CD B0 0D               CALL   printStr   
1392   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13A1   21 00 00               LD   hl,0   
13A4   E5                     PUSH   hl   
13A5   E5                     PUSH   hl   
13A6   CD E7 0E               CALL   run   
13A9   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
13B7   CD B0 0D               CALL   printStr   
13BA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13C7   E1                     POP   hl   
13C8   E5                     PUSH   hl   
13C9   E5                     PUSH   hl   
13CA   CD E7 0E               CALL   run   
13CD   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
13E0   76                     HALT      
13E1                EXPECTM_2938S28:      
13E1   E1                     POP   HL   
13E2                          ;*Macro unroll:  test "10", 10
13E2   31 00 34               LD   SP,STACK   
13E5   CD 1E 0E               CALL   coldInit   
13E8   CD AC 32               CALL   execStr   
13EB   31 30 00               DB   "10",0   
13EE   E1                     POP   HL   
13EF   E5                     PUSH   HL   
13F0   11 0A 00               LD   DE,10   
13F3   B7                     OR   A   
13F4   ED 52                  SBC   HL,DE   
13F6   7D                     LD   A,L   
13F7   B4                     OR   H   
13F8   CA 59 14               JP   Z,expectM_2939S29   
13FB   CD B0 0D               CALL   printStr   
13FE   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1407   CD B0 0D               CALL   printStr   
140A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1419   21 0A 00               LD   hl,10   
141C   E5                     PUSH   hl   
141D   E5                     PUSH   hl   
141E   CD E7 0E               CALL   run   
1421   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
142F   CD B0 0D               CALL   printStr   
1432   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
143F   E1                     POP   hl   
1440   E5                     PUSH   hl   
1441   E5                     PUSH   hl   
1442   CD E7 0E               CALL   run   
1445   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
1458   76                     HALT      
1459                EXPECTM_2939S29:      
1459   E1                     POP   HL   
145A                          ;*Macro unroll:  test "123", 123
145A   31 00 34               LD   SP,STACK   
145D   CD 1E 0E               CALL   coldInit   
1460   CD AC 32               CALL   execStr   
1463   31 32 33 00            DB   "123",0   
1467   E1                     POP   HL   
1468   E5                     PUSH   HL   
1469   11 7B 00               LD   DE,123   
146C   B7                     OR   A   
146D   ED 52                  SBC   HL,DE   
146F   7D                     LD   A,L   
1470   B4                     OR   H   
1471   CA D3 14               JP   Z,expectM_2940S30   
1474   CD B0 0D               CALL   printStr   
1477   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1481   CD B0 0D               CALL   printStr   
1484   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1493   21 7B 00               LD   hl,123   
1496   E5                     PUSH   hl   
1497   E5                     PUSH   hl   
1498   CD E7 0E               CALL   run   
149B   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
14A9   CD B0 0D               CALL   printStr   
14AC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14B9   E1                     POP   hl   
14BA   E5                     PUSH   hl   
14BB   E5                     PUSH   hl   
14BC   CD E7 0E               CALL   run   
14BF   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
14D2   76                     HALT      
14D3                EXPECTM_2940S30:      
14D3   E1                     POP   HL   
14D4                          ;*Macro unroll:  test "-1",-1
14D4   31 00 34               LD   SP,STACK   
14D7   CD 1E 0E               CALL   coldInit   
14DA   CD AC 32               CALL   execStr   
14DD   2D 31 00               DB   "-1",0   
14E0   E1                     POP   HL   
14E1   E5                     PUSH   HL   
14E2   11 FF FF               LD   DE,-1   
14E5   B7                     OR   A   
14E6   ED 52                  SBC   HL,DE   
14E8   7D                     LD   A,L   
14E9   B4                     OR   H   
14EA   CA 4B 15               JP   Z,expectM_2941S31   
14ED   CD B0 0D               CALL   printStr   
14F0   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
14F9   CD B0 0D               CALL   printStr   
14FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
150B   21 FF FF               LD   hl,-1   
150E   E5                     PUSH   hl   
150F   E5                     PUSH   hl   
1510   CD E7 0E               CALL   run   
1513   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1521   CD B0 0D               CALL   printStr   
1524   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1531   E1                     POP   hl   
1532   E5                     PUSH   hl   
1533   E5                     PUSH   hl   
1534   CD E7 0E               CALL   run   
1537   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
154A   76                     HALT      
154B                EXPECTM_2941S31:      
154B   E1                     POP   HL   
154C                          ;*Macro unroll:  test "-1 /abs",1
154C   31 00 34               LD   SP,STACK   
154F   CD 1E 0E               CALL   coldInit   
1552   CD AC 32               CALL   execStr   
1555   2D 31 20 2F 61 62 73 00 DB   "-1 /abs",0   
155D   E1                     POP   HL   
155E   E5                     PUSH   HL   
155F   11 01 00               LD   DE,1   
1562   B7                     OR   A   
1563   ED 52                  SBC   HL,DE   
1565   7D                     LD   A,L   
1566   B4                     OR   H   
1567   CA CD 15               JP   Z,expectM_2942S32   
156A   CD B0 0D               CALL   printStr   
156D   43 6F 64 65 3A 20 2D 31 20 2F 61 62 73 00 .CSTR   "Code: ","-1 /abs"   
157B   CD B0 0D               CALL   printStr   
157E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
158D   21 01 00               LD   hl,1   
1590   E5                     PUSH   hl   
1591   E5                     PUSH   hl   
1592   CD E7 0E               CALL   run   
1595   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
15A3   CD B0 0D               CALL   printStr   
15A6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15B3   E1                     POP   hl   
15B4   E5                     PUSH   hl   
15B5   E5                     PUSH   hl   
15B6   CD E7 0E               CALL   run   
15B9   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
15CC   76                     HALT      
15CD                EXPECTM_2942S32:      
15CD   E1                     POP   HL   
15CE                          ;*Macro unroll:  test "_a", $61
15CE   31 00 34               LD   SP,STACK   
15D1   CD 1E 0E               CALL   coldInit   
15D4   CD AC 32               CALL   execStr   
15D7   5F 61 00               DB   "_a",0   
15DA   E1                     POP   HL   
15DB   E5                     PUSH   HL   
15DC   11 61 00               LD   DE,$61   
15DF   B7                     OR   A   
15E0   ED 52                  SBC   HL,DE   
15E2   7D                     LD   A,L   
15E3   B4                     OR   H   
15E4   CA 45 16               JP   Z,expectM_2943S33   
15E7   CD B0 0D               CALL   printStr   
15EA   43 6F 64 65 3A 20 5F 61 00 .CSTR   "Code: ","_a"   
15F3   CD B0 0D               CALL   printStr   
15F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1605   21 61 00               LD   hl,$61   
1608   E5                     PUSH   hl   
1609   E5                     PUSH   hl   
160A   CD E7 0E               CALL   run   
160D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
161B   CD B0 0D               CALL   printStr   
161E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
162B   E1                     POP   hl   
162C   E5                     PUSH   hl   
162D   E5                     PUSH   hl   
162E   CD E7 0E               CALL   run   
1631   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
1644   76                     HALT      
1645                EXPECTM_2943S33:      
1645   E1                     POP   HL   
1646                          ;*Macro unroll:  test "__", $5F
1646   31 00 34               LD   SP,STACK   
1649   CD 1E 0E               CALL   coldInit   
164C   CD AC 32               CALL   execStr   
164F   5F 5F 00               DB   "__",0   
1652   E1                     POP   HL   
1653   E5                     PUSH   HL   
1654   11 5F 00               LD   DE,$5F   
1657   B7                     OR   A   
1658   ED 52                  SBC   HL,DE   
165A   7D                     LD   A,L   
165B   B4                     OR   H   
165C   CA BD 16               JP   Z,expectM_2944S34   
165F   CD B0 0D               CALL   printStr   
1662   43 6F 64 65 3A 20 5F 5F 00 .CSTR   "Code: ","__"   
166B   CD B0 0D               CALL   printStr   
166E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
167D   21 5F 00               LD   hl,$5F   
1680   E5                     PUSH   hl   
1681   E5                     PUSH   hl   
1682   CD E7 0E               CALL   run   
1685   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1693   CD B0 0D               CALL   printStr   
1696   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16A3   E1                     POP   hl   
16A4   E5                     PUSH   hl   
16A5   E5                     PUSH   hl   
16A6   CD E7 0E               CALL   run   
16A9   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
16BC   76                     HALT      
16BD                EXPECTM_2944S34:      
16BD   E1                     POP   HL   
16BE                          ;*Macro unroll:  test "$10", $10
16BE   31 00 34               LD   SP,STACK   
16C1   CD 1E 0E               CALL   coldInit   
16C4   CD AC 32               CALL   execStr   
16C7   24 31 30 00            DB   "$10",0   
16CB   E1                     POP   HL   
16CC   E5                     PUSH   HL   
16CD   11 10 00               LD   DE,$10   
16D0   B7                     OR   A   
16D1   ED 52                  SBC   HL,DE   
16D3   7D                     LD   A,L   
16D4   B4                     OR   H   
16D5   CA 37 17               JP   Z,expectM_2945S35   
16D8   CD B0 0D               CALL   printStr   
16DB   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
16E5   CD B0 0D               CALL   printStr   
16E8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16F7   21 10 00               LD   hl,$10   
16FA   E5                     PUSH   hl   
16FB   E5                     PUSH   hl   
16FC   CD E7 0E               CALL   run   
16FF   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
170D   CD B0 0D               CALL   printStr   
1710   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
171D   E1                     POP   hl   
171E   E5                     PUSH   hl   
171F   E5                     PUSH   hl   
1720   CD E7 0E               CALL   run   
1723   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
1736   76                     HALT      
1737                EXPECTM_2945S35:      
1737   E1                     POP   HL   
1738                          ;*Macro unroll:  test "$FF", $FF
1738   31 00 34               LD   SP,STACK   
173B   CD 1E 0E               CALL   coldInit   
173E   CD AC 32               CALL   execStr   
1741   24 46 46 00            DB   "$FF",0   
1745   E1                     POP   HL   
1746   E5                     PUSH   HL   
1747   11 FF 00               LD   DE,$FF   
174A   B7                     OR   A   
174B   ED 52                  SBC   HL,DE   
174D   7D                     LD   A,L   
174E   B4                     OR   H   
174F   CA B1 17               JP   Z,expectM_2946S36   
1752   CD B0 0D               CALL   printStr   
1755   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
175F   CD B0 0D               CALL   printStr   
1762   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1771   21 FF 00               LD   hl,$FF   
1774   E5                     PUSH   hl   
1775   E5                     PUSH   hl   
1776   CD E7 0E               CALL   run   
1779   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1787   CD B0 0D               CALL   printStr   
178A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1797   E1                     POP   hl   
1798   E5                     PUSH   hl   
1799   E5                     PUSH   hl   
179A   CD E7 0E               CALL   run   
179D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
17B0   76                     HALT      
17B1                EXPECTM_2946S36:      
17B1   E1                     POP   HL   
17B2                          ;*Macro unroll:  test "-1 2 +",1
17B2   31 00 34               LD   SP,STACK   
17B5   CD 1E 0E               CALL   coldInit   
17B8   CD AC 32               CALL   execStr   
17BB   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
17C2   E1                     POP   HL   
17C3   E5                     PUSH   HL   
17C4   11 01 00               LD   DE,1   
17C7   B7                     OR   A   
17C8   ED 52                  SBC   HL,DE   
17CA   7D                     LD   A,L   
17CB   B4                     OR   H   
17CC   CA 31 18               JP   Z,expectM_2947S37   
17CF   CD B0 0D               CALL   printStr   
17D2   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
17DF   CD B0 0D               CALL   printStr   
17E2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17F1   21 01 00               LD   hl,1   
17F4   E5                     PUSH   hl   
17F5   E5                     PUSH   hl   
17F6   CD E7 0E               CALL   run   
17F9   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1807   CD B0 0D               CALL   printStr   
180A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1817   E1                     POP   hl   
1818   E5                     PUSH   hl   
1819   E5                     PUSH   hl   
181A   CD E7 0E               CALL   run   
181D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
1830   76                     HALT      
1831                EXPECTM_2947S37:      
1831   E1                     POP   HL   
1832                          ;*Macro unroll:  test "-1 1 +",0
1832   31 00 34               LD   SP,STACK   
1835   CD 1E 0E               CALL   coldInit   
1838   CD AC 32               CALL   execStr   
183B   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
1842   E1                     POP   HL   
1843   E5                     PUSH   HL   
1844   11 00 00               LD   DE,0   
1847   B7                     OR   A   
1848   ED 52                  SBC   HL,DE   
184A   7D                     LD   A,L   
184B   B4                     OR   H   
184C   CA B1 18               JP   Z,expectM_2948S38   
184F   CD B0 0D               CALL   printStr   
1852   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
185F   CD B0 0D               CALL   printStr   
1862   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1871   21 00 00               LD   hl,0   
1874   E5                     PUSH   hl   
1875   E5                     PUSH   hl   
1876   CD E7 0E               CALL   run   
1879   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1887   CD B0 0D               CALL   printStr   
188A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1897   E1                     POP   hl   
1898   E5                     PUSH   hl   
1899   E5                     PUSH   hl   
189A   CD E7 0E               CALL   run   
189D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
18B0   76                     HALT      
18B1                EXPECTM_2948S38:      
18B1   E1                     POP   HL   
18B2                          ;*Macro unroll:  test "1 2 +", 3
18B2   31 00 34               LD   SP,STACK   
18B5   CD 1E 0E               CALL   coldInit   
18B8   CD AC 32               CALL   execStr   
18BB   31 20 32 20 2B 00      DB   "1 2 +",0   
18C1   E1                     POP   HL   
18C2   E5                     PUSH   HL   
18C3   11 03 00               LD   DE,3   
18C6   B7                     OR   A   
18C7   ED 52                  SBC   HL,DE   
18C9   7D                     LD   A,L   
18CA   B4                     OR   H   
18CB   CA 2F 19               JP   Z,expectM_2949S39   
18CE   CD B0 0D               CALL   printStr   
18D1   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
18DD   CD B0 0D               CALL   printStr   
18E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18EF   21 03 00               LD   hl,3   
18F2   E5                     PUSH   hl   
18F3   E5                     PUSH   hl   
18F4   CD E7 0E               CALL   run   
18F7   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1905   CD B0 0D               CALL   printStr   
1908   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1915   E1                     POP   hl   
1916   E5                     PUSH   hl   
1917   E5                     PUSH   hl   
1918   CD E7 0E               CALL   run   
191B   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
192E   76                     HALT      
192F                EXPECTM_2949S39:      
192F   E1                     POP   HL   
1930                          ;*Macro unroll:  test "4 1 2 +", 3
1930   31 00 34               LD   SP,STACK   
1933   CD 1E 0E               CALL   coldInit   
1936   CD AC 32               CALL   execStr   
1939   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
1941   E1                     POP   HL   
1942   E5                     PUSH   HL   
1943   11 03 00               LD   DE,3   
1946   B7                     OR   A   
1947   ED 52                  SBC   HL,DE   
1949   7D                     LD   A,L   
194A   B4                     OR   H   
194B   CA B1 19               JP   Z,expectM_2950S40   
194E   CD B0 0D               CALL   printStr   
1951   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
195F   CD B0 0D               CALL   printStr   
1962   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1971   21 03 00               LD   hl,3   
1974   E5                     PUSH   hl   
1975   E5                     PUSH   hl   
1976   CD E7 0E               CALL   run   
1979   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1987   CD B0 0D               CALL   printStr   
198A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1997   E1                     POP   hl   
1998   E5                     PUSH   hl   
1999   E5                     PUSH   hl   
199A   CD E7 0E               CALL   run   
199D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
19B0   76                     HALT      
19B1                EXPECTM_2950S40:      
19B1   E1                     POP   HL   
19B2                          ;*Macro unroll:  test "123 456 +", 123+456
19B2   31 00 34               LD   SP,STACK   
19B5   CD 1E 0E               CALL   coldInit   
19B8   CD AC 32               CALL   execStr   
19BB   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
19C5   E1                     POP   HL   
19C6   E5                     PUSH   HL   
19C7   11 43 02               LD   DE,123+456   
19CA   B7                     OR   A   
19CB   ED 52                  SBC   HL,DE   
19CD   7D                     LD   A,L   
19CE   B4                     OR   H   
19CF   CA 37 1A               JP   Z,expectM_2951S41   
19D2   CD B0 0D               CALL   printStr   
19D5   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
19E5   CD B0 0D               CALL   printStr   
19E8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19F7   21 43 02               LD   hl,123+456   
19FA   E5                     PUSH   hl   
19FB   E5                     PUSH   hl   
19FC   CD E7 0E               CALL   run   
19FF   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1A0D   CD B0 0D               CALL   printStr   
1A10   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A1D   E1                     POP   hl   
1A1E   E5                     PUSH   hl   
1A1F   E5                     PUSH   hl   
1A20   CD E7 0E               CALL   run   
1A23   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
1A36   76                     HALT      
1A37                EXPECTM_2951S41:      
1A37   E1                     POP   HL   
1A38                          ;*Macro unroll:  test "64 128 +", 64+128
1A38   31 00 34               LD   SP,STACK   
1A3B   CD 1E 0E               CALL   coldInit   
1A3E   CD AC 32               CALL   execStr   
1A41   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1A4A   E1                     POP   HL   
1A4B   E5                     PUSH   HL   
1A4C   11 C0 00               LD   DE,64+128   
1A4F   B7                     OR   A   
1A50   ED 52                  SBC   HL,DE   
1A52   7D                     LD   A,L   
1A53   B4                     OR   H   
1A54   CA BB 1A               JP   Z,expectM_2952S42   
1A57   CD B0 0D               CALL   printStr   
1A5A   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1A69   CD B0 0D               CALL   printStr   
1A6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A7B   21 C0 00               LD   hl,64+128   
1A7E   E5                     PUSH   hl   
1A7F   E5                     PUSH   hl   
1A80   CD E7 0E               CALL   run   
1A83   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1A91   CD B0 0D               CALL   printStr   
1A94   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AA1   E1                     POP   hl   
1AA2   E5                     PUSH   hl   
1AA3   E5                     PUSH   hl   
1AA4   CD E7 0E               CALL   run   
1AA7   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
1ABA   76                     HALT      
1ABB                EXPECTM_2952S42:      
1ABB   E1                     POP   HL   
1ABC                          ;*Macro unroll:  test "1 2 +", 3
1ABC   31 00 34               LD   SP,STACK   
1ABF   CD 1E 0E               CALL   coldInit   
1AC2   CD AC 32               CALL   execStr   
1AC5   31 20 32 20 2B 00      DB   "1 2 +",0   
1ACB   E1                     POP   HL   
1ACC   E5                     PUSH   HL   
1ACD   11 03 00               LD   DE,3   
1AD0   B7                     OR   A   
1AD1   ED 52                  SBC   HL,DE   
1AD3   7D                     LD   A,L   
1AD4   B4                     OR   H   
1AD5   CA 39 1B               JP   Z,expectM_2953S43   
1AD8   CD B0 0D               CALL   printStr   
1ADB   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1AE7   CD B0 0D               CALL   printStr   
1AEA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AF9   21 03 00               LD   hl,3   
1AFC   E5                     PUSH   hl   
1AFD   E5                     PUSH   hl   
1AFE   CD E7 0E               CALL   run   
1B01   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1B0F   CD B0 0D               CALL   printStr   
1B12   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B1F   E1                     POP   hl   
1B20   E5                     PUSH   hl   
1B21   E5                     PUSH   hl   
1B22   CD E7 0E               CALL   run   
1B25   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
1B38   76                     HALT      
1B39                EXPECTM_2953S43:      
1B39   E1                     POP   HL   
1B3A                          ;*Macro unroll:  test "1a= a++ a",2
1B3A   31 00 34               LD   SP,STACK   
1B3D   CD 1E 0E               CALL   coldInit   
1B40   CD AC 32               CALL   execStr   
1B43   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1B4D   E1                     POP   HL   
1B4E   E5                     PUSH   HL   
1B4F   11 02 00               LD   DE,2   
1B52   B7                     OR   A   
1B53   ED 52                  SBC   HL,DE   
1B55   7D                     LD   A,L   
1B56   B4                     OR   H   
1B57   CA BF 1B               JP   Z,expectM_2954S44   
1B5A   CD B0 0D               CALL   printStr   
1B5D   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1B6D   CD B0 0D               CALL   printStr   
1B70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B7F   21 02 00               LD   hl,2   
1B82   E5                     PUSH   hl   
1B83   E5                     PUSH   hl   
1B84   CD E7 0E               CALL   run   
1B87   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1B95   CD B0 0D               CALL   printStr   
1B98   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BA5   E1                     POP   hl   
1BA6   E5                     PUSH   hl   
1BA7   E5                     PUSH   hl   
1BA8   CD E7 0E               CALL   run   
1BAB   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
1BBE   76                     HALT      
1BBF                EXPECTM_2954S44:      
1BBF   E1                     POP   HL   
1BC0                          ;*Macro unroll:  test "-1 -1 -",0
1BC0   31 00 34               LD   SP,STACK   
1BC3   CD 1E 0E               CALL   coldInit   
1BC6   CD AC 32               CALL   execStr   
1BC9   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1BD1   E1                     POP   HL   
1BD2   E5                     PUSH   HL   
1BD3   11 00 00               LD   DE,0   
1BD6   B7                     OR   A   
1BD7   ED 52                  SBC   HL,DE   
1BD9   7D                     LD   A,L   
1BDA   B4                     OR   H   
1BDB   CA 41 1C               JP   Z,expectM_2955S45   
1BDE   CD B0 0D               CALL   printStr   
1BE1   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1BEF   CD B0 0D               CALL   printStr   
1BF2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C01   21 00 00               LD   hl,0   
1C04   E5                     PUSH   hl   
1C05   E5                     PUSH   hl   
1C06   CD E7 0E               CALL   run   
1C09   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1C17   CD B0 0D               CALL   printStr   
1C1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C27   E1                     POP   hl   
1C28   E5                     PUSH   hl   
1C29   E5                     PUSH   hl   
1C2A   CD E7 0E               CALL   run   
1C2D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
1C40   76                     HALT      
1C41                EXPECTM_2955S45:      
1C41   E1                     POP   HL   
1C42                          ;*Macro unroll:  test "5 3 -", 2
1C42   31 00 34               LD   SP,STACK   
1C45   CD 1E 0E               CALL   coldInit   
1C48   CD AC 32               CALL   execStr   
1C4B   35 20 33 20 2D 00      DB   "5 3 -",0   
1C51   E1                     POP   HL   
1C52   E5                     PUSH   HL   
1C53   11 02 00               LD   DE,2   
1C56   B7                     OR   A   
1C57   ED 52                  SBC   HL,DE   
1C59   7D                     LD   A,L   
1C5A   B4                     OR   H   
1C5B   CA BF 1C               JP   Z,expectM_2956S46   
1C5E   CD B0 0D               CALL   printStr   
1C61   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1C6D   CD B0 0D               CALL   printStr   
1C70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C7F   21 02 00               LD   hl,2   
1C82   E5                     PUSH   hl   
1C83   E5                     PUSH   hl   
1C84   CD E7 0E               CALL   run   
1C87   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1C95   CD B0 0D               CALL   printStr   
1C98   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CA5   E1                     POP   hl   
1CA6   E5                     PUSH   hl   
1CA7   E5                     PUSH   hl   
1CA8   CD E7 0E               CALL   run   
1CAB   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
1CBE   76                     HALT      
1CBF                EXPECTM_2956S46:      
1CBF   E1                     POP   HL   
1CC0                          ;*Macro unroll:  test "2 1 -",1
1CC0   31 00 34               LD   SP,STACK   
1CC3   CD 1E 0E               CALL   coldInit   
1CC6   CD AC 32               CALL   execStr   
1CC9   32 20 31 20 2D 00      DB   "2 1 -",0   
1CCF   E1                     POP   HL   
1CD0   E5                     PUSH   HL   
1CD1   11 01 00               LD   DE,1   
1CD4   B7                     OR   A   
1CD5   ED 52                  SBC   HL,DE   
1CD7   7D                     LD   A,L   
1CD8   B4                     OR   H   
1CD9   CA 3D 1D               JP   Z,expectM_2957S47   
1CDC   CD B0 0D               CALL   printStr   
1CDF   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1CEB   CD B0 0D               CALL   printStr   
1CEE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CFD   21 01 00               LD   hl,1   
1D00   E5                     PUSH   hl   
1D01   E5                     PUSH   hl   
1D02   CD E7 0E               CALL   run   
1D05   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1D13   CD B0 0D               CALL   printStr   
1D16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D23   E1                     POP   hl   
1D24   E5                     PUSH   hl   
1D25   E5                     PUSH   hl   
1D26   CD E7 0E               CALL   run   
1D29   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
1D3C   76                     HALT      
1D3D                EXPECTM_2957S47:      
1D3D   E1                     POP   HL   
1D3E                          ;*Macro unroll:  test "3a= a-- a",2
1D3E   31 00 34               LD   SP,STACK   
1D41   CD 1E 0E               CALL   coldInit   
1D44   CD AC 32               CALL   execStr   
1D47   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1D51   E1                     POP   HL   
1D52   E5                     PUSH   HL   
1D53   11 02 00               LD   DE,2   
1D56   B7                     OR   A   
1D57   ED 52                  SBC   HL,DE   
1D59   7D                     LD   A,L   
1D5A   B4                     OR   H   
1D5B   CA C3 1D               JP   Z,expectM_2958S48   
1D5E   CD B0 0D               CALL   printStr   
1D61   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1D71   CD B0 0D               CALL   printStr   
1D74   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D83   21 02 00               LD   hl,2   
1D86   E5                     PUSH   hl   
1D87   E5                     PUSH   hl   
1D88   CD E7 0E               CALL   run   
1D8B   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1D99   CD B0 0D               CALL   printStr   
1D9C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DA9   E1                     POP   hl   
1DAA   E5                     PUSH   hl   
1DAB   E5                     PUSH   hl   
1DAC   CD E7 0E               CALL   run   
1DAF   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
1DC2   76                     HALT      
1DC3                EXPECTM_2958S48:      
1DC3   E1                     POP   HL   
1DC4                          ;*Macro unroll:  test "3 5 &", 1
1DC4   31 00 34               LD   SP,STACK   
1DC7   CD 1E 0E               CALL   coldInit   
1DCA   CD AC 32               CALL   execStr   
1DCD   33 20 35 20 26 00      DB   "3 5 &",0   
1DD3   E1                     POP   HL   
1DD4   E5                     PUSH   HL   
1DD5   11 01 00               LD   DE,1   
1DD8   B7                     OR   A   
1DD9   ED 52                  SBC   HL,DE   
1DDB   7D                     LD   A,L   
1DDC   B4                     OR   H   
1DDD   CA 41 1E               JP   Z,expectM_2959S49   
1DE0   CD B0 0D               CALL   printStr   
1DE3   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1DEF   CD B0 0D               CALL   printStr   
1DF2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E01   21 01 00               LD   hl,1   
1E04   E5                     PUSH   hl   
1E05   E5                     PUSH   hl   
1E06   CD E7 0E               CALL   run   
1E09   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1E17   CD B0 0D               CALL   printStr   
1E1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E27   E1                     POP   hl   
1E28   E5                     PUSH   hl   
1E29   E5                     PUSH   hl   
1E2A   CD E7 0E               CALL   run   
1E2D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
1E40   76                     HALT      
1E41                EXPECTM_2959S49:      
1E41   E1                     POP   HL   
1E42                          ;*Macro unroll:  test "3 5 |", 7
1E42   31 00 34               LD   SP,STACK   
1E45   CD 1E 0E               CALL   coldInit   
1E48   CD AC 32               CALL   execStr   
1E4B   33 20 35 20 7C 00      DB   "3 5 |",0   
1E51   E1                     POP   HL   
1E52   E5                     PUSH   HL   
1E53   11 07 00               LD   DE,7   
1E56   B7                     OR   A   
1E57   ED 52                  SBC   HL,DE   
1E59   7D                     LD   A,L   
1E5A   B4                     OR   H   
1E5B   CA BF 1E               JP   Z,expectM_2960S50   
1E5E   CD B0 0D               CALL   printStr   
1E61   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1E6D   CD B0 0D               CALL   printStr   
1E70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E7F   21 07 00               LD   hl,7   
1E82   E5                     PUSH   hl   
1E83   E5                     PUSH   hl   
1E84   CD E7 0E               CALL   run   
1E87   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1E95   CD B0 0D               CALL   printStr   
1E98   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EA5   E1                     POP   hl   
1EA6   E5                     PUSH   hl   
1EA7   E5                     PUSH   hl   
1EA8   CD E7 0E               CALL   run   
1EAB   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
1EBE   76                     HALT      
1EBF                EXPECTM_2960S50:      
1EBF   E1                     POP   HL   
1EC0                          ;*Macro unroll:  test "3 5 /xor", 6
1EC0   31 00 34               LD   SP,STACK   
1EC3   CD 1E 0E               CALL   coldInit   
1EC6   CD AC 32               CALL   execStr   
1EC9   33 20 35 20 2F 78 6F 72 00 DB   "3 5 /xor",0   
1ED2   E1                     POP   HL   
1ED3   E5                     PUSH   HL   
1ED4   11 06 00               LD   DE,6   
1ED7   B7                     OR   A   
1ED8   ED 52                  SBC   HL,DE   
1EDA   7D                     LD   A,L   
1EDB   B4                     OR   H   
1EDC   CA 43 1F               JP   Z,expectM_2961S51   
1EDF   CD B0 0D               CALL   printStr   
1EE2   43 6F 64 65 3A 20 33 20 35 20 2F 78 6F 72 00 .CSTR   "Code: ","3 5 /xor"   
1EF1   CD B0 0D               CALL   printStr   
1EF4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F03   21 06 00               LD   hl,6   
1F06   E5                     PUSH   hl   
1F07   E5                     PUSH   hl   
1F08   CD E7 0E               CALL   run   
1F0B   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1F19   CD B0 0D               CALL   printStr   
1F1C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F29   E1                     POP   hl   
1F2A   E5                     PUSH   hl   
1F2B   E5                     PUSH   hl   
1F2C   CD E7 0E               CALL   run   
1F2F   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
1F42   76                     HALT      
1F43                EXPECTM_2961S51:      
1F43   E1                     POP   HL   
1F44                          ;*Macro unroll:  test "3a= 5 a/xor a= a",6
1F44   31 00 34               LD   SP,STACK   
1F47   CD 1E 0E               CALL   coldInit   
1F4A   CD AC 32               CALL   execStr   
1F4D   33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 DB   "3a= 5 a/xor a= a",0   
1F5E   E1                     POP   HL   
1F5F   E5                     PUSH   HL   
1F60   11 06 00               LD   DE,6   
1F63   B7                     OR   A   
1F64   ED 52                  SBC   HL,DE   
1F66   7D                     LD   A,L   
1F67   B4                     OR   H   
1F68   CA D7 1F               JP   Z,expectM_2962S52   
1F6B   CD B0 0D               CALL   printStr   
1F6E   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/xor a= a"   
1F85   CD B0 0D               CALL   printStr   
1F88   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F97   21 06 00               LD   hl,6   
1F9A   E5                     PUSH   hl   
1F9B   E5                     PUSH   hl   
1F9C   CD E7 0E               CALL   run   
1F9F   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
1FAD   CD B0 0D               CALL   printStr   
1FB0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FBD   E1                     POP   hl   
1FBE   E5                     PUSH   hl   
1FBF   E5                     PUSH   hl   
1FC0   CD E7 0E               CALL   run   
1FC3   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
1FD6   76                     HALT      
1FD7                EXPECTM_2962S52:      
1FD7   E1                     POP   HL   
1FD8                          ;*Macro unroll:  test "0 !", true
1FD8   31 00 34               LD   SP,STACK   
1FDB   CD 1E 0E               CALL   coldInit   
1FDE   CD AC 32               CALL   execStr   
1FE1   30 20 21 00            DB   "0 !",0   
1FE5   E1                     POP   HL   
1FE6   E5                     PUSH   HL   
1FE7   11 FF FF               LD   DE,true   
1FEA   B7                     OR   A   
1FEB   ED 52                  SBC   HL,DE   
1FED   7D                     LD   A,L   
1FEE   B4                     OR   H   
1FEF   CA 51 20               JP   Z,expectM_2963S53   
1FF2   CD B0 0D               CALL   printStr   
1FF5   43 6F 64 65 3A 20 30 20 21 00 .CSTR   "Code: ","0 !"   
1FFF   CD B0 0D               CALL   printStr   
2002   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2011   21 FF FF               LD   hl,true   
2014   E5                     PUSH   hl   
2015   E5                     PUSH   hl   
2016   CD E7 0E               CALL   run   
2019   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2027   CD B0 0D               CALL   printStr   
202A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2037   E1                     POP   hl   
2038   E5                     PUSH   hl   
2039   E5                     PUSH   hl   
203A   CD E7 0E               CALL   run   
203D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
2050   76                     HALT      
2051                EXPECTM_2963S53:      
2051   E1                     POP   HL   
2052                          ;*Macro unroll:  test "2 !", false
2052   31 00 34               LD   SP,STACK   
2055   CD 1E 0E               CALL   coldInit   
2058   CD AC 32               CALL   execStr   
205B   32 20 21 00            DB   "2 !",0   
205F   E1                     POP   HL   
2060   E5                     PUSH   HL   
2061   11 00 00               LD   DE,false   
2064   B7                     OR   A   
2065   ED 52                  SBC   HL,DE   
2067   7D                     LD   A,L   
2068   B4                     OR   H   
2069   CA CB 20               JP   Z,expectM_2964S54   
206C   CD B0 0D               CALL   printStr   
206F   43 6F 64 65 3A 20 32 20 21 00 .CSTR   "Code: ","2 !"   
2079   CD B0 0D               CALL   printStr   
207C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
208B   21 00 00               LD   hl,false   
208E   E5                     PUSH   hl   
208F   E5                     PUSH   hl   
2090   CD E7 0E               CALL   run   
2093   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
20A1   CD B0 0D               CALL   printStr   
20A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20B1   E1                     POP   hl   
20B2   E5                     PUSH   hl   
20B3   E5                     PUSH   hl   
20B4   CD E7 0E               CALL   run   
20B7   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
20CA   76                     HALT      
20CB                EXPECTM_2964S54:      
20CB   E1                     POP   HL   
20CC                          ;*Macro unroll:  test "0 !!", false
20CC   31 00 34               LD   SP,STACK   
20CF   CD 1E 0E               CALL   coldInit   
20D2   CD AC 32               CALL   execStr   
20D5   30 20 21 21 00         DB   "0 !!",0   
20DA   E1                     POP   HL   
20DB   E5                     PUSH   HL   
20DC   11 00 00               LD   DE,false   
20DF   B7                     OR   A   
20E0   ED 52                  SBC   HL,DE   
20E2   7D                     LD   A,L   
20E3   B4                     OR   H   
20E4   CA 47 21               JP   Z,expectM_2965S55   
20E7   CD B0 0D               CALL   printStr   
20EA   43 6F 64 65 3A 20 30 20 21 21 00 .CSTR   "Code: ","0 !!"   
20F5   CD B0 0D               CALL   printStr   
20F8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2107   21 00 00               LD   hl,false   
210A   E5                     PUSH   hl   
210B   E5                     PUSH   hl   
210C   CD E7 0E               CALL   run   
210F   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
211D   CD B0 0D               CALL   printStr   
2120   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
212D   E1                     POP   hl   
212E   E5                     PUSH   hl   
212F   E5                     PUSH   hl   
2130   CD E7 0E               CALL   run   
2133   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
2146   76                     HALT      
2147                EXPECTM_2965S55:      
2147   E1                     POP   HL   
2148                          ;*Macro unroll:  test "2 !!", true
2148   31 00 34               LD   SP,STACK   
214B   CD 1E 0E               CALL   coldInit   
214E   CD AC 32               CALL   execStr   
2151   32 20 21 21 00         DB   "2 !!",0   
2156   E1                     POP   HL   
2157   E5                     PUSH   HL   
2158   11 FF FF               LD   DE,true   
215B   B7                     OR   A   
215C   ED 52                  SBC   HL,DE   
215E   7D                     LD   A,L   
215F   B4                     OR   H   
2160   CA C3 21               JP   Z,expectM_2966S56   
2163   CD B0 0D               CALL   printStr   
2166   43 6F 64 65 3A 20 32 20 21 21 00 .CSTR   "Code: ","2 !!"   
2171   CD B0 0D               CALL   printStr   
2174   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2183   21 FF FF               LD   hl,true   
2186   E5                     PUSH   hl   
2187   E5                     PUSH   hl   
2188   CD E7 0E               CALL   run   
218B   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2199   CD B0 0D               CALL   printStr   
219C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21A9   E1                     POP   hl   
21AA   E5                     PUSH   hl   
21AB   E5                     PUSH   hl   
21AC   CD E7 0E               CALL   run   
21AF   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
21C2   76                     HALT      
21C3                EXPECTM_2966S56:      
21C3   E1                     POP   HL   
21C4                          ;*Macro unroll:  test "2 3 *", 6
21C4   31 00 34               LD   SP,STACK   
21C7   CD 1E 0E               CALL   coldInit   
21CA   CD AC 32               CALL   execStr   
21CD   32 20 33 20 2A 00      DB   "2 3 *",0   
21D3   E1                     POP   HL   
21D4   E5                     PUSH   HL   
21D5   11 06 00               LD   DE,6   
21D8   B7                     OR   A   
21D9   ED 52                  SBC   HL,DE   
21DB   7D                     LD   A,L   
21DC   B4                     OR   H   
21DD   CA 41 22               JP   Z,expectM_2967S57   
21E0   CD B0 0D               CALL   printStr   
21E3   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
21EF   CD B0 0D               CALL   printStr   
21F2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2201   21 06 00               LD   hl,6   
2204   E5                     PUSH   hl   
2205   E5                     PUSH   hl   
2206   CD E7 0E               CALL   run   
2209   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2217   CD B0 0D               CALL   printStr   
221A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2227   E1                     POP   hl   
2228   E5                     PUSH   hl   
2229   E5                     PUSH   hl   
222A   CD E7 0E               CALL   run   
222D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
2240   76                     HALT      
2241                EXPECTM_2967S57:      
2241   E1                     POP   HL   
2242                          ;*Macro unroll:  test "1 2 3 + *", 5
2242   31 00 34               LD   SP,STACK   
2245   CD 1E 0E               CALL   coldInit   
2248   CD AC 32               CALL   execStr   
224B   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
2255   E1                     POP   HL   
2256   E5                     PUSH   HL   
2257   11 05 00               LD   DE,5   
225A   B7                     OR   A   
225B   ED 52                  SBC   HL,DE   
225D   7D                     LD   A,L   
225E   B4                     OR   H   
225F   CA C7 22               JP   Z,expectM_2968S58   
2262   CD B0 0D               CALL   printStr   
2265   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
2275   CD B0 0D               CALL   printStr   
2278   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2287   21 05 00               LD   hl,5   
228A   E5                     PUSH   hl   
228B   E5                     PUSH   hl   
228C   CD E7 0E               CALL   run   
228F   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
229D   CD B0 0D               CALL   printStr   
22A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22AD   E1                     POP   hl   
22AE   E5                     PUSH   hl   
22AF   E5                     PUSH   hl   
22B0   CD E7 0E               CALL   run   
22B3   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
22C6   76                     HALT      
22C7                EXPECTM_2968S58:      
22C7   E1                     POP   HL   
22C8                          ;*Macro unroll:  test "7 3 /", 2
22C8   31 00 34               LD   SP,STACK   
22CB   CD 1E 0E               CALL   coldInit   
22CE   CD AC 32               CALL   execStr   
22D1   37 20 33 20 2F 00      DB   "7 3 /",0   
22D7   E1                     POP   HL   
22D8   E5                     PUSH   HL   
22D9   11 02 00               LD   DE,2   
22DC   B7                     OR   A   
22DD   ED 52                  SBC   HL,DE   
22DF   7D                     LD   A,L   
22E0   B4                     OR   H   
22E1   CA 45 23               JP   Z,expectM_2969S59   
22E4   CD B0 0D               CALL   printStr   
22E7   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
22F3   CD B0 0D               CALL   printStr   
22F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2305   21 02 00               LD   hl,2   
2308   E5                     PUSH   hl   
2309   E5                     PUSH   hl   
230A   CD E7 0E               CALL   run   
230D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
231B   CD B0 0D               CALL   printStr   
231E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
232B   E1                     POP   hl   
232C   E5                     PUSH   hl   
232D   E5                     PUSH   hl   
232E   CD E7 0E               CALL   run   
2331   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
2344   76                     HALT      
2345                EXPECTM_2969S59:      
2345   E1                     POP   HL   
2346                          ;*Macro unroll:  test "100a= 1a+= a", 101
2346   31 00 34               LD   SP,STACK   
2349   CD 1E 0E               CALL   coldInit   
234C   CD AC 32               CALL   execStr   
234F   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
235C   E1                     POP   HL   
235D   E5                     PUSH   HL   
235E   11 65 00               LD   DE,101   
2361   B7                     OR   A   
2362   ED 52                  SBC   HL,DE   
2364   7D                     LD   A,L   
2365   B4                     OR   H   
2366   CA D1 23               JP   Z,expectM_2970S60   
2369   CD B0 0D               CALL   printStr   
236C   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
237F   CD B0 0D               CALL   printStr   
2382   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2391   21 65 00               LD   hl,101   
2394   E5                     PUSH   hl   
2395   E5                     PUSH   hl   
2396   CD E7 0E               CALL   run   
2399   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
23A7   CD B0 0D               CALL   printStr   
23AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23B7   E1                     POP   hl   
23B8   E5                     PUSH   hl   
23B9   E5                     PUSH   hl   
23BA   CD E7 0E               CALL   run   
23BD   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
23D0   76                     HALT      
23D1                EXPECTM_2970S60:      
23D1   E1                     POP   HL   
23D2                          ;*Macro unroll:  test "100a= 1a-= a", 99
23D2   31 00 34               LD   SP,STACK   
23D5   CD 1E 0E               CALL   coldInit   
23D8   CD AC 32               CALL   execStr   
23DB   31 30 30 61 3D 20 31 61 2D 3D 20 61 00 DB   "100a= 1a-= a",0   
23E8   E1                     POP   HL   
23E9   E5                     PUSH   HL   
23EA   11 63 00               LD   DE,99   
23ED   B7                     OR   A   
23EE   ED 52                  SBC   HL,DE   
23F0   7D                     LD   A,L   
23F1   B4                     OR   H   
23F2   CA 5D 24               JP   Z,expectM_2971S61   
23F5   CD B0 0D               CALL   printStr   
23F8   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2D 3D 20 61 00 .CSTR   "Code: ","100a= 1a-= a"   
240B   CD B0 0D               CALL   printStr   
240E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
241D   21 63 00               LD   hl,99   
2420   E5                     PUSH   hl   
2421   E5                     PUSH   hl   
2422   CD E7 0E               CALL   run   
2425   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2433   CD B0 0D               CALL   printStr   
2436   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2443   E1                     POP   hl   
2444   E5                     PUSH   hl   
2445   E5                     PUSH   hl   
2446   CD E7 0E               CALL   run   
2449   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
245C   76                     HALT      
245D                EXPECTM_2971S61:      
245D   E1                     POP   HL   
245E                          ;*Macro unroll:  test "100a= 2 a*= a", 200
245E   31 00 34               LD   SP,STACK   
2461   CD 1E 0E               CALL   coldInit   
2464   CD AC 32               CALL   execStr   
2467   31 30 30 61 3D 20 32 20 61 2A 3D 20 61 00 DB   "100a= 2 a*= a",0   
2475   E1                     POP   HL   
2476   E5                     PUSH   HL   
2477   11 C8 00               LD   DE,200   
247A   B7                     OR   A   
247B   ED 52                  SBC   HL,DE   
247D   7D                     LD   A,L   
247E   B4                     OR   H   
247F   CA EB 24               JP   Z,expectM_2972S62   
2482   CD B0 0D               CALL   printStr   
2485   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 20 61 2A 3D 20 61 00 .CSTR   "Code: ","100a= 2 a*= a"   
2499   CD B0 0D               CALL   printStr   
249C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24AB   21 C8 00               LD   hl,200   
24AE   E5                     PUSH   hl   
24AF   E5                     PUSH   hl   
24B0   CD E7 0E               CALL   run   
24B3   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
24C1   CD B0 0D               CALL   printStr   
24C4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24D1   E1                     POP   hl   
24D2   E5                     PUSH   hl   
24D3   E5                     PUSH   hl   
24D4   CD E7 0E               CALL   run   
24D7   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
24EA   76                     HALT      
24EB                EXPECTM_2972S62:      
24EB   E1                     POP   HL   
24EC                          ;*Macro unroll:  test "100a= 2 a/= a", 50
24EC   31 00 34               LD   SP,STACK   
24EF   CD 1E 0E               CALL   coldInit   
24F2   CD AC 32               CALL   execStr   
24F5   31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 DB   "100a= 2 a/= a",0   
2503   E1                     POP   HL   
2504   E5                     PUSH   HL   
2505   11 32 00               LD   DE,50   
2508   B7                     OR   A   
2509   ED 52                  SBC   HL,DE   
250B   7D                     LD   A,L   
250C   B4                     OR   H   
250D   CA 79 25               JP   Z,expectM_2973S63   
2510   CD B0 0D               CALL   printStr   
2513   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 .CSTR   "Code: ","100a= 2 a/= a"   
2527   CD B0 0D               CALL   printStr   
252A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2539   21 32 00               LD   hl,50   
253C   E5                     PUSH   hl   
253D   E5                     PUSH   hl   
253E   CD E7 0E               CALL   run   
2541   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
254F   CD B0 0D               CALL   printStr   
2552   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
255F   E1                     POP   hl   
2560   E5                     PUSH   hl   
2561   E5                     PUSH   hl   
2562   CD E7 0E               CALL   run   
2565   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
2578   76                     HALT      
2579                EXPECTM_2973S63:      
2579   E1                     POP   HL   
257A                          ;*Macro unroll:  test "2a= 3b= a b+= b", 5
257A   31 00 34               LD   SP,STACK   
257D   CD 1E 0E               CALL   coldInit   
2580   CD AC 32               CALL   execStr   
2583   32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 DB   "2a= 3b= a b+= b",0   
2593   E1                     POP   HL   
2594   E5                     PUSH   HL   
2595   11 05 00               LD   DE,5   
2598   B7                     OR   A   
2599   ED 52                  SBC   HL,DE   
259B   7D                     LD   A,L   
259C   B4                     OR   H   
259D   CA 0B 26               JP   Z,expectM_2974S64   
25A0   CD B0 0D               CALL   printStr   
25A3   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b+= b"   
25B9   CD B0 0D               CALL   printStr   
25BC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25CB   21 05 00               LD   hl,5   
25CE   E5                     PUSH   hl   
25CF   E5                     PUSH   hl   
25D0   CD E7 0E               CALL   run   
25D3   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
25E1   CD B0 0D               CALL   printStr   
25E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25F1   E1                     POP   hl   
25F2   E5                     PUSH   hl   
25F3   E5                     PUSH   hl   
25F4   CD E7 0E               CALL   run   
25F7   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
260A   76                     HALT      
260B                EXPECTM_2974S64:      
260B   E1                     POP   HL   
260C                          ;*Macro unroll:  test "2a= 3b= a b-= b", 1
260C   31 00 34               LD   SP,STACK   
260F   CD 1E 0E               CALL   coldInit   
2612   CD AC 32               CALL   execStr   
2615   32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 DB   "2a= 3b= a b-= b",0   
2625   E1                     POP   HL   
2626   E5                     PUSH   HL   
2627   11 01 00               LD   DE,1   
262A   B7                     OR   A   
262B   ED 52                  SBC   HL,DE   
262D   7D                     LD   A,L   
262E   B4                     OR   H   
262F   CA 9D 26               JP   Z,expectM_2975S65   
2632   CD B0 0D               CALL   printStr   
2635   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b-= b"   
264B   CD B0 0D               CALL   printStr   
264E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
265D   21 01 00               LD   hl,1   
2660   E5                     PUSH   hl   
2661   E5                     PUSH   hl   
2662   CD E7 0E               CALL   run   
2665   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2673   CD B0 0D               CALL   printStr   
2676   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2683   E1                     POP   hl   
2684   E5                     PUSH   hl   
2685   E5                     PUSH   hl   
2686   CD E7 0E               CALL   run   
2689   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
269C   76                     HALT      
269D                EXPECTM_2975S65:      
269D   E1                     POP   HL   
269E                          ;*Macro unroll:  test "2a= 3b= a b*= b", 6
269E   31 00 34               LD   SP,STACK   
26A1   CD 1E 0E               CALL   coldInit   
26A4   CD AC 32               CALL   execStr   
26A7   32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 DB   "2a= 3b= a b*= b",0   
26B7   E1                     POP   HL   
26B8   E5                     PUSH   HL   
26B9   11 06 00               LD   DE,6   
26BC   B7                     OR   A   
26BD   ED 52                  SBC   HL,DE   
26BF   7D                     LD   A,L   
26C0   B4                     OR   H   
26C1   CA 2F 27               JP   Z,expectM_2976S66   
26C4   CD B0 0D               CALL   printStr   
26C7   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b*= b"   
26DD   CD B0 0D               CALL   printStr   
26E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26EF   21 06 00               LD   hl,6   
26F2   E5                     PUSH   hl   
26F3   E5                     PUSH   hl   
26F4   CD E7 0E               CALL   run   
26F7   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2705   CD B0 0D               CALL   printStr   
2708   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2715   E1                     POP   hl   
2716   E5                     PUSH   hl   
2717   E5                     PUSH   hl   
2718   CD E7 0E               CALL   run   
271B   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
272E   76                     HALT      
272F                EXPECTM_2976S66:      
272F   E1                     POP   HL   
2730                          ;*Macro unroll:  test "2a= 6b= a b/= b", 3
2730   31 00 34               LD   SP,STACK   
2733   CD 1E 0E               CALL   coldInit   
2736   CD AC 32               CALL   execStr   
2739   32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 DB   "2a= 6b= a b/= b",0   
2749   E1                     POP   HL   
274A   E5                     PUSH   HL   
274B   11 03 00               LD   DE,3   
274E   B7                     OR   A   
274F   ED 52                  SBC   HL,DE   
2751   7D                     LD   A,L   
2752   B4                     OR   H   
2753   CA C1 27               JP   Z,expectM_2977S67   
2756   CD B0 0D               CALL   printStr   
2759   43 6F 64 65 3A 20 32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 .CSTR   "Code: ","2a= 6b= a b/= b"   
276F   CD B0 0D               CALL   printStr   
2772   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2781   21 03 00               LD   hl,3   
2784   E5                     PUSH   hl   
2785   E5                     PUSH   hl   
2786   CD E7 0E               CALL   run   
2789   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2797   CD B0 0D               CALL   printStr   
279A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27A7   E1                     POP   hl   
27A8   E5                     PUSH   hl   
27A9   E5                     PUSH   hl   
27AA   CD E7 0E               CALL   run   
27AD   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
27C0   76                     HALT      
27C1                EXPECTM_2977S67:      
27C1   E1                     POP   HL   
27C2                          ;*Macro unroll:  test "$55a= $AAa&= a",0
27C2   31 00 34               LD   SP,STACK   
27C5   CD 1E 0E               CALL   coldInit   
27C8   CD AC 32               CALL   execStr   
27CB   24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 DB   "$55a= $AAa&= a",0   
27DA   E1                     POP   HL   
27DB   E5                     PUSH   HL   
27DC   11 00 00               LD   DE,0   
27DF   B7                     OR   A   
27E0   ED 52                  SBC   HL,DE   
27E2   7D                     LD   A,L   
27E3   B4                     OR   H   
27E4   CA 51 28               JP   Z,expectM_2978S68   
27E7   CD B0 0D               CALL   printStr   
27EA   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa&= a"   
27FF   CD B0 0D               CALL   printStr   
2802   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2811   21 00 00               LD   hl,0   
2814   E5                     PUSH   hl   
2815   E5                     PUSH   hl   
2816   CD E7 0E               CALL   run   
2819   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2827   CD B0 0D               CALL   printStr   
282A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2837   E1                     POP   hl   
2838   E5                     PUSH   hl   
2839   E5                     PUSH   hl   
283A   CD E7 0E               CALL   run   
283D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
2850   76                     HALT      
2851                EXPECTM_2978S68:      
2851   E1                     POP   HL   
2852                          ;*Macro unroll:  test "$55a= $AAa|= a",$FF
2852   31 00 34               LD   SP,STACK   
2855   CD 1E 0E               CALL   coldInit   
2858   CD AC 32               CALL   execStr   
285B   24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 DB   "$55a= $AAa|= a",0   
286A   E1                     POP   HL   
286B   E5                     PUSH   HL   
286C   11 FF 00               LD   DE,$FF   
286F   B7                     OR   A   
2870   ED 52                  SBC   HL,DE   
2872   7D                     LD   A,L   
2873   B4                     OR   H   
2874   CA E1 28               JP   Z,expectM_2979S69   
2877   CD B0 0D               CALL   printStr   
287A   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa|= a"   
288F   CD B0 0D               CALL   printStr   
2892   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28A1   21 FF 00               LD   hl,$FF   
28A4   E5                     PUSH   hl   
28A5   E5                     PUSH   hl   
28A6   CD E7 0E               CALL   run   
28A9   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
28B7   CD B0 0D               CALL   printStr   
28BA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28C7   E1                     POP   hl   
28C8   E5                     PUSH   hl   
28C9   E5                     PUSH   hl   
28CA   CD E7 0E               CALL   run   
28CD   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
28E0   76                     HALT      
28E1                EXPECTM_2979S69:      
28E1   E1                     POP   HL   
28E2                          ;*Macro unroll:  test "$A5a= $AAa /xor= a",$0F
28E2   31 00 34               LD   SP,STACK   
28E5   CD 1E 0E               CALL   coldInit   
28E8   CD AC 32               CALL   execStr   
28EB   24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 DB   "$A5a= $AAa /xor= a",0   
28FE   E1                     POP   HL   
28FF   E5                     PUSH   HL   
2900   11 0F 00               LD   DE,$0F   
2903   B7                     OR   A   
2904   ED 52                  SBC   HL,DE   
2906   7D                     LD   A,L   
2907   B4                     OR   H   
2908   CA 79 29               JP   Z,expectM_2980S70   
290B   CD B0 0D               CALL   printStr   
290E   43 6F 64 65 3A 20 24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 .CSTR   "Code: ","$A5a= $AAa /xor= a"   
2927   CD B0 0D               CALL   printStr   
292A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2939   21 0F 00               LD   hl,$0F   
293C   E5                     PUSH   hl   
293D   E5                     PUSH   hl   
293E   CD E7 0E               CALL   run   
2941   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
294F   CD B0 0D               CALL   printStr   
2952   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
295F   E1                     POP   hl   
2960   E5                     PUSH   hl   
2961   E5                     PUSH   hl   
2962   CD E7 0E               CALL   run   
2965   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
2978   76                     HALT      
2979                EXPECTM_2980S70:      
2979   E1                     POP   HL   
297A                          ;*Macro unroll:  test "$00AA~",$FF55
297A   31 00 34               LD   SP,STACK   
297D   CD 1E 0E               CALL   coldInit   
2980   CD AC 32               CALL   execStr   
2983   24 30 30 41 41 7E 00   DB   "$00AA~",0   
298A   E1                     POP   HL   
298B   E5                     PUSH   HL   
298C   11 55 FF               LD   DE,$FF55   
298F   B7                     OR   A   
2990   ED 52                  SBC   HL,DE   
2992   7D                     LD   A,L   
2993   B4                     OR   H   
2994   CA F9 29               JP   Z,expectM_2981S71   
2997   CD B0 0D               CALL   printStr   
299A   43 6F 64 65 3A 20 24 30 30 41 41 7E 00 .CSTR   "Code: ","$00AA~"   
29A7   CD B0 0D               CALL   printStr   
29AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29B9   21 55 FF               LD   hl,$FF55   
29BC   E5                     PUSH   hl   
29BD   E5                     PUSH   hl   
29BE   CD E7 0E               CALL   run   
29C1   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
29CF   CD B0 0D               CALL   printStr   
29D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29DF   E1                     POP   hl   
29E0   E5                     PUSH   hl   
29E1   E5                     PUSH   hl   
29E2   CD E7 0E               CALL   run   
29E5   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
29F8   76                     HALT      
29F9                EXPECTM_2981S71:      
29F9   E1                     POP   HL   
29FA                          ;*Macro unroll:  test "$AAAAa= a~= a",$5555
29FA   31 00 34               LD   SP,STACK   
29FD   CD 1E 0E               CALL   coldInit   
2A00   CD AC 32               CALL   execStr   
2A03   24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 DB   "$AAAAa= a~= a",0   
2A11   E1                     POP   HL   
2A12   E5                     PUSH   HL   
2A13   11 55 55               LD   DE,$5555   
2A16   B7                     OR   A   
2A17   ED 52                  SBC   HL,DE   
2A19   7D                     LD   A,L   
2A1A   B4                     OR   H   
2A1B   CA 87 2A               JP   Z,expectM_2982S72   
2A1E   CD B0 0D               CALL   printStr   
2A21   43 6F 64 65 3A 20 24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 .CSTR   "Code: ","$AAAAa= a~= a"   
2A35   CD B0 0D               CALL   printStr   
2A38   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A47   21 55 55               LD   hl,$5555   
2A4A   E5                     PUSH   hl   
2A4B   E5                     PUSH   hl   
2A4C   CD E7 0E               CALL   run   
2A4F   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2A5D   CD B0 0D               CALL   printStr   
2A60   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A6D   E1                     POP   hl   
2A6E   E5                     PUSH   hl   
2A6F   E5                     PUSH   hl   
2A70   CD E7 0E               CALL   run   
2A73   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
2A86   76                     HALT      
2A87                EXPECTM_2982S72:      
2A87   E1                     POP   HL   
2A88                          ;*Macro unroll:  test "3x= 1 x <<= x", 6
2A88   31 00 34               LD   SP,STACK   
2A8B   CD 1E 0E               CALL   coldInit   
2A8E   CD AC 32               CALL   execStr   
2A91   33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 DB   "3x= 1 x <<= x",0   
2A9F   E1                     POP   HL   
2AA0   E5                     PUSH   HL   
2AA1   11 06 00               LD   DE,6   
2AA4   B7                     OR   A   
2AA5   ED 52                  SBC   HL,DE   
2AA7   7D                     LD   A,L   
2AA8   B4                     OR   H   
2AA9   CA 15 2B               JP   Z,expectM_2983S73   
2AAC   CD B0 0D               CALL   printStr   
2AAF   43 6F 64 65 3A 20 33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 .CSTR   "Code: ","3x= 1 x <<= x"   
2AC3   CD B0 0D               CALL   printStr   
2AC6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AD5   21 06 00               LD   hl,6   
2AD8   E5                     PUSH   hl   
2AD9   E5                     PUSH   hl   
2ADA   CD E7 0E               CALL   run   
2ADD   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2AEB   CD B0 0D               CALL   printStr   
2AEE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AFB   E1                     POP   hl   
2AFC   E5                     PUSH   hl   
2AFD   E5                     PUSH   hl   
2AFE   CD E7 0E               CALL   run   
2B01   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
2B14   76                     HALT      
2B15                EXPECTM_2983S73:      
2B15   E1                     POP   HL   
2B16                          ;*Macro unroll:  test "10x= 1 x >>= x", 5
2B16   31 00 34               LD   SP,STACK   
2B19   CD 1E 0E               CALL   coldInit   
2B1C   CD AC 32               CALL   execStr   
2B1F   31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 DB   "10x= 1 x >>= x",0   
2B2E   E1                     POP   HL   
2B2F   E5                     PUSH   HL   
2B30   11 05 00               LD   DE,5   
2B33   B7                     OR   A   
2B34   ED 52                  SBC   HL,DE   
2B36   7D                     LD   A,L   
2B37   B4                     OR   H   
2B38   CA A5 2B               JP   Z,expectM_2984S74   
2B3B   CD B0 0D               CALL   printStr   
2B3E   43 6F 64 65 3A 20 31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 .CSTR   "Code: ","10x= 1 x >>= x"   
2B53   CD B0 0D               CALL   printStr   
2B56   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B65   21 05 00               LD   hl,5   
2B68   E5                     PUSH   hl   
2B69   E5                     PUSH   hl   
2B6A   CD E7 0E               CALL   run   
2B6D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2B7B   CD B0 0D               CALL   printStr   
2B7E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B8B   E1                     POP   hl   
2B8C   E5                     PUSH   hl   
2B8D   E5                     PUSH   hl   
2B8E   CD E7 0E               CALL   run   
2B91   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
2BA4   76                     HALT      
2BA5                EXPECTM_2984S74:      
2BA5   E1                     POP   HL   
2BA6                          ;*Macro unroll:  test "7 3 / /remain", 1
2BA6   31 00 34               LD   SP,STACK   
2BA9   CD 1E 0E               CALL   coldInit   
2BAC   CD AC 32               CALL   execStr   
2BAF   37 20 33 20 2F 20 2F 72 65 6D 61 69 6E 00 DB   "7 3 / /remain",0   
2BBD   E1                     POP   HL   
2BBE   E5                     PUSH   HL   
2BBF   11 01 00               LD   DE,1   
2BC2   B7                     OR   A   
2BC3   ED 52                  SBC   HL,DE   
2BC5   7D                     LD   A,L   
2BC6   B4                     OR   H   
2BC7   CA 33 2C               JP   Z,expectM_2985S75   
2BCA   CD B0 0D               CALL   printStr   
2BCD   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 6D 61 69 6E 00 .CSTR   "Code: ","7 3 / /remain"   
2BE1   CD B0 0D               CALL   printStr   
2BE4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BF3   21 01 00               LD   hl,1   
2BF6   E5                     PUSH   hl   
2BF7   E5                     PUSH   hl   
2BF8   CD E7 0E               CALL   run   
2BFB   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2C09   CD B0 0D               CALL   printStr   
2C0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C19   E1                     POP   hl   
2C1A   E5                     PUSH   hl   
2C1B   E5                     PUSH   hl   
2C1C   CD E7 0E               CALL   run   
2C1F   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
2C32   76                     HALT      
2C33                EXPECTM_2985S75:      
2C33   E1                     POP   HL   
2C34                          ;*Macro unroll:  test "7 3 /", 2
2C34   31 00 34               LD   SP,STACK   
2C37   CD 1E 0E               CALL   coldInit   
2C3A   CD AC 32               CALL   execStr   
2C3D   37 20 33 20 2F 00      DB   "7 3 /",0   
2C43   E1                     POP   HL   
2C44   E5                     PUSH   HL   
2C45   11 02 00               LD   DE,2   
2C48   B7                     OR   A   
2C49   ED 52                  SBC   HL,DE   
2C4B   7D                     LD   A,L   
2C4C   B4                     OR   H   
2C4D   CA B1 2C               JP   Z,expectM_2986S76   
2C50   CD B0 0D               CALL   printStr   
2C53   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2C5F   CD B0 0D               CALL   printStr   
2C62   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C71   21 02 00               LD   hl,2   
2C74   E5                     PUSH   hl   
2C75   E5                     PUSH   hl   
2C76   CD E7 0E               CALL   run   
2C79   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2C87   CD B0 0D               CALL   printStr   
2C8A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C97   E1                     POP   hl   
2C98   E5                     PUSH   hl   
2C99   E5                     PUSH   hl   
2C9A   CD E7 0E               CALL   run   
2C9D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
2CB0   76                     HALT      
2CB1                EXPECTM_2986S76:      
2CB1   E1                     POP   HL   
2CB2                          ;*Macro unroll:  test "2 3 ==", FALSE
2CB2   31 00 34               LD   SP,STACK   
2CB5   CD 1E 0E               CALL   coldInit   
2CB8   CD AC 32               CALL   execStr   
2CBB   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2CC2   E1                     POP   HL   
2CC3   E5                     PUSH   HL   
2CC4   11 00 00               LD   DE,FALSE   
2CC7   B7                     OR   A   
2CC8   ED 52                  SBC   HL,DE   
2CCA   7D                     LD   A,L   
2CCB   B4                     OR   H   
2CCC   CA 31 2D               JP   Z,expectM_2987S77   
2CCF   CD B0 0D               CALL   printStr   
2CD2   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2CDF   CD B0 0D               CALL   printStr   
2CE2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CF1   21 00 00               LD   hl,FALSE   
2CF4   E5                     PUSH   hl   
2CF5   E5                     PUSH   hl   
2CF6   CD E7 0E               CALL   run   
2CF9   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2D07   CD B0 0D               CALL   printStr   
2D0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D17   E1                     POP   hl   
2D18   E5                     PUSH   hl   
2D19   E5                     PUSH   hl   
2D1A   CD E7 0E               CALL   run   
2D1D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
2D30   76                     HALT      
2D31                EXPECTM_2987S77:      
2D31   E1                     POP   HL   
2D32                          ;*Macro unroll:  test "3 3 ==", TRUE
2D32   31 00 34               LD   SP,STACK   
2D35   CD 1E 0E               CALL   coldInit   
2D38   CD AC 32               CALL   execStr   
2D3B   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
2D42   E1                     POP   HL   
2D43   E5                     PUSH   HL   
2D44   11 FF FF               LD   DE,TRUE   
2D47   B7                     OR   A   
2D48   ED 52                  SBC   HL,DE   
2D4A   7D                     LD   A,L   
2D4B   B4                     OR   H   
2D4C   CA B1 2D               JP   Z,expectM_2988S78   
2D4F   CD B0 0D               CALL   printStr   
2D52   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2D5F   CD B0 0D               CALL   printStr   
2D62   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D71   21 FF FF               LD   hl,TRUE   
2D74   E5                     PUSH   hl   
2D75   E5                     PUSH   hl   
2D76   CD E7 0E               CALL   run   
2D79   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2D87   CD B0 0D               CALL   printStr   
2D8A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D97   E1                     POP   hl   
2D98   E5                     PUSH   hl   
2D99   E5                     PUSH   hl   
2D9A   CD E7 0E               CALL   run   
2D9D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
2DB0   76                     HALT      
2DB1                EXPECTM_2988S78:      
2DB1   E1                     POP   HL   
2DB2                          ;*Macro unroll:  test "1 2 <", TRUE
2DB2   31 00 34               LD   SP,STACK   
2DB5   CD 1E 0E               CALL   coldInit   
2DB8   CD AC 32               CALL   execStr   
2DBB   31 20 32 20 3C 00      DB   "1 2 <",0   
2DC1   E1                     POP   HL   
2DC2   E5                     PUSH   HL   
2DC3   11 FF FF               LD   DE,TRUE   
2DC6   B7                     OR   A   
2DC7   ED 52                  SBC   HL,DE   
2DC9   7D                     LD   A,L   
2DCA   B4                     OR   H   
2DCB   CA 2F 2E               JP   Z,expectM_2989S79   
2DCE   CD B0 0D               CALL   printStr   
2DD1   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2DDD   CD B0 0D               CALL   printStr   
2DE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DEF   21 FF FF               LD   hl,TRUE   
2DF2   E5                     PUSH   hl   
2DF3   E5                     PUSH   hl   
2DF4   CD E7 0E               CALL   run   
2DF7   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2E05   CD B0 0D               CALL   printStr   
2E08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E15   E1                     POP   hl   
2E16   E5                     PUSH   hl   
2E17   E5                     PUSH   hl   
2E18   CD E7 0E               CALL   run   
2E1B   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
2E2E   76                     HALT      
2E2F                EXPECTM_2989S79:      
2E2F   E1                     POP   HL   
2E30                          ;*Macro unroll:  test "2 1 <", FALSE
2E30   31 00 34               LD   SP,STACK   
2E33   CD 1E 0E               CALL   coldInit   
2E36   CD AC 32               CALL   execStr   
2E39   32 20 31 20 3C 00      DB   "2 1 <",0   
2E3F   E1                     POP   HL   
2E40   E5                     PUSH   HL   
2E41   11 00 00               LD   DE,FALSE   
2E44   B7                     OR   A   
2E45   ED 52                  SBC   HL,DE   
2E47   7D                     LD   A,L   
2E48   B4                     OR   H   
2E49   CA AD 2E               JP   Z,expectM_2990S80   
2E4C   CD B0 0D               CALL   printStr   
2E4F   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2E5B   CD B0 0D               CALL   printStr   
2E5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E6D   21 00 00               LD   hl,FALSE   
2E70   E5                     PUSH   hl   
2E71   E5                     PUSH   hl   
2E72   CD E7 0E               CALL   run   
2E75   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2E83   CD B0 0D               CALL   printStr   
2E86   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E93   E1                     POP   hl   
2E94   E5                     PUSH   hl   
2E95   E5                     PUSH   hl   
2E96   CD E7 0E               CALL   run   
2E99   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
2EAC   76                     HALT      
2EAD                EXPECTM_2990S80:      
2EAD   E1                     POP   HL   
2EAE                          ;*Macro unroll:  test "2 3 <", TRUE
2EAE   31 00 34               LD   SP,STACK   
2EB1   CD 1E 0E               CALL   coldInit   
2EB4   CD AC 32               CALL   execStr   
2EB7   32 20 33 20 3C 00      DB   "2 3 <",0   
2EBD   E1                     POP   HL   
2EBE   E5                     PUSH   HL   
2EBF   11 FF FF               LD   DE,TRUE   
2EC2   B7                     OR   A   
2EC3   ED 52                  SBC   HL,DE   
2EC5   7D                     LD   A,L   
2EC6   B4                     OR   H   
2EC7   CA 2B 2F               JP   Z,expectM_2991S81   
2ECA   CD B0 0D               CALL   printStr   
2ECD   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2ED9   CD B0 0D               CALL   printStr   
2EDC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EEB   21 FF FF               LD   hl,TRUE   
2EEE   E5                     PUSH   hl   
2EEF   E5                     PUSH   hl   
2EF0   CD E7 0E               CALL   run   
2EF3   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2F01   CD B0 0D               CALL   printStr   
2F04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F11   E1                     POP   hl   
2F12   E5                     PUSH   hl   
2F13   E5                     PUSH   hl   
2F14   CD E7 0E               CALL   run   
2F17   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
2F2A   76                     HALT      
2F2B                EXPECTM_2991S81:      
2F2B   E1                     POP   HL   
2F2C                          ;*Macro unroll:  test "3 3 <", FALSE
2F2C   31 00 34               LD   SP,STACK   
2F2F   CD 1E 0E               CALL   coldInit   
2F32   CD AC 32               CALL   execStr   
2F35   33 20 33 20 3C 00      DB   "3 3 <",0   
2F3B   E1                     POP   HL   
2F3C   E5                     PUSH   HL   
2F3D   11 00 00               LD   DE,FALSE   
2F40   B7                     OR   A   
2F41   ED 52                  SBC   HL,DE   
2F43   7D                     LD   A,L   
2F44   B4                     OR   H   
2F45   CA A9 2F               JP   Z,expectM_2992S82   
2F48   CD B0 0D               CALL   printStr   
2F4B   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2F57   CD B0 0D               CALL   printStr   
2F5A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F69   21 00 00               LD   hl,FALSE   
2F6C   E5                     PUSH   hl   
2F6D   E5                     PUSH   hl   
2F6E   CD E7 0E               CALL   run   
2F71   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2F7F   CD B0 0D               CALL   printStr   
2F82   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F8F   E1                     POP   hl   
2F90   E5                     PUSH   hl   
2F91   E5                     PUSH   hl   
2F92   CD E7 0E               CALL   run   
2F95   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
2FA8   76                     HALT      
2FA9                EXPECTM_2992S82:      
2FA9   E1                     POP   HL   
2FAA                          ;*Macro unroll:  test "1 2 >", FALSE
2FAA   31 00 34               LD   SP,STACK   
2FAD   CD 1E 0E               CALL   coldInit   
2FB0   CD AC 32               CALL   execStr   
2FB3   31 20 32 20 3E 00      DB   "1 2 >",0   
2FB9   E1                     POP   HL   
2FBA   E5                     PUSH   HL   
2FBB   11 00 00               LD   DE,FALSE   
2FBE   B7                     OR   A   
2FBF   ED 52                  SBC   HL,DE   
2FC1   7D                     LD   A,L   
2FC2   B4                     OR   H   
2FC3   CA 27 30               JP   Z,expectM_2993S83   
2FC6   CD B0 0D               CALL   printStr   
2FC9   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2FD5   CD B0 0D               CALL   printStr   
2FD8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FE7   21 00 00               LD   hl,FALSE   
2FEA   E5                     PUSH   hl   
2FEB   E5                     PUSH   hl   
2FEC   CD E7 0E               CALL   run   
2FEF   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
2FFD   CD B0 0D               CALL   printStr   
3000   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
300D   E1                     POP   hl   
300E   E5                     PUSH   hl   
300F   E5                     PUSH   hl   
3010   CD E7 0E               CALL   run   
3013   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
3026   76                     HALT      
3027                EXPECTM_2993S83:      
3027   E1                     POP   HL   
3028                          ;*Macro unroll:  test "2 1 >", TRUE
3028   31 00 34               LD   SP,STACK   
302B   CD 1E 0E               CALL   coldInit   
302E   CD AC 32               CALL   execStr   
3031   32 20 31 20 3E 00      DB   "2 1 >",0   
3037   E1                     POP   HL   
3038   E5                     PUSH   HL   
3039   11 FF FF               LD   DE,TRUE   
303C   B7                     OR   A   
303D   ED 52                  SBC   HL,DE   
303F   7D                     LD   A,L   
3040   B4                     OR   H   
3041   CA A5 30               JP   Z,expectM_2994S84   
3044   CD B0 0D               CALL   printStr   
3047   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
3053   CD B0 0D               CALL   printStr   
3056   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3065   21 FF FF               LD   hl,TRUE   
3068   E5                     PUSH   hl   
3069   E5                     PUSH   hl   
306A   CD E7 0E               CALL   run   
306D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
307B   CD B0 0D               CALL   printStr   
307E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
308B   E1                     POP   hl   
308C   E5                     PUSH   hl   
308D   E5                     PUSH   hl   
308E   CD E7 0E               CALL   run   
3091   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
30A4   76                     HALT      
30A5                EXPECTM_2994S84:      
30A5   E1                     POP   HL   
30A6                          ;*Macro unroll:  test "3 3 >", FALSE
30A6   31 00 34               LD   SP,STACK   
30A9   CD 1E 0E               CALL   coldInit   
30AC   CD AC 32               CALL   execStr   
30AF   33 20 33 20 3E 00      DB   "3 3 >",0   
30B5   E1                     POP   HL   
30B6   E5                     PUSH   HL   
30B7   11 00 00               LD   DE,FALSE   
30BA   B7                     OR   A   
30BB   ED 52                  SBC   HL,DE   
30BD   7D                     LD   A,L   
30BE   B4                     OR   H   
30BF   CA 23 31               JP   Z,expectM_2995S85   
30C2   CD B0 0D               CALL   printStr   
30C5   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
30D1   CD B0 0D               CALL   printStr   
30D4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30E3   21 00 00               LD   hl,FALSE   
30E6   E5                     PUSH   hl   
30E7   E5                     PUSH   hl   
30E8   CD E7 0E               CALL   run   
30EB   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
30F9   CD B0 0D               CALL   printStr   
30FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3109   E1                     POP   hl   
310A   E5                     PUSH   hl   
310B   E5                     PUSH   hl   
310C   CD E7 0E               CALL   run   
310F   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
3122   76                     HALT      
3123                EXPECTM_2995S85:      
3123   E1                     POP   HL   
3124                          ;*Macro unroll:  test "4 3 >", TRUE
3124   31 00 34               LD   SP,STACK   
3127   CD 1E 0E               CALL   coldInit   
312A   CD AC 32               CALL   execStr   
312D   34 20 33 20 3E 00      DB   "4 3 >",0   
3133   E1                     POP   HL   
3134   E5                     PUSH   HL   
3135   11 FF FF               LD   DE,TRUE   
3138   B7                     OR   A   
3139   ED 52                  SBC   HL,DE   
313B   7D                     LD   A,L   
313C   B4                     OR   H   
313D   CA A1 31               JP   Z,expectM_2996S86   
3140   CD B0 0D               CALL   printStr   
3143   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
314F   CD B0 0D               CALL   printStr   
3152   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3161   21 FF FF               LD   hl,TRUE   
3164   E5                     PUSH   hl   
3165   E5                     PUSH   hl   
3166   CD E7 0E               CALL   run   
3169   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
3177   CD B0 0D               CALL   printStr   
317A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3187   E1                     POP   hl   
3188   E5                     PUSH   hl   
3189   E5                     PUSH   hl   
318A   CD E7 0E               CALL   run   
318D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
31A0   76                     HALT      
31A1                EXPECTM_2996S86:      
31A1   E1                     POP   HL   
31A2                          ;*Macro unroll:  test "2 2 <=", TRUE
31A2   31 00 34               LD   SP,STACK   
31A5   CD 1E 0E               CALL   coldInit   
31A8   CD AC 32               CALL   execStr   
31AB   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
31B2   E1                     POP   HL   
31B3   E5                     PUSH   HL   
31B4   11 FF FF               LD   DE,TRUE   
31B7   B7                     OR   A   
31B8   ED 52                  SBC   HL,DE   
31BA   7D                     LD   A,L   
31BB   B4                     OR   H   
31BC   CA 21 32               JP   Z,expectM_2997S87   
31BF   CD B0 0D               CALL   printStr   
31C2   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
31CF   CD B0 0D               CALL   printStr   
31D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31E1   21 FF FF               LD   hl,TRUE   
31E4   E5                     PUSH   hl   
31E5   E5                     PUSH   hl   
31E6   CD E7 0E               CALL   run   
31E9   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
31F7   CD B0 0D               CALL   printStr   
31FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3207   E1                     POP   hl   
3208   E5                     PUSH   hl   
3209   E5                     PUSH   hl   
320A   CD E7 0E               CALL   run   
320D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
3220   76                     HALT      
3221                EXPECTM_2997S87:      
3221   E1                     POP   HL   
3222                          ;*Macro unroll:  test "2 2 >=", TRUE
3222   31 00 34               LD   SP,STACK   
3225   CD 1E 0E               CALL   coldInit   
3228   CD AC 32               CALL   execStr   
322B   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
3232   E1                     POP   HL   
3233   E5                     PUSH   HL   
3234   11 FF FF               LD   DE,TRUE   
3237   B7                     OR   A   
3238   ED 52                  SBC   HL,DE   
323A   7D                     LD   A,L   
323B   B4                     OR   H   
323C   CA A1 32               JP   Z,expectM_2998S88   
323F   CD B0 0D               CALL   printStr   
3242   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
324F   CD B0 0D               CALL   printStr   
3252   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3261   21 FF FF               LD   hl,TRUE   
3264   E5                     PUSH   hl   
3265   E5                     PUSH   hl   
3266   CD E7 0E               CALL   run   
3269   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 00 .CSTR   ". /hex . /dec"   
3277   CD B0 0D               CALL   printStr   
327A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3287   E1                     POP   hl   
3288   E5                     PUSH   hl   
3289   E5                     PUSH   hl   
328A   CD E7 0E               CALL   run   
328D   2E 20 2F 68 65 78 20 2E 20 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex . /dec `\r\n`"   
32A0   76                     HALT      
32A1                EXPECTM_2998S88:      
32A1   E1                     POP   HL   
32A2                             ; test "3 1 <<", 6
32A2                             ; test "10 1 >>", 5
32A2                             ; test "1 x = x", 1
32A2                             ; test "1{}^", 1
32A2                             ; test "{1}^", 1
32A2                             ; test "{{1}^}^", 1
32A2                             ; test "{{{1}^}^}^", 1
32A2                             ; test "1 /f{10}{20} ? +", 21
32A2                             ; test "1 /t{10}{20} ? +", 11
32A2                             ; test "\\{2}^", 2
32A2                             ; test "\\a{2}^", 2
32A2                             ; test "5 \\a{%a}^", 5
32A2                             ; test "5 \\a:b{%a}^", 5
32A2                             ; test "\\a{{2}^}^", 2
32A2                             ; test "1 5 \\a{{%a}^}^", 5
32A2                             ; test "1 5 \\ab{{%a}^}^", 1
32A2                             ; test "1 5 \\a{{%a 2 +}^}^", 7
32A2                             ; test "1 5 \\ab{{%a %b +}^}^", 6
32A2                             ; test "\\a{2} x= 1 x^", 2
32A2                             ; test "\\a{%a} x= 0 1 x^", 1
32A2                             ; test "\\ab{%b} x= 1 2 x^", 2
32A2                             ; test "\\a:b{%a} x= 1 2 x^", 2
32A2                             ; test "\\ab{%b} x= 1 2 x^", 2
32A2                             ; test "\\ab{%b %a} x= 10 15 x^ -", 5
32A2                             ; test "\\a:b{2} x= 1 x^", 2
32A2                             ; test "\\:b{100 %b = %b} x= x^", 100
32A2                             ; test "\\a:b{1 %b = %b} x= 2 x^", 1
32A2                             ; test "\\a:b{%a %b = %b} x= 2 x^", 2
32A2                             ; test "1 10 20 \\ab{/t {%a}{%b} ?}^ +", 11
32A2                             ; test "1 10 20 \\ab{/f {%a}{%b} ?}^ +", 21
32A2                             ; test "[10 20 30] 1;", 20
32A2                             ; test "[10 20 30 40] /aln", 4
32A2                             ; test "/byt [1 2 3] 1;", 2
32A2                             ; test "/byt [_A _B _C] 1;", 66
32A2                             ; test "[{10}{20}{30}] 0;^ ", 10
32A2                             ; test "10 20 \\ab{[{%a}{%b}] 0;^}^", 10
32A2                             ; test "0 10 20 \\iab{[{%a}{%b}] %i;^}^", 10
32A2                             ; test "1 10 20 \\iab{[{%a}{%b}] %i;^}^", 20
32A2                             ; test "3i= ( i i-- i/whi )^ + +", 6
32A2                             ; test "3i= [ ( i i-- i/whi )^ ] 1;", 2
32A2                             ; test "0 j= 4 i= ( i j + j= i i-- i/whi )^ j ", 10
32A2                             ; test "0j= 0i= ( i j+= i++ i 5< /whi )^ j ", 10
32A2                             ; test "0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t", 12
32A2                             ; test "3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^", 6
32A2                             ; test "/t \\f{1 %f/whi 2 +}^",3
32A2                             ; test "/f \\f{1 %f/whi 2 +}^",1
32A2                             ; test "_A 1 - /adr", NUL
32A2                             ; test "_Z 1 + /adr", NUL
32A2                             ; test "_a 1 - /adr", NUL
32A2                             ; test "_z 1 + /adr", NUL
32A2                             ; test "_z /adr", VARS + (("z"-"a")+("Z"-"A")+1)*2
32A2                             ; test "_a /adr", VARS + ("Z"-"A"+1)*2
32A2                             ; test "_Z /adr", VARS + ("Z"-"A")*2
32A2                             ; test "_A /adr", VARS
32A2                             ; test "\\a{%a} F=1F^", 1
32A2                             ; test "1 \\b{\\a{%a}}^F= 3F^",3
32A2                             ; test "1 \\b{\\a{%a%b-}}^F= 3F^",2
32A2                             ; test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
32A2                             ; test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
32A2                             ; test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
32A2                             ; test "'hello'/sln",5
32A2                             ; test "'hello' 'hell' /scp", false
32A2                             ; test "'hello' 'hello' /scp", true
32A2                             ; test "/sbb `=` 1. 2. 3. `=` /sbe '=1 2 3 =' /scp", TRUE
32A2                             ; test "[1 2 3]** + +", 6
32A2                             ; test "/byt[_a [_b _c]** _d]2;", $63
32A2                             ; test "_B [_A {1} _B {2}] /sel", 2
32A2                             ; test "1 2 /max", 2
32A2                             ; test "2 1 /max", 2
32A2                             ; test "1 2 /min", 1
32A2                             ; test "2 1 /min", 1
32A2                             ; 
32A2   CD B0 0D               CALL   printStr   
32A5   44 6F 6E 65 21 00      .CSTR   "Done!"   
32AB   76                     HALT      
32AC                             ; executes a null teminated string (null executes exit_)
32AC                             ; the string should be immedaitely following the call
32AC                EXECSTR:      ; create a root stack frame
32AC   C1                     POP   bc   ; bc = code*
32AD   0B                     DEC   bc   ; dec to prepare for next routine
32AE   11 00 00               LD   de,0   
32B1   D5                     PUSH   de   ; push fake IP
32B2   D5                     PUSH   de   ; push null arg_list*
32B3   D5                     PUSH   de   ; push null first_arg*
32B4   D5                     PUSH   de   ; push fake BP
32B5   DD E9                  JP   (ix)   
32B7                DSTACK_SIZE:   EQU   $100   ; Data stack size
32B7                RSTACK_SIZE:   EQU   $100   ; Return stack size
32B7                NAMES_SIZE:   EQU   $100   ; Arg names size
32B7                TIBSIZE:   EQU   $100   ; 256 bytes
32B7                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
32B7                          ALIGN   $100   
3300                          DS   DSTACK_SIZE   
3400                STACK:       
3400                DSTACK:      
3400                RSTACK:      
3400                          DS   RSTACK_SIZE   
3500                NAMES:       
3500                          DS   NAMES_SIZE   
3600                          ALIGN   $100   
3600                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
3700                          ALIGN   $100   
3700                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
3800                          ALIGN   $100   
3800                VARS:        
3800                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
38D0                RESTARTS:      
38D0                RST08:    DS   2   
38D2                RST10:    DS   2   
38D4                RST18:    DS   2   
38D6                RST20:    DS   2   
38D8                RST28:    DS   2   
38DA                RST30:    DS   2   ; 
38DC                BAUD:     DS   2   ; 
38DE                INTVEC:   DS   2   ; 
38E0                NMIVEC:   DS   2   ; 
38E2                GETCVEC:   DS   2   ; 
38E4                PUTCVEC:   DS   2   ; 
38E6                SYSVARS:      
38E6                             ; initialised sys variables (preserved)
38E6                VTIBPTR:   DS   2   
38E8                VBUFPTR:   DS   2   
38EA                VHEAPPTR:   DS   2   
38EC                VNAMESPTR:   DS   2   
38EE                VRECURPTR:   DS   2   
38F0                VDATAWIDTH:   DS   1   
38F1                VNUMBASE:   DS   1   
38F2                VHEXPREFIX:   DS   1   
38F3                VECHO:    DS   1   
38F4                VSTRMODE:   DS   1   
38F5                          DS   1   
38F6                          DS   1   
38F7                          DS   1   
38F8                          DS   1   
38F9                          DS   1   
38FA                             ; uninitialised sys variables (preserved)
38FA                VPOINTER:   DS   2   ; 
38FC                VREMAIN:   DS   2   ; 
38FE                VSAVEDIP:   DS   2   ; 
3900                VSAVEDDSP:   DS   2   ; 
3902                VSAVEDRSP:   DS   2   ; 
3904                VSAVEDNEXT:   DS   2   ; 
3906                VSAVEDBP:   DS   2   ; 
3908                             ; uninitialised sys variables (unpreserved)
3908                VTEMP1:   DS   2   ; 
390A                VTEMP2:   DS   2   ; 
390C                VTEMP3:   DS   2   ; 
390E                          DS   2   ; 
3910                TBPTR:    DS   2   ; reserved for tests
3912                TITLEBUF:   DS   20   
3926                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 173 IN MAIN.asm
                    > USED AT LINE 3 IN ansi.asm
                    > USED AT LINE 9 IN ansi.asm
                    > USED AT LINE 70 IN ansi.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 2364 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1174 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
                    > USED AT LINE 2470 IN MAIN.asm
                    > USED AT LINE 21 IN ansi.asm
                    > USED AT LINE 23 IN ansi.asm
                    > USED AT LINE 35 IN ansi.asm
                    > USED AT LINE 41 IN ansi.asm
                    > USED AT LINE 54 IN ansi.asm
                    > USED AT LINE 62 IN ansi.asm
                    > USED AT LINE 64 IN ansi.asm
                    > USED AT LINE 73 IN ansi.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 978 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 2254 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 163 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2367 IN MAIN.asm
                    > USED AT LINE 2435 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 2169 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2372 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2374 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2305 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 172 IN MAIN.asm
                    > USED AT LINE 2280 IN MAIN.asm
                    > USED AT LINE 2299 IN MAIN.asm
COLON_:             0204 DEFINED AT LINE 177 IN MAIN.asm
HASH_:              0204 DEFINED AT LINE 178 IN MAIN.asm
COMMA_:             0206 DEFINED AT LINE 181 IN MAIN.asm
DOLLAR_:            0209 DEFINED AT LINE 184 IN MAIN.asm
DQUOTE_:            020C DEFINED AT LINE 187 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 188 IN MAIN.asm
DOT_:               020F DEFINED AT LINE 191 IN MAIN.asm
PERCENT_:           0212 DEFINED AT LINE 194 IN MAIN.asm
QUESTION_:          0215 DEFINED AT LINE 197 IN MAIN.asm
LPAREN_:            0218 DEFINED AT LINE 200 IN MAIN.asm
SLASH_:             021B DEFINED AT LINE 203 IN MAIN.asm
NUM_:               021E DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 209 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 210 IN MAIN.asm
NOT:                022C DEFINED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 222 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 223 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 236 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 237 IN MAIN.asm
LT_:                024C DEFINED AT LINE 245 IN MAIN.asm
LT:                 024C DEFINED AT LINE 246 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SEMICOLON_:         025E DEFINED AT LINE 261 IN MAIN.asm
SEMICOLON:          025E DEFINED AT LINE 262 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 269 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 271 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
RPAREN_:            026B DEFINED AT LINE 276 IN MAIN.asm
RPAREN:             026B DEFINED AT LINE 278 IN MAIN.asm
AMPER_:             0273 DEFINED AT LINE 286 IN MAIN.asm
AMPER:              0273 DEFINED AT LINE 287 IN MAIN.asm
AND:                0273 DEFINED AT LINE 288 IN MAIN.asm
MINUS_:             027D DEFINED AT LINE 306 IN MAIN.asm
MINUS:              027D DEFINED AT LINE 307 IN MAIN.asm
SUB:                0289 DEFINED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 312 IN MAIN.asm
SUB1:               0293 DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
SUB2:               029A DEFINED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
SUB3:               029D DEFINED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
                    > USED AT LINE 1681 IN MAIN.asm
                    > USED AT LINE 1706 IN MAIN.asm
STAR_:              02A5 DEFINED AT LINE 337 IN MAIN.asm
STAR:               02A5 DEFINED AT LINE 338 IN MAIN.asm
MUL:                02AD DEFINED AT LINE 344 IN MAIN.asm
MUL2:               02AF DEFINED AT LINE 347 IN MAIN.asm
MUL3:               02B7 DEFINED AT LINE 352 IN MAIN.asm
                    > USED AT LINE 361 IN MAIN.asm
PLUS_:              02C9 DEFINED AT LINE 367 IN MAIN.asm
PLUS:               02C9 DEFINED AT LINE 368 IN MAIN.asm
ADD:                02C9 DEFINED AT LINE 369 IN MAIN.asm
ADD1:               02D4 DEFINED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
ADD3:               02D8 DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 570 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
ADD4:               02E2 DEFINED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
UPCASE_:            02E5 DEFINED AT LINE 394 IN MAIN.asm
UPCASE:             02E5 DEFINED AT LINE 395 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 404 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 405 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 409 IN MAIN.asm
                    > USED AT LINE 398 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 421 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 422 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 423 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 438 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 439 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 440 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 449 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 460 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 461 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 462 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 493 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 514 IN MAIN.asm
CARET:              039F DEFINED AT LINE 518 IN MAIN.asm
GO:                 039F DEFINED AT LINE 519 IN MAIN.asm
GO1:                03A0 DEFINED AT LINE 521 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
                    > USED AT LINE 1469 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 535 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 536 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 537 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 545 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 552 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 559 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 560 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 561 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 572 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 576 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 579 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 580 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 588 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 589 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 590 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 602 IN MAIN.asm
PRINTARRAY:         0411 DEFINED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
PRINTCHAR:          0414 DEFINED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
PRINTSTRING:        0423 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
PRINTSTRING0:       042A DEFINED AT LINE 634 IN MAIN.asm
                    > USED AT LINE 641 IN MAIN.asm
PRINTSTRING1:       042D DEFINED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
PRINTNUMBER:        0438 DEFINED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
PRINTDEC:           0443 DEFINED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
PRINTDEC1:          0451 DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
PRINTHEX:           0460 DEFINED AT LINE 675 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
PRINTHEX1:          046C DEFINED AT LINE 682 IN MAIN.asm
                    > USED AT LINE 679 IN MAIN.asm
PRINTHEX2:          0477 DEFINED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 686 IN MAIN.asm
PRINTHEX3:          0486 DEFINED AT LINE 698 IN MAIN.asm
                    > USED AT LINE 688 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
PRINTHEX4:          048F DEFINED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 704 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 722 IN MAIN.asm
ABS_:               0610 DEFINED AT LINE 752 IN MAIN.asm
ABSOLUTE:           0610 DEFINED AT LINE 753 IN MAIN.asm
ABSOLUTE1:          061B DEFINED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
ALN_:               061E DEFINED AT LINE 771 IN MAIN.asm
ARRAYLENGTH:        061E DEFINED AT LINE 772 IN MAIN.asm
ARRAYLENGTH1:       0624 DEFINED AT LINE 779 IN MAIN.asm
ARGS_:              0627 DEFINED AT LINE 784 IN MAIN.asm
BYE_:               0629 DEFINED AT LINE 788 IN MAIN.asm
CGO_:               062C DEFINED AT LINE 793 IN MAIN.asm
CURSORGO:           062C DEFINED AT LINE 794 IN MAIN.asm
CLS_:               0634 DEFINED AT LINE 803 IN MAIN.asm
CLEARSCREEN:        0634 DEFINED AT LINE 804 IN MAIN.asm
VAR_:               0639 DEFINED AT LINE 809 IN MAIN.asm
CLL_:               063B DEFINED AT LINE 815 IN MAIN.asm
CLEARLINE:          063B DEFINED AT LINE 816 IN MAIN.asm
CMV_:               0644 DEFINED AT LINE 825 IN MAIN.asm
CURSORMOVE:         0644 DEFINED AT LINE 826 IN MAIN.asm
CURSORMOVE1:        0650 DEFINED AT LINE 835 IN MAIN.asm
CUR_:               0652 DEFINED AT LINE 840 IN MAIN.asm
CURSORSHOW:         0652 DEFINED AT LINE 841 IN MAIN.asm
CURSORSHOW1:        065C DEFINED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
DEC_:               0661 DEFINED AT LINE 853 IN MAIN.asm
DECBASE:            0661 DEFINED AT LINE 854 IN MAIN.asm
DECBASE1:           0663 DEFINED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
DIV_:               0668 DEFINED AT LINE 861 IN MAIN.asm
ECHO_:              066B DEFINED AT LINE 866 IN MAIN.asm
ECHO:               066B DEFINED AT LINE 867 IN MAIN.asm
F_:                 0671 DEFINED AT LINE 873 IN MAIN.asm
FRAC_:              0674 DEFINED AT LINE 877 IN MAIN.asm
REMAIN:             0674 DEFINED AT LINE 878 IN MAIN.asm
FREE_:              067A DEFINED AT LINE 885 IN MAIN.asm
MEMFREE:            067A DEFINED AT LINE 886 IN MAIN.asm
MEMFREE1:           067B DEFINED AT LINE 888 IN MAIN.asm
HEX_:               0680 DEFINED AT LINE 892 IN MAIN.asm
IN_:                0685 DEFINED AT LINE 899 IN MAIN.asm
INPUT:              0685 DEFINED AT LINE 900 IN MAIN.asm
MAX_:               0690 DEFINED AT LINE 912 IN MAIN.asm
MAXIMUM:            0690 DEFINED AT LINE 913 IN MAIN.asm
MAXIMUM1:           069A DEFINED AT LINE 922 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
MIN_:               069C DEFINED AT LINE 927 IN MAIN.asm
MINIMUM:            069C DEFINED AT LINE 928 IN MAIN.asm
MINIMUM1:           06A6 DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
NIL_:               06A8 DEFINED AT LINE 941 IN MAIN.asm
OUT_:               06AB DEFINED AT LINE 946 IN MAIN.asm
OUTPUT:             06AB DEFINED AT LINE 947 IN MAIN.asm
RECUR_:             06B4 DEFINED AT LINE 957 IN MAIN.asm
RECUR:              06B4 DEFINED AT LINE 958 IN MAIN.asm
RETURN_:            06BA DEFINED AT LINE 965 IN MAIN.asm
RETURN:             06BA DEFINED AT LINE 966 IN MAIN.asm
RETURN1:            06C1 DEFINED AT LINE 972 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
SBB_:               06C4 DEFINED AT LINE 976 IN MAIN.asm
STRINGBEGIN:        06C4 DEFINED AT LINE 977 IN MAIN.asm
SBE_:               06CC DEFINED AT LINE 984 IN MAIN.asm
STRINGEND:          06CC DEFINED AT LINE 985 IN MAIN.asm
STRINGEND1:         06F3 DEFINED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
SLN_:               06FB DEFINED AT LINE 1009 IN MAIN.asm
T_:                 0702 DEFINED AT LINE 1016 IN MAIN.asm
WHILE_:             0705 DEFINED AT LINE 1022 IN MAIN.asm
WHILE:              0705 DEFINED AT LINE 1023 IN MAIN.asm
WHILE1:             070C DEFINED AT LINE 1029 IN MAIN.asm
                    > USED AT LINE 1027 IN MAIN.asm
WORD_:              071F DEFINED AT LINE 1041 IN MAIN.asm
WORDMODE:           071F DEFINED AT LINE 1042 IN MAIN.asm
SYS_:               0800 DEFINED AT LINE 1051 IN MAIN.asm
ALLOC_:             0802 DEFINED AT LINE 1056 IN MAIN.asm
MEMALLOCATE:        0802 DEFINED AT LINE 1057 IN MAIN.asm
BYTE_:              0804 DEFINED AT LINE 1061 IN MAIN.asm
BYTEMODE:           0804 DEFINED AT LINE 1062 IN MAIN.asm
BYTEMODE1:          0806 DEFINED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 1044 IN MAIN.asm
SCMP_:              080B DEFINED AT LINE 1070 IN MAIN.asm
SELECT_:            0813 DEFINED AT LINE 1079 IN MAIN.asm
VOID_:              0816 DEFINED AT LINE 1084 IN MAIN.asm
VOID:               0816 DEFINED AT LINE 1085 IN MAIN.asm
XOR_:               081E DEFINED AT LINE 1093 IN MAIN.asm
XOR1:               081F DEFINED AT LINE 1095 IN MAIN.asm
COMMENT:            0829 DEFINED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
ERROR1:             0832 DEFINED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
DIV1:               0838 DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
DIV2:               0842 DEFINED AT LINE 1134 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
COMMA:              0853 DEFINED AT LINE 1145 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
READCHAR:           0860 DEFINED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 1149 IN MAIN.asm
READSTRING:         0869 DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 44
READSTRING1:        086E DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
READSTRING2:        0882 DEFINED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
READNUMBER:         088B DEFINED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
PERFORMM_1638S1185: 0894 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER1:        08B2 DEFINED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
PERFORMM_1655S1202: 08B9 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER2:        08BC DEFINED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
PERFORMM_1659S1206: 08C3 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER3:        08C4 DEFINED AT LINE 1208 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
SELECT:             08CA DEFINED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
SELECT1:            08D5 DEFINED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
SELECT1A:           08E6 DEFINED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
SELECT1B:           08E7 DEFINED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
SELECT2:            08EA DEFINED AT LINE 1245 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
TILDE:              08F1 DEFINED AT LINE 1253 IN MAIN.asm
                    > USED AT LINE 577 IN MAIN.asm
INVERT:             08F1 DEFINED AT LINE 1254 IN MAIN.asm
DOLLAR:             08FB DEFINED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
HEXNUM:             08FB DEFINED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 44
HEXNUM1:            08FE DEFINED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
HEXNUM2:            0906 DEFINED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 1272 IN MAIN.asm
QUESTION:           0918 DEFINED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
IF:                 0918 DEFINED AT LINE 1290 IN MAIN.asm
QUOTE:              0925 DEFINED AT LINE 1303 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
STRING:             0925 DEFINED AT LINE 1304 IN MAIN.asm
STRING1:            092E DEFINED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1319 IN MAIN.asm
STRING2:            0931 DEFINED AT LINE 1315 IN MAIN.asm
                    > USED AT LINE 1310 IN MAIN.asm
STRING3:            0937 DEFINED AT LINE 1320 IN MAIN.asm
                    > USED AT LINE 1318 IN MAIN.asm
PERCENT:            093F DEFINED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
ARG:                093F DEFINED AT LINE 1331 IN MAIN.asm
ARG0:               095B DEFINED AT LINE 1350 IN MAIN.asm
                    > USED AT LINE 1356 IN MAIN.asm
ARG0A:              0964 DEFINED AT LINE 1358 IN MAIN.asm
                    > USED AT LINE 1337 IN MAIN.asm
                    > USED AT LINE 1342 IN MAIN.asm
ARG1:               0969 DEFINED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1354 IN MAIN.asm
ARG1A:              0971 DEFINED AT LINE 1368 IN MAIN.asm
                    > USED AT LINE 1360 IN MAIN.asm
NUM:                0974 DEFINED AT LINE 1373 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
                    > USED AT LINE 44
NUM0:               097D DEFINED AT LINE 1379 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
NUM1:               097E DEFINED AT LINE 1381 IN MAIN.asm
                    > USED AT LINE 1398 IN MAIN.asm
NUM2:               0996 DEFINED AT LINE 1399 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 1384 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
NUM3:               09A1 DEFINED AT LINE 1407 IN MAIN.asm
                    > USED AT LINE 1402 IN MAIN.asm
RBRACE:             09A4 DEFINED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
BLOCKEND:           09A4 DEFINED AT LINE 1413 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
BLOCKEND1:          09D6 DEFINED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1428 IN MAIN.asm
BLOCKEND2:          09E2 DEFINED AT LINE 1442 IN MAIN.asm
                    > USED AT LINE 1434 IN MAIN.asm
BLOCKEND3:          09F4 DEFINED AT LINE 1456 IN MAIN.asm
                    > USED AT LINE 1448 IN MAIN.asm
BLOCKEND4:          0A08 DEFINED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1464 IN MAIN.asm
GOBLOCK:            0A11 DEFINED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 533 IN MAIN.asm
GOBLOCK2:           0A36 DEFINED AT LINE 1488 IN MAIN.asm
                    > USED AT LINE 1569 IN MAIN.asm
GOBLOCK3:           0A40 DEFINED AT LINE 1494 IN MAIN.asm
GOFUNC:             0A44 DEFINED AT LINE 1498 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
GOFUNC1:            0A5D DEFINED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
GOFUNC2:            0A63 DEFINED AT LINE 1524 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
GOFUNC3:            0A6E DEFINED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
GOFUNC4:            0A86 DEFINED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 1544 IN MAIN.asm
GOFUNC5:            0A89 DEFINED AT LINE 1550 IN MAIN.asm
                    > USED AT LINE 1556 IN MAIN.asm
GOFUNC6:            0A8C DEFINED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
GOFUNC7:            0A8F DEFINED AT LINE 1557 IN MAIN.asm
GOFUNC8:            0A93 DEFINED AT LINE 1562 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 1546 IN MAIN.asm
ASSIGN:             0A9E DEFINED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
ASSIGN0:            0AA0 DEFINED AT LINE 1576 IN MAIN.asm
                    > USED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 391 IN MAIN.asm
ASSIGN1:            0AA4 DEFINED AT LINE 1579 IN MAIN.asm
ASSIGN2:            0AAD DEFINED AT LINE 1586 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
EQUALS:             0AAF DEFINED AT LINE 1591 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
NOTEQUALS:          0AB6 DEFINED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
LESSTHANEQ:         0ABD DEFINED AT LINE 1605 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           0AC2 DEFINED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          0AC7 DEFINED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
TRUE1:              0ACA DEFINED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 1017 IN MAIN.asm
                    > USED AT LINE 1594 IN MAIN.asm
                    > USED AT LINE 1600 IN MAIN.asm
NULL1:              0AD0 DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 942 IN MAIN.asm
FALSE1:             0AD0 DEFINED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1618 IN MAIN.asm
SPREAD:             0AD6 DEFINED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
SPREAD1:            0AE3 DEFINED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
SPREAD2:            0AEE DEFINED AT LINE 1649 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
SPREAD3:            0AF0 DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 1639 IN MAIN.asm
SHIFTLEFT:          0AFA DEFINED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT2:         0B04 DEFINED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1668 IN MAIN.asm
SHIFTLEFT3:         0B0C DEFINED AT LINE 1676 IN MAIN.asm
                    > USED AT LINE 1679 IN MAIN.asm
SHIFTLEFT4:         0B0D DEFINED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 1675 IN MAIN.asm
SHIFTRIGHT:         0B16 DEFINED AT LINE 1686 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
SHIFTRIGHT2:        0B20 DEFINED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 1692 IN MAIN.asm
SHIFTRIGHT3:        0B28 DEFINED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 1704 IN MAIN.asm
SHIFTRIGHT4:        0B2C DEFINED AT LINE 1703 IN MAIN.asm
                    > USED AT LINE 1699 IN MAIN.asm
DIVIDE:             0B35 DEFINED AT LINE 1711 IN MAIN.asm
                    > USED AT LINE 1138 IN MAIN.asm
DIVIDE1:            0B3A DEFINED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 1726 IN MAIN.asm
DIVIDE2:            0B47 DEFINED AT LINE 1722 IN MAIN.asm
                    > USED AT LINE 1719 IN MAIN.asm
DIVIDE3:            0B48 DEFINED AT LINE 1724 IN MAIN.asm
                    > USED AT LINE 1721 IN MAIN.asm
DOTNEXT:            0B4E DEFINED AT LINE 1730 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 696 IN MAIN.asm
DOTNEXT1:           0B56 DEFINED AT LINE 1735 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
PARSEARGS:          0B68 DEFINED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
PARSEARGS1:         0B72 DEFINED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 1774 IN MAIN.asm
PARSEARGS1A:        0B7A DEFINED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 1756 IN MAIN.asm
PARSEARGS2:         0B82 DEFINED AT LINE 1764 IN MAIN.asm
PARSEARGS3:         0B8A DEFINED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 1758 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
PARSEARGS4:         0B8D DEFINED AT LINE 1775 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
PARSEARGS5:         0B93 DEFINED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1779 IN MAIN.asm
PARSEBLOCK:         0B9E DEFINED AT LINE 1794 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 554 IN MAIN.asm
PARSEBLOCK1:        0BA2 DEFINED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 1810 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
PARSEBLOCK2:        0BBB DEFINED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
PARSEBLOCK3:        0BC1 DEFINED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
PARSEBLOCK4:        0BDB DEFINED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
PARSEBLOCK5:        0BDE DEFINED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 1829 IN MAIN.asm
PARSEBLOCK6:        0C09 DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1842 IN MAIN.asm
CREATEFUNC:         0C0D DEFINED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
CREATEFUNC0:        0C2C DEFINED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
CREATEFUNC1:        0C44 DEFINED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
CREATEFUNC2:        0C57 DEFINED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
CREATEFUNC2A:       0C76 DEFINED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
CREATEFUNC3:        0C85 DEFINED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
CREATEFUNC4:        0C90 DEFINED AT LINE 1958 IN MAIN.asm
CREATEFUNC5:        0C91 DEFINED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
VARIABLE:           0CAF DEFINED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
CONSTANT:           0CBE DEFINED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
CHARTABLE:          0CC1 DEFINED AT LINE 2005 IN MAIN.asm
CHARTABLE1:         0CCB DEFINED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
CHARTABLE2:         0CD5 DEFINED AT LINE 2020 IN MAIN.asm
                    > USED AT LINE 2018 IN MAIN.asm
CHARTABLE3:         0CD7 DEFINED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
IDENTHASH:          0CDC DEFINED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
IDENTHASH1:         0CDE DEFINED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
IDENTHASH2:         0CE6 DEFINED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
COMMANDTABLE:       0CEE DEFINED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
COMMANDTABLE2:      0CF6 DEFINED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2056 IN MAIN.asm
GETVARADDR:         0CFE DEFINED AT LINE 2068 IN MAIN.asm
GETVARADDR1:        0D10 DEFINED AT LINE 2079 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
PUTSTR0:            0D15 DEFINED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
PUTSTR:             0D19 DEFINED AT LINE 2088 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
                    > USED AT LINE 2219 IN MAIN.asm
                    > USED AT LINE 2235 IN MAIN.asm
                    > USED AT LINE 2331 IN MAIN.asm
FORMATDEC0:         0D1E DEFINED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2227 IN MAIN.asm
FORMATDEC:          0D21 DEFINED AT LINE 2104 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
FORMATDEC2:         0D31 DEFINED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
FORMATDEC4:         0D51 DEFINED AT LINE 2132 IN MAIN.asm
                    > USED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2123 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
                    > USED AT LINE 2127 IN MAIN.asm
                    > USED AT LINE 2130 IN MAIN.asm
FORMATDEC5:         0D53 DEFINED AT LINE 2134 IN MAIN.asm
                    > USED AT LINE 2137 IN MAIN.asm
FORMATDEC6:         0D63 DEFINED AT LINE 2146 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
FORMATDEC7:         0D64 DEFINED AT LINE 2148 IN MAIN.asm
                    > USED AT LINE 2145 IN MAIN.asm
NESTING:            0D6A DEFINED AT LINE 2166 IN MAIN.asm
                    > USED AT LINE 2353 IN MAIN.asm
                    > USED AT LINE 2387 IN MAIN.asm
NESTING0:           0D78 DEFINED AT LINE 2174 IN MAIN.asm
                    > USED AT LINE 2168 IN MAIN.asm
                    > USED AT LINE 2170 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
NESTING1A:          0D7F DEFINED AT LINE 2179 IN MAIN.asm
                    > USED AT LINE 2176 IN MAIN.asm
NESTING1:           0D82 DEFINED AT LINE 2182 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
NESTING2:           0D91 DEFINED AT LINE 2191 IN MAIN.asm
                    > USED AT LINE 2186 IN MAIN.asm
                    > USED AT LINE 2188 IN MAIN.asm
NESTING3:           0D93 DEFINED AT LINE 2194 IN MAIN.asm
                    > USED AT LINE 2190 IN MAIN.asm
NESTING4:           0D9E DEFINED AT LINE 2201 IN MAIN.asm
                    > USED AT LINE 2196 IN MAIN.asm
                    > USED AT LINE 2198 IN MAIN.asm
PROMPT:             0DA0 DEFINED AT LINE 2205 IN MAIN.asm
                    > USED AT LINE 2335 IN MAIN.asm
CRLF:               0DA9 DEFINED AT LINE 2210 IN MAIN.asm
                    > USED AT LINE 2400 IN MAIN.asm
PRINTSTR:           0DB0 DEFINED AT LINE 2217 IN MAIN.asm
                    > USED AT LINE 2206 IN MAIN.asm
                    > USED AT LINE 2211 IN MAIN.asm
                    > USED AT LINE 2460 IN MAIN.asm
                    > USED AT LINE 2465 IN MAIN.asm
                    > USED AT LINE 2 IN ansi.asm
                    > USED AT LINE 8 IN ansi.asm
                    > USED AT LINE 69 IN ansi.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 19
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 163
PRINTNUM:           0DB7 DEFINED AT LINE 2225 IN MAIN.asm
                    > USED AT LINE 33 IN ansi.asm
                    > USED AT LINE 39 IN ansi.asm
                    > USED AT LINE 52 IN ansi.asm
STRINGCOMPARE:      0DD0 DEFINED AT LINE 2240 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
STRINGCOMPARE1:     0DD0 DEFINED AT LINE 2241 IN MAIN.asm
                    > USED AT LINE 2249 IN MAIN.asm
STRINGCOMPARE2:     0DDB DEFINED AT LINE 2250 IN MAIN.asm
                    > USED AT LINE 2244 IN MAIN.asm
STRINGCOMPARE3:     0DE0 DEFINED AT LINE 2253 IN MAIN.asm
                    > USED AT LINE 2246 IN MAIN.asm
STRINGCOMPARE4:     0DE3 DEFINED AT LINE 2255 IN MAIN.asm
                    > USED AT LINE 2252 IN MAIN.asm
STRINGLENGTH:       0DE5 DEFINED AT LINE 2262 IN MAIN.asm
                    > USED AT LINE 1011 IN MAIN.asm
STRINGLENGTH1:      0DEA DEFINED AT LINE 2265 IN MAIN.asm
                    > USED AT LINE 2271 IN MAIN.asm
STRINGLENGTH2:      0DEC DEFINED AT LINE 2268 IN MAIN.asm
                    > USED AT LINE 2264 IN MAIN.asm
STRINGLENGTH3:      0DF0 DEFINED AT LINE 2272 IN MAIN.asm
INIT:               0DF1 DEFINED AT LINE 2279 IN MAIN.asm
                    > USED AT LINE 2328 IN MAIN.asm
INIT1:              0DF9 DEFINED AT LINE 2283 IN MAIN.asm
                    > USED AT LINE 2289 IN MAIN.asm
WARMINIT:           0E01 DEFINED AT LINE 2291 IN MAIN.asm
COLDBOOT0:          0E14 DEFINED AT LINE 2298 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 2286 IN MAIN.asm
                    > USED AT LINE 2324 IN MAIN.asm
COLDINIT:           0E1E DEFINED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0E2F DEFINED AT LINE 2313 IN MAIN.asm
                    > USED AT LINE 2316 IN MAIN.asm
COLDSTART:          0E3C DEFINED AT LINE 2322 IN MAIN.asm
START:              0E45 DEFINED AT LINE 2326 IN MAIN.asm
START1:             0E4B DEFINED AT LINE 2329 IN MAIN.asm
                    > USED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 2325 IN MAIN.asm
INTERPRET:          0E51 DEFINED AT LINE 2333 IN MAIN.asm
                    > USED AT LINE 2437 IN MAIN.asm
                    > USED AT LINE 2453 IN MAIN.asm
INTERPRET2:         0E5D DEFINED AT LINE 2341 IN MAIN.asm
                    > USED AT LINE 2378 IN MAIN.asm
                    > USED AT LINE 2458 IN MAIN.asm
                    > USED AT LINE 2462 IN MAIN.asm
                    > USED AT LINE 2480 IN MAIN.asm
INTERPRET3:         0E65 DEFINED AT LINE 2349 IN MAIN.asm
                    > USED AT LINE 2359 IN MAIN.asm
INTERPRET4:         0E6B DEFINED AT LINE 2355 IN MAIN.asm
                    > USED AT LINE 2347 IN MAIN.asm
INTERPRET5:         0E70 DEFINED AT LINE 2362 IN MAIN.asm
                    > USED AT LINE 2388 IN MAIN.asm
                    > USED AT LINE 2403 IN MAIN.asm
INTERPRET5A:        0E89 DEFINED AT LINE 2377 IN MAIN.asm
INTERPRET6:         0E8B DEFINED AT LINE 2380 IN MAIN.asm
                    > USED AT LINE 2366 IN MAIN.asm
INTERPRET7:         0E99 DEFINED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2370 IN MAIN.asm
INTERPRET8:         0EAC DEFINED AT LINE 2405 IN MAIN.asm
                    > USED AT LINE 2368 IN MAIN.asm
NEXT:               0EC7 DEFINED AT LINE 2418 IN MAIN.asm
                    > USED AT LINE 2318 IN MAIN.asm
                    > USED AT LINE 2422 IN MAIN.asm
NEXT0:              0EDB DEFINED AT LINE 2432 IN MAIN.asm
                    > USED AT LINE 2430 IN MAIN.asm
NEXT1:              0EDC DEFINED AT LINE 2434 IN MAIN.asm
                    > USED AT LINE 2423 IN MAIN.asm
EXIT:               0EE3 DEFINED AT LINE 2439 IN MAIN.asm
                    > USED AT LINE 2436 IN MAIN.asm
RUN:                0EE7 DEFINED AT LINE 2444 IN MAIN.asm
                    > USED AT LINE 2451 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              0EEB DEFINED AT LINE 2449 IN MAIN.asm
                    > USED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 1123 IN MAIN.asm
BACKSPACE_:         0EFD DEFINED AT LINE 2455 IN MAIN.asm
                    > USED AT LINE 2373 IN MAIN.asm
REEDIT_:            0F0D DEFINED AT LINE 2464 IN MAIN.asm
                    > USED AT LINE 2375 IN MAIN.asm
REEDIT0:            0F19 DEFINED AT LINE 2469 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
REEDIT1:            0F1D DEFINED AT LINE 2472 IN MAIN.asm
                    > USED AT LINE 2468 IN MAIN.asm
ANSIPRINTSEQ:       0F2D DEFINED AT LINE 1 IN ansi.asm
                    > USED AT LINE 19 IN ansi.asm
                    > USED AT LINE 28 IN ansi.asm
                    > USED AT LINE 47 IN ansi.asm
                    > USED AT LINE 60 IN ansi.asm
ANSICLEARSCREEN:    0F34 DEFINED AT LINE 7 IN ansi.asm
                    > USED AT LINE 805 IN MAIN.asm
ANSICLEARLINE:      0F3D DEFINED AT LINE 16 IN ansi.asm
                    > USED AT LINE 820 IN MAIN.asm
ANSIGOTO:           0F4C DEFINED AT LINE 26 IN ansi.asm
                    > USED AT LINE 798 IN MAIN.asm
ANSIMOVE:           0F69 DEFINED AT LINE 45 IN ansi.asm
                    > USED AT LINE 834 IN MAIN.asm
ANSITEXTSTYLE:      0F79 DEFINED AT LINE 57 IN ansi.asm
ANSICURSORSHOW:     0F88 DEFINED AT LINE 67 IN ansi.asm
                    > USED AT LINE 850 IN MAIN.asm
TESTSSTART:         1000 DEFINED AT LINE 14
                    > USED AT LINE 8
EXPECTM_2928S16:    1085 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2929S18:    110F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2933S23:    1191 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2934S24:    1209 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2935S25:    127F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2936S26:    12F5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2937S27:    136B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2938S28:    13E1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2939S29:    1459 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2940S30:    14D3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2941S31:    154B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2942S32:    15CD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2943S33:    1645 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2944S34:    16BD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2945S35:    1737 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2946S36:    17B1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2947S37:    1831 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2948S38:    18B1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2949S39:    192F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2950S40:    19B1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2951S41:    1A37 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2952S42:    1ABB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2953S43:    1B39 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2954S44:    1BBF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2955S45:    1C41 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2956S46:    1CBF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2957S47:    1D3D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2958S48:    1DC3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2959S49:    1E41 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2960S50:    1EBF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2961S51:    1F43 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2962S52:    1FD7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2963S53:    2051 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2964S54:    20CB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2965S55:    2147 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2966S56:    21C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2967S57:    2241 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2968S58:    22C7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2969S59:    2345 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2970S60:    23D1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2971S61:    245D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2972S62:    24EB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2973S63:    2579 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2974S64:    260B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2975S65:    269D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2976S66:    272F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2977S67:    27C1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2978S68:    2851 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2979S69:    28E1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2980S70:    2979 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2981S71:    29F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2982S72:    2A87 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2983S73:    2B15 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2984S74:    2BA5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2985S75:    2C33 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2986S76:    2CB1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2987S77:    2D31 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2988S78:    2DB1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2989S79:    2E2F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2990S80:    2EAD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2991S81:    2F2B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2992S82:    2FA9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2993S83:    3027 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2994S84:    30A5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2995S85:    3123 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2996S86:    31A1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2997S87:    3221 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2998S88:    32A1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            32AC DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
DSTACK_SIZE:        0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 8 IN ram.asm
RSTACK_SIZE:        0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
NAMES_SIZE:         0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 15 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 18 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 21 IN ram.asm
STACK:              3400 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 2319 IN MAIN.asm
                    > USED AT LINE 2323 IN MAIN.asm
                    > USED AT LINE 2327 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
DSTACK:             3400 DEFINED AT LINE 10 IN ram.asm
RSTACK:             3400 DEFINED AT LINE 12 IN ram.asm
NAMES:              3500 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
TIB:                3600 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 2338 IN MAIN.asm
                    > USED AT LINE 2346 IN MAIN.asm
                    > USED AT LINE 2382 IN MAIN.asm
                    > USED AT LINE 2392 IN MAIN.asm
                    > USED AT LINE 2407 IN MAIN.asm
                    > USED AT LINE 2410 IN MAIN.asm
                    > USED AT LINE 2467 IN MAIN.asm
                    > USED AT LINE 2476 IN MAIN.asm
BUFFER:             3700 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 993 IN MAIN.asm
                    > USED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 2233 IN MAIN.asm
VARS:               3800 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 2310 IN MAIN.asm
RESTARTS:           38D0 DEFINED AT LINE 26 IN ram.asm
RST08:              38D0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              38D2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              38D4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              38D6 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              38D8 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              38DA DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               38DC DEFINED AT LINE 34 IN ram.asm
INTVEC:             38DE DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             38E0 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            38E2 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            38E4 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            38E6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2306 IN MAIN.asm
VTIBPTR:            38E6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 2339 IN MAIN.asm
                    > USED AT LINE 2409 IN MAIN.asm
VBUFPTR:            38E8 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
                    > USED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 988 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 2226 IN MAIN.asm
                    > USED AT LINE 2232 IN MAIN.asm
                    > USED AT LINE 2234 IN MAIN.asm
VHEAPPTR:           38EA DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 1324 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 1853 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
VNAMESPTR:          38EC DEFINED AT LINE 47 IN ram.asm
VRECURPTR:          38EE DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 960 IN MAIN.asm
                    > USED AT LINE 1461 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
VDATAWIDTH:         38F0 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 659 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
                    > USED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
VNUMBASE:           38F1 DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
VHEXPREFIX:         38F2 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 677 IN MAIN.asm
VECHO:              38F3 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 1171 IN MAIN.asm
VSTRMODE:           38F4 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
                    > USED AT LINE 1731 IN MAIN.asm
VPOINTER:           38FA DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 413 IN MAIN.asm
                    > USED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
VREMAIN:            38FC DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 879 IN MAIN.asm
                    > USED AT LINE 1140 IN MAIN.asm
VSAVEDIP:           38FE DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 2292 IN MAIN.asm
                    > USED AT LINE 2412 IN MAIN.asm
VSAVEDDSP:          3900 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 2293 IN MAIN.asm
                    > USED AT LINE 2413 IN MAIN.asm
VSAVEDRSP:          3902 DEFINED AT LINE 67 IN ram.asm
                    > USED AT LINE 2294 IN MAIN.asm
                    > USED AT LINE 2414 IN MAIN.asm
VSAVEDNEXT:         3904 DEFINED AT LINE 68 IN ram.asm
                    > USED AT LINE 2295 IN MAIN.asm
                    > USED AT LINE 2415 IN MAIN.asm
VSAVEDBP:           3906 DEFINED AT LINE 69 IN ram.asm
VTEMP1:             3908 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 465 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 1416 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 1541 IN MAIN.asm
                    > USED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1672 IN MAIN.asm
                    > USED AT LINE 1680 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
                    > USED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 1854 IN MAIN.asm
                    > USED AT LINE 1866 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
VTEMP2:             390A DEFINED AT LINE 74 IN ram.asm
                    > USED AT LINE 1419 IN MAIN.asm
                    > USED AT LINE 1459 IN MAIN.asm
                    > USED AT LINE 1508 IN MAIN.asm
                    > USED AT LINE 1529 IN MAIN.asm
                    > USED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
VTEMP3:             390C DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
TBPTR:              3910 DEFINED AT LINE 77 IN ram.asm
TITLEBUF:           3912 DEFINED AT LINE 79 IN ram.asm
                    > USED AT LINE 2281 IN MAIN.asm
                    > USED AT LINE 2300 IN MAIN.asm
                    > USED AT LINE 2330 IN MAIN.asm
HEAP:               3926 DEFINED AT LINE 81 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
