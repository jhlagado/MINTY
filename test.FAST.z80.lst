0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hex./dec"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hex./dec `\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 36               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 36               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 36               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 36               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 36               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 36               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 36               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 36               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 36               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 36               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 32               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 36               LD   (RST08),HL   
0094   22 D2 36               LD   (RST10),HL   
0097   22 D4 36               LD   (RST18),HL   
009A   22 D6 36               LD   (RST20),HL   
009D   22 D8 36               LD   (RST28),HL   
00A0   22 DA 36               LD   (RST30),HL   
00A3   22 DE 36               LD   (INTVEC),HL   
00A6   22 E0 36               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 36               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 36               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0F               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  MINTY programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of MINTY code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put MINTY code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   0C                     DB   lsb(dquote_)   ; "     2
0182   04                     DB   lsb(hash_)   ; #     1
0183   09                     DB   lsb(dollar_)   ; $     1
0184   12                     DB   lsb(percent_)   ; %     1
0185   73                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   18                     DB   lsb(lparen_)   ; (     1
0188   6B                     DB   lsb(rparen_)   ; )     1
0189   A5                     DB   lsb(star_)   ; *     1
018A   C9                     DB   lsb(plus_)   ; +     1
018B   06                     DB   lsb(comma_)   ; ,     2
018C   7D                     DB   lsb(minus_)   ; -     1
018D   0F                     DB   lsb(dot_)   ; .     2
018E   1B                     DB   lsb(slash_)   ; /	    1
018F   1E                     DB   lsb(num_)   ; 0     1
0190   1E                     DB   lsb(num_)   ; 1
0191   1E                     DB   lsb(num_)   ; 2
0192   1E                     DB   lsb(num_)   ; 3
0193   1E                     DB   lsb(num_)   ; 4
0194   1E                     DB   lsb(num_)   ; 5
0195   1E                     DB   lsb(num_)   ; 6
0196   1E                     DB   lsb(num_)   ; 7
0197   1E                     DB   lsb(num_)   ; 8
0198   1E                     DB   lsb(num_)   ; 9
0199   04                     DB   lsb(colon_)   ; :     2
019A   5E                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   15                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   E5                     DB   lsb(upcase_)   ; A     1
01A1   E5                     DB   lsb(upcase_)   ; B
01A2   E5                     DB   lsb(upcase_)   ; C
01A3   E5                     DB   lsb(upcase_)   ; D
01A4   E5                     DB   lsb(upcase_)   ; E
01A5   E5                     DB   lsb(upcase_)   ; F
01A6   E5                     DB   lsb(upcase_)   ; G
01A7   E5                     DB   lsb(upcase_)   ; h
01A8   E5                     DB   lsb(upcase_)   ; I
01A9   E5                     DB   lsb(upcase_)   ; J
01AA   E5                     DB   lsb(upcase_)   ; K
01AB   E5                     DB   lsb(upcase_)   ; L
01AC   E5                     DB   lsb(upcase_)   ; M
01AD   E5                     DB   lsb(upcase_)   ; N
01AE   E5                     DB   lsb(upcase_)   ; O
01AF   E5                     DB   lsb(upcase_)   ; p
01B0   E5                     DB   lsb(upcase_)   ; Q
01B1   E5                     DB   lsb(upcase_)   ; R
01B2   E5                     DB   lsb(upcase_)   ; S
01B3   E5                     DB   lsb(upcase_)   ; T
01B4   E5                     DB   lsb(upcase_)   ; U
01B5   E5                     DB   lsb(upcase_)   ; V
01B6   E5                     DB   lsb(upcase_)   ; W
01B7   E5                     DB   lsb(upcase_)   ; X
01B8   E5                     DB   lsb(upcase_)   ; Y
01B9   E5                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 34                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 35                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   26 37                  DW   HEAP   ; vHeapPtr start of the free mem
01E4   00 33                  DW   NAMES   ; vNamesPtr
01E6   00 00                  DW   NUL   ; vRecurPtr
01E8   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E9   0A                     DB   10   ; vNumBase = 10
01EA   24                     DB   "$"   ; vHexPrefix
01EB   FF                     DB   TRUE   ; vEcho
01EC   00                     DB   FALSE   ; vStrMode
01ED   00                     DB   0   
01EE   00                     DB   0   
01EF   00                     DB   0   
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 49 4E 54 59 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMINTY V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                COLON_:      
0204                HASH_:       
0204   DD E9                  JP   (ix)   
0206                COMMA_:      
0206   C3 A4 07               JP   comma   
0209                DOLLAR_:      
0209   C3 4C 08               JP   dollar   
020C                DQUOTE_:      
020C                QUOTE_:      
020C   C3 76 08               JP   quote   
020F                DOT_:        
020F   C3 00 04               JP   dot   
0212                PERCENT_:      
0212   C3 90 08               JP   percent   
0215                QUESTION_:      
0215   C3 69 08               JP   question   
0218                LPAREN_:      
0218   C3 CB 03               JP   lbrace   
021B                SLASH_:      
021B   C3 00 05               JP   slash   
021E                NUM_:        
021E   C3 C5 08               JP   num   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 07 0A               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 EF 09               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 00 0A               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA 67 0A               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA 4B 0A               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA 0E 0A               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 13 0A               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                SEMICOLON_:      
025E                SEMICOLON:      
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A F0 36               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   C3 00 0C               JP   variable   
026B                             ;                               4
026B                RPAREN_:      
026B                             ; jp rparen
026B                RPAREN:      
026B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
026E   FD 46 09               LD   b,(iy+9)   
0271   DD E9                  JP   (ix)   
0273                             ; & and                          14
0273                             ; a b -- c
0273                AMPER_:      
0273                AMPER:       
0273                AND:         
0273   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0274   E1                     POP   hl   
0275   7B                     LD   a,e   
0276   A5                     AND   l   
0277   6F                     LD   l,a   
0278   7A                     LD   a,d   
0279   A4                     AND   h   
027A   67                     LD   h,a   
027B   18 5B                  JR   add3   
027D                             ; - sub
027D                             ; a b -- c
027D                             ; -- sub
027D                             ; b1 -- b2
027D                             ; -= sub
027D                             ; a b1 -- b2
027D                MINUS_:      
027D                MINUS:       
027D   03                     INC   bc   ; check if sign of a number
027E   0A                     LD   a,(bc)   
027F   0B                     DEC   bc   
0280   FE 30                  CP   "0"   
0282   38 05                  JR   c,sub   
0284   FE 3A                  CP   "9"+1   
0286   DA C5 08               JP   c,num   
0289                SUB:         ; Subtract the value 2nd on stack from top of stack
0289   E1                     POP   hl   ; hl = arg_b
028A   03                     INC   bc   
028B   FE 2D                  CP   "-"   
028D   20 04                  JR   nz,sub1   
028F   2B                     DEC   hl   ; --
0290   C3 F1 09               JP   assign0   
0293                SUB1:        
0293   D1                     POP   de   ; de = arg_a
0294   FE 3D                  CP   "="   
0296   28 02                  JR   z,sub2   
0298   0B                     DEC   bc   ; -
0299   EB                     EX   de,hl   
029A                SUB2:        
029A   B7                     OR   a   ; -=
029B   ED 52                  SBC   hl,de   
029D                SUB3:        
029D   FE 3D                  CP   "="   
029F   CA F1 09               JP   z,assign0   
02A2   E5                     PUSH   hl   
02A3   DD E9                  JP   (ix)   
02A5                STAR_:       ; 21
02A5                STAR:        
02A5   03                     INC   bc   ; check for ** spread
02A6   0A                     LD   a,(bc)   
02A7   FE 2A                  CP   "*"   
02A9   CA 27 0A               JP   z,spread   
02AC   0B                     DEC   bc   
02AD                MUL:         
02AD   D1                     POP   de   ; get first value
02AE   E1                     POP   hl   
02AF                MUL2:        
02AF   C5                     PUSH   bc   ; Preserve the IP
02B0   44 4D                  LD   bc,hl   ; bc = 2nd value
02B2   21 00 00               LD   hl,0   
02B5   3E 10                  LD   a,16   
02B7                MUL3:        
02B7   29                     ADD   hl,hl   
02B8   CB 13                  RL   e   
02BA   CB 12                  RL   d   
02BC   30 04                  JR   nc,$+6   
02BE   09                     ADD   hl,bc   
02BF   30 01                  JR   nc,$+3   
02C1   13                     INC   de   
02C2   3D                     DEC   a   
02C3   20 F2                  JR   nz,mul3   
02C5   C1                     POP   bc   ; Restore the IP
02C6   C3 D8 02               JP   add3   
02C9                             ; + add                         25
02C9                             ; a b -- c
02C9                PLUS_:       
02C9                PLUS:        
02C9                ADD:         
02C9   03                     INC   bc   
02CA   0A                     LD   a,(bc)   
02CB   FE 2B                  CP   "+"   ; ++ increment variable
02CD   20 05                  JR   nz,add1   
02CF   E1                     POP   hl   
02D0   23                     INC   hl   
02D1   C3 F1 09               JP   assign0   
02D4                ADD1:        
02D4   0B                     DEC   bc   
02D5   D1                     POP   de   ; second term
02D6   E1                     POP   hl   ; first term
02D7   19                     ADD   hl,de   
02D8                ADD3:        
02D8   03                     INC   bc   
02D9   0A                     LD   a,(bc)   
02DA   FE 3D                  CP   "="   
02DC   28 04                  JR   z,add4   
02DE   0B                     DEC   bc   
02DF   E5                     PUSH   hl   
02E0   DD E9                  JP   (ix)   
02E2                ADD4:        
02E2   C3 F1 09               JP   assign0   
02E5                             ;                               18
02E5                UPCASE_:      
02E5                UPCASE:      
02E5   0A                     LD   a,(bc)   ; a = identifier char
02E6   D6 41                  SUB   "A"   ; "A" = 0
02E8   18 1B                  JR   ident1   
02EA                             ;********************** PAGE 2 END *********************************************
02EA                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 36                  LD   h,msb(VARS)   
0309   22 FA 36               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD B9 0A               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 3C 0E               JP   error   
0343                LAMBDA2:      
0343   CD EF 0A               CALL   parseBlock   
0346   CD 5E 0B               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 08 37            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EA 36               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A F0 36               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EA 36            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EA 36               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 08 37            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA 62 09               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 95 09               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA 62 09               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 36            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 36            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 9F 0A               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD EF 0A               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 D8 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 F5 08               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 42 08               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B FA 36            LD   de,(vPointer)   
03ED   21 FA 36               LD   hl,vPointer   
03F0   C3 00 0C               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   03                     INC   bc   
0401   0A                     LD   a,(bc)   
0402   FE 61                  CP   "a"   ; .a print array
0404   28 0B                  JR   z,printArray   
0406   FE 63                  CP   "c"   ; .c print char
0408   28 0A                  JR   z,printChar   
040A   FE 73                  CP   "s"   ; .s print string
040C   28 15                  JR   z,printString   
040E   0B                     DEC   bc   
040F   18 27                  JR   printNumber   ; .  print number, fall through
0411                PRINTARRAY:      ; TODO
0411   C3 9F 0A               JP   dotNext   
0414                             ; .c print char
0414                             ; char --
0414                PRINTCHAR:      
0414   E1                     POP   hl   ; a = char
0415   7D                     LD   a,l   
0416   ED 5B E8 36            LD   de,(vBufPtr)   ; de = buffer*
041A   12                     LD   (de),a   
041B   13                     INC   de   
041C   ED 53 E8 36            LD   (vBufPtr),de   ; save buffer*'
0420   C3 9F 0A               JP   dotNext   
0423                             ; .s print string
0423                             ; string* --
0423                PRINTSTRING:      
0423   E1                     POP   hl   ; hl = string*
0424   ED 5B E8 36            LD   de,(vBufPtr)   ; de = buffer*
0428   18 03                  JR   printString1   
042A                PRINTSTRING0:      
042A   12                     LD   (de),a   ; a -> buffer*
042B   13                     INC   de   ; string*++,
042C   23                     INC   hl   
042D                PRINTSTRING1:      
042D   7E                     LD   a,(hl)   ; a <- string*
042E   B7                     OR   a   ; if NUL exit loop
042F   20 F9                  JR   nz,printString0   
0431   ED 53 E8 36            LD   (vBufPtr),de   ; save buffer*' in pointer
0435   C3 9F 0A               JP   dotNext   
0438                             ; . print decimal
0438                             ; value --
0438                PRINTNUMBER:      
0438   3A F1 36               LD   a,(vNumBase)   
043B   FE 10                  CP   16   
043D   CA 60 04               JP   z,printHex   ; else falls through
0440   C3 43 04               JP   printDec   
0443                             ; print decimal                 ; 70
0443                             ; value --
0443                PRINTDEC:      
0443   ED 5B E8 36            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0447   D9                     EXX      
0448   E1                     POP   hl   ; hl = value
0449   3A F0 36               LD   a,(vDataWidth)   
044C   3D                     DEC   a   
044D   20 02                  JR   nz,printDec1   
044F   26 00                  LD   h,0   
0451                PRINTDEC1:      
0451   CD 72 0C               CALL   formatDec   
0454   D9                     EXX      ; de = buffer*' bc = IP
0455   3E 20                  LD   a," "   ; append space to buffer
0457   12                     LD   (de),a   
0458   13                     INC   de   ; string*++,
0459   ED 53 E8 36            LD   (vBufPtr),de   ; update buffer* with buffer*'
045D   C3 9F 0A               JP   dotNext   
0460                             ; buffer hex                    37
0460                             ; value --
0460                PRINTHEX:      
0460   ED 5B E8 36            LD   de,(vBufPtr)   
0464   3A F2 36               LD   a,(vHexPrefix)   ; "$"
0467   B7                     OR   a   ; skip if null
0468   28 02                  JR   z,printHex1   
046A   12                     LD   (de),a   
046B   13                     INC   de   ; string*++,
046C                PRINTHEX1:      
046C   E1                     POP   hl   ; hl = value
046D   3A F0 36               LD   a,(vDataWidth)   
0470   3D                     DEC   a   
0471   28 04                  JR   z,printHex2   
0473   7C                     LD   a,h   
0474   CD 86 04               CALL   printHex3   
0477                PRINTHEX2:      
0477   7D                     LD   a,l   
0478   CD 86 04               CALL   printHex3   
047B   3E 20                  LD   a," "   ; append space to buffer
047D   12                     LD   (de),a   
047E   13                     INC   de   ; string*++,
047F   ED 53 E8 36            LD   (vBufPtr),de   
0483   C3 9F 0A               JP   dotNext   
0486                PRINTHEX3:      
0486   F5                     PUSH   af   
0487   1F                     RRA      
0488   1F                     RRA      
0489   1F                     RRA      
048A   1F                     RRA      
048B   CD 8F 04               CALL   printHex4   
048E   F1                     POP   af   
048F                PRINTHEX4:      
048F   E6 0F                  AND   0x0F   
0491   C6 90                  ADD   a,0x90   
0493   27                     DAA      
0494   CE 40                  ADC   a,0x40   
0496   27                     DAA      
0497   12                     LD   (de),a   
0498   13                     INC   de   ; string*++,
0499   C9                     RET      
049A                             ;********************** PAGE 4 END *********************************************
049A                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA 29 07               JP   z,comment   
0507   CD 2D 0C               CALL   identHash   
050A   21 83 07               LD   hl,error1   
050D   CD 3F 0C               CALL   commandTable   
0510   59 00 00 00 00 62 00 00 00 00 00 00 00 73 00 00 DB   lsb(div_),0,0,0,0,lsb(f_),0,0,0,0,0,0,0,lsb(word_),0,0   
0520   00 00 00 DB 10 00 52 00 00 00 00 00 00 65 00 00 DB   0,0,0,lsb(t_),lsb(abs_),0,lsb(dec_),0,0,0,0,0,0,lsb(in_),0,0   
0530   00 00 2E 20 00 00 00 00 00 36 00 00 00 00 00 00 DB   0,0,lsb(cgo_),lsb(aln_),0,0,0,0,0,lsb(cll_),0,0,0,0,0,0   
0540   3F 00 00 00 00 44 00 00 2B 00 00 41 00 00 00 00 DB   lsb(cls_),0,0,0,0,lsb(cmv_),0,0,lsb(bye_),0,0,lsb(hex_),0,0,0,0   
0550   00 32 00 00 5C 00 00 51 00 00 00 92 00 5D 9A 79 DB   0,lsb(cur_),0,0,lsb(echo_),0,0,lsb(max_),0,0,0,lsb(sbb_),0,lsb(min_),lsb(sbe_),lsb(nil_)   
0560   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0   
0570   00 00 29 00 00 29 00 00 00 00 00 D4 00 00 00 00 DB   0,0,lsb(args_),0,0,lsb(var_),0,0,0,0,0,lsb(sln_),0,0,0,0   
0580   00 7C 00 70 00 00 00 88 46 00 00 00 00 00 00 00 DB   0,lsb(recur_),0,lsb(out_),0,0,0,lsb(return_),lsb(free_),0,0,0,0,0,0,0   
0590   00 00 00 00 00 00 00 00 00 78 69 00 00 00 00 00 DB   0,0,0,0,0,0,0,0,0,lsb(xor_),lsb(sys_),0,0,0,0,0   
05A0   00 00 22 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,lsb(byte_),0,0,0,0,0,0,0,0,0,0,0,0,0   
05B0   00 00 1E 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,lsb(alloc_),0,0,0,0,0,0,0,0,0,0,0,0,0   
05C0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C9 DB   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,lsb(scmp_)   
05D0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0   
05E0   00 00 08 00 00 00 00 00 00 00 00 00 00 82 00 00 DB   0,0,lsb(while_),0,0,0,0,0,0,0,0,0,0,lsb(remain_),0,0   
05F0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0   
0600   00 00 00 6B 00 00 00 00 00 00 00 00 00 00 00 D1 DB   0,0,0,lsb(void_),0,0,0,0,0,0,0,0,0,0,0,lsb(select_)   
0610                             ;********************** PAGE 5 END *********************************************
0610                             ;********************** PAGE 6 BEGIN *********************************************
0610                             ; /abs absolute
0610                             ; num -- num
0610                ABS_:        
0610                ABSOLUTE:      
0610   E1                     POP   hl   
0611   CB 7C                  BIT   7,h   
0613   28 06                  JR   z,absolute1   
0615   AF                     XOR   a   
0616   95                     SUB   l   
0617   6F                     LD   l,a   
0618   9F                     SBC   a,a   
0619   94                     SUB   h   
061A   67                     LD   h,a   
061B                ABSOLUTE1:      
061B   E5                     PUSH   hl   
061C   DD E9                  JP   (ix)   
061E                             ; /alloc
061E                             ; size -- adr
061E                ALLOC_:      
061E                MEMALLOCATE:      
061E   DD E9                  JP   (ix)   
0620                             ; /aln length of an array, num elements
0620                             ; array* -- num
0620                ALN_:        
0620                ARRAYLENGTH:      
0620   E1                     POP   hl   
0621   2B                     DEC   hl   ; msb size
0622   56                     LD   d,(hl)   
0623   2B                     DEC   hl   ; lsb size
0624   5E                     LD   e,(hl)   
0625   EB                     EX   de,hl   
0626                ARRAYLENGTH1:      
0626   E5                     PUSH   hl   
0627   DD E9                  JP   (ix)   
0629                             ; /args
0629                ARGS_:       
0629                             ; /var
0629                VAR_:        
0629   DD E9                  JP   (ix)   
062B                             ; /bye
062B                BYE_:        
062B   C3 65 0D               JP   coldBoot0   
062E                             ; /cgo cursorGo
062E                             ; row column --
062E                CGO_:        
062E                CURSORGO:      
062E   D1                     POP   de   
062F   E1                     POP   hl   
0630   62                     LD   h,d   
0631   CD 9D 0E               CALL   ansiGoto   
0634   DD E9                  JP   (ix)   
0636                             ; /cll clear line
0636                             ; num --
0636                CLL_:        
0636                CLEARLINE:      
0636   E1                     POP   hl   
0637   7D                     LD   a,l   
0638   E6 03                  AND   $03   
063A   CD 8E 0E               CALL   ansiClearLine   
063D   DD E9                  JP   (ix)   
063F                             ; /cls clear screen
063F                             ; --
063F                CLS_:        
063F                CLEARSCREEN:      
063F   CD 85 0E               CALL   ansiClearScreen   
0642   DD E9                  JP   (ix)   
0644                             ; /cmv cursor move
0644                             ; x dir --
0644                CMV_:        
0644                CURSORMOVE:      
0644   E1                     POP   hl   
0645   7D                     LD   a,l   
0646   E6 03                  AND   $03   
0648   C6 41                  ADD   a,"A"   
064A   67                     LD   h,a   
064B   D1                     POP   de   
064C   6B                     LD   l,e   
064D   CD BA 0E               CALL   ansiMove   
0650                CURSORMOVE1:      
0650   DD E9                  JP   (ix)   
0652                DEC_:        
0652                DECBASE:      
0652   3E 0A                  LD   a,10   
0654                DECBASE1:      
0654   32 F1 36               LD   (vNumBase),a   
0657   DD E9                  JP   (ix)   
0659                             ; /div
0659                DIV_:        
0659   C3 89 07               JP   div1   
065C                             ; /ech
065C                             ; bool --
065C                ECHO_:       
065C                ECHO:        
065C   E1                     POP   hl   
065D   22 F3 36               LD   (vEcho),hl   
0660   DD E9                  JP   (ix)   
0662                             ; /f
0662                F_:          
0662   C3 21 0A               JP   false1   
0665                             ; Z80 port input
0665                             ; /in
0665                             ; port -- value
0665                IN_:         
0665                INPUT:       
0665   E1                     POP   hl   
0666   59                     LD   e,c   ; save IP
0667   4D                     LD   c,l   
0668   ED 68                  IN   l,(c)   
066A   26 00                  LD   h,0   
066C   4B                     LD   c,e   ; restore IP
066D   E5                     PUSH   hl   
066E   DD E9                  JP   (ix)   
0670                             ; /o Z80 port output
0670                             ; value port --
0670                OUT_:        
0670                OUTPUT:      
0670   E1                     POP   hl   
0671   59                     LD   e,c   ; save IP
0672   4D                     LD   c,l   
0673   E1                     POP   hl   
0674   ED 69                  OUT   (c),l   
0676   4B                     LD   c,e   ; restore IP
0677   DD E9                  JP   (ix)   
0679                             ; /nil
0679                NIL_:        
0679   C3 21 0A               JP   null1   
067C                             ; /rec
067C                RECUR_:      
067C                RECUR:       
067C   E1                     POP   hl   
067D   22 EE 36               LD   (vRecurPtr),hl   
0680   DD E9                  JP   (ix)   
0682                             ; rem
0682                REMAIN_:      
0682                REMAIN:      
0682   2A FC 36               LD   hl,(vRemain)   
0685   E5                     PUSH   hl   
0686   DD E9                  JP   (ix)   
0688                             ; /ret
0688                             ; --
0688                RETURN_:      
0688                RETURN:      
0688   E1                     POP   hl   ; hl = condition, exit if true
0689   7D                     LD   a,l   
068A   B4                     OR   h   
068B   20 02                  JR   nz,return1   
068D   DD E9                  JP   (ix)   
068F                RETURN1:      
068F   C3 F5 08               JP   blockEnd   
0692                             ; /sbb
0692                SBB_:        
0692                STRINGBEGIN:      
0692   21 FF FF               LD   hl,TRUE   ; string mode = true
0695   22 F4 36               LD   (vStrMode),hl   
0698   18 27                  JR   stringEnd1   ; save hl in vBufPtr
069A                             ; /sbe
069A                             ; -- str*
069A                SBE_:        
069A                STRINGEND:      
069A   21 00 00               LD   hl,FALSE   ; string mode = false
069D   22 F4 36               LD   (vStrMode),hl   
06A0   2A E8 36               LD   hl,(vBufPtr)   ; append NUL to string
06A3   AF                     XOR   a   
06A4   77                     LD   (hl),a   
06A5   23                     INC   hl   ; hl = string_end*
06A6   ED 43 08 37            LD   (vTemp1),bc   ; save IP
06AA   11 00 35               LD   de,BUFFER   ; de = string*
06AD   B7                     OR   a   ; bc = size
06AE   ED 52                  SBC   hl,de   
06B0   44 4D                  LD   bc,hl   
06B2   2A EA 36               LD   hl,(vHeapPtr)   ; hl = hstring*
06B5   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06B6   D5                     PUSH   de   ; return hstring*
06B7   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06B9   ED 53 EA 36            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06BD   ED 4B 08 37            LD   bc,(vTemp1)   ; restore IP
06C1                STRINGEND1:      
06C1   21 00 35               LD   hl,BUFFER   ; reset vBufPtr
06C4   22 E8 36               LD   (vBufPtr),hl   
06C7   DD E9                  JP   (ix)   
06C9                             ; /scp string compare
06C9                SCMP_:       
06C9   D1                     POP   de   
06CA   E1                     POP   hl   
06CB   CD 21 0D               CALL   stringCompare   
06CE   E5                     PUSH   hl   
06CF   DD E9                  JP   (ix)   
06D1                             ; select case from an associative array of cases
06D1                             ; bool cases* --
06D1                SELECT_:      
06D1   C3 1B 08               JP   select   
06D4                             ; /sln
06D4                SLN_:        
06D4   D1                     POP   de   
06D5   CD 36 0D               CALL   stringLength   
06D8   E5                     PUSH   hl   
06D9   DD E9                  JP   (ix)   
06DB                             ; /t
06DB                T_:          
06DB   C3 1B 0A               JP   true1   
06DE                             ;********************** PAGE 6 END *********************************************
06DE                          ALIGN   $100   
0700                             ;********************** PAGE 7 BEGIN *********************************************
0700                             ; /adr addrOf
0700                             ; char -- addr
0700                ADR_:        
0700                ADDROF:      
0700   E1                     POP   hl   ; a = char
0701   7D                     LD   a,l   
0702   CD 4F 0C               CALL   getVarAddr   
0705   E5                     PUSH   hl   
0706                ADDROF2:      
0706   DD E9                  JP   (ix)   
0708                             ; 13
0708                             ; /whi while true else break from loop
0708                             ; --
0708                WHILE_:      
0708                WHILE:       
0708   E1                     POP   hl   ; hl = condition, break if false
0709   7D                     LD   a,l   
070A   B4                     OR   h   
070B   28 02                  JR   z,while1   
070D   DD E9                  JP   (ix)   
070F                WHILE1:      
070F   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0711   FD 54                  LD   d,iyh   
0713   21 08 00               LD   hl,8   
0716   19                     ADD   hl,de   
0717   23                     INC   hl   
0718   23                     INC   hl   
0719   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
071C   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
071F   C3 F5 08               JP   blockEnd   
0722                             ; /byt
0722                BYTE_:       
0722                BYTEMODE:      
0722   3E 01                  LD   a,1   
0724                BYTEMODE1:      
0724   32 F0 36               LD   (vDataWidth),a   
0727   DD E9                  JP   (ix)   
0729                             ; //
0729                CMT_:        
0729                COMMENT:      
0729   03                     INC   bc   ; point to next char
072A   0A                     LD   a,(bc)   
072B   FE 20                  CP   " "   ; terminate on any char less than SP
072D   30 FA                  JR   nc,comment   
072F   0B                     DEC   bc   
0730   DD E9                  JP   (ix)   
0732                             ; /cur cursor hide / show
0732                             ; bool --
0732                CUR_:        
0732                CURSORSHOW:      
0732   E1                     POP   hl   
0733   23                     INC   hl   
0734   7D                     LD   a,l   
0735   B4                     OR   h   
0736   3E 68                  LD   a,"h"   
0738   28 02                  JR   z,cursorShow1   
073A   3E 6C                  LD   a,"l"   
073C                CURSORSHOW1:      
073C   CD D9 0E               CALL   ansiCursorShow   
073F   DD E9                  JP   (ix)   
0741                HEX_:        
0741   3E 10                  LD   a,16   
0743   C3 54 06               JP   decBase1   
0746                             ; /free
0746                             ; adr --
0746                FREE_:       
0746                MEMFREE:      
0746   E1                     POP   hl   
0747                MEMFREE1:      
0747   22 EA 36               LD   (vHeapPtr),hl   
074A   DD E9                  JP   (ix)   
074C                             ; /fra
074C                             ; adr --
074C                FRA_:        
074C                MEMFREEARRAY:      
074C   E1                     POP   hl   
074D   2B                     DEC   hl   
074E   2B                     DEC   hl   
074F   18 F6                  JR   memFree1   
0751                             ; /max maximum
0751                             ; a b -- c
0751                MAX_:        
0751                MAXIMUM:      
0751   E1                     POP   hl   
0752   D1                     POP   de   
0753   E5                     PUSH   hl   
0754   B3                     OR   e   
0755   ED 52                  SBC   hl,de   
0757   30 02                  JR   nc,maximum1   
0759   E1                     POP   hl   
075A   D5                     PUSH   de   
075B                MAXIMUM1:      
075B   DD E9                  JP   (ix)   
075D                             ; /min minimum
075D                             ; a b -- c
075D                MIN_:        
075D                MINIMUM:      
075D   E1                     POP   hl   
075E   D1                     POP   de   
075F   E5                     PUSH   hl   
0760   B3                     OR   e   
0761   ED 52                  SBC   hl,de   
0763   38 02                  JR   c,minimum1   
0765   E1                     POP   hl   
0766   D5                     PUSH   de   
0767                MINIMUM1:      
0767   DD E9                  JP   (ix)   
0769                             ; /sys
0769                SYS_:        
0769   DD E9                  JP   (ix)   
076B                             ; /voi clear out returned values
076B                             ; ?? --
076B                VOID_:       
076B                VOID:        
076B   FD 5D                  LD   e,iyl   
076D   FD 54                  LD   d,iyh   
076F   EB                     EX   de,hl   
0770   F9                     LD   sp,hl   
0771   DD E9                  JP   (ix)   
0773                             ; /wrd
0773                WORD_:       
0773                WORDMODE:      
0773   3E 02                  LD   a,2   
0775   C3 24 07               JP   byteMode1   
0778                             ; /xor
0778                XOR_:        
0778   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0779                XOR1:        
0779   E1                     POP   hl   
077A   7B                     LD   a,e   
077B   AD                     XOR   l   
077C   6F                     LD   l,a   
077D   7A                     LD   a,d   
077E   AC                     XOR   h   
077F   67                     LD   h,a   
0780   C3 D8 02               JP   add3   
0783                             ;*******************************************************************
0783                             ; implementations continued
0783                             ;*******************************************************************
0783                ERROR1:      
0783   21 01 00               LD   hl,1   ; error 1: unknown command
0786   C3 3C 0E               JP   error   
0789                DIV1:        
0789   E1                     POP   hl   ; hl = arg_b
078A   D1                     POP   de   ; de = arg_a
078B   03                     INC   bc   
078C   0A                     LD   a,(bc)   
078D   FE 3D                  CP   "="   
078F   28 02                  JR   z,div2   
0791   0B                     DEC   bc   ; /
0792   EB                     EX   de,hl   
0793                DIV2:        
0793   F5                     PUSH   af   ; preserve af, bc
0794   C5                     PUSH   bc   
0795   44 4D                  LD   bc,hl   
0797   CD 86 0A               CALL   divide   
079A   EB                     EX   de,hl   
079B   ED 53 FC 36            LD   (vRemain),de   
079F   C1                     POP   bc   ; restore
07A0   F1                     POP   af   
07A1   C3 9D 02               JP   sub3   
07A4                COMMA:       
07A4   03                     INC   bc   
07A5   0A                     LD   a,(bc)   
07A6   FE 63                  CP   "c"   ; .c print char
07A8   28 07                  JR   z,readChar   
07AA   FE 73                  CP   "s"   ; .s print string
07AC   28 0C                  JR   z,readString   
07AE   0B                     DEC   bc   
07AF   18 2B                  JR   readNumber   ; .  print number, fall through
07B1                READCHAR:      
07B1   CD 81 00               CALL   getchar   
07B4   26 00                  LD   h,0   
07B6   6F                     LD   l,a   
07B7   E5                     PUSH   hl   
07B8   DD E9                  JP   (ix)   
07BA                READSTRING:      
07BA   ED 5B EA 36            LD   de,(vHeapPtr)   
07BE   D5                     PUSH   de   ; return start of string
07BF                READSTRING1:      
07BF   CD 81 00               CALL   getchar   
07C2   FE 0D                  CP   "\r"   
07C4   28 0D                  JR   z,readString2   
07C6   12                     LD   (de),a   
07C7   13                     INC   de   
07C8   3A F3 36               LD   a,(vEcho)   
07CB   3C                     INC   a   
07CC   20 F1                  JR   nz,readString1   
07CE   CD 85 00               CALL   putchar   
07D1   18 EC                  JR   readString1   
07D3                READSTRING2:      
07D3   AF                     XOR   a   
07D4   12                     LD   (de),a   
07D5   13                     INC   de   
07D6   ED 53 EA 36            LD   (vHeapPtr),de   
07DA   DD E9                  JP   (ix)   
07DC                READNUMBER:      
07DC   DD E5                  PUSH   ix   
07DE                          ;*Macro unroll:  PERFORM readString
07DE   DD 21 E5 07            LD   ix,performM_1656S1200   
07E2   C3 BA 07               JP   readString   
07E5                PERFORMM_1656S1200:      
07E5   60 69                  LD   hl,bc   ; save bc, hl = string*
07E7   E3                     EX   (sp),hl   
07E8   22 EA 36               LD   (vHeapPtr),hl   ; restore heap* to before string
07EB   44 4D                  LD   bc,hl   
07ED   0A                     LD   a,(bc)   
07EE   FE 2D                  CP   "-"   
07F0   28 11                  JR   z,readNumber1   
07F2   FE 24                  CP   "$"   
07F4   28 17                  JR   z,readNumber2   
07F6   FE 30                  CP   "0"   
07F8   30 09                  JR   nc,readNumber1   
07FA   FE 3A                  CP   "9"+1   
07FC   38 05                  JR   c,readNumber1   
07FE   21 00 00               LD   hl,0   
0801   18 12                  JR   readNumber3   
0803                READNUMBER1:      
0803                          ;*Macro unroll:  PERFORM num
0803   DD 21 0A 08            LD   ix,performM_1673S1217   
0807   C3 C5 08               JP   num   
080A                PERFORMM_1673S1217:      
080A   E1                     POP   hl   
080B   18 08                  JR   readNumber3   
080D                READNUMBER2:      
080D                          ;*Macro unroll:  PERFORM hexNum
080D   DD 21 14 08            LD   ix,performM_1677S1221   
0811   C3 4C 08               JP   hexNum   
0814                PERFORMM_1677S1221:      
0814   E1                     POP   hl   
0815                READNUMBER3:      
0815   C1                     POP   bc   
0816   DD E1                  POP   ix   
0818   E5                     PUSH   hl   
0819   DD E9                  JP   (ix)   
081B                SELECT:      
081B   E1                     POP   hl   ; hl = case associative array [ key1 value1 ... ]
081C   D1                     POP   de   ; de = select key
081D   C5                     PUSH   bc   ; save IP
081E   2B                     DEC   hl   ; bc = array length
081F   46                     LD   b,(hl)   
0820   2B                     DEC   hl   
0821   4E                     LD   c,(hl)   
0822   23                     INC   hl   
0823   23                     INC   hl   
0824   18 15                  JR   select2   
0826                SELECT1:      
0826   7E                     LD   a,(hl)   ; compare lsb case key with lsb select key, hl++
0827   BB                     CP   e   
0828   23                     INC   hl   ; hl++, flags are unaltered
0829   20 0C                  JR   nz,select1a   
082B   7E                     LD   a,(hl)   ; compare msb case key with msb select key, hl++
082C   BA                     CP   d   
082D   23                     INC   hl   ; hl++, flags are unaltered
082E   20 08                  JR   nz,select1b   
0830   5E                     LD   e,(hl)   
0831   23                     INC   hl   
0832   56                     LD   d,(hl)   
0833   C1                     POP   bc   
0834   C3 A0 03               JP   go1   
0837                SELECT1A:      
0837   23                     INC   hl   
0838                SELECT1B:      
0838   23                     INC   hl   
0839   23                     INC   hl   
083A   0B                     DEC   bc   
083B                SELECT2:      
083B   79                     LD   a,c   
083C   B0                     OR   b   
083D   20 E7                  JR   nz,select1   
083F   C1                     POP   bc   
0840   DD E9                  JP   (ix)   
0842                             ; ~ bitwise invert
0842                TILDE:       
0842                INVERT:      
0842   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0843   7D                     LD   a,l   
0844   2F                     CPL      
0845   6F                     LD   l,a   
0846   7C                     LD   a,h   
0847   2F                     CPL      
0848   67                     LD   h,a   
0849   C3 D8 02               JP   add3   
084C                             ; $ hex                         ; 22
084C                DOLLAR:      
084C                HEXNUM:      
084C   21 00 00               LD   hl,0   ; Clear hl to accept the number
084F                HEXNUM1:      
084F   03                     INC   bc   
0850   0A                     LD   a,(bc)   ; Get the character which is a numeral
0851   CB 77                  BIT   6,a   ; is it uppercase alpha?
0853   28 02                  JR   z,hexnum2   ; no a decimal
0855   D6 07                  SUB   7   ; sub 7  to make $a - $F
0857                HEXNUM2:      
0857   D6 30                  SUB   $30   ; form decimal digit
0859   DA E7 08               JP   c,num2   
085C   FE 10                  CP   $0F+1   
085E   D2 E7 08               JP   nc,num2   
0861   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0862   29                     ADD   hl,hl   ; 4X
0863   29                     ADD   hl,hl   ; 8X
0864   29                     ADD   hl,hl   ; 16X
0865   85                     ADD   a,l   ; add into bottom of hl
0866   6F                     LD   l,a   
0867   18 E6                  JR   hexnum1   
0869                             ; ? if                            23
0869                             ; condition then else -- value
0869                QUESTION:      
0869                IF:          
0869   D1                     POP   de   ; de = else
086A   E1                     POP   hl   ; hl = then
086B   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
086C   7C                     LD   a,h   
086D   B5                     OR   l   
086E   E1                     POP   hl   ; hl = then
086F   CA A0 03               JP   z,go1   ; if z de = else
0872   EB                     EX   de,hl   ; condition = false, de = then
0873   C3 A0 03               JP   go1   
0876                             ; string                        ;38
0876                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0876                QUOTE:       
0876                STRING:      
0876   2A EA 36               LD   hl,(vHeapPtr)   ; hl = heap*
0879   E5                     PUSH   hl   ; save start of string
087A   0A                     LD   a,(bc)   
087B   5F                     LD   e,a   ; e = matching terminator
087C   03                     INC   bc   ; point to next char
087D   18 03                  JR   string2   
087F                STRING1:      
087F   77                     LD   (hl),a   
0880   23                     INC   hl   ; increase count
0881   03                     INC   bc   ; point to next char
0882                STRING2:      
0882   0A                     LD   a,(bc)   
0883   BB                     CP   e   ; is it the string terminator
0884   28 02                  JR   z,string3   
0886   18 F7                  JR   string1   
0888                STRING3:      
0888   AF                     XOR   a   ; write NUL to terminate string
0889   77                     LD   (hl),a   ; hl = end of string
088A   23                     INC   hl   
088B   22 EA 36               LD   (vHeapPtr),hl   ; bump heap* to after end of string
088E   DD E9                  JP   (ix)   
0890                             ; %a .. %z                      43
0890                             ; -- value
0890                             ; returns value of arg
0890                PERCENT:      
0890                ARG:         
0890   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0893   FD 56 05               LD   d,(iy+5)   
0896   EB                     EX   de,hl   
0897   7D                     LD   a,l   ; arg_list* == null, skip
0898   B4                     OR   h   
0899   28 1A                  JR   z,arg0a   
089B   23                     INC   hl   ; a = num_args, hl = arg_list*
089C   7E                     LD   a,(hl)   
089D   23                     INC   hl   
089E   B7                     OR   a   
089F   28 14                  JR   z,arg0a   ; num_args == 0, skip
08A1   5F                     LD   e,a   ; e = a = num_args
08A2   03                     INC   bc   ; a = next char = dollar_name
08A3   0A                     LD   a,(bc)   
08A4   C5                     PUSH   bc   ; save IP
08A5   43                     LD   b,e   ; b = e = num_args
08A6   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
08A9   FD 56 03               LD   d,(iy+3)   
08AC                ARG0:        
08AC   1B                     DEC   de   ; a = dollar_name, de = next arg*
08AD   1B                     DEC   de   
08AE   BE                     CP   (hl)   
08AF   28 09                  JR   z,arg1   
08B1   23                     INC   hl   ; hl = next arg_list*
08B2   10 F8                  DJNZ   arg0   
08B4   C1                     POP   bc   ; no match, restore IP
08B5                ARG0A:       
08B5   11 00 00               LD   de,0   ; return 0
08B8   18 08                  JR   arg1a   
08BA                ARG1:        
08BA   C1                     POP   bc   ; restore IP
08BB   EB                     EX   de,hl   ; hl = arg*
08BC   22 FA 36               LD   (vPointer),hl   ; store arg* in setter
08BF   5E                     LD   e,(hl)   
08C0   23                     INC   hl   
08C1   56                     LD   d,(hl)   ; de = arg
08C2                ARG1A:       
08C2   D5                     PUSH   de   ; push arg
08C3   DD E9                  JP   (ix)   
08C5                             ; 0..9 number                   37
08C5                NUM:         
08C5   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
08C8   0A                     LD   a,(bc)   ; Get numeral or -
08C9   FE 2D                  CP   "-"   
08CB   20 01                  JR   nz,num0   
08CD   03                     INC   bc   ; move to next char, no flags affected
08CE                NUM0:        
08CE   08                     EX   af,af'   ; save zero flag = 0 for later
08CF                NUM1:        
08CF   0A                     LD   a,(bc)   ; read digit
08D0   D6 30                  SUB   "0"   ; less than 0?
08D2   38 13                  JR   c,num2   ; not a digit, exit loop
08D4   FE 0A                  CP   10   ; greater that 9?
08D6   30 0F                  JR   nc,num2   ; not a digit, exit loop
08D8   03                     INC   bc   ; inc IP
08D9   54 5D                  LD   de,hl   ; multiply hl * 10
08DB   29                     ADD   hl,hl   
08DC   29                     ADD   hl,hl   
08DD   19                     ADD   hl,de   
08DE   29                     ADD   hl,hl   
08DF   85                     ADD   a,l   ; add digit in a to hl
08E0   6F                     LD   l,a   
08E1   3E 00                  LD   a,0   
08E3   8C                     ADC   a,h   
08E4   67                     LD   h,a   
08E5   18 E8                  JR   num1   
08E7                NUM2:        
08E7   0B                     DEC   bc   
08E8   08                     EX   af,af'   ; restore zero flag
08E9   20 07                  JR   nz,num3   
08EB   EB                     EX   de,hl   ; negate the value of hl
08EC   21 00 00               LD   hl,0   
08EF   B7                     OR   a   ; jump to sub2
08F0   ED 52                  SBC   hl,de   
08F2                NUM3:        
08F2   E5                     PUSH   hl   ; Put the number on the stack
08F3   DD E9                  JP   (ix)   ; and process the next character
08F5                             ; }                               58
08F5                RBRACE:      
08F5                BLOCKEND:      
08F5   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
08F8   FD 56 01               LD   d,(iy+1)   
08FB   ED 53 08 37            LD   (vTemp1),de   
08FF   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0902   FD 56 07               LD   d,(iy+7)   
0905   ED 53 0A 37            LD   (vTemp2),de   
0909   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
090C   FD 56 03               LD   d,(iy+3)   
090F   EB                     EX   de,hl   
0910   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0913   FD 56 01               LD   d,(iy+1)   
0916   13                     INC   de   ; for carry flag <=
0917   B7                     OR   a   
0918   ED 52                  SBC   hl,de   
091A   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
091C   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
091E   FD 5D                  LD   e,iyl   
0920   21 08 00               LD   hl,8   
0923   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0924   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0925   18 0C                  JR   blockEnd2   
0927                BLOCKEND1:      ; same scope
0927   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
092A   FD 56 03               LD   d,(iy+3)   
092D   EB                     EX   de,hl   
092E   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0930   FD 5D                  LD   e,iyl   
0932   EB                     EX   de,hl   
0933                BLOCKEND2:      
0933   44 4D                  LD   bc,hl   ; bc = hl = BP
0935   B7                     OR   a   ; hl = BP - SP = count
0936   ED 72                  SBC   hl,sp   
0938   7D                     LD   a,l   
0939   B4                     OR   h   
093A   28 09                  JR   z,blockEnd3   
093C   C5                     PUSH   bc   ; bc = count, hl = BP
093D   44 4D                  LD   bc,hl   
093F   E1                     POP   hl   
0940   2B                     DEC   hl   ; hl = BP-1
0941   1B                     DEC   de   ; de = args*-1
0942   ED B8                  LDDR      
0944   13                     INC   de   
0945                BLOCKEND3:      
0945   EB                     EX   de,hl   ; sp = de = new tos*
0946   F9                     LD   sp,hl   
0947   ED 4B 0A 37            LD   bc,(vTemp2)   
094B   FD 2A 08 37            LD   iy,(vTemp1)   
094F   ED 5B EE 36            LD   de,(vRecurPtr)   ; de = recur vector
0953   7B                     LD   a,e   ; check for NUL
0954   B2                     OR   d   
0955   20 02                  JR   nz,blockEnd4   
0957   DD E9                  JP   (ix)   
0959                BLOCKEND4:      
0959   21 00 00               LD   hl,0   ; clear recur vector
095C   22 EE 36               LD   (vRecurPtr),hl   
095F   C3 A0 03               JP   go1   ; execute de
0962                GOBLOCK:      
0962   ED 53 08 37            LD   (vTemp1),de   ; save de
0966   21 00 32               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0969   FD 54                  LD   d,iyh   
096B   FD 5D                  LD   e,iyl   
096D   B7                     OR   a   ; if stack* == BP then this is the root_scope
096E   ED 52                  SBC   hl,de   
0970   ED 5B 08 37            LD   de,(vTemp1)   ; restore de
0974   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0975   B4                     OR   h   
0976   3E 00                  LD   a,0   
0978   28 6A                  JR   z,goFunc8   
097A   C5                     PUSH   bc   ; push IP
097B   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
097E   FD 46 05               LD   b,(iy+5)   
0981   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0984   FD 66 03               LD   h,(iy+3)   
0987                GOBLOCK2:      
0987   C5                     PUSH   bc   ; arg_list*
0988   E5                     PUSH   hl   ; first_arg*
0989   FD E5                  PUSH   iy   ; push BP
098B   FD 21 00 00            LD   iy,0   ; BP = SP
098F   FD 39                  ADD   iy,sp   
0991                GOBLOCK3:      
0991   42 4B                  LD   bc,de   ; bc = de = block*-1
0993   DD E9                  JP   (ix)   
0995                GOFUNC:      ; execute func
0995   EB                     EX   de,hl   ; hl = func*
0996   5E                     LD   e,(hl)   ; de = partial_array*
0997   23                     INC   hl   
0998   56                     LD   d,(hl)   
0999   23                     INC   hl   
099A   7B                     LD   a,e   ; if partial_array* == null skip
099B   B2                     OR   d   
099C   28 21                  JR   z,goFunc3   
099E   ED 43 08 37            LD   (vTemp1),bc   
09A2   22 0A 37               LD   (vTemp2),hl   ; save bc,hl
09A5   EB                     EX   de,hl   ; hl = partial_array*
09A6   2B                     DEC   hl   ; bc = count
09A7   46                     LD   b,(hl)   
09A8   2B                     DEC   hl   
09A9   4E                     LD   c,(hl)   
09AA   23                     INC   hl   ; hl = array data*
09AB   23                     INC   hl   
09AC   18 06                  JR   goFunc2   ; push each item on stack
09AE                GOFUNC1:      
09AE   5E                     LD   e,(hl)   ; de = partial item
09AF   23                     INC   hl   
09B0   56                     LD   d,(hl)   
09B1   23                     INC   hl   
09B2   D5                     PUSH   de   ; push on stack
09B3   0B                     DEC   bc   
09B4                GOFUNC2:      
09B4   79                     LD   a,c   ; if count != 0 then loop
09B5   B0                     OR   b   
09B6   20 F6                  JR   nz,goFunc1   
09B8   ED 4B 08 37            LD   bc,(vTemp1)   ; restore bc
09BC   2A 0A 37               LD   hl,(vTemp2)   ; restore hl
09BF                GOFUNC3:      
09BF   5E                     LD   e,(hl)   ; de = block*
09C0   23                     INC   hl   
09C1   56                     LD   d,(hl)   
09C2   23                     INC   hl   
09C3   ED 53 08 37            LD   (vTemp1),de   ; save block*
09C7   5E                     LD   e,(hl)   ; de = arg_list*
09C8   23                     INC   hl   
09C9   56                     LD   d,(hl)   
09CA   23                     INC   hl   
09CB   EB                     EX   de,hl   ; hl = arg_list*
09CC   ED 5B 08 37            LD   de,(vTemp1)   ; restore de = block*
09D0   7D                     LD   a,l   ; if arg_list* == null a = 0
09D1   B4                     OR   h   
09D2   20 03                  JR   nz,goFunc4   
09D4   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
09D5   18 0D                  JR   goFunc8   
09D7                GOFUNC4:      ; allocate locals
09D7   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
09D8   18 03                  JR   goFunc6   
09DA                GOFUNC5:      ; loop
09DA   3B                     DEC   sp   
09DB   3B                     DEC   sp   
09DC   3D                     DEC   a   
09DD                GOFUNC6:      
09DD   B7                     OR   a   
09DE   20 FA                  JR   nz,goFunc5   ; end loop
09E0                GOFUNC7:      
09E0   23                     INC   hl   ; a = num_args* x 2
09E1   7E                     LD   a,(hl)   
09E2   2B                     DEC   hl   
09E3   87                     ADD   a,a   ; a *= 2
09E4                GOFUNC8:      
09E4   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
09E5   44 4D                  LD   bc,hl   
09E7   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
09EA   85                     ADD   a,l   
09EB   6F                     LD   l,a   
09EC   39                     ADD   hl,sp   
09ED   18 98                  JR   goBlock2   
09EF                             ; =                              21
09EF                             ; value _oldValue --            ; uses address in vPointer 15
09EF                ASSIGN:      
09EF   E1                     POP   hl   ; discard last accessed value
09F0   E1                     POP   hl   ; hl = new value
09F1                ASSIGN0:      
09F1   EB                     EX   de,hl   ; de = new value
09F2   2A FA 36               LD   hl,(vPointer)   
09F5                ASSIGN1:      ; entry point from defineEnd
09F5   73                     LD   (hl),e   
09F6   3A F0 36               LD   a,(vDataWidth)   
09F9   3D                     DEC   a   ; is it byte?
09FA   28 02                  JR   z,assign2   
09FC   23                     INC   hl   
09FD   72                     LD   (hl),d   
09FE                ASSIGN2:      
09FE   DD E9                  JP   (ix)   
0A00                             ; hl = value1, de = value2
0A00                             ; hl = result
0A00                EQUALS:      
0A00   B7                     OR   a   ; reset the carry flag
0A01   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0A03   28 16                  JR   z,true1   
0A05   18 1A                  JR   false1   
0A07                NOTEQUALS:      
0A07   B7                     OR   a   ; reset the carry flag
0A08   ED 52                  SBC   hl,de   
0A0A   20 0F                  JR   nz,true1   
0A0C   18 13                  JR   false1   
0A0E                             ; hl = value1 de = value2
0A0E                             ; hl = result
0A0E                LESSTHANEQ:      
0A0E   B7                     OR   a   
0A0F   ED 52                  SBC   hl,de   
0A11   18 05                  JR   lessthan1   
0A13                             ; hl = value1 de = value2
0A13                             ; hl = result
0A13                LESSTHAN:      
0A13   B7                     OR   a   
0A14   ED 52                  SBC   hl,de   
0A16   28 09                  JR   z,false1   
0A18                LESSTHAN1:      
0A18   FA 21 0A               JP   m,false1   
0A1B                TRUE1:       
0A1B   21 FF FF               LD   hl,TRUE   
0A1E   E5                     PUSH   hl   
0A1F   DD E9                  JP   (ix)   
0A21                NULL1:       
0A21                FALSE1:      
0A21   21 00 00               LD   hl,FALSE   
0A24   E5                     PUSH   hl   
0A25   DD E9                  JP   (ix)   
0A27                SPREAD:      
0A27   E1                     POP   hl   ; hl = array*
0A28   ED 43 08 37            LD   (vTemp1),bc   ; save bc
0A2C   2B                     DEC   hl   ; bc = length
0A2D   46                     LD   b,(hl)   
0A2E   2B                     DEC   hl   
0A2F   4E                     LD   c,(hl)   
0A30   23                     INC   hl   ; move back to array 0
0A31   23                     INC   hl   
0A32   18 0D                  JR   spread3   
0A34                SPREAD1:      
0A34   5E                     LD   e,(hl)   ; e = lsb data at hl
0A35   23                     INC   hl   
0A36   3A F0 36               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0A39   57                     LD   d,a   
0A3A   15                     DEC   d   
0A3B   28 02                  JR   z,spread2   
0A3D   56                     LD   d,(hl)   ; d = msb data at hl
0A3E   23                     INC   hl   
0A3F                SPREAD2:      
0A3F   D5                     PUSH   de   ; return de
0A40   0B                     DEC   bc   ; count--
0A41                SPREAD3:      
0A41   79                     LD   a,c   ; exit loop if bc == 0
0A42   B0                     OR   b   
0A43   20 EF                  JR   nz,spread1   
0A45   ED 4B 08 37            LD   bc,(vTemp1)   ; restore bc
0A49   DD E9                  JP   (ix)   
0A4B                             ; shiftLeft
0A4B                             ; value count <<
0A4B                             ; count variable <<=
0A4B                SHIFTLEFT:      
0A4B   E1                     POP   hl   ; de = arg_a, hl = arg_b
0A4C   D1                     POP   de   
0A4D   03                     INC   bc   
0A4E   0A                     LD   a,(bc)   
0A4F   FE 3D                  CP   "="   
0A51   28 02                  JR   z,shiftLeft2   
0A53   0B                     DEC   bc   
0A54   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0A55                SHIFTLEFT2:      
0A55   ED 43 08 37            LD   (vTemp1),bc   ; save IP
0A59   43                     LD   b,e   ; b = loop counter
0A5A   04                     INC   b   ; test for counter=0 case
0A5B   18 01                  JR   shiftLeft4   
0A5D                SHIFTLEFT3:      
0A5D   29                     ADD   hl,hl   ; left shift hl
0A5E                SHIFTLEFT4:      
0A5E   10 FD                  DJNZ   shiftLeft3   
0A60   ED 4B 08 37            LD   bc,(vTemp1)   ; restore IP
0A64   C3 9D 02               JP   sub3   
0A67                             ; shiftRight
0A67                             ; value count >>
0A67                             ; count variable >>=
0A67                SHIFTRIGHT:      
0A67   E1                     POP   hl   ; de = arg_a, hl = arg_b
0A68   D1                     POP   de   
0A69   03                     INC   bc   
0A6A   0A                     LD   a,(bc)   
0A6B   FE 3D                  CP   "="   
0A6D   28 02                  JR   z,shiftRight2   
0A6F   0B                     DEC   bc   
0A70   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0A71                SHIFTRIGHT2:      
0A71   ED 43 08 37            LD   (vTemp1),bc   ; save IP
0A75   43                     LD   b,e   ; b = loop counter
0A76   04                     INC   b   ; test for counter=0 case
0A77   18 04                  JR   shiftRight4   
0A79                SHIFTRIGHT3:      
0A79   CB 3C                  SRL   h   ; right shift hl
0A7B   CB 1D                  RR   l   
0A7D                SHIFTRIGHT4:      
0A7D   10 FA                  DJNZ   shiftRight3   
0A7F   ED 4B 08 37            LD   bc,(vTemp1)   ; restore IP
0A83   C3 9D 02               JP   sub3   
0A86                             ; division subroutine.
0A86                             ; bc: divisor, de: dividend, hl: remainder
0A86                DIVIDE:      
0A86   21 00 00               LD   hl,0   ; zero the remainder
0A89   3E 10                  LD   a,16   ; loop counter
0A8B                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0A8B   CB 21                  SLA   c   
0A8D   CB 10                  RL   b   
0A8F   ED 6A                  ADC   hl,hl   
0A91   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0A93   38 03                  JR   c,divide2   
0A95   0C                     INC   c   
0A96   18 01                  JR   divide3   
0A98                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0A98   19                     ADD   hl,de   
0A99                DIVIDE3:      
0A99   3D                     DEC   a   
0A9A   20 EF                  JR   nz,divide1   
0A9C   50 59                  LD   de,bc   ; result from bc to de
0A9E   C9                     RET      
0A9F                DOTNEXT:      
0A9F   3A F4 36               LD   a,(vStrMode)   ; if string mode then exit
0AA2   3C                     INC   a   
0AA3   20 02                  JR   nz,dotNext1   
0AA5   DD E9                  JP   (ix)   
0AA7                DOTNEXT1:      
0AA7   11 00 35               LD   de,BUFFER   
0AAA   2A E8 36               LD   hl,(vBufPtr)   
0AAD   36 00                  LD   (hl),0   ; store NUL at end of string
0AAF   ED 53 E8 36            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0AB3   EB                     EX   de,hl   ; hl = BUFFER
0AB4   CD 6A 0C               CALL   putstr   
0AB7   DD E9                  JP   (ix)   
0AB9                             ; arg_list - parses arg_list e.g. ab:c
0AB9                             ; -- arg_list*
0AB9                PARSEARGS:      
0AB9   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0ABC   2A EA 36               LD   hl,(vHeapPtr)   ; hl = heap*
0ABF   E5                     PUSH   hl   ; save start of arg_list
0AC0   23                     INC   hl   ; skip length fields to start of string
0AC1   23                     INC   hl   
0AC2   03                     INC   bc   ; point to next char
0AC3                PARSEARGS1:      
0AC3   0A                     LD   a,(bc)   
0AC4   FE 3A                  CP   ":"   ; ":" switches from args to locals
0AC6   20 03                  JR   nz,parseArgs1a   
0AC8   14                     INC   d   ; non zero value local count acts as flag
0AC9   18 10                  JR   parseArgs3   
0ACB                PARSEARGS1A:      
0ACB   FE 61                  CP   "a"   ; < "a" terminates arg_list
0ACD   38 0F                  JR   c,parseArgs4   
0ACF   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0AD1   30 0B                  JR   nc,parseArgs4   
0AD3                PARSEARGS2:      
0AD3   77                     LD   (hl),a   
0AD4   23                     INC   hl   
0AD5   1C                     INC   e   ; increase arg count
0AD6   AF                     XOR   a   
0AD7   B2                     OR   d   
0AD8   28 01                  JR   z,parseArgs3   
0ADA   14                     INC   d   ; if d > 0 increase local count
0ADB                PARSEARGS3:      
0ADB   03                     INC   bc   ; point to next char
0ADC   18 E5                  JR   parseArgs1   
0ADE                PARSEARGS4:      
0ADE   0B                     DEC   bc   
0ADF   AF                     XOR   a   
0AE0   B2                     OR   d   
0AE1   28 01                  JR   z,parseArgs5   
0AE3   15                     DEC   d   ; remove initial inc
0AE4                PARSEARGS5:      
0AE4   23                     INC   hl   
0AE5   22 EA 36               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0AE8   E1                     POP   hl   ; hl = start of arg_list
0AE9   72                     LD   (hl),d   ; write number of locals at start - 1
0AEA   23                     INC   hl   
0AEB   73                     LD   (hl),e   ; write number of args + locals at start - 2
0AEC   2B                     DEC   hl   
0AED   E3                     EX   (sp),hl   
0AEE   E9                     JP   (hl)   
0AEF                             ; create block: parses block e.g. 00bbIC4uLi4g
0AEF                             ; -- block*
0AEF                PARSEBLOCK:      
0AEF   C5                     PUSH   bc   ; return pointer to first { of block
0AF0   03                     INC   bc   
0AF1   16 01                  LD   d,1   ; nesting: count first parenthesis
0AF3                PARSEBLOCK1:      ; Skip to end of definition
0AF3   0A                     LD   a,(bc)   ; Get the next character
0AF4   03                     INC   bc   ; Point to next character
0AF5   FE 21                  CP   " " + 1   ; ignore whitespace
0AF7   38 FA                  JR   c,parseBlock1   
0AF9   FE 27                  CP   "'"   ; quote char
0AFB   28 0F                  JR   z,parseBlock2   
0AFD   FE 22                  CP   DQ   ; double quote char
0AFF   28 0B                  JR   z,parseBlock2   
0B01   FE 60                  CP   "`"   ; grave char
0B03   28 07                  JR   z,parseBlock2   
0B05   CB 7A                  BIT   7,d   
0B07   20 EA                  JR   nz,parseBlock1   
0B09   C3 12 0B               JP   parseBlock3   
0B0C                PARSEBLOCK2:      
0B0C   3E 80                  LD   a,$80   
0B0E   AA                     XOR   d   
0B0F   57                     LD   d,a   
0B10   18 E1                  JR   parseBlock1   
0B12                PARSEBLOCK3:      
0B12   FE 28                  CP   "("   
0B14   28 16                  JR   z,parseBlock4   
0B16   FE 7B                  CP   "{"   
0B18   28 12                  JR   z,parseBlock4   
0B1A   FE 5B                  CP   "["   
0B1C   28 0E                  JR   z,parseBlock4   
0B1E   FE 29                  CP   ")"   
0B20   28 0D                  JR   z,parseBlock5   
0B22   FE 7D                  CP   "}"   
0B24   28 09                  JR   z,parseBlock5   
0B26   FE 5D                  CP   "]"   
0B28   28 05                  JR   z,parseBlock5   
0B2A   18 C7                  JR   parseBlock1   
0B2C                PARSEBLOCK4:      
0B2C   14                     INC   d   
0B2D   18 C4                  JR   parseBlock1   
0B2F                PARSEBLOCK5:      
0B2F   15                     DEC   d   
0B30   20 C1                  JR   nz,parseBlock1   ; get the next element
0B32   60 69                  LD   hl,bc   ; hl = IP
0B34   11 26 37               LD   de,HEAP   ; is IP pointing to object in heap
0B37   B7                     OR   a   ; IP - HEAP
0B38   ED 52                  SBC   hl,de   
0B3A   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0B3C   28 1C                  JR   z,parseBlock6   
0B3E   60 69                  LD   hl,bc   ; hl = IP
0B40   D1                     POP   de   ; de = block*
0B41   ED 43 08 37            LD   (vTemp1),bc   ; save IP
0B45   B7                     OR   a   ; bc = size
0B46   ED 52                  SBC   hl,de   
0B48   44 4D                  LD   bc,hl   
0B4A   EB                     EX   de,hl   ; hl = block* de = heap*
0B4B   ED 5B EA 36            LD   de,(vHeapPtr)   
0B4F   D5                     PUSH   de   ; return hblock*
0B50   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0B52   ED 53 EA 36            LD   (vHeapPtr),de   ; heap* += size
0B56   ED 4B 08 37            LD   bc,(vTemp1)   ; restore IP
0B5A                PARSEBLOCK6:      
0B5A   0B                     DEC   bc   ; balanced, exit
0B5B   E1                     POP   hl   ; hl = block*
0B5C   E3                     EX   (sp),hl   ; return to caller
0B5D   E9                     JP   (hl)   
0B5E                             ; create function
0B5E                             ; arg_list* block* -- func*
0B5E                CREATEFUNC:      
0B5E   E1                     POP   hl   ; save retrn address
0B5F   22 0C 37               LD   (vTemp3),hl   
0B62   ED 43 08 37            LD   (vTemp1),bc   ; save IP
0B66   E1                     POP   hl   ; hl = block*
0B67   22 0A 37               LD   (vTemp2),hl   ; save block*
0B6A   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0B6D   FD 56 05               LD   d,(iy+5)   
0B70   7B                     LD   a,e   ; if arg_list == null then make a func
0B71   B2                     OR   d   
0B72   20 09                  JR   nz,createFunc0   
0B74   21 00 00               LD   hl,0   ; partial_array = null
0B77   ED 5B EA 36            LD   de,(vHeapPtr)   ; de = compile*
0B7B   18 65                  JR   createFunc5   
0B7D                CREATEFUNC0:      
0B7D   E1                     POP   hl   ; hl = inner_arg_list*
0B7E   E5                     PUSH   hl   ; save inner_arg_list
0B7F   ED 5B EA 36            LD   de,(vHeapPtr)   ; de = compile*
0B83   7E                     LD   a,(hl)   ; compile inner_num_locals
0B84   4F                     LD   c,a   ; b = inner_num_locals
0B85   12                     LD   (de),a   
0B86   23                     INC   hl   
0B87   13                     INC   de   
0B88   7E                     LD   a,(hl)   ; compile inner_length
0B89   12                     LD   (de),a   
0B8A   91                     SUB   c   ; a = inner_num args
0B8B   23                     INC   hl   
0B8C   13                     INC   de   
0B8D   B7                     OR   a   ; compile args if inner_length > 0
0B8E   28 05                  JR   z,createFunc1   
0B90   4F                     LD   c,a   ; bc = a
0B91   06 00                  LD   b,0   
0B93   ED B0                  LDIR      
0B95                CREATEFUNC1:      
0B95   EB                     EX   de,hl   ; hl = outer_arg_list
0B96   FD 5E 04               LD   e,(iy+4)   
0B99   FD 56 05               LD   d,(iy+5)   
0B9C   EB                     EX   de,hl   
0B9D   23                     INC   hl   ; a = outer_length
0B9E   7E                     LD   a,(hl)   
0B9F   23                     INC   hl   
0BA0   B7                     OR   a   
0BA1   28 05                  JR   z,createFunc2   
0BA3   4F                     LD   c,a   
0BA4   06 00                  LD   b,0   
0BA6   ED B0                  LDIR      ; append outer_args
0BA8                CREATEFUNC2:      ; a = outer_length
0BA8   47                     LD   b,a   ; b = a = outer_length
0BA9   2A EA 36               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0BAC   23                     INC   hl   
0BAD   7E                     LD   a,(hl)   ; add outer_length to new length
0BAE   80                     ADD   a,b   
0BAF   77                     LD   (hl),a   
0BB0   2B                     DEC   hl   
0BB1   78                     LD   a,b   ; save outer_length in a'
0BB2   08                     EX   af,af'   
0BB3   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0BB4   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0BB5   B7                     OR   a   
0BB6   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0BB8   4F                     LD   c,a   ; c = inner_num_locals
0BB9   06 00                  LD   b,0   ; bc = inner_num_locals
0BBB   23                     INC   hl   ; a = inner_length
0BBC   7E                     LD   a,(hl)   
0BBD   91                     SUB   c   ; a = inner_num_args
0BBE   23                     INC   hl   ; hl = inner_arg_chars
0BBF   85                     ADD   a,l   ; hl += a
0BC0   6F                     LD   l,a   
0BC1   3E 00                  LD   a,0   
0BC3   84                     ADD   a,h   
0BC4   67                     LD   h,a   
0BC5   ED B0                  LDIR      ; append inner_locals
0BC7                CREATEFUNC2A:      
0BC7   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0BC8   12                     LD   (de),a   ; compile partial_array length field
0BC9   13                     INC   de   
0BCA   AF                     XOR   a   
0BCB   12                     LD   (de),a   
0BCC   13                     INC   de   
0BCD   D5                     PUSH   de   ; push partial_array*
0BCE   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0BCF   FD 5E 02               LD   e,(iy+2)   
0BD2   FD 56 03               LD   d,(iy+3)   
0BD5   EB                     EX   de,hl   
0BD6                CREATEFUNC3:      
0BD6   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0BD7   4E                     LD   c,(hl)   
0BD8   2B                     DEC   hl   
0BD9   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0BDA   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0BDB   13                     INC   de   
0BDC   79                     LD   a,c   
0BDD   12                     LD   (de),a   
0BDE   13                     INC   de   
0BDF   10 F5                  DJNZ   createFunc3   ; b = outer_length
0BE1                CREATEFUNC4:      
0BE1   E1                     POP   hl   ; hl = partial_array*
0BE2                CREATEFUNC5:      
0BE2   C1                     POP   bc   ; bc = new_arg_list*
0BE3   D5                     PUSH   de   ; return new func*
0BE4   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0BE5   73                     LD   (hl),e   ; compile partial_array* to func
0BE6   23                     INC   hl   
0BE7   72                     LD   (hl),d   
0BE8   23                     INC   hl   
0BE9   ED 5B 0A 37            LD   de,(vTemp2)   ; de = block*
0BED   73                     LD   (hl),e   ; compile block* to func
0BEE   23                     INC   hl   
0BEF   72                     LD   (hl),d   
0BF0   23                     INC   hl   
0BF1   71                     LD   (hl),c   ; compile new_arg_list* to func
0BF2   23                     INC   hl   
0BF3   70                     LD   (hl),b   
0BF4   23                     INC   hl   
0BF5   22 EA 36               LD   (vHeapPtr),hl   ; bump heap ptr
0BF8   ED 4B 08 37            LD   bc,(vTemp1)   ; restore IP
0BFC   2A 0C 37               LD   hl,(vTemp3)   ; jump to return address
0BFF   E9                     JP   (hl)   
0C00                             ;*******************************************************************
0C00                             ; general routines
0C00                             ;*******************************************************************
0C00                             ; hl = address
0C00                VARIABLE:      
0C00   22 FA 36               LD   (vPointer),hl   
0C03   5E                     LD   e,(hl)   
0C04   3A F0 36               LD   a,(vDataWidth)   
0C07   3D                     DEC   a   
0C08   16 00                  LD   d,0   
0C0A   28 03                  JR   z,constant   
0C0C   23                     INC   hl   
0C0D   56                     LD   d,(hl)   
0C0E   2B                     DEC   hl   
0C0F                CONSTANT:      
0C0F   D5                     PUSH   de   
0C10   DD E9                  JP   (ix)   
0C12                             ; followed by a table
0C12                             ; indexed on the 0-25 lowercase letter
0C12                             ; db lsb(addr)
0C12                             ; the final item index 26 matches any other char
0C12                CHARTABLE:      
0C12   03                     INC   bc   
0C13   0A                     LD   a,(bc)   
0C14   FE 7B                  CP   "z"+1   
0C16   30 10                  JR   nc,charTable3   
0C18   D6 61                  SUB   "a"   
0C1A   38 0C                  JR   c,charTable3   
0C1C                CHARTABLE1:      
0C1C   E1                     POP   hl   
0C1D   85                     ADD   a,l   
0C1E   6F                     LD   l,a   
0C1F   7E                     LD   a,(hl)   ; must have the same msb as the table
0C20   B7                     OR   a   ; a = 0, nop
0C21   20 03                  JR   nz,charTable2   
0C23   C3 83 07               JP   error1   
0C26                CHARTABLE2:      
0C26   6F                     LD   l,a   
0C27   E9                     JP   (hl)   
0C28                CHARTABLE3:      
0C28   3E 1A                  LD   a,26   
0C2A   0B                     DEC   bc   
0C2B   18 EF                  JR   charTable1   
0C2D                             ; 8-bit hash string
0C2D                             ; bc = str
0C2D                             ; a = hash
0C2D                IDENTHASH:      
0C2D   16 00                  LD   d,0   
0C2F                IDENTHASH1:      
0C2F   0A                     LD   a,(bc)   ; e = a = char
0C30   D6 61                  SUB   "a"   ; is char < "a"
0C32   30 03                  JR   nc,identHash2   
0C34   0B                     DEC   bc   
0C35   7A                     LD   a,d   
0C36   C9                     RET      
0C37                IDENTHASH2:      ; not white space
0C37   5F                     LD   e,a   
0C38   7A                     LD   a,d   ; a = d = hash
0C39   87                     ADD   a,a   ; a *= 2
0C3A   83                     ADD   a,e   ; a += char
0C3B   57                     LD   d,a   ; d = a
0C3C   03                     INC   bc   ; ip++
0C3D   18 F0                  JR   identHash1   
0C3F                             ; a = index
0C3F                             ; hl = default
0C3F                COMMANDTABLE:      
0C3F   E3                     EX   (sp),hl   ; hl = table* (sp) = default*
0C40   54                     LD   d,h   ; d = msb(table*) + 1
0C41   14                     INC   d   
0C42   FE 80                  CP   $80   ; index > $80
0C44   38 01                  JR   c,commandTable2   
0C46   14                     INC   d   ; d = msb(table*) + 2
0C47                COMMANDTABLE2:      
0C47   85                     ADD   a,l   ; hl = dest**
0C48   6F                     LD   l,a   
0C49   5E                     LD   e,(hl)   ; e = lsb(dest*)
0C4A   B7                     OR   a   ; if zero use default*
0C4B   C8                     RET   z   
0C4C   EB                     EX   de,hl   ; hl = dest*
0C4D   D1                     POP   de   ; pop default*
0C4E   E9                     JP   (hl)   
0C4F                GETVARADDR:      
0C4F   21 00 00               LD   hl,0   
0C52   FE 7B                  CP   "z"+1   ; if a > z then exit
0C54   D0                     RET   nc   
0C55   D6 41                  SUB   "A"   ; a - 65
0C57   D8                     RET   c   ; if < A then exit
0C58   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0C5A   38 05                  JR   c,getVarAddr1   
0C5C   D6 06                  SUB   "a"-("Z"+1)   
0C5E   FE 1A                  CP   "Z"-"A"+1   
0C60   D8                     RET   c   ; if < a then exit
0C61                GETVARADDR1:      
0C61   87                     ADD   a,a   ; double a
0C62   6F                     LD   l,a   
0C63   26 36                  LD   h,msb(VARS)   
0C65   C9                     RET      
0C66                PUTSTR0:      
0C66   CD 85 00               CALL   putchar   
0C69   23                     INC   hl   
0C6A                PUTSTR:      
0C6A   7E                     LD   a,(hl)   
0C6B   B7                     OR   a   
0C6C   20 F8                  JR   nz,putstr0   
0C6E   C9                     RET      
0C6F                             ; hl = value
0C6F                             ; de = buffer*
0C6F                             ; a, bc, de, hl destroyed
0C6F                FORMATDEC0:      
0C6F   E5                     PUSH   hl   
0C70   D9                     EXX      
0C71   E1                     POP   hl   
0C72                             ; hl = value
0C72                             ; de' = buffer*
0C72                             ; a, bc, de, hl destroyed
0C72                FORMATDEC:      
0C72   CB 7C                  BIT   7,h   
0C74   28 0C                  JR   z,formatDec2   
0C76   D9                     EXX      
0C77   3E 2D                  LD   a,"-"   
0C79   12                     LD   (de),a   
0C7A   13                     INC   de   
0C7B   D9                     EXX      
0C7C   AF                     XOR   a   
0C7D   95                     SUB   l   
0C7E   6F                     LD   l,a   
0C7F   9F                     SBC   a,a   
0C80   94                     SUB   h   
0C81   67                     LD   h,a   
0C82                FORMATDEC2:      
0C82   0E 00                  LD   c,0   ; leading zeros flag = false
0C84   11 F0 D8               LD   de,-10000   
0C87   CD A2 0C               CALL   formatDec4   
0C8A   11 18 FC               LD   de,-1000   
0C8D   CD A2 0C               CALL   formatDec4   
0C90   11 9C FF               LD   de,-100   
0C93   CD A2 0C               CALL   formatDec4   
0C96   1E F6                  LD   e,-10   
0C98   CD A2 0C               CALL   formatDec4   
0C9B   0C                     INC   c   ; flag = true for at least digit
0C9C   1E FF                  LD   e,-1   
0C9E   CD A2 0C               CALL   formatDec4   
0CA1   C9                     RET      
0CA2                FORMATDEC4:      
0CA2   06 2F                  LD   b,"0"-1   
0CA4                FORMATDEC5:      
0CA4   04                     INC   b   
0CA5   19                     ADD   hl,de   
0CA6   38 FC                  JR   c,formatDec5   
0CA8   ED 52                  SBC   hl,de   
0CAA   3E 30                  LD   a,"0"   
0CAC   B8                     CP   b   
0CAD   20 05                  JR   nz,formatDec6   
0CAF   AF                     XOR   a   
0CB0   B1                     OR   c   
0CB1   C8                     RET   z   
0CB2   18 01                  JR   formatDec7   
0CB4                FORMATDEC6:      
0CB4   0C                     INC   c   
0CB5                FORMATDEC7:      
0CB5   78                     LD   a,b   
0CB6   D9                     EXX      
0CB7   12                     LD   (de),a   
0CB8   13                     INC   de   
0CB9   D9                     EXX      
0CBA   C9                     RET      
0CBB                             ; **************************************************************************
0CBB                             ; calculate nesting value
0CBB                             ; a is char to be tested,
0CBB                             ; e is the nesting value (initially 0)
0CBB                             ; e is increased by ( and [
0CBB                             ; e is decreased by ) and ]
0CBB                             ; e has its bit 7 toggled by `
0CBB                             ; limited to 127 levels
0CBB                             ; **************************************************************************
0CBB                NESTING:      
0CBB   FE 27                  CP   "'"   ; quote char
0CBD   28 0A                  JR   z,nesting0   
0CBF   FE 22                  CP   DQ   ; double quote char
0CC1   28 06                  JR   z,nesting0   
0CC3   FE 60                  CP   "`"   ; grave char
0CC5   28 02                  JR   z,nesting0   
0CC7   18 0A                  JR   nesting1   
0CC9                NESTING0:      
0CC9   CB 7B                  BIT   7,e   
0CCB   28 03                  JR   z,nesting1a   
0CCD   CB BB                  RES   7,e   
0CCF   C9                     RET      
0CD0                NESTING1A:      
0CD0   CB FB                  SET   7,e   
0CD2   C9                     RET      
0CD3                NESTING1:      
0CD3   CB 7B                  BIT   7,e   
0CD5   C0                     RET   nz   
0CD6   FE 7B                  CP   "{"   
0CD8   28 08                  JR   z,nesting2   
0CDA   FE 5B                  CP   "["   
0CDC   28 04                  JR   z,nesting2   
0CDE   FE 28                  CP   "("   
0CE0   20 02                  JR   nz,nesting3   
0CE2                NESTING2:      
0CE2   1C                     INC   e   
0CE3   C9                     RET      
0CE4                NESTING3:      
0CE4   FE 7D                  CP   "}"   
0CE6   28 07                  JR   z,nesting4   
0CE8   FE 5D                  CP   "]"   
0CEA   28 03                  JR   z,nesting4   
0CEC   FE 29                  CP   ")"   
0CEE   C0                     RET   nz   
0CEF                NESTING4:      
0CEF   1D                     DEC   e   
0CF0   C9                     RET      
0CF1                PROMPT:      
0CF1   CD 01 0D               CALL   printStr   
0CF4   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0CF9   C9                     RET      
0CFA                CRLF:        
0CFA   CD 01 0D               CALL   printStr   
0CFD   0D 0A 00               .CSTR   "\r\n"   
0D00   C9                     RET      
0D01                             ; prints a null teminated string
0D01                             ; the string should be immediately following the call
0D01                PRINTSTR:      
0D01   E3                     EX   (sp),hl   ; swap			
0D02   CD 6A 0C               CALL   putstr   
0D05   23                     INC   hl   ; inc past NUL
0D06   E3                     EX   (sp),hl   ; put it back	
0D07   C9                     RET      
0D08                             ; hl = number to print in decimal
0D08                PRINTNUM:      
0D08   ED 5B E8 36            LD   de,(vBufPtr)   ; de' = buffer*
0D0C   CD 6F 0C               CALL   formatDec0   
0D0F   D9                     EXX      ; restore de = buffer*
0D10   3E 00                  LD   a,0   ; append NUL to buffer
0D12   12                     LD   (de),a   
0D13   13                     INC   de   ; string*++,
0D14   ED 53 E8 36            LD   (vBufPtr),de   ; update buffer* with buffer*'
0D18   21 00 35               LD   hl,BUFFER   
0D1B   22 E8 36               LD   (vBufPtr),hl   ; reset vBufPtr to vHeapPtr
0D1E   C3 6A 0C               JP   putstr   
0D21                             ; Compares two null terminated strings.
0D21                             ; de = string1* hl = string2* -- bool
0D21                             ; returns: hl = bool
0D21                STRINGCOMPARE:      
0D21                STRINGCOMPARE1:      
0D21   1A                     LD   a,(de)   
0D22   BE                     CP   (hl)   
0D23   20 07                  JR   nz,stringCompare2   
0D25   B7                     OR   a   
0D26   28 09                  JR   z,stringCompare3   
0D28   13                     INC   de   
0D29   23                     INC   hl   
0D2A   18 F5                  JR   stringCompare1   
0D2C                STRINGCOMPARE2:      
0D2C   21 00 00               LD   hl,FALSE   
0D2F   18 03                  JR   stringCompare4   
0D31                STRINGCOMPARE3:      
0D31   21 FF FF               LD   hl,TRUE   
0D34                STRINGCOMPARE4:      
0D34   E5                     PUSH   hl   
0D35   C9                     RET      
0D36                             ; string length
0D36                             ; de = string*
0D36                             ; returns: hl = length
0D36                STRINGLENGTH:      
0D36   21 00 00               LD   hl,0   
0D39   18 02                  JR   stringLength2   
0D3B                STRINGLENGTH1:      
0D3B   13                     INC   de   
0D3C   23                     INC   hl   
0D3D                STRINGLENGTH2:      
0D3D   1A                     LD   a,(de)   
0D3E   B7                     OR   a   
0D3F   20 FA                  JR   nz,stringLength1   
0D41                STRINGLENGTH3:      
0D41   C9                     RET      
0D42                             ; 
0D42                             ; MINTY interpreter
0D42                             ; 
0D42                INIT:        
0D42   21 F0 01               LD   hl,titleStr   
0D45   11 12 37               LD   de,titleBuf   
0D48   06 14                  LD   b,20   
0D4A                INIT1:       
0D4A   1A                     LD   a,(de)   
0D4B   BE                     CP   (hl)   
0D4C   20 17                  JR   nz,coldBoot0   
0D4E   13                     INC   de   
0D4F   23                     INC   hl   
0D50   10 F8                  DJNZ   init1   
0D52                WARMINIT:      
0D52   ED 4B FE 36            LD   bc,(vSavedIP)   ; restore IP
0D56   ED 7B 00 37            LD   sp,(vSavedDSP)   ; restore Data SP
0D5A   FD 2A 02 37            LD   iy,(vSavedRSP)   ; restore Return SP
0D5E   DD 2A 04 37            LD   ix,(vSavedNext)   ; restore Next
0D62   C3 9C 0D               JP   start1   
0D65                COLDBOOT0:      
0D65   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0D68   11 12 37               LD   de,titleBuf   
0D6B   06 14                  LD   b,20   
0D6D   ED B0                  LDIR      
0D6F                COLDINIT:      
0D6F   21 DE 01               LD   hl,isysVars   
0D72   11 E6 36               LD   de,sysVars   
0D75   01 12 00               LD   bc,4 * 2 + 10   
0D78   ED B0                  LDIR      
0D7A   21 00 36               LD   hl,vars   ; 52 vars LO HI
0D7D   06 34                  LD   b,26*2   
0D7F   AF                     XOR   a   
0D80                COLDBOOT1:      
0D80   77                     LD   (hl),a   
0D81   23                     INC   hl   
0D82   10 FC                  DJNZ   coldBoot1   
0D84   DD 21 18 0E            LD   ix,NEXT   
0D88   FD 21 00 32            LD   iy,STACK   
0D8C   C9                     RET      
0D8D                COLDSTART:      
0D8D   31 00 32               LD   sp,STACK   
0D90   CD 65 0D               CALL   coldBoot0   
0D93   C3 9C 0D               JP   start1   
0D96                START:       
0D96   31 00 32               LD   sp,STACK   ; start MINTY
0D99   CD 42 0D               CALL   init   ; setups
0D9C                START1:      
0D9C   21 12 37               LD   hl,titleBuf   
0D9F   CD 6A 0C               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
0DA2                INTERPRET:      
0DA2   CD F1 0C               CALL   prompt   
0DA5   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0DA8   21 00 34               LD   hl,TIB   
0DAB   22 E6 36               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0DAE                INTERPRET2:      ; calculate nesting
0DAE   1E 00                  LD   e,0   ; initilize nesting value
0DB0   C5                     PUSH   bc   ; save offset into TIB,
0DB1                             ; bc is also the count of chars in TIB
0DB1   21 00 34               LD   hl,TIB   ; hl is start of TIB
0DB4   18 06                  JR   interpret4   
0DB6                INTERPRET3:      
0DB6   7E                     LD   a,(hl)   ; a = char in TIB
0DB7   23                     INC   hl   ; inc pointer into TIB
0DB8   0B                     DEC   bc   ; dec count of chars in TIB
0DB9   CD BB 0C               CALL   nesting   ; update nesting value
0DBC                INTERPRET4:      
0DBC   79                     LD   a,c   ; is count zero?
0DBD   B0                     OR   b   
0DBE   20 F6                  JR   nz,interpret3   ; if not loop
0DC0   C1                     POP   bc   ; restore offset into TIB
0DC1                INTERPRET5:      
0DC1   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0DC4   FE 20                  CP   $20   ; compare to space
0DC6   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0DC8   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0DCA   28 31                  JR   z,interpret8   
0DCC   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0DCE   28 1A                  JR   z,interpret7   ; if anything else its macro/control
0DD0   FE 08                  CP   CTRL_H   
0DD2   CA 4E 0E               JP   z,backSpace_   
0DD5   FE 0A                  CP   CTRL_J   
0DD7   CA 5E 0E               JP   z,reEdit_   
0DDA                INTERPRET5A:      
0DDA   18 D2                  JR   interpret2   
0DDC                INTERPRET6:      
0DDC   21 00 34               LD   hl,TIB   
0DDF   09                     ADD   hl,bc   
0DE0   77                     LD   (hl),a   ; store the character in textbuf
0DE1   03                     INC   bc   
0DE2   CD 85 00               CALL   putchar   ; echo character to screen
0DE5   CD BB 0C               CALL   nesting   
0DE8   18 D7                  JR   interpret5   ; wait for next character
0DEA                INTERPRET7:      
0DEA   21 00 34               LD   hl,TIB   
0DED   09                     ADD   hl,bc   
0DEE   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0DF0   23                     INC   hl   
0DF1   36 0A                  LD   (hl),"\n"   
0DF3   23                     INC   hl   
0DF4   03                     INC   bc   
0DF5   03                     INC   bc   
0DF6   CD FA 0C               CALL   crlf   ; echo character to screen
0DF9   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0DFA   B7                     OR   a   
0DFB   20 C4                  JR   nz,interpret5   
0DFD                INTERPRET8:      
0DFD   21 00 34               LD   hl,TIB   
0E00   09                     ADD   hl,bc   
0E01   22 E6 36               LD   (vTIBPtr),hl   
0E04   01 00 34               LD   bc,TIB   
0E07   ED 43 FE 36            LD   (vSavedIP),bc   ; save IP
0E0B   ED 73 00 37            LD   (vSavedDSP),sp   ; save Data SP
0E0F   FD 22 02 37            LD   (vSavedRSP),iy   ; save Return SP
0E13   DD 22 04 37            LD   (vSavedNext),ix   ; save Next
0E17   0B                     DEC   bc   
0E18                NEXT:        
0E18   03                     INC   bc   ; Increment the IP
0E19   0A                     LD   a,(bc)   ; Get the next character and dispatch
0E1A   FE 20                  CP   " "   ; whitespace?
0E1C   28 FA                  JR   z,next   ; space? ignore
0E1E   38 0D                  JR   c,next1   
0E20   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0E22   6F                     LD   l,a   ; index into table
0E23   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0E25   6E                     LD   l,(hl)   ; get low jump address
0E26   24                     INC   h   ; page 2
0E27   FE BA                  CP   "Z" - "!" + 1 + $80   
0E29   38 01                  JR   c,next0   
0E2B   24                     INC   h   ; page 3
0E2C                NEXT0:       
0E2C   E9                     JP   (hl)   ; Jump to routine
0E2D                NEXT1:       
0E2D   FE 00                  CP   NUL   ; end of input string?
0E2F   28 03                  JR   z,exit   
0E31   C3 A2 0D               JP   interpret   ; no, other whitespace, macros?
0E34                EXIT:        
0E34   03                     INC   bc   
0E35   60 69                  LD   hl,bc   
0E37   E9                     JP   (hl)   
0E38                RUN:         
0E38   C1                     POP   bc   
0E39   0B                     DEC   bc   
0E3A   DD E9                  JP   (ix)   
0E3C                ERROR:       
0E3C   E5                     PUSH   hl   
0E3D   CD 38 0E               CALL   run   
0E40   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
0E4B   C3 A2 0D               JP   interpret   
0E4E                BACKSPACE_:      
0E4E   79                     LD   a,c   
0E4F   B0                     OR   b   
0E50   CA AE 0D               JP   z,interpret2   
0E53   0B                     DEC   bc   
0E54   CD 01 0D               CALL   printStr   
0E57   08 20 08 00            .CSTR   "\b \b"   
0E5B   C3 AE 0D               JP   interpret2   
0E5E                REEDIT_:      
0E5E   CD 01 0D               CALL   printStr   
0E61   0D 3E 20 00            .CSTR   "\r> "   
0E65   21 00 34               LD   hl,TIB   
0E68   18 04                  JR   reEdit1   
0E6A                REEDIT0:      
0E6A   CD 85 00               CALL   putchar   
0E6D   23                     INC   hl   
0E6E                REEDIT1:      
0E6E   7E                     LD   a,(hl)   
0E6F   FE 0D                  CP   "\r"   
0E71   20 F7                  JR   nz,reEdit0   
0E73   11 00 34               LD   de,TIB   
0E76   B7                     OR   a   
0E77   ED 52                  SBC   hl,de   
0E79   44 4D                  LD   bc,hl   
0E7B   C3 AE 0D               JP   interpret2   
0E7E                ANSIPRINTSEQ:      
0E7E   CD 01 0D               CALL   printStr   
0E81   1B 5B 00               DB   ESC,"[",0   
0E84   C9                     RET      
0E85                             ; clears screen and sets cursor to 0,0
0E85                ANSICLEARSCREEN:      
0E85   CD 01 0D               CALL   printStr   
0E88   1B 5B                  DB   ESC,"["   
0E8A   32 4A 00               DB   "2J",0   ; falls through
0E8D                             ; call ansiPrintStr
0E8D                             ; .cstr "H"
0E8D   C9                     RET      
0E8E                             ; a = 0:toEnd 1:toStart 2:entireLine
0E8E                ANSICLEARLINE:      
0E8E   C6 30                  ADD   a,"0"   ; ascii
0E90   08                     EX   af,af'   ; save a
0E91   CD 7E 0E               CALL   ansiPrintSeq   
0E94   08                     EX   af,af'   ; restore
0E95   CD 85 00               CALL   putChar   
0E98   3E 4B                  LD   a,"K"   
0E9A   C3 85 00               JP   putChar   
0E9D                             ; h = column, l = row
0E9D                ANSIGOTO:      
0E9D   D9                     EXX      ; save hl
0E9E   CD 7E 0E               CALL   ansiPrintSeq   
0EA1   D9                     EXX      ; restore hl
0EA2   7C                     LD   a,h   ; save column
0EA3   08                     EX   af,af'   
0EA4   26 00                  LD   h,0   ; print row
0EA6   CD 08 0D               CALL   printNum   
0EA9   3E 3B                  LD   a,";"   
0EAB   CD 85 00               CALL   putChar   
0EAE   08                     EX   af,af'   ; restore column
0EAF   6C                     LD   l,h   ; print column
0EB0   26 00                  LD   h,0   
0EB2   CD 08 0D               CALL   printNum   
0EB5   3E 48                  LD   a,"H"   
0EB7   C3 85 00               JP   putChar   
0EBA                             ; h = "A":Up "B":Down "C":Forward "D":Back
0EBA                             ; l = amount
0EBA                ANSIMOVE:      
0EBA   D9                     EXX      ; save hl
0EBB   CD 7E 0E               CALL   ansiPrintSeq   
0EBE   D9                     EXX      ; restore hl
0EBF   7C                     LD   a,h   
0EC0   08                     EX   af,af'   ; save a
0EC1   26 00                  LD   h,0   ; print amount
0EC3   CD 08 0D               CALL   printNum   
0EC6   08                     EX   af,af'   ; restore a
0EC7   C3 85 00               JP   putChar   ; print direction code
0ECA                             ; a = 0:normal 1:bold 2:low 4:underline 5:blink 7:reverse
0ECA                ANSITEXTSTYLE:      
0ECA   C6 30                  ADD   a,"0"   ; ascii
0ECC   08                     EX   af,af'   ; save a
0ECD   CD 7E 0E               CALL   ansiPrintSeq   
0ED0   08                     EX   af,af'   ; restore
0ED1   CD 85 00               CALL   putChar   
0ED4   3E 6D                  LD   a,"m"   
0ED6   C3 85 00               JP   putChar   
0ED9                             ; a = "h":show "l":hide
0ED9                ANSICURSORSHOW:      
0ED9   08                     EX   af,af'   ; save a
0EDA   CD 01 0D               CALL   printStr   
0EDD   1B 5B                  DB   ESC,"["   
0EDF   3F 32 35 6C 00         DB   "?25l",0   
0EE4   08                     EX   af,af'   ; restore
0EE5   C3 85 00               JP   putChar   
0EE8                          ALIGN   $100   
0F00                TESTSSTART:      
0F00                             ; test "/f", false
0F00                          ;*Macro unroll:  test "7 3 / /remain", 1
0F00   31 00 32               LD   SP,STACK   
0F03   CD 6F 0D               CALL   coldInit   
0F06   CD 1E 30               CALL   execStr   
0F09   37 20 33 20 2F 20 2F 72 65 6D 61 69 6E 00 DB   "7 3 / /remain",0   
0F17   E1                     POP   HL   
0F18   E5                     PUSH   HL   
0F19   11 01 00               LD   DE,1   
0F1C   B7                     OR   A   
0F1D   ED 52                  SBC   HL,DE   
0F1F   7D                     LD   A,L   
0F20   B4                     OR   H   
0F21   CA 89 0F               JP   Z,expectM_2947S18   
0F24   CD 01 0D               CALL   printStr   
0F27   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 6D 61 69 6E 00 .CSTR   "Code: ","7 3 / /remain"   
0F3B   CD 01 0D               CALL   printStr   
0F3E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F4D   21 01 00               LD   hl,1   
0F50   E5                     PUSH   hl   
0F51   E5                     PUSH   hl   
0F52   CD 38 0E               CALL   run   
0F55   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
0F61   CD 01 0D               CALL   printStr   
0F64   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F71   E1                     POP   hl   
0F72   E5                     PUSH   hl   
0F73   E5                     PUSH   hl   
0F74   CD 38 0E               CALL   run   
0F77   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
0F88   76                     HALT      
0F89                EXPECTM_2947S18:      
0F89   E1                     POP   HL   
0F8A   CD 01 0D               CALL   printStr   
0F8D   44 6F 6E 65 21 00      .CSTR   "Done!"   
0F93   76                     HALT      
0F94                          ;*Macro unroll:  test "/f", false
0F94   31 00 32               LD   SP,STACK   
0F97   CD 6F 0D               CALL   coldInit   
0F9A   CD 1E 30               CALL   execStr   
0F9D   2F 66 00               DB   "/f",0   
0FA0   E1                     POP   HL   
0FA1   E5                     PUSH   HL   
0FA2   11 00 00               LD   DE,false   
0FA5   B7                     OR   A   
0FA6   ED 52                  SBC   HL,DE   
0FA8   7D                     LD   A,L   
0FA9   B4                     OR   H   
0FAA   CA 07 10               JP   Z,expectM_2951S23   
0FAD   CD 01 0D               CALL   printStr   
0FB0   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0FB9   CD 01 0D               CALL   printStr   
0FBC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FCB   21 00 00               LD   hl,false   
0FCE   E5                     PUSH   hl   
0FCF   E5                     PUSH   hl   
0FD0   CD 38 0E               CALL   run   
0FD3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
0FDF   CD 01 0D               CALL   printStr   
0FE2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FEF   E1                     POP   hl   
0FF0   E5                     PUSH   hl   
0FF1   E5                     PUSH   hl   
0FF2   CD 38 0E               CALL   run   
0FF5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1006   76                     HALT      
1007                EXPECTM_2951S23:      
1007   E1                     POP   HL   
1008                          ;*Macro unroll:  test "/t", true
1008   31 00 32               LD   SP,STACK   
100B   CD 6F 0D               CALL   coldInit   
100E   CD 1E 30               CALL   execStr   
1011   2F 74 00               DB   "/t",0   
1014   E1                     POP   HL   
1015   E5                     PUSH   HL   
1016   11 FF FF               LD   DE,true   
1019   B7                     OR   A   
101A   ED 52                  SBC   HL,DE   
101C   7D                     LD   A,L   
101D   B4                     OR   H   
101E   CA 7B 10               JP   Z,expectM_2952S24   
1021   CD 01 0D               CALL   printStr   
1024   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
102D   CD 01 0D               CALL   printStr   
1030   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
103F   21 FF FF               LD   hl,true   
1042   E5                     PUSH   hl   
1043   E5                     PUSH   hl   
1044   CD 38 0E               CALL   run   
1047   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1053   CD 01 0D               CALL   printStr   
1056   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1063   E1                     POP   hl   
1064   E5                     PUSH   hl   
1065   E5                     PUSH   hl   
1066   CD 38 0E               CALL   run   
1069   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
107A   76                     HALT      
107B                EXPECTM_2952S24:      
107B   E1                     POP   HL   
107C                          ;*Macro unroll:  test "1", 1
107C   31 00 32               LD   SP,STACK   
107F   CD 6F 0D               CALL   coldInit   
1082   CD 1E 30               CALL   execStr   
1085   31 00                  DB   "1",0   
1087   E1                     POP   HL   
1088   E5                     PUSH   HL   
1089   11 01 00               LD   DE,1   
108C   B7                     OR   A   
108D   ED 52                  SBC   HL,DE   
108F   7D                     LD   A,L   
1090   B4                     OR   H   
1091   CA ED 10               JP   Z,expectM_2953S25   
1094   CD 01 0D               CALL   printStr   
1097   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
109F   CD 01 0D               CALL   printStr   
10A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10B1   21 01 00               LD   hl,1   
10B4   E5                     PUSH   hl   
10B5   E5                     PUSH   hl   
10B6   CD 38 0E               CALL   run   
10B9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
10C5   CD 01 0D               CALL   printStr   
10C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10D5   E1                     POP   hl   
10D6   E5                     PUSH   hl   
10D7   E5                     PUSH   hl   
10D8   CD 38 0E               CALL   run   
10DB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
10EC   76                     HALT      
10ED                EXPECTM_2953S25:      
10ED   E1                     POP   HL   
10EE                          ;*Macro unroll:  test "2", 2
10EE   31 00 32               LD   SP,STACK   
10F1   CD 6F 0D               CALL   coldInit   
10F4   CD 1E 30               CALL   execStr   
10F7   32 00                  DB   "2",0   
10F9   E1                     POP   HL   
10FA   E5                     PUSH   HL   
10FB   11 02 00               LD   DE,2   
10FE   B7                     OR   A   
10FF   ED 52                  SBC   HL,DE   
1101   7D                     LD   A,L   
1102   B4                     OR   H   
1103   CA 5F 11               JP   Z,expectM_2954S26   
1106   CD 01 0D               CALL   printStr   
1109   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1111   CD 01 0D               CALL   printStr   
1114   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1123   21 02 00               LD   hl,2   
1126   E5                     PUSH   hl   
1127   E5                     PUSH   hl   
1128   CD 38 0E               CALL   run   
112B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1137   CD 01 0D               CALL   printStr   
113A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1147   E1                     POP   hl   
1148   E5                     PUSH   hl   
1149   E5                     PUSH   hl   
114A   CD 38 0E               CALL   run   
114D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
115E   76                     HALT      
115F                EXPECTM_2954S26:      
115F   E1                     POP   HL   
1160                          ;*Macro unroll:  test "1", 1
1160   31 00 32               LD   SP,STACK   
1163   CD 6F 0D               CALL   coldInit   
1166   CD 1E 30               CALL   execStr   
1169   31 00                  DB   "1",0   
116B   E1                     POP   HL   
116C   E5                     PUSH   HL   
116D   11 01 00               LD   DE,1   
1170   B7                     OR   A   
1171   ED 52                  SBC   HL,DE   
1173   7D                     LD   A,L   
1174   B4                     OR   H   
1175   CA D1 11               JP   Z,expectM_2955S27   
1178   CD 01 0D               CALL   printStr   
117B   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
1183   CD 01 0D               CALL   printStr   
1186   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1195   21 01 00               LD   hl,1   
1198   E5                     PUSH   hl   
1199   E5                     PUSH   hl   
119A   CD 38 0E               CALL   run   
119D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
11A9   CD 01 0D               CALL   printStr   
11AC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11B9   E1                     POP   hl   
11BA   E5                     PUSH   hl   
11BB   E5                     PUSH   hl   
11BC   CD 38 0E               CALL   run   
11BF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
11D0   76                     HALT      
11D1                EXPECTM_2955S27:      
11D1   E1                     POP   HL   
11D2                          ;*Macro unroll:  test "0", 0
11D2   31 00 32               LD   SP,STACK   
11D5   CD 6F 0D               CALL   coldInit   
11D8   CD 1E 30               CALL   execStr   
11DB   30 00                  DB   "0",0   
11DD   E1                     POP   HL   
11DE   E5                     PUSH   HL   
11DF   11 00 00               LD   DE,0   
11E2   B7                     OR   A   
11E3   ED 52                  SBC   HL,DE   
11E5   7D                     LD   A,L   
11E6   B4                     OR   H   
11E7   CA 43 12               JP   Z,expectM_2956S28   
11EA   CD 01 0D               CALL   printStr   
11ED   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
11F5   CD 01 0D               CALL   printStr   
11F8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1207   21 00 00               LD   hl,0   
120A   E5                     PUSH   hl   
120B   E5                     PUSH   hl   
120C   CD 38 0E               CALL   run   
120F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
121B   CD 01 0D               CALL   printStr   
121E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
122B   E1                     POP   hl   
122C   E5                     PUSH   hl   
122D   E5                     PUSH   hl   
122E   CD 38 0E               CALL   run   
1231   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1242   76                     HALT      
1243                EXPECTM_2956S28:      
1243   E1                     POP   HL   
1244                          ;*Macro unroll:  test "10", 10
1244   31 00 32               LD   SP,STACK   
1247   CD 6F 0D               CALL   coldInit   
124A   CD 1E 30               CALL   execStr   
124D   31 30 00               DB   "10",0   
1250   E1                     POP   HL   
1251   E5                     PUSH   HL   
1252   11 0A 00               LD   DE,10   
1255   B7                     OR   A   
1256   ED 52                  SBC   HL,DE   
1258   7D                     LD   A,L   
1259   B4                     OR   H   
125A   CA B7 12               JP   Z,expectM_2957S29   
125D   CD 01 0D               CALL   printStr   
1260   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1269   CD 01 0D               CALL   printStr   
126C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
127B   21 0A 00               LD   hl,10   
127E   E5                     PUSH   hl   
127F   E5                     PUSH   hl   
1280   CD 38 0E               CALL   run   
1283   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
128F   CD 01 0D               CALL   printStr   
1292   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
129F   E1                     POP   hl   
12A0   E5                     PUSH   hl   
12A1   E5                     PUSH   hl   
12A2   CD 38 0E               CALL   run   
12A5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
12B6   76                     HALT      
12B7                EXPECTM_2957S29:      
12B7   E1                     POP   HL   
12B8                          ;*Macro unroll:  test "123", 123
12B8   31 00 32               LD   SP,STACK   
12BB   CD 6F 0D               CALL   coldInit   
12BE   CD 1E 30               CALL   execStr   
12C1   31 32 33 00            DB   "123",0   
12C5   E1                     POP   HL   
12C6   E5                     PUSH   HL   
12C7   11 7B 00               LD   DE,123   
12CA   B7                     OR   A   
12CB   ED 52                  SBC   HL,DE   
12CD   7D                     LD   A,L   
12CE   B4                     OR   H   
12CF   CA 2D 13               JP   Z,expectM_2958S30   
12D2   CD 01 0D               CALL   printStr   
12D5   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
12DF   CD 01 0D               CALL   printStr   
12E2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12F1   21 7B 00               LD   hl,123   
12F4   E5                     PUSH   hl   
12F5   E5                     PUSH   hl   
12F6   CD 38 0E               CALL   run   
12F9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1305   CD 01 0D               CALL   printStr   
1308   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1315   E1                     POP   hl   
1316   E5                     PUSH   hl   
1317   E5                     PUSH   hl   
1318   CD 38 0E               CALL   run   
131B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
132C   76                     HALT      
132D                EXPECTM_2958S30:      
132D   E1                     POP   HL   
132E                          ;*Macro unroll:  test "-1",-1
132E   31 00 32               LD   SP,STACK   
1331   CD 6F 0D               CALL   coldInit   
1334   CD 1E 30               CALL   execStr   
1337   2D 31 00               DB   "-1",0   
133A   E1                     POP   HL   
133B   E5                     PUSH   HL   
133C   11 FF FF               LD   DE,-1   
133F   B7                     OR   A   
1340   ED 52                  SBC   HL,DE   
1342   7D                     LD   A,L   
1343   B4                     OR   H   
1344   CA A1 13               JP   Z,expectM_2959S31   
1347   CD 01 0D               CALL   printStr   
134A   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1353   CD 01 0D               CALL   printStr   
1356   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1365   21 FF FF               LD   hl,-1   
1368   E5                     PUSH   hl   
1369   E5                     PUSH   hl   
136A   CD 38 0E               CALL   run   
136D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1379   CD 01 0D               CALL   printStr   
137C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1389   E1                     POP   hl   
138A   E5                     PUSH   hl   
138B   E5                     PUSH   hl   
138C   CD 38 0E               CALL   run   
138F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
13A0   76                     HALT      
13A1                EXPECTM_2959S31:      
13A1   E1                     POP   HL   
13A2                          ;*Macro unroll:  test "-1 /abs",1
13A2   31 00 32               LD   SP,STACK   
13A5   CD 6F 0D               CALL   coldInit   
13A8   CD 1E 30               CALL   execStr   
13AB   2D 31 20 2F 61 62 73 00 DB   "-1 /abs",0   
13B3   E1                     POP   HL   
13B4   E5                     PUSH   HL   
13B5   11 01 00               LD   DE,1   
13B8   B7                     OR   A   
13B9   ED 52                  SBC   HL,DE   
13BB   7D                     LD   A,L   
13BC   B4                     OR   H   
13BD   CA 1F 14               JP   Z,expectM_2960S32   
13C0   CD 01 0D               CALL   printStr   
13C3   43 6F 64 65 3A 20 2D 31 20 2F 61 62 73 00 .CSTR   "Code: ","-1 /abs"   
13D1   CD 01 0D               CALL   printStr   
13D4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13E3   21 01 00               LD   hl,1   
13E6   E5                     PUSH   hl   
13E7   E5                     PUSH   hl   
13E8   CD 38 0E               CALL   run   
13EB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
13F7   CD 01 0D               CALL   printStr   
13FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1407   E1                     POP   hl   
1408   E5                     PUSH   hl   
1409   E5                     PUSH   hl   
140A   CD 38 0E               CALL   run   
140D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
141E   76                     HALT      
141F                EXPECTM_2960S32:      
141F   E1                     POP   HL   
1420                          ;*Macro unroll:  test "_a", $61
1420   31 00 32               LD   SP,STACK   
1423   CD 6F 0D               CALL   coldInit   
1426   CD 1E 30               CALL   execStr   
1429   5F 61 00               DB   "_a",0   
142C   E1                     POP   HL   
142D   E5                     PUSH   HL   
142E   11 61 00               LD   DE,$61   
1431   B7                     OR   A   
1432   ED 52                  SBC   HL,DE   
1434   7D                     LD   A,L   
1435   B4                     OR   H   
1436   CA 93 14               JP   Z,expectM_2961S33   
1439   CD 01 0D               CALL   printStr   
143C   43 6F 64 65 3A 20 5F 61 00 .CSTR   "Code: ","_a"   
1445   CD 01 0D               CALL   printStr   
1448   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1457   21 61 00               LD   hl,$61   
145A   E5                     PUSH   hl   
145B   E5                     PUSH   hl   
145C   CD 38 0E               CALL   run   
145F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
146B   CD 01 0D               CALL   printStr   
146E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
147B   E1                     POP   hl   
147C   E5                     PUSH   hl   
147D   E5                     PUSH   hl   
147E   CD 38 0E               CALL   run   
1481   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1492   76                     HALT      
1493                EXPECTM_2961S33:      
1493   E1                     POP   HL   
1494                          ;*Macro unroll:  test "__", $5F
1494   31 00 32               LD   SP,STACK   
1497   CD 6F 0D               CALL   coldInit   
149A   CD 1E 30               CALL   execStr   
149D   5F 5F 00               DB   "__",0   
14A0   E1                     POP   HL   
14A1   E5                     PUSH   HL   
14A2   11 5F 00               LD   DE,$5F   
14A5   B7                     OR   A   
14A6   ED 52                  SBC   HL,DE   
14A8   7D                     LD   A,L   
14A9   B4                     OR   H   
14AA   CA 07 15               JP   Z,expectM_2962S34   
14AD   CD 01 0D               CALL   printStr   
14B0   43 6F 64 65 3A 20 5F 5F 00 .CSTR   "Code: ","__"   
14B9   CD 01 0D               CALL   printStr   
14BC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14CB   21 5F 00               LD   hl,$5F   
14CE   E5                     PUSH   hl   
14CF   E5                     PUSH   hl   
14D0   CD 38 0E               CALL   run   
14D3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
14DF   CD 01 0D               CALL   printStr   
14E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14EF   E1                     POP   hl   
14F0   E5                     PUSH   hl   
14F1   E5                     PUSH   hl   
14F2   CD 38 0E               CALL   run   
14F5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1506   76                     HALT      
1507                EXPECTM_2962S34:      
1507   E1                     POP   HL   
1508                          ;*Macro unroll:  test "$10", $10
1508   31 00 32               LD   SP,STACK   
150B   CD 6F 0D               CALL   coldInit   
150E   CD 1E 30               CALL   execStr   
1511   24 31 30 00            DB   "$10",0   
1515   E1                     POP   HL   
1516   E5                     PUSH   HL   
1517   11 10 00               LD   DE,$10   
151A   B7                     OR   A   
151B   ED 52                  SBC   HL,DE   
151D   7D                     LD   A,L   
151E   B4                     OR   H   
151F   CA 7D 15               JP   Z,expectM_2963S35   
1522   CD 01 0D               CALL   printStr   
1525   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
152F   CD 01 0D               CALL   printStr   
1532   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1541   21 10 00               LD   hl,$10   
1544   E5                     PUSH   hl   
1545   E5                     PUSH   hl   
1546   CD 38 0E               CALL   run   
1549   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1555   CD 01 0D               CALL   printStr   
1558   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1565   E1                     POP   hl   
1566   E5                     PUSH   hl   
1567   E5                     PUSH   hl   
1568   CD 38 0E               CALL   run   
156B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
157C   76                     HALT      
157D                EXPECTM_2963S35:      
157D   E1                     POP   HL   
157E                          ;*Macro unroll:  test "$FF", $FF
157E   31 00 32               LD   SP,STACK   
1581   CD 6F 0D               CALL   coldInit   
1584   CD 1E 30               CALL   execStr   
1587   24 46 46 00            DB   "$FF",0   
158B   E1                     POP   HL   
158C   E5                     PUSH   HL   
158D   11 FF 00               LD   DE,$FF   
1590   B7                     OR   A   
1591   ED 52                  SBC   HL,DE   
1593   7D                     LD   A,L   
1594   B4                     OR   H   
1595   CA F3 15               JP   Z,expectM_2964S36   
1598   CD 01 0D               CALL   printStr   
159B   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
15A5   CD 01 0D               CALL   printStr   
15A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15B7   21 FF 00               LD   hl,$FF   
15BA   E5                     PUSH   hl   
15BB   E5                     PUSH   hl   
15BC   CD 38 0E               CALL   run   
15BF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
15CB   CD 01 0D               CALL   printStr   
15CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15DB   E1                     POP   hl   
15DC   E5                     PUSH   hl   
15DD   E5                     PUSH   hl   
15DE   CD 38 0E               CALL   run   
15E1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
15F2   76                     HALT      
15F3                EXPECTM_2964S36:      
15F3   E1                     POP   HL   
15F4                          ;*Macro unroll:  test "-1 2 +",1
15F4   31 00 32               LD   SP,STACK   
15F7   CD 6F 0D               CALL   coldInit   
15FA   CD 1E 30               CALL   execStr   
15FD   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1604   E1                     POP   HL   
1605   E5                     PUSH   HL   
1606   11 01 00               LD   DE,1   
1609   B7                     OR   A   
160A   ED 52                  SBC   HL,DE   
160C   7D                     LD   A,L   
160D   B4                     OR   H   
160E   CA 6F 16               JP   Z,expectM_2965S37   
1611   CD 01 0D               CALL   printStr   
1614   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1621   CD 01 0D               CALL   printStr   
1624   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1633   21 01 00               LD   hl,1   
1636   E5                     PUSH   hl   
1637   E5                     PUSH   hl   
1638   CD 38 0E               CALL   run   
163B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1647   CD 01 0D               CALL   printStr   
164A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1657   E1                     POP   hl   
1658   E5                     PUSH   hl   
1659   E5                     PUSH   hl   
165A   CD 38 0E               CALL   run   
165D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
166E   76                     HALT      
166F                EXPECTM_2965S37:      
166F   E1                     POP   HL   
1670                          ;*Macro unroll:  test "-1 1 +",0
1670   31 00 32               LD   SP,STACK   
1673   CD 6F 0D               CALL   coldInit   
1676   CD 1E 30               CALL   execStr   
1679   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
1680   E1                     POP   HL   
1681   E5                     PUSH   HL   
1682   11 00 00               LD   DE,0   
1685   B7                     OR   A   
1686   ED 52                  SBC   HL,DE   
1688   7D                     LD   A,L   
1689   B4                     OR   H   
168A   CA EB 16               JP   Z,expectM_2966S38   
168D   CD 01 0D               CALL   printStr   
1690   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
169D   CD 01 0D               CALL   printStr   
16A0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16AF   21 00 00               LD   hl,0   
16B2   E5                     PUSH   hl   
16B3   E5                     PUSH   hl   
16B4   CD 38 0E               CALL   run   
16B7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
16C3   CD 01 0D               CALL   printStr   
16C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16D3   E1                     POP   hl   
16D4   E5                     PUSH   hl   
16D5   E5                     PUSH   hl   
16D6   CD 38 0E               CALL   run   
16D9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
16EA   76                     HALT      
16EB                EXPECTM_2966S38:      
16EB   E1                     POP   HL   
16EC                          ;*Macro unroll:  test "1 2 +", 3
16EC   31 00 32               LD   SP,STACK   
16EF   CD 6F 0D               CALL   coldInit   
16F2   CD 1E 30               CALL   execStr   
16F5   31 20 32 20 2B 00      DB   "1 2 +",0   
16FB   E1                     POP   HL   
16FC   E5                     PUSH   HL   
16FD   11 03 00               LD   DE,3   
1700   B7                     OR   A   
1701   ED 52                  SBC   HL,DE   
1703   7D                     LD   A,L   
1704   B4                     OR   H   
1705   CA 65 17               JP   Z,expectM_2967S39   
1708   CD 01 0D               CALL   printStr   
170B   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1717   CD 01 0D               CALL   printStr   
171A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1729   21 03 00               LD   hl,3   
172C   E5                     PUSH   hl   
172D   E5                     PUSH   hl   
172E   CD 38 0E               CALL   run   
1731   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
173D   CD 01 0D               CALL   printStr   
1740   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
174D   E1                     POP   hl   
174E   E5                     PUSH   hl   
174F   E5                     PUSH   hl   
1750   CD 38 0E               CALL   run   
1753   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1764   76                     HALT      
1765                EXPECTM_2967S39:      
1765   E1                     POP   HL   
1766                          ;*Macro unroll:  test "4 1 2 +", 3
1766   31 00 32               LD   SP,STACK   
1769   CD 6F 0D               CALL   coldInit   
176C   CD 1E 30               CALL   execStr   
176F   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
1777   E1                     POP   HL   
1778   E5                     PUSH   HL   
1779   11 03 00               LD   DE,3   
177C   B7                     OR   A   
177D   ED 52                  SBC   HL,DE   
177F   7D                     LD   A,L   
1780   B4                     OR   H   
1781   CA E3 17               JP   Z,expectM_2968S40   
1784   CD 01 0D               CALL   printStr   
1787   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1795   CD 01 0D               CALL   printStr   
1798   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17A7   21 03 00               LD   hl,3   
17AA   E5                     PUSH   hl   
17AB   E5                     PUSH   hl   
17AC   CD 38 0E               CALL   run   
17AF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
17BB   CD 01 0D               CALL   printStr   
17BE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17CB   E1                     POP   hl   
17CC   E5                     PUSH   hl   
17CD   E5                     PUSH   hl   
17CE   CD 38 0E               CALL   run   
17D1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
17E2   76                     HALT      
17E3                EXPECTM_2968S40:      
17E3   E1                     POP   HL   
17E4                          ;*Macro unroll:  test "123 456 +", 123+456
17E4   31 00 32               LD   SP,STACK   
17E7   CD 6F 0D               CALL   coldInit   
17EA   CD 1E 30               CALL   execStr   
17ED   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
17F7   E1                     POP   HL   
17F8   E5                     PUSH   HL   
17F9   11 43 02               LD   DE,123+456   
17FC   B7                     OR   A   
17FD   ED 52                  SBC   HL,DE   
17FF   7D                     LD   A,L   
1800   B4                     OR   H   
1801   CA 65 18               JP   Z,expectM_2969S41   
1804   CD 01 0D               CALL   printStr   
1807   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1817   CD 01 0D               CALL   printStr   
181A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1829   21 43 02               LD   hl,123+456   
182C   E5                     PUSH   hl   
182D   E5                     PUSH   hl   
182E   CD 38 0E               CALL   run   
1831   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
183D   CD 01 0D               CALL   printStr   
1840   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
184D   E1                     POP   hl   
184E   E5                     PUSH   hl   
184F   E5                     PUSH   hl   
1850   CD 38 0E               CALL   run   
1853   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1864   76                     HALT      
1865                EXPECTM_2969S41:      
1865   E1                     POP   HL   
1866                          ;*Macro unroll:  test "64 128 +", 64+128
1866   31 00 32               LD   SP,STACK   
1869   CD 6F 0D               CALL   coldInit   
186C   CD 1E 30               CALL   execStr   
186F   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1878   E1                     POP   HL   
1879   E5                     PUSH   HL   
187A   11 C0 00               LD   DE,64+128   
187D   B7                     OR   A   
187E   ED 52                  SBC   HL,DE   
1880   7D                     LD   A,L   
1881   B4                     OR   H   
1882   CA E5 18               JP   Z,expectM_2970S42   
1885   CD 01 0D               CALL   printStr   
1888   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1897   CD 01 0D               CALL   printStr   
189A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18A9   21 C0 00               LD   hl,64+128   
18AC   E5                     PUSH   hl   
18AD   E5                     PUSH   hl   
18AE   CD 38 0E               CALL   run   
18B1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
18BD   CD 01 0D               CALL   printStr   
18C0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18CD   E1                     POP   hl   
18CE   E5                     PUSH   hl   
18CF   E5                     PUSH   hl   
18D0   CD 38 0E               CALL   run   
18D3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
18E4   76                     HALT      
18E5                EXPECTM_2970S42:      
18E5   E1                     POP   HL   
18E6                          ;*Macro unroll:  test "1 2 +", 3
18E6   31 00 32               LD   SP,STACK   
18E9   CD 6F 0D               CALL   coldInit   
18EC   CD 1E 30               CALL   execStr   
18EF   31 20 32 20 2B 00      DB   "1 2 +",0   
18F5   E1                     POP   HL   
18F6   E5                     PUSH   HL   
18F7   11 03 00               LD   DE,3   
18FA   B7                     OR   A   
18FB   ED 52                  SBC   HL,DE   
18FD   7D                     LD   A,L   
18FE   B4                     OR   H   
18FF   CA 5F 19               JP   Z,expectM_2971S43   
1902   CD 01 0D               CALL   printStr   
1905   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1911   CD 01 0D               CALL   printStr   
1914   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1923   21 03 00               LD   hl,3   
1926   E5                     PUSH   hl   
1927   E5                     PUSH   hl   
1928   CD 38 0E               CALL   run   
192B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1937   CD 01 0D               CALL   printStr   
193A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1947   E1                     POP   hl   
1948   E5                     PUSH   hl   
1949   E5                     PUSH   hl   
194A   CD 38 0E               CALL   run   
194D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
195E   76                     HALT      
195F                EXPECTM_2971S43:      
195F   E1                     POP   HL   
1960                          ;*Macro unroll:  test "1a= a++ a",2
1960   31 00 32               LD   SP,STACK   
1963   CD 6F 0D               CALL   coldInit   
1966   CD 1E 30               CALL   execStr   
1969   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1973   E1                     POP   HL   
1974   E5                     PUSH   HL   
1975   11 02 00               LD   DE,2   
1978   B7                     OR   A   
1979   ED 52                  SBC   HL,DE   
197B   7D                     LD   A,L   
197C   B4                     OR   H   
197D   CA E1 19               JP   Z,expectM_2972S44   
1980   CD 01 0D               CALL   printStr   
1983   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1993   CD 01 0D               CALL   printStr   
1996   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19A5   21 02 00               LD   hl,2   
19A8   E5                     PUSH   hl   
19A9   E5                     PUSH   hl   
19AA   CD 38 0E               CALL   run   
19AD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
19B9   CD 01 0D               CALL   printStr   
19BC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19C9   E1                     POP   hl   
19CA   E5                     PUSH   hl   
19CB   E5                     PUSH   hl   
19CC   CD 38 0E               CALL   run   
19CF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
19E0   76                     HALT      
19E1                EXPECTM_2972S44:      
19E1   E1                     POP   HL   
19E2                          ;*Macro unroll:  test "-1 -1 -",0
19E2   31 00 32               LD   SP,STACK   
19E5   CD 6F 0D               CALL   coldInit   
19E8   CD 1E 30               CALL   execStr   
19EB   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
19F3   E1                     POP   HL   
19F4   E5                     PUSH   HL   
19F5   11 00 00               LD   DE,0   
19F8   B7                     OR   A   
19F9   ED 52                  SBC   HL,DE   
19FB   7D                     LD   A,L   
19FC   B4                     OR   H   
19FD   CA 5F 1A               JP   Z,expectM_2973S45   
1A00   CD 01 0D               CALL   printStr   
1A03   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1A11   CD 01 0D               CALL   printStr   
1A14   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A23   21 00 00               LD   hl,0   
1A26   E5                     PUSH   hl   
1A27   E5                     PUSH   hl   
1A28   CD 38 0E               CALL   run   
1A2B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1A37   CD 01 0D               CALL   printStr   
1A3A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A47   E1                     POP   hl   
1A48   E5                     PUSH   hl   
1A49   E5                     PUSH   hl   
1A4A   CD 38 0E               CALL   run   
1A4D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1A5E   76                     HALT      
1A5F                EXPECTM_2973S45:      
1A5F   E1                     POP   HL   
1A60                          ;*Macro unroll:  test "5 3 -", 2
1A60   31 00 32               LD   SP,STACK   
1A63   CD 6F 0D               CALL   coldInit   
1A66   CD 1E 30               CALL   execStr   
1A69   35 20 33 20 2D 00      DB   "5 3 -",0   
1A6F   E1                     POP   HL   
1A70   E5                     PUSH   HL   
1A71   11 02 00               LD   DE,2   
1A74   B7                     OR   A   
1A75   ED 52                  SBC   HL,DE   
1A77   7D                     LD   A,L   
1A78   B4                     OR   H   
1A79   CA D9 1A               JP   Z,expectM_2974S46   
1A7C   CD 01 0D               CALL   printStr   
1A7F   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1A8B   CD 01 0D               CALL   printStr   
1A8E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A9D   21 02 00               LD   hl,2   
1AA0   E5                     PUSH   hl   
1AA1   E5                     PUSH   hl   
1AA2   CD 38 0E               CALL   run   
1AA5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1AB1   CD 01 0D               CALL   printStr   
1AB4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AC1   E1                     POP   hl   
1AC2   E5                     PUSH   hl   
1AC3   E5                     PUSH   hl   
1AC4   CD 38 0E               CALL   run   
1AC7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1AD8   76                     HALT      
1AD9                EXPECTM_2974S46:      
1AD9   E1                     POP   HL   
1ADA                          ;*Macro unroll:  test "2 1 -",1
1ADA   31 00 32               LD   SP,STACK   
1ADD   CD 6F 0D               CALL   coldInit   
1AE0   CD 1E 30               CALL   execStr   
1AE3   32 20 31 20 2D 00      DB   "2 1 -",0   
1AE9   E1                     POP   HL   
1AEA   E5                     PUSH   HL   
1AEB   11 01 00               LD   DE,1   
1AEE   B7                     OR   A   
1AEF   ED 52                  SBC   HL,DE   
1AF1   7D                     LD   A,L   
1AF2   B4                     OR   H   
1AF3   CA 53 1B               JP   Z,expectM_2975S47   
1AF6   CD 01 0D               CALL   printStr   
1AF9   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1B05   CD 01 0D               CALL   printStr   
1B08   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B17   21 01 00               LD   hl,1   
1B1A   E5                     PUSH   hl   
1B1B   E5                     PUSH   hl   
1B1C   CD 38 0E               CALL   run   
1B1F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1B2B   CD 01 0D               CALL   printStr   
1B2E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B3B   E1                     POP   hl   
1B3C   E5                     PUSH   hl   
1B3D   E5                     PUSH   hl   
1B3E   CD 38 0E               CALL   run   
1B41   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1B52   76                     HALT      
1B53                EXPECTM_2975S47:      
1B53   E1                     POP   HL   
1B54                          ;*Macro unroll:  test "3a= a-- a",2
1B54   31 00 32               LD   SP,STACK   
1B57   CD 6F 0D               CALL   coldInit   
1B5A   CD 1E 30               CALL   execStr   
1B5D   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1B67   E1                     POP   HL   
1B68   E5                     PUSH   HL   
1B69   11 02 00               LD   DE,2   
1B6C   B7                     OR   A   
1B6D   ED 52                  SBC   HL,DE   
1B6F   7D                     LD   A,L   
1B70   B4                     OR   H   
1B71   CA D5 1B               JP   Z,expectM_2976S48   
1B74   CD 01 0D               CALL   printStr   
1B77   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1B87   CD 01 0D               CALL   printStr   
1B8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B99   21 02 00               LD   hl,2   
1B9C   E5                     PUSH   hl   
1B9D   E5                     PUSH   hl   
1B9E   CD 38 0E               CALL   run   
1BA1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1BAD   CD 01 0D               CALL   printStr   
1BB0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BBD   E1                     POP   hl   
1BBE   E5                     PUSH   hl   
1BBF   E5                     PUSH   hl   
1BC0   CD 38 0E               CALL   run   
1BC3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1BD4   76                     HALT      
1BD5                EXPECTM_2976S48:      
1BD5   E1                     POP   HL   
1BD6                          ;*Macro unroll:  test "3 5 &", 1
1BD6   31 00 32               LD   SP,STACK   
1BD9   CD 6F 0D               CALL   coldInit   
1BDC   CD 1E 30               CALL   execStr   
1BDF   33 20 35 20 26 00      DB   "3 5 &",0   
1BE5   E1                     POP   HL   
1BE6   E5                     PUSH   HL   
1BE7   11 01 00               LD   DE,1   
1BEA   B7                     OR   A   
1BEB   ED 52                  SBC   HL,DE   
1BED   7D                     LD   A,L   
1BEE   B4                     OR   H   
1BEF   CA 4F 1C               JP   Z,expectM_2977S49   
1BF2   CD 01 0D               CALL   printStr   
1BF5   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1C01   CD 01 0D               CALL   printStr   
1C04   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C13   21 01 00               LD   hl,1   
1C16   E5                     PUSH   hl   
1C17   E5                     PUSH   hl   
1C18   CD 38 0E               CALL   run   
1C1B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1C27   CD 01 0D               CALL   printStr   
1C2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C37   E1                     POP   hl   
1C38   E5                     PUSH   hl   
1C39   E5                     PUSH   hl   
1C3A   CD 38 0E               CALL   run   
1C3D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1C4E   76                     HALT      
1C4F                EXPECTM_2977S49:      
1C4F   E1                     POP   HL   
1C50                          ;*Macro unroll:  test "3 5 |", 7
1C50   31 00 32               LD   SP,STACK   
1C53   CD 6F 0D               CALL   coldInit   
1C56   CD 1E 30               CALL   execStr   
1C59   33 20 35 20 7C 00      DB   "3 5 |",0   
1C5F   E1                     POP   HL   
1C60   E5                     PUSH   HL   
1C61   11 07 00               LD   DE,7   
1C64   B7                     OR   A   
1C65   ED 52                  SBC   HL,DE   
1C67   7D                     LD   A,L   
1C68   B4                     OR   H   
1C69   CA C9 1C               JP   Z,expectM_2978S50   
1C6C   CD 01 0D               CALL   printStr   
1C6F   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1C7B   CD 01 0D               CALL   printStr   
1C7E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C8D   21 07 00               LD   hl,7   
1C90   E5                     PUSH   hl   
1C91   E5                     PUSH   hl   
1C92   CD 38 0E               CALL   run   
1C95   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1CA1   CD 01 0D               CALL   printStr   
1CA4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CB1   E1                     POP   hl   
1CB2   E5                     PUSH   hl   
1CB3   E5                     PUSH   hl   
1CB4   CD 38 0E               CALL   run   
1CB7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1CC8   76                     HALT      
1CC9                EXPECTM_2978S50:      
1CC9   E1                     POP   HL   
1CCA                          ;*Macro unroll:  test "3 5 /xor", 6
1CCA   31 00 32               LD   SP,STACK   
1CCD   CD 6F 0D               CALL   coldInit   
1CD0   CD 1E 30               CALL   execStr   
1CD3   33 20 35 20 2F 78 6F 72 00 DB   "3 5 /xor",0   
1CDC   E1                     POP   HL   
1CDD   E5                     PUSH   HL   
1CDE   11 06 00               LD   DE,6   
1CE1   B7                     OR   A   
1CE2   ED 52                  SBC   HL,DE   
1CE4   7D                     LD   A,L   
1CE5   B4                     OR   H   
1CE6   CA 49 1D               JP   Z,expectM_2979S51   
1CE9   CD 01 0D               CALL   printStr   
1CEC   43 6F 64 65 3A 20 33 20 35 20 2F 78 6F 72 00 .CSTR   "Code: ","3 5 /xor"   
1CFB   CD 01 0D               CALL   printStr   
1CFE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D0D   21 06 00               LD   hl,6   
1D10   E5                     PUSH   hl   
1D11   E5                     PUSH   hl   
1D12   CD 38 0E               CALL   run   
1D15   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1D21   CD 01 0D               CALL   printStr   
1D24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D31   E1                     POP   hl   
1D32   E5                     PUSH   hl   
1D33   E5                     PUSH   hl   
1D34   CD 38 0E               CALL   run   
1D37   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1D48   76                     HALT      
1D49                EXPECTM_2979S51:      
1D49   E1                     POP   HL   
1D4A                          ;*Macro unroll:  test "3a= 5 a/xor a= a",6
1D4A   31 00 32               LD   SP,STACK   
1D4D   CD 6F 0D               CALL   coldInit   
1D50   CD 1E 30               CALL   execStr   
1D53   33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 DB   "3a= 5 a/xor a= a",0   
1D64   E1                     POP   HL   
1D65   E5                     PUSH   HL   
1D66   11 06 00               LD   DE,6   
1D69   B7                     OR   A   
1D6A   ED 52                  SBC   HL,DE   
1D6C   7D                     LD   A,L   
1D6D   B4                     OR   H   
1D6E   CA D9 1D               JP   Z,expectM_2980S52   
1D71   CD 01 0D               CALL   printStr   
1D74   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/xor a= a"   
1D8B   CD 01 0D               CALL   printStr   
1D8E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D9D   21 06 00               LD   hl,6   
1DA0   E5                     PUSH   hl   
1DA1   E5                     PUSH   hl   
1DA2   CD 38 0E               CALL   run   
1DA5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1DB1   CD 01 0D               CALL   printStr   
1DB4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DC1   E1                     POP   hl   
1DC2   E5                     PUSH   hl   
1DC3   E5                     PUSH   hl   
1DC4   CD 38 0E               CALL   run   
1DC7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1DD8   76                     HALT      
1DD9                EXPECTM_2980S52:      
1DD9   E1                     POP   HL   
1DDA                          ;*Macro unroll:  test "0 !", true
1DDA   31 00 32               LD   SP,STACK   
1DDD   CD 6F 0D               CALL   coldInit   
1DE0   CD 1E 30               CALL   execStr   
1DE3   30 20 21 00            DB   "0 !",0   
1DE7   E1                     POP   HL   
1DE8   E5                     PUSH   HL   
1DE9   11 FF FF               LD   DE,true   
1DEC   B7                     OR   A   
1DED   ED 52                  SBC   HL,DE   
1DEF   7D                     LD   A,L   
1DF0   B4                     OR   H   
1DF1   CA 4F 1E               JP   Z,expectM_2981S53   
1DF4   CD 01 0D               CALL   printStr   
1DF7   43 6F 64 65 3A 20 30 20 21 00 .CSTR   "Code: ","0 !"   
1E01   CD 01 0D               CALL   printStr   
1E04   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E13   21 FF FF               LD   hl,true   
1E16   E5                     PUSH   hl   
1E17   E5                     PUSH   hl   
1E18   CD 38 0E               CALL   run   
1E1B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1E27   CD 01 0D               CALL   printStr   
1E2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E37   E1                     POP   hl   
1E38   E5                     PUSH   hl   
1E39   E5                     PUSH   hl   
1E3A   CD 38 0E               CALL   run   
1E3D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1E4E   76                     HALT      
1E4F                EXPECTM_2981S53:      
1E4F   E1                     POP   HL   
1E50                          ;*Macro unroll:  test "2 !", false
1E50   31 00 32               LD   SP,STACK   
1E53   CD 6F 0D               CALL   coldInit   
1E56   CD 1E 30               CALL   execStr   
1E59   32 20 21 00            DB   "2 !",0   
1E5D   E1                     POP   HL   
1E5E   E5                     PUSH   HL   
1E5F   11 00 00               LD   DE,false   
1E62   B7                     OR   A   
1E63   ED 52                  SBC   HL,DE   
1E65   7D                     LD   A,L   
1E66   B4                     OR   H   
1E67   CA C5 1E               JP   Z,expectM_2982S54   
1E6A   CD 01 0D               CALL   printStr   
1E6D   43 6F 64 65 3A 20 32 20 21 00 .CSTR   "Code: ","2 !"   
1E77   CD 01 0D               CALL   printStr   
1E7A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E89   21 00 00               LD   hl,false   
1E8C   E5                     PUSH   hl   
1E8D   E5                     PUSH   hl   
1E8E   CD 38 0E               CALL   run   
1E91   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1E9D   CD 01 0D               CALL   printStr   
1EA0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EAD   E1                     POP   hl   
1EAE   E5                     PUSH   hl   
1EAF   E5                     PUSH   hl   
1EB0   CD 38 0E               CALL   run   
1EB3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1EC4   76                     HALT      
1EC5                EXPECTM_2982S54:      
1EC5   E1                     POP   HL   
1EC6                          ;*Macro unroll:  test "0 !!", false
1EC6   31 00 32               LD   SP,STACK   
1EC9   CD 6F 0D               CALL   coldInit   
1ECC   CD 1E 30               CALL   execStr   
1ECF   30 20 21 21 00         DB   "0 !!",0   
1ED4   E1                     POP   HL   
1ED5   E5                     PUSH   HL   
1ED6   11 00 00               LD   DE,false   
1ED9   B7                     OR   A   
1EDA   ED 52                  SBC   HL,DE   
1EDC   7D                     LD   A,L   
1EDD   B4                     OR   H   
1EDE   CA 3D 1F               JP   Z,expectM_2983S55   
1EE1   CD 01 0D               CALL   printStr   
1EE4   43 6F 64 65 3A 20 30 20 21 21 00 .CSTR   "Code: ","0 !!"   
1EEF   CD 01 0D               CALL   printStr   
1EF2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F01   21 00 00               LD   hl,false   
1F04   E5                     PUSH   hl   
1F05   E5                     PUSH   hl   
1F06   CD 38 0E               CALL   run   
1F09   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1F15   CD 01 0D               CALL   printStr   
1F18   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F25   E1                     POP   hl   
1F26   E5                     PUSH   hl   
1F27   E5                     PUSH   hl   
1F28   CD 38 0E               CALL   run   
1F2B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1F3C   76                     HALT      
1F3D                EXPECTM_2983S55:      
1F3D   E1                     POP   HL   
1F3E                          ;*Macro unroll:  test "2 !!", true
1F3E   31 00 32               LD   SP,STACK   
1F41   CD 6F 0D               CALL   coldInit   
1F44   CD 1E 30               CALL   execStr   
1F47   32 20 21 21 00         DB   "2 !!",0   
1F4C   E1                     POP   HL   
1F4D   E5                     PUSH   HL   
1F4E   11 FF FF               LD   DE,true   
1F51   B7                     OR   A   
1F52   ED 52                  SBC   HL,DE   
1F54   7D                     LD   A,L   
1F55   B4                     OR   H   
1F56   CA B5 1F               JP   Z,expectM_2984S56   
1F59   CD 01 0D               CALL   printStr   
1F5C   43 6F 64 65 3A 20 32 20 21 21 00 .CSTR   "Code: ","2 !!"   
1F67   CD 01 0D               CALL   printStr   
1F6A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F79   21 FF FF               LD   hl,true   
1F7C   E5                     PUSH   hl   
1F7D   E5                     PUSH   hl   
1F7E   CD 38 0E               CALL   run   
1F81   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1F8D   CD 01 0D               CALL   printStr   
1F90   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F9D   E1                     POP   hl   
1F9E   E5                     PUSH   hl   
1F9F   E5                     PUSH   hl   
1FA0   CD 38 0E               CALL   run   
1FA3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1FB4   76                     HALT      
1FB5                EXPECTM_2984S56:      
1FB5   E1                     POP   HL   
1FB6                          ;*Macro unroll:  test "2 3 *", 6
1FB6   31 00 32               LD   SP,STACK   
1FB9   CD 6F 0D               CALL   coldInit   
1FBC   CD 1E 30               CALL   execStr   
1FBF   32 20 33 20 2A 00      DB   "2 3 *",0   
1FC5   E1                     POP   HL   
1FC6   E5                     PUSH   HL   
1FC7   11 06 00               LD   DE,6   
1FCA   B7                     OR   A   
1FCB   ED 52                  SBC   HL,DE   
1FCD   7D                     LD   A,L   
1FCE   B4                     OR   H   
1FCF   CA 2F 20               JP   Z,expectM_2985S57   
1FD2   CD 01 0D               CALL   printStr   
1FD5   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1FE1   CD 01 0D               CALL   printStr   
1FE4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FF3   21 06 00               LD   hl,6   
1FF6   E5                     PUSH   hl   
1FF7   E5                     PUSH   hl   
1FF8   CD 38 0E               CALL   run   
1FFB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2007   CD 01 0D               CALL   printStr   
200A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2017   E1                     POP   hl   
2018   E5                     PUSH   hl   
2019   E5                     PUSH   hl   
201A   CD 38 0E               CALL   run   
201D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
202E   76                     HALT      
202F                EXPECTM_2985S57:      
202F   E1                     POP   HL   
2030                          ;*Macro unroll:  test "1 2 3 + *", 5
2030   31 00 32               LD   SP,STACK   
2033   CD 6F 0D               CALL   coldInit   
2036   CD 1E 30               CALL   execStr   
2039   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
2043   E1                     POP   HL   
2044   E5                     PUSH   HL   
2045   11 05 00               LD   DE,5   
2048   B7                     OR   A   
2049   ED 52                  SBC   HL,DE   
204B   7D                     LD   A,L   
204C   B4                     OR   H   
204D   CA B1 20               JP   Z,expectM_2986S58   
2050   CD 01 0D               CALL   printStr   
2053   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
2063   CD 01 0D               CALL   printStr   
2066   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2075   21 05 00               LD   hl,5   
2078   E5                     PUSH   hl   
2079   E5                     PUSH   hl   
207A   CD 38 0E               CALL   run   
207D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2089   CD 01 0D               CALL   printStr   
208C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2099   E1                     POP   hl   
209A   E5                     PUSH   hl   
209B   E5                     PUSH   hl   
209C   CD 38 0E               CALL   run   
209F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
20B0   76                     HALT      
20B1                EXPECTM_2986S58:      
20B1   E1                     POP   HL   
20B2                          ;*Macro unroll:  test "7 3 /", 2
20B2   31 00 32               LD   SP,STACK   
20B5   CD 6F 0D               CALL   coldInit   
20B8   CD 1E 30               CALL   execStr   
20BB   37 20 33 20 2F 00      DB   "7 3 /",0   
20C1   E1                     POP   HL   
20C2   E5                     PUSH   HL   
20C3   11 02 00               LD   DE,2   
20C6   B7                     OR   A   
20C7   ED 52                  SBC   HL,DE   
20C9   7D                     LD   A,L   
20CA   B4                     OR   H   
20CB   CA 2B 21               JP   Z,expectM_2987S59   
20CE   CD 01 0D               CALL   printStr   
20D1   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
20DD   CD 01 0D               CALL   printStr   
20E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20EF   21 02 00               LD   hl,2   
20F2   E5                     PUSH   hl   
20F3   E5                     PUSH   hl   
20F4   CD 38 0E               CALL   run   
20F7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2103   CD 01 0D               CALL   printStr   
2106   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2113   E1                     POP   hl   
2114   E5                     PUSH   hl   
2115   E5                     PUSH   hl   
2116   CD 38 0E               CALL   run   
2119   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
212A   76                     HALT      
212B                EXPECTM_2987S59:      
212B   E1                     POP   HL   
212C                          ;*Macro unroll:  test "100a= 1a+= a", 101
212C   31 00 32               LD   SP,STACK   
212F   CD 6F 0D               CALL   coldInit   
2132   CD 1E 30               CALL   execStr   
2135   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
2142   E1                     POP   HL   
2143   E5                     PUSH   HL   
2144   11 65 00               LD   DE,101   
2147   B7                     OR   A   
2148   ED 52                  SBC   HL,DE   
214A   7D                     LD   A,L   
214B   B4                     OR   H   
214C   CA B3 21               JP   Z,expectM_2988S60   
214F   CD 01 0D               CALL   printStr   
2152   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
2165   CD 01 0D               CALL   printStr   
2168   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2177   21 65 00               LD   hl,101   
217A   E5                     PUSH   hl   
217B   E5                     PUSH   hl   
217C   CD 38 0E               CALL   run   
217F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
218B   CD 01 0D               CALL   printStr   
218E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
219B   E1                     POP   hl   
219C   E5                     PUSH   hl   
219D   E5                     PUSH   hl   
219E   CD 38 0E               CALL   run   
21A1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
21B2   76                     HALT      
21B3                EXPECTM_2988S60:      
21B3   E1                     POP   HL   
21B4                          ;*Macro unroll:  test "100a= 1a-= a", 99
21B4   31 00 32               LD   SP,STACK   
21B7   CD 6F 0D               CALL   coldInit   
21BA   CD 1E 30               CALL   execStr   
21BD   31 30 30 61 3D 20 31 61 2D 3D 20 61 00 DB   "100a= 1a-= a",0   
21CA   E1                     POP   HL   
21CB   E5                     PUSH   HL   
21CC   11 63 00               LD   DE,99   
21CF   B7                     OR   A   
21D0   ED 52                  SBC   HL,DE   
21D2   7D                     LD   A,L   
21D3   B4                     OR   H   
21D4   CA 3B 22               JP   Z,expectM_2989S61   
21D7   CD 01 0D               CALL   printStr   
21DA   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2D 3D 20 61 00 .CSTR   "Code: ","100a= 1a-= a"   
21ED   CD 01 0D               CALL   printStr   
21F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21FF   21 63 00               LD   hl,99   
2202   E5                     PUSH   hl   
2203   E5                     PUSH   hl   
2204   CD 38 0E               CALL   run   
2207   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2213   CD 01 0D               CALL   printStr   
2216   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2223   E1                     POP   hl   
2224   E5                     PUSH   hl   
2225   E5                     PUSH   hl   
2226   CD 38 0E               CALL   run   
2229   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
223A   76                     HALT      
223B                EXPECTM_2989S61:      
223B   E1                     POP   HL   
223C                          ;*Macro unroll:  test "100a= 2 a*= a", 200
223C   31 00 32               LD   SP,STACK   
223F   CD 6F 0D               CALL   coldInit   
2242   CD 1E 30               CALL   execStr   
2245   31 30 30 61 3D 20 32 20 61 2A 3D 20 61 00 DB   "100a= 2 a*= a",0   
2253   E1                     POP   HL   
2254   E5                     PUSH   HL   
2255   11 C8 00               LD   DE,200   
2258   B7                     OR   A   
2259   ED 52                  SBC   HL,DE   
225B   7D                     LD   A,L   
225C   B4                     OR   H   
225D   CA C5 22               JP   Z,expectM_2990S62   
2260   CD 01 0D               CALL   printStr   
2263   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 20 61 2A 3D 20 61 00 .CSTR   "Code: ","100a= 2 a*= a"   
2277   CD 01 0D               CALL   printStr   
227A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2289   21 C8 00               LD   hl,200   
228C   E5                     PUSH   hl   
228D   E5                     PUSH   hl   
228E   CD 38 0E               CALL   run   
2291   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
229D   CD 01 0D               CALL   printStr   
22A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22AD   E1                     POP   hl   
22AE   E5                     PUSH   hl   
22AF   E5                     PUSH   hl   
22B0   CD 38 0E               CALL   run   
22B3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
22C4   76                     HALT      
22C5                EXPECTM_2990S62:      
22C5   E1                     POP   HL   
22C6                          ;*Macro unroll:  test "100a= 2 a/= a", 50
22C6   31 00 32               LD   SP,STACK   
22C9   CD 6F 0D               CALL   coldInit   
22CC   CD 1E 30               CALL   execStr   
22CF   31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 DB   "100a= 2 a/= a",0   
22DD   E1                     POP   HL   
22DE   E5                     PUSH   HL   
22DF   11 32 00               LD   DE,50   
22E2   B7                     OR   A   
22E3   ED 52                  SBC   HL,DE   
22E5   7D                     LD   A,L   
22E6   B4                     OR   H   
22E7   CA 4F 23               JP   Z,expectM_2991S63   
22EA   CD 01 0D               CALL   printStr   
22ED   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 .CSTR   "Code: ","100a= 2 a/= a"   
2301   CD 01 0D               CALL   printStr   
2304   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2313   21 32 00               LD   hl,50   
2316   E5                     PUSH   hl   
2317   E5                     PUSH   hl   
2318   CD 38 0E               CALL   run   
231B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2327   CD 01 0D               CALL   printStr   
232A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2337   E1                     POP   hl   
2338   E5                     PUSH   hl   
2339   E5                     PUSH   hl   
233A   CD 38 0E               CALL   run   
233D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
234E   76                     HALT      
234F                EXPECTM_2991S63:      
234F   E1                     POP   HL   
2350                          ;*Macro unroll:  test "2a= 3b= a b+= b", 5
2350   31 00 32               LD   SP,STACK   
2353   CD 6F 0D               CALL   coldInit   
2356   CD 1E 30               CALL   execStr   
2359   32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 DB   "2a= 3b= a b+= b",0   
2369   E1                     POP   HL   
236A   E5                     PUSH   HL   
236B   11 05 00               LD   DE,5   
236E   B7                     OR   A   
236F   ED 52                  SBC   HL,DE   
2371   7D                     LD   A,L   
2372   B4                     OR   H   
2373   CA DD 23               JP   Z,expectM_2992S64   
2376   CD 01 0D               CALL   printStr   
2379   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b+= b"   
238F   CD 01 0D               CALL   printStr   
2392   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23A1   21 05 00               LD   hl,5   
23A4   E5                     PUSH   hl   
23A5   E5                     PUSH   hl   
23A6   CD 38 0E               CALL   run   
23A9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
23B5   CD 01 0D               CALL   printStr   
23B8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23C5   E1                     POP   hl   
23C6   E5                     PUSH   hl   
23C7   E5                     PUSH   hl   
23C8   CD 38 0E               CALL   run   
23CB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
23DC   76                     HALT      
23DD                EXPECTM_2992S64:      
23DD   E1                     POP   HL   
23DE                          ;*Macro unroll:  test "2a= 3b= a b-= b", 1
23DE   31 00 32               LD   SP,STACK   
23E1   CD 6F 0D               CALL   coldInit   
23E4   CD 1E 30               CALL   execStr   
23E7   32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 DB   "2a= 3b= a b-= b",0   
23F7   E1                     POP   HL   
23F8   E5                     PUSH   HL   
23F9   11 01 00               LD   DE,1   
23FC   B7                     OR   A   
23FD   ED 52                  SBC   HL,DE   
23FF   7D                     LD   A,L   
2400   B4                     OR   H   
2401   CA 6B 24               JP   Z,expectM_2993S65   
2404   CD 01 0D               CALL   printStr   
2407   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b-= b"   
241D   CD 01 0D               CALL   printStr   
2420   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
242F   21 01 00               LD   hl,1   
2432   E5                     PUSH   hl   
2433   E5                     PUSH   hl   
2434   CD 38 0E               CALL   run   
2437   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2443   CD 01 0D               CALL   printStr   
2446   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2453   E1                     POP   hl   
2454   E5                     PUSH   hl   
2455   E5                     PUSH   hl   
2456   CD 38 0E               CALL   run   
2459   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
246A   76                     HALT      
246B                EXPECTM_2993S65:      
246B   E1                     POP   HL   
246C                          ;*Macro unroll:  test "2a= 3b= a b*= b", 6
246C   31 00 32               LD   SP,STACK   
246F   CD 6F 0D               CALL   coldInit   
2472   CD 1E 30               CALL   execStr   
2475   32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 DB   "2a= 3b= a b*= b",0   
2485   E1                     POP   HL   
2486   E5                     PUSH   HL   
2487   11 06 00               LD   DE,6   
248A   B7                     OR   A   
248B   ED 52                  SBC   HL,DE   
248D   7D                     LD   A,L   
248E   B4                     OR   H   
248F   CA F9 24               JP   Z,expectM_2994S66   
2492   CD 01 0D               CALL   printStr   
2495   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b*= b"   
24AB   CD 01 0D               CALL   printStr   
24AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24BD   21 06 00               LD   hl,6   
24C0   E5                     PUSH   hl   
24C1   E5                     PUSH   hl   
24C2   CD 38 0E               CALL   run   
24C5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
24D1   CD 01 0D               CALL   printStr   
24D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24E1   E1                     POP   hl   
24E2   E5                     PUSH   hl   
24E3   E5                     PUSH   hl   
24E4   CD 38 0E               CALL   run   
24E7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
24F8   76                     HALT      
24F9                EXPECTM_2994S66:      
24F9   E1                     POP   HL   
24FA                          ;*Macro unroll:  test "2a= 6b= a b/= b", 3
24FA   31 00 32               LD   SP,STACK   
24FD   CD 6F 0D               CALL   coldInit   
2500   CD 1E 30               CALL   execStr   
2503   32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 DB   "2a= 6b= a b/= b",0   
2513   E1                     POP   HL   
2514   E5                     PUSH   HL   
2515   11 03 00               LD   DE,3   
2518   B7                     OR   A   
2519   ED 52                  SBC   HL,DE   
251B   7D                     LD   A,L   
251C   B4                     OR   H   
251D   CA 87 25               JP   Z,expectM_2995S67   
2520   CD 01 0D               CALL   printStr   
2523   43 6F 64 65 3A 20 32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 .CSTR   "Code: ","2a= 6b= a b/= b"   
2539   CD 01 0D               CALL   printStr   
253C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
254B   21 03 00               LD   hl,3   
254E   E5                     PUSH   hl   
254F   E5                     PUSH   hl   
2550   CD 38 0E               CALL   run   
2553   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
255F   CD 01 0D               CALL   printStr   
2562   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
256F   E1                     POP   hl   
2570   E5                     PUSH   hl   
2571   E5                     PUSH   hl   
2572   CD 38 0E               CALL   run   
2575   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2586   76                     HALT      
2587                EXPECTM_2995S67:      
2587   E1                     POP   HL   
2588                          ;*Macro unroll:  test "$55a= $AAa&= a",0
2588   31 00 32               LD   SP,STACK   
258B   CD 6F 0D               CALL   coldInit   
258E   CD 1E 30               CALL   execStr   
2591   24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 DB   "$55a= $AAa&= a",0   
25A0   E1                     POP   HL   
25A1   E5                     PUSH   HL   
25A2   11 00 00               LD   DE,0   
25A5   B7                     OR   A   
25A6   ED 52                  SBC   HL,DE   
25A8   7D                     LD   A,L   
25A9   B4                     OR   H   
25AA   CA 13 26               JP   Z,expectM_2996S68   
25AD   CD 01 0D               CALL   printStr   
25B0   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa&= a"   
25C5   CD 01 0D               CALL   printStr   
25C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25D7   21 00 00               LD   hl,0   
25DA   E5                     PUSH   hl   
25DB   E5                     PUSH   hl   
25DC   CD 38 0E               CALL   run   
25DF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
25EB   CD 01 0D               CALL   printStr   
25EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25FB   E1                     POP   hl   
25FC   E5                     PUSH   hl   
25FD   E5                     PUSH   hl   
25FE   CD 38 0E               CALL   run   
2601   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2612   76                     HALT      
2613                EXPECTM_2996S68:      
2613   E1                     POP   HL   
2614                          ;*Macro unroll:  test "$55a= $AAa|= a",$FF
2614   31 00 32               LD   SP,STACK   
2617   CD 6F 0D               CALL   coldInit   
261A   CD 1E 30               CALL   execStr   
261D   24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 DB   "$55a= $AAa|= a",0   
262C   E1                     POP   HL   
262D   E5                     PUSH   HL   
262E   11 FF 00               LD   DE,$FF   
2631   B7                     OR   A   
2632   ED 52                  SBC   HL,DE   
2634   7D                     LD   A,L   
2635   B4                     OR   H   
2636   CA 9F 26               JP   Z,expectM_2997S69   
2639   CD 01 0D               CALL   printStr   
263C   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa|= a"   
2651   CD 01 0D               CALL   printStr   
2654   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2663   21 FF 00               LD   hl,$FF   
2666   E5                     PUSH   hl   
2667   E5                     PUSH   hl   
2668   CD 38 0E               CALL   run   
266B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2677   CD 01 0D               CALL   printStr   
267A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2687   E1                     POP   hl   
2688   E5                     PUSH   hl   
2689   E5                     PUSH   hl   
268A   CD 38 0E               CALL   run   
268D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
269E   76                     HALT      
269F                EXPECTM_2997S69:      
269F   E1                     POP   HL   
26A0                          ;*Macro unroll:  test "$A5a= $AAa /xor= a",$0F
26A0   31 00 32               LD   SP,STACK   
26A3   CD 6F 0D               CALL   coldInit   
26A6   CD 1E 30               CALL   execStr   
26A9   24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 DB   "$A5a= $AAa /xor= a",0   
26BC   E1                     POP   HL   
26BD   E5                     PUSH   HL   
26BE   11 0F 00               LD   DE,$0F   
26C1   B7                     OR   A   
26C2   ED 52                  SBC   HL,DE   
26C4   7D                     LD   A,L   
26C5   B4                     OR   H   
26C6   CA 33 27               JP   Z,expectM_2998S70   
26C9   CD 01 0D               CALL   printStr   
26CC   43 6F 64 65 3A 20 24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 .CSTR   "Code: ","$A5a= $AAa /xor= a"   
26E5   CD 01 0D               CALL   printStr   
26E8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26F7   21 0F 00               LD   hl,$0F   
26FA   E5                     PUSH   hl   
26FB   E5                     PUSH   hl   
26FC   CD 38 0E               CALL   run   
26FF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
270B   CD 01 0D               CALL   printStr   
270E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
271B   E1                     POP   hl   
271C   E5                     PUSH   hl   
271D   E5                     PUSH   hl   
271E   CD 38 0E               CALL   run   
2721   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2732   76                     HALT      
2733                EXPECTM_2998S70:      
2733   E1                     POP   HL   
2734                          ;*Macro unroll:  test "$00AA~",$FF55
2734   31 00 32               LD   SP,STACK   
2737   CD 6F 0D               CALL   coldInit   
273A   CD 1E 30               CALL   execStr   
273D   24 30 30 41 41 7E 00   DB   "$00AA~",0   
2744   E1                     POP   HL   
2745   E5                     PUSH   HL   
2746   11 55 FF               LD   DE,$FF55   
2749   B7                     OR   A   
274A   ED 52                  SBC   HL,DE   
274C   7D                     LD   A,L   
274D   B4                     OR   H   
274E   CA AF 27               JP   Z,expectM_2999S71   
2751   CD 01 0D               CALL   printStr   
2754   43 6F 64 65 3A 20 24 30 30 41 41 7E 00 .CSTR   "Code: ","$00AA~"   
2761   CD 01 0D               CALL   printStr   
2764   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2773   21 55 FF               LD   hl,$FF55   
2776   E5                     PUSH   hl   
2777   E5                     PUSH   hl   
2778   CD 38 0E               CALL   run   
277B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2787   CD 01 0D               CALL   printStr   
278A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2797   E1                     POP   hl   
2798   E5                     PUSH   hl   
2799   E5                     PUSH   hl   
279A   CD 38 0E               CALL   run   
279D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
27AE   76                     HALT      
27AF                EXPECTM_2999S71:      
27AF   E1                     POP   HL   
27B0                          ;*Macro unroll:  test "$AAAAa= a~= a",$5555
27B0   31 00 32               LD   SP,STACK   
27B3   CD 6F 0D               CALL   coldInit   
27B6   CD 1E 30               CALL   execStr   
27B9   24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 DB   "$AAAAa= a~= a",0   
27C7   E1                     POP   HL   
27C8   E5                     PUSH   HL   
27C9   11 55 55               LD   DE,$5555   
27CC   B7                     OR   A   
27CD   ED 52                  SBC   HL,DE   
27CF   7D                     LD   A,L   
27D0   B4                     OR   H   
27D1   CA 39 28               JP   Z,expectM_3000S72   
27D4   CD 01 0D               CALL   printStr   
27D7   43 6F 64 65 3A 20 24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 .CSTR   "Code: ","$AAAAa= a~= a"   
27EB   CD 01 0D               CALL   printStr   
27EE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27FD   21 55 55               LD   hl,$5555   
2800   E5                     PUSH   hl   
2801   E5                     PUSH   hl   
2802   CD 38 0E               CALL   run   
2805   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2811   CD 01 0D               CALL   printStr   
2814   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2821   E1                     POP   hl   
2822   E5                     PUSH   hl   
2823   E5                     PUSH   hl   
2824   CD 38 0E               CALL   run   
2827   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2838   76                     HALT      
2839                EXPECTM_3000S72:      
2839   E1                     POP   HL   
283A                          ;*Macro unroll:  test "3x= 1 x <<= x", 6
283A   31 00 32               LD   SP,STACK   
283D   CD 6F 0D               CALL   coldInit   
2840   CD 1E 30               CALL   execStr   
2843   33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 DB   "3x= 1 x <<= x",0   
2851   E1                     POP   HL   
2852   E5                     PUSH   HL   
2853   11 06 00               LD   DE,6   
2856   B7                     OR   A   
2857   ED 52                  SBC   HL,DE   
2859   7D                     LD   A,L   
285A   B4                     OR   H   
285B   CA C3 28               JP   Z,expectM_3001S73   
285E   CD 01 0D               CALL   printStr   
2861   43 6F 64 65 3A 20 33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 .CSTR   "Code: ","3x= 1 x <<= x"   
2875   CD 01 0D               CALL   printStr   
2878   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2887   21 06 00               LD   hl,6   
288A   E5                     PUSH   hl   
288B   E5                     PUSH   hl   
288C   CD 38 0E               CALL   run   
288F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
289B   CD 01 0D               CALL   printStr   
289E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28AB   E1                     POP   hl   
28AC   E5                     PUSH   hl   
28AD   E5                     PUSH   hl   
28AE   CD 38 0E               CALL   run   
28B1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
28C2   76                     HALT      
28C3                EXPECTM_3001S73:      
28C3   E1                     POP   HL   
28C4                          ;*Macro unroll:  test "10x= 1 x >>= x", 5
28C4   31 00 32               LD   SP,STACK   
28C7   CD 6F 0D               CALL   coldInit   
28CA   CD 1E 30               CALL   execStr   
28CD   31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 DB   "10x= 1 x >>= x",0   
28DC   E1                     POP   HL   
28DD   E5                     PUSH   HL   
28DE   11 05 00               LD   DE,5   
28E1   B7                     OR   A   
28E2   ED 52                  SBC   HL,DE   
28E4   7D                     LD   A,L   
28E5   B4                     OR   H   
28E6   CA 4F 29               JP   Z,expectM_3002S74   
28E9   CD 01 0D               CALL   printStr   
28EC   43 6F 64 65 3A 20 31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 .CSTR   "Code: ","10x= 1 x >>= x"   
2901   CD 01 0D               CALL   printStr   
2904   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2913   21 05 00               LD   hl,5   
2916   E5                     PUSH   hl   
2917   E5                     PUSH   hl   
2918   CD 38 0E               CALL   run   
291B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2927   CD 01 0D               CALL   printStr   
292A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2937   E1                     POP   hl   
2938   E5                     PUSH   hl   
2939   E5                     PUSH   hl   
293A   CD 38 0E               CALL   run   
293D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
294E   76                     HALT      
294F                EXPECTM_3002S74:      
294F   E1                     POP   HL   
2950                          ;*Macro unroll:  test "7 3 / /remain", 1
2950   31 00 32               LD   SP,STACK   
2953   CD 6F 0D               CALL   coldInit   
2956   CD 1E 30               CALL   execStr   
2959   37 20 33 20 2F 20 2F 72 65 6D 61 69 6E 00 DB   "7 3 / /remain",0   
2967   E1                     POP   HL   
2968   E5                     PUSH   HL   
2969   11 01 00               LD   DE,1   
296C   B7                     OR   A   
296D   ED 52                  SBC   HL,DE   
296F   7D                     LD   A,L   
2970   B4                     OR   H   
2971   CA D9 29               JP   Z,expectM_3003S75   
2974   CD 01 0D               CALL   printStr   
2977   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 6D 61 69 6E 00 .CSTR   "Code: ","7 3 / /remain"   
298B   CD 01 0D               CALL   printStr   
298E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
299D   21 01 00               LD   hl,1   
29A0   E5                     PUSH   hl   
29A1   E5                     PUSH   hl   
29A2   CD 38 0E               CALL   run   
29A5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
29B1   CD 01 0D               CALL   printStr   
29B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29C1   E1                     POP   hl   
29C2   E5                     PUSH   hl   
29C3   E5                     PUSH   hl   
29C4   CD 38 0E               CALL   run   
29C7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
29D8   76                     HALT      
29D9                EXPECTM_3003S75:      
29D9   E1                     POP   HL   
29DA                          ;*Macro unroll:  test "7 3 /", 2
29DA   31 00 32               LD   SP,STACK   
29DD   CD 6F 0D               CALL   coldInit   
29E0   CD 1E 30               CALL   execStr   
29E3   37 20 33 20 2F 00      DB   "7 3 /",0   
29E9   E1                     POP   HL   
29EA   E5                     PUSH   HL   
29EB   11 02 00               LD   DE,2   
29EE   B7                     OR   A   
29EF   ED 52                  SBC   HL,DE   
29F1   7D                     LD   A,L   
29F2   B4                     OR   H   
29F3   CA 53 2A               JP   Z,expectM_3004S76   
29F6   CD 01 0D               CALL   printStr   
29F9   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2A05   CD 01 0D               CALL   printStr   
2A08   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A17   21 02 00               LD   hl,2   
2A1A   E5                     PUSH   hl   
2A1B   E5                     PUSH   hl   
2A1C   CD 38 0E               CALL   run   
2A1F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2A2B   CD 01 0D               CALL   printStr   
2A2E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A3B   E1                     POP   hl   
2A3C   E5                     PUSH   hl   
2A3D   E5                     PUSH   hl   
2A3E   CD 38 0E               CALL   run   
2A41   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2A52   76                     HALT      
2A53                EXPECTM_3004S76:      
2A53   E1                     POP   HL   
2A54                          ;*Macro unroll:  test "2 3 ==", FALSE
2A54   31 00 32               LD   SP,STACK   
2A57   CD 6F 0D               CALL   coldInit   
2A5A   CD 1E 30               CALL   execStr   
2A5D   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2A64   E1                     POP   HL   
2A65   E5                     PUSH   HL   
2A66   11 00 00               LD   DE,FALSE   
2A69   B7                     OR   A   
2A6A   ED 52                  SBC   HL,DE   
2A6C   7D                     LD   A,L   
2A6D   B4                     OR   H   
2A6E   CA CF 2A               JP   Z,expectM_3005S77   
2A71   CD 01 0D               CALL   printStr   
2A74   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2A81   CD 01 0D               CALL   printStr   
2A84   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A93   21 00 00               LD   hl,FALSE   
2A96   E5                     PUSH   hl   
2A97   E5                     PUSH   hl   
2A98   CD 38 0E               CALL   run   
2A9B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2AA7   CD 01 0D               CALL   printStr   
2AAA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AB7   E1                     POP   hl   
2AB8   E5                     PUSH   hl   
2AB9   E5                     PUSH   hl   
2ABA   CD 38 0E               CALL   run   
2ABD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2ACE   76                     HALT      
2ACF                EXPECTM_3005S77:      
2ACF   E1                     POP   HL   
2AD0                          ;*Macro unroll:  test "3 3 ==", TRUE
2AD0   31 00 32               LD   SP,STACK   
2AD3   CD 6F 0D               CALL   coldInit   
2AD6   CD 1E 30               CALL   execStr   
2AD9   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
2AE0   E1                     POP   HL   
2AE1   E5                     PUSH   HL   
2AE2   11 FF FF               LD   DE,TRUE   
2AE5   B7                     OR   A   
2AE6   ED 52                  SBC   HL,DE   
2AE8   7D                     LD   A,L   
2AE9   B4                     OR   H   
2AEA   CA 4B 2B               JP   Z,expectM_3006S78   
2AED   CD 01 0D               CALL   printStr   
2AF0   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2AFD   CD 01 0D               CALL   printStr   
2B00   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B0F   21 FF FF               LD   hl,TRUE   
2B12   E5                     PUSH   hl   
2B13   E5                     PUSH   hl   
2B14   CD 38 0E               CALL   run   
2B17   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2B23   CD 01 0D               CALL   printStr   
2B26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B33   E1                     POP   hl   
2B34   E5                     PUSH   hl   
2B35   E5                     PUSH   hl   
2B36   CD 38 0E               CALL   run   
2B39   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2B4A   76                     HALT      
2B4B                EXPECTM_3006S78:      
2B4B   E1                     POP   HL   
2B4C                          ;*Macro unroll:  test "1 2 <", TRUE
2B4C   31 00 32               LD   SP,STACK   
2B4F   CD 6F 0D               CALL   coldInit   
2B52   CD 1E 30               CALL   execStr   
2B55   31 20 32 20 3C 00      DB   "1 2 <",0   
2B5B   E1                     POP   HL   
2B5C   E5                     PUSH   HL   
2B5D   11 FF FF               LD   DE,TRUE   
2B60   B7                     OR   A   
2B61   ED 52                  SBC   HL,DE   
2B63   7D                     LD   A,L   
2B64   B4                     OR   H   
2B65   CA C5 2B               JP   Z,expectM_3007S79   
2B68   CD 01 0D               CALL   printStr   
2B6B   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2B77   CD 01 0D               CALL   printStr   
2B7A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B89   21 FF FF               LD   hl,TRUE   
2B8C   E5                     PUSH   hl   
2B8D   E5                     PUSH   hl   
2B8E   CD 38 0E               CALL   run   
2B91   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2B9D   CD 01 0D               CALL   printStr   
2BA0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BAD   E1                     POP   hl   
2BAE   E5                     PUSH   hl   
2BAF   E5                     PUSH   hl   
2BB0   CD 38 0E               CALL   run   
2BB3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2BC4   76                     HALT      
2BC5                EXPECTM_3007S79:      
2BC5   E1                     POP   HL   
2BC6                          ;*Macro unroll:  test "2 1 <", FALSE
2BC6   31 00 32               LD   SP,STACK   
2BC9   CD 6F 0D               CALL   coldInit   
2BCC   CD 1E 30               CALL   execStr   
2BCF   32 20 31 20 3C 00      DB   "2 1 <",0   
2BD5   E1                     POP   HL   
2BD6   E5                     PUSH   HL   
2BD7   11 00 00               LD   DE,FALSE   
2BDA   B7                     OR   A   
2BDB   ED 52                  SBC   HL,DE   
2BDD   7D                     LD   A,L   
2BDE   B4                     OR   H   
2BDF   CA 3F 2C               JP   Z,expectM_3008S80   
2BE2   CD 01 0D               CALL   printStr   
2BE5   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2BF1   CD 01 0D               CALL   printStr   
2BF4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C03   21 00 00               LD   hl,FALSE   
2C06   E5                     PUSH   hl   
2C07   E5                     PUSH   hl   
2C08   CD 38 0E               CALL   run   
2C0B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2C17   CD 01 0D               CALL   printStr   
2C1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C27   E1                     POP   hl   
2C28   E5                     PUSH   hl   
2C29   E5                     PUSH   hl   
2C2A   CD 38 0E               CALL   run   
2C2D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2C3E   76                     HALT      
2C3F                EXPECTM_3008S80:      
2C3F   E1                     POP   HL   
2C40                          ;*Macro unroll:  test "2 3 <", TRUE
2C40   31 00 32               LD   SP,STACK   
2C43   CD 6F 0D               CALL   coldInit   
2C46   CD 1E 30               CALL   execStr   
2C49   32 20 33 20 3C 00      DB   "2 3 <",0   
2C4F   E1                     POP   HL   
2C50   E5                     PUSH   HL   
2C51   11 FF FF               LD   DE,TRUE   
2C54   B7                     OR   A   
2C55   ED 52                  SBC   HL,DE   
2C57   7D                     LD   A,L   
2C58   B4                     OR   H   
2C59   CA B9 2C               JP   Z,expectM_3009S81   
2C5C   CD 01 0D               CALL   printStr   
2C5F   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2C6B   CD 01 0D               CALL   printStr   
2C6E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C7D   21 FF FF               LD   hl,TRUE   
2C80   E5                     PUSH   hl   
2C81   E5                     PUSH   hl   
2C82   CD 38 0E               CALL   run   
2C85   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2C91   CD 01 0D               CALL   printStr   
2C94   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CA1   E1                     POP   hl   
2CA2   E5                     PUSH   hl   
2CA3   E5                     PUSH   hl   
2CA4   CD 38 0E               CALL   run   
2CA7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2CB8   76                     HALT      
2CB9                EXPECTM_3009S81:      
2CB9   E1                     POP   HL   
2CBA                          ;*Macro unroll:  test "3 3 <", FALSE
2CBA   31 00 32               LD   SP,STACK   
2CBD   CD 6F 0D               CALL   coldInit   
2CC0   CD 1E 30               CALL   execStr   
2CC3   33 20 33 20 3C 00      DB   "3 3 <",0   
2CC9   E1                     POP   HL   
2CCA   E5                     PUSH   HL   
2CCB   11 00 00               LD   DE,FALSE   
2CCE   B7                     OR   A   
2CCF   ED 52                  SBC   HL,DE   
2CD1   7D                     LD   A,L   
2CD2   B4                     OR   H   
2CD3   CA 33 2D               JP   Z,expectM_3010S82   
2CD6   CD 01 0D               CALL   printStr   
2CD9   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2CE5   CD 01 0D               CALL   printStr   
2CE8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CF7   21 00 00               LD   hl,FALSE   
2CFA   E5                     PUSH   hl   
2CFB   E5                     PUSH   hl   
2CFC   CD 38 0E               CALL   run   
2CFF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2D0B   CD 01 0D               CALL   printStr   
2D0E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D1B   E1                     POP   hl   
2D1C   E5                     PUSH   hl   
2D1D   E5                     PUSH   hl   
2D1E   CD 38 0E               CALL   run   
2D21   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2D32   76                     HALT      
2D33                EXPECTM_3010S82:      
2D33   E1                     POP   HL   
2D34                          ;*Macro unroll:  test "1 2 >", FALSE
2D34   31 00 32               LD   SP,STACK   
2D37   CD 6F 0D               CALL   coldInit   
2D3A   CD 1E 30               CALL   execStr   
2D3D   31 20 32 20 3E 00      DB   "1 2 >",0   
2D43   E1                     POP   HL   
2D44   E5                     PUSH   HL   
2D45   11 00 00               LD   DE,FALSE   
2D48   B7                     OR   A   
2D49   ED 52                  SBC   HL,DE   
2D4B   7D                     LD   A,L   
2D4C   B4                     OR   H   
2D4D   CA AD 2D               JP   Z,expectM_3011S83   
2D50   CD 01 0D               CALL   printStr   
2D53   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2D5F   CD 01 0D               CALL   printStr   
2D62   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D71   21 00 00               LD   hl,FALSE   
2D74   E5                     PUSH   hl   
2D75   E5                     PUSH   hl   
2D76   CD 38 0E               CALL   run   
2D79   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2D85   CD 01 0D               CALL   printStr   
2D88   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D95   E1                     POP   hl   
2D96   E5                     PUSH   hl   
2D97   E5                     PUSH   hl   
2D98   CD 38 0E               CALL   run   
2D9B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2DAC   76                     HALT      
2DAD                EXPECTM_3011S83:      
2DAD   E1                     POP   HL   
2DAE                          ;*Macro unroll:  test "2 1 >", TRUE
2DAE   31 00 32               LD   SP,STACK   
2DB1   CD 6F 0D               CALL   coldInit   
2DB4   CD 1E 30               CALL   execStr   
2DB7   32 20 31 20 3E 00      DB   "2 1 >",0   
2DBD   E1                     POP   HL   
2DBE   E5                     PUSH   HL   
2DBF   11 FF FF               LD   DE,TRUE   
2DC2   B7                     OR   A   
2DC3   ED 52                  SBC   HL,DE   
2DC5   7D                     LD   A,L   
2DC6   B4                     OR   H   
2DC7   CA 27 2E               JP   Z,expectM_3012S84   
2DCA   CD 01 0D               CALL   printStr   
2DCD   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2DD9   CD 01 0D               CALL   printStr   
2DDC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DEB   21 FF FF               LD   hl,TRUE   
2DEE   E5                     PUSH   hl   
2DEF   E5                     PUSH   hl   
2DF0   CD 38 0E               CALL   run   
2DF3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2DFF   CD 01 0D               CALL   printStr   
2E02   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E0F   E1                     POP   hl   
2E10   E5                     PUSH   hl   
2E11   E5                     PUSH   hl   
2E12   CD 38 0E               CALL   run   
2E15   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2E26   76                     HALT      
2E27                EXPECTM_3012S84:      
2E27   E1                     POP   HL   
2E28                          ;*Macro unroll:  test "3 3 >", FALSE
2E28   31 00 32               LD   SP,STACK   
2E2B   CD 6F 0D               CALL   coldInit   
2E2E   CD 1E 30               CALL   execStr   
2E31   33 20 33 20 3E 00      DB   "3 3 >",0   
2E37   E1                     POP   HL   
2E38   E5                     PUSH   HL   
2E39   11 00 00               LD   DE,FALSE   
2E3C   B7                     OR   A   
2E3D   ED 52                  SBC   HL,DE   
2E3F   7D                     LD   A,L   
2E40   B4                     OR   H   
2E41   CA A1 2E               JP   Z,expectM_3013S85   
2E44   CD 01 0D               CALL   printStr   
2E47   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2E53   CD 01 0D               CALL   printStr   
2E56   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E65   21 00 00               LD   hl,FALSE   
2E68   E5                     PUSH   hl   
2E69   E5                     PUSH   hl   
2E6A   CD 38 0E               CALL   run   
2E6D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2E79   CD 01 0D               CALL   printStr   
2E7C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E89   E1                     POP   hl   
2E8A   E5                     PUSH   hl   
2E8B   E5                     PUSH   hl   
2E8C   CD 38 0E               CALL   run   
2E8F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2EA0   76                     HALT      
2EA1                EXPECTM_3013S85:      
2EA1   E1                     POP   HL   
2EA2                          ;*Macro unroll:  test "4 3 >", TRUE
2EA2   31 00 32               LD   SP,STACK   
2EA5   CD 6F 0D               CALL   coldInit   
2EA8   CD 1E 30               CALL   execStr   
2EAB   34 20 33 20 3E 00      DB   "4 3 >",0   
2EB1   E1                     POP   HL   
2EB2   E5                     PUSH   HL   
2EB3   11 FF FF               LD   DE,TRUE   
2EB6   B7                     OR   A   
2EB7   ED 52                  SBC   HL,DE   
2EB9   7D                     LD   A,L   
2EBA   B4                     OR   H   
2EBB   CA 1B 2F               JP   Z,expectM_3014S86   
2EBE   CD 01 0D               CALL   printStr   
2EC1   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2ECD   CD 01 0D               CALL   printStr   
2ED0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EDF   21 FF FF               LD   hl,TRUE   
2EE2   E5                     PUSH   hl   
2EE3   E5                     PUSH   hl   
2EE4   CD 38 0E               CALL   run   
2EE7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2EF3   CD 01 0D               CALL   printStr   
2EF6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F03   E1                     POP   hl   
2F04   E5                     PUSH   hl   
2F05   E5                     PUSH   hl   
2F06   CD 38 0E               CALL   run   
2F09   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2F1A   76                     HALT      
2F1B                EXPECTM_3014S86:      
2F1B   E1                     POP   HL   
2F1C                          ;*Macro unroll:  test "2 2 <=", TRUE
2F1C   31 00 32               LD   SP,STACK   
2F1F   CD 6F 0D               CALL   coldInit   
2F22   CD 1E 30               CALL   execStr   
2F25   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2F2C   E1                     POP   HL   
2F2D   E5                     PUSH   HL   
2F2E   11 FF FF               LD   DE,TRUE   
2F31   B7                     OR   A   
2F32   ED 52                  SBC   HL,DE   
2F34   7D                     LD   A,L   
2F35   B4                     OR   H   
2F36   CA 97 2F               JP   Z,expectM_3015S87   
2F39   CD 01 0D               CALL   printStr   
2F3C   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2F49   CD 01 0D               CALL   printStr   
2F4C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F5B   21 FF FF               LD   hl,TRUE   
2F5E   E5                     PUSH   hl   
2F5F   E5                     PUSH   hl   
2F60   CD 38 0E               CALL   run   
2F63   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2F6F   CD 01 0D               CALL   printStr   
2F72   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F7F   E1                     POP   hl   
2F80   E5                     PUSH   hl   
2F81   E5                     PUSH   hl   
2F82   CD 38 0E               CALL   run   
2F85   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2F96   76                     HALT      
2F97                EXPECTM_3015S87:      
2F97   E1                     POP   HL   
2F98                          ;*Macro unroll:  test "2 2 >=", TRUE
2F98   31 00 32               LD   SP,STACK   
2F9B   CD 6F 0D               CALL   coldInit   
2F9E   CD 1E 30               CALL   execStr   
2FA1   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2FA8   E1                     POP   HL   
2FA9   E5                     PUSH   HL   
2FAA   11 FF FF               LD   DE,TRUE   
2FAD   B7                     OR   A   
2FAE   ED 52                  SBC   HL,DE   
2FB0   7D                     LD   A,L   
2FB1   B4                     OR   H   
2FB2   CA 13 30               JP   Z,expectM_3016S88   
2FB5   CD 01 0D               CALL   printStr   
2FB8   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2FC5   CD 01 0D               CALL   printStr   
2FC8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FD7   21 FF FF               LD   hl,TRUE   
2FDA   E5                     PUSH   hl   
2FDB   E5                     PUSH   hl   
2FDC   CD 38 0E               CALL   run   
2FDF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2FEB   CD 01 0D               CALL   printStr   
2FEE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FFB   E1                     POP   hl   
2FFC   E5                     PUSH   hl   
2FFD   E5                     PUSH   hl   
2FFE   CD 38 0E               CALL   run   
3001   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3012   76                     HALT      
3013                EXPECTM_3016S88:      
3013   E1                     POP   HL   
3014                             ; test "3 1 <<", 6
3014                             ; test "10 1 >>", 5
3014                             ; test "1 x = x", 1
3014                             ; test "1{}^", 1
3014                             ; test "{1}^", 1
3014                             ; test "{{1}^}^", 1
3014                             ; test "{{{1}^}^}^", 1
3014                             ; test "1 /f{10}{20} ? +", 21
3014                             ; test "1 /t{10}{20} ? +", 11
3014                             ; test "\\{2}^", 2
3014                             ; test "\\a{2}^", 2
3014                             ; test "5 \\a{%a}^", 5
3014                             ; test "5 \\a:b{%a}^", 5
3014                             ; test "\\a{{2}^}^", 2
3014                             ; test "1 5 \\a{{%a}^}^", 5
3014                             ; test "1 5 \\ab{{%a}^}^", 1
3014                             ; test "1 5 \\a{{%a 2 +}^}^", 7
3014                             ; test "1 5 \\ab{{%a %b +}^}^", 6
3014                             ; test "\\a{2} x= 1 x^", 2
3014                             ; test "\\a{%a} x= 0 1 x^", 1
3014                             ; test "\\ab{%b} x= 1 2 x^", 2
3014                             ; test "\\a:b{%a} x= 1 2 x^", 2
3014                             ; test "\\ab{%b} x= 1 2 x^", 2
3014                             ; test "\\ab{%b %a} x= 10 15 x^ -", 5
3014                             ; test "\\a:b{2} x= 1 x^", 2
3014                             ; test "\\:b{100 %b = %b} x= x^", 100
3014                             ; test "\\a:b{1 %b = %b} x= 2 x^", 1
3014                             ; test "\\a:b{%a %b = %b} x= 2 x^", 2
3014                             ; test "1 10 20 \\ab{/t {%a}{%b} ?}^ +", 11
3014                             ; test "1 10 20 \\ab{/f {%a}{%b} ?}^ +", 21
3014                             ; test "[10 20 30] 1;", 20
3014                             ; test "[10 20 30 40] /aln", 4
3014                             ; test "/byt [1 2 3] 1;", 2
3014                             ; test "/byt [_A _B _C] 1;", 66
3014                             ; test "[{10}{20}{30}] 0;^ ", 10
3014                             ; test "10 20 \\ab{[{%a}{%b}] 0;^}^", 10
3014                             ; test "0 10 20 \\iab{[{%a}{%b}] %i;^}^", 10
3014                             ; test "1 10 20 \\iab{[{%a}{%b}] %i;^}^", 20
3014                             ; test "3i= ( i i-- i/whi )^ + +", 6
3014                             ; test "3i= [ ( i i-- i/whi )^ ] 1;", 2
3014                             ; test "0 j= 4 i= ( i j + j= i i-- i/whi )^ j ", 10
3014                             ; test "0j= 0i= ( i j+= i++ i 5< /whi )^ j ", 10
3014                             ; test "0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t", 12
3014                             ; test "3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^", 6
3014                             ; test "/t \\f{1 %f/whi 2 +}^",3
3014                             ; test "/f \\f{1 %f/whi 2 +}^",1
3014                             ; test "_A 1 - /adr", NUL
3014                             ; test "_Z 1 + /adr", NUL
3014                             ; test "_a 1 - /adr", NUL
3014                             ; test "_z 1 + /adr", NUL
3014                             ; test "_z /adr", VARS + (("z"-"a")+("Z"-"A")+1)*2
3014                             ; test "_a /adr", VARS + ("Z"-"A"+1)*2
3014                             ; test "_Z /adr", VARS + ("Z"-"A")*2
3014                             ; test "_A /adr", VARS
3014                             ; test "\\a{%a} F=1F^", 1
3014                             ; test "1 \\b{\\a{%a}}^F= 3F^",3
3014                             ; test "1 \\b{\\a{%a%b-}}^F= 3F^",2
3014                             ; test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
3014                             ; test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
3014                             ; test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
3014                             ; test "'hello'/sln",5
3014                             ; test "'hello' 'hell' /scp", false
3014                             ; test "'hello' 'hello' /scp", true
3014                             ; test "/sbb `=` 1. 2. 3. `=` /sbe '=1 2 3 =' /scp", TRUE
3014                             ; test "[1 2 3]** + +", 6
3014                             ; test "/byt[_a [_b _c]** _d]2;", $63
3014                             ; test "_B [_A {1} _B {2}] /sel", 2
3014                             ; test "1 2 /max", 2
3014                             ; test "2 1 /max", 2
3014                             ; test "1 2 /min", 1
3014                             ; test "2 1 /min", 1
3014                             ; 
3014   CD 01 0D               CALL   printStr   
3017   44 6F 6E 65 21 00      .CSTR   "Done!"   
301D   76                     HALT      
301E                             ; executes a null teminated string (null executes exit_)
301E                             ; the string should be immedaitely following the call
301E                EXECSTR:      ; create a root stack frame
301E   C1                     POP   bc   ; bc = code*
301F   0B                     DEC   bc   ; dec to prepare for next routine
3020   11 00 00               LD   de,0   
3023   D5                     PUSH   de   ; push fake IP
3024   D5                     PUSH   de   ; push null arg_list*
3025   D5                     PUSH   de   ; push null first_arg*
3026   D5                     PUSH   de   ; push fake BP
3027   DD E9                  JP   (ix)   
3029                DSTACK_SIZE:   EQU   $100   ; Data stack size
3029                RSTACK_SIZE:   EQU   $100   ; Return stack size
3029                NAMES_SIZE:   EQU   $100   ; Arg names size
3029                TIBSIZE:   EQU   $100   ; 256 bytes
3029                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
3029                          ALIGN   $100   
3100                          DS   DSTACK_SIZE   
3200                STACK:       
3200                DSTACK:      
3200                RSTACK:      
3200                          DS   RSTACK_SIZE   
3300                NAMES:       
3300                          DS   NAMES_SIZE   
3400                          ALIGN   $100   
3400                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
3500                          ALIGN   $100   
3500                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
3600                          ALIGN   $100   
3600                VARS:        
3600                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
36D0                RESTARTS:      
36D0                RST08:    DS   2   
36D2                RST10:    DS   2   
36D4                RST18:    DS   2   
36D6                RST20:    DS   2   
36D8                RST28:    DS   2   
36DA                RST30:    DS   2   ; 
36DC                BAUD:     DS   2   ; 
36DE                INTVEC:   DS   2   ; 
36E0                NMIVEC:   DS   2   ; 
36E2                GETCVEC:   DS   2   ; 
36E4                PUTCVEC:   DS   2   ; 
36E6                SYSVARS:      
36E6                             ; initialised sys variables (preserved)
36E6                VTIBPTR:   DS   2   
36E8                VBUFPTR:   DS   2   
36EA                VHEAPPTR:   DS   2   
36EC                VNAMESPTR:   DS   2   
36EE                VRECURPTR:   DS   2   
36F0                VDATAWIDTH:   DS   1   
36F1                VNUMBASE:   DS   1   
36F2                VHEXPREFIX:   DS   1   
36F3                VECHO:    DS   1   
36F4                VSTRMODE:   DS   1   
36F5                          DS   1   
36F6                          DS   1   
36F7                          DS   1   
36F8                          DS   1   
36F9                          DS   1   
36FA                             ; uninitialised sys variables (preserved)
36FA                VPOINTER:   DS   2   ; 
36FC                VREMAIN:   DS   2   ; 
36FE                VSAVEDIP:   DS   2   ; 
3700                VSAVEDDSP:   DS   2   ; 
3702                VSAVEDRSP:   DS   2   ; 
3704                VSAVEDNEXT:   DS   2   ; 
3706                VSAVEDBP:   DS   2   ; 
3708                             ; uninitialised sys variables (unpreserved)
3708                VTEMP1:   DS   2   ; 
370A                VTEMP2:   DS   2   ; 
370C                VTEMP3:   DS   2   ; 
370E                          DS   2   ; 
3710                TBPTR:    DS   2   ; reserved for tests
3712                TITLEBUF:   DS   20   
3726                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 173 IN MAIN.asm
                    > USED AT LINE 3 IN ansi.asm
                    > USED AT LINE 9 IN ansi.asm
                    > USED AT LINE 70 IN ansi.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 2379 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1189 IN MAIN.asm
                    > USED AT LINE 2101 IN MAIN.asm
                    > USED AT LINE 2401 IN MAIN.asm
                    > USED AT LINE 2485 IN MAIN.asm
                    > USED AT LINE 21 IN ansi.asm
                    > USED AT LINE 23 IN ansi.asm
                    > USED AT LINE 35 IN ansi.asm
                    > USED AT LINE 41 IN ansi.asm
                    > USED AT LINE 54 IN ansi.asm
                    > USED AT LINE 62 IN ansi.asm
                    > USED AT LINE 64 IN ansi.asm
                    > USED AT LINE 73 IN ansi.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
                    > USED AT LINE 1636 IN MAIN.asm
                    > USED AT LINE 2269 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 163 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
                    > USED AT LINE 2266 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2382 IN MAIN.asm
                    > USED AT LINE 2450 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 2184 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2387 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2389 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 172 IN MAIN.asm
                    > USED AT LINE 2295 IN MAIN.asm
                    > USED AT LINE 2314 IN MAIN.asm
COLON_:             0204 DEFINED AT LINE 177 IN MAIN.asm
HASH_:              0204 DEFINED AT LINE 178 IN MAIN.asm
COMMA_:             0206 DEFINED AT LINE 181 IN MAIN.asm
DOLLAR_:            0209 DEFINED AT LINE 184 IN MAIN.asm
DQUOTE_:            020C DEFINED AT LINE 187 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 188 IN MAIN.asm
DOT_:               020F DEFINED AT LINE 191 IN MAIN.asm
PERCENT_:           0212 DEFINED AT LINE 194 IN MAIN.asm
QUESTION_:          0215 DEFINED AT LINE 197 IN MAIN.asm
LPAREN_:            0218 DEFINED AT LINE 200 IN MAIN.asm
SLASH_:             021B DEFINED AT LINE 203 IN MAIN.asm
NUM_:               021E DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 209 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 210 IN MAIN.asm
NOT:                022C DEFINED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 222 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 223 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 236 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 237 IN MAIN.asm
LT_:                024C DEFINED AT LINE 245 IN MAIN.asm
LT:                 024C DEFINED AT LINE 246 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SEMICOLON_:         025E DEFINED AT LINE 261 IN MAIN.asm
SEMICOLON:          025E DEFINED AT LINE 262 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 269 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 271 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
RPAREN_:            026B DEFINED AT LINE 276 IN MAIN.asm
RPAREN:             026B DEFINED AT LINE 278 IN MAIN.asm
AMPER_:             0273 DEFINED AT LINE 286 IN MAIN.asm
AMPER:              0273 DEFINED AT LINE 287 IN MAIN.asm
AND:                0273 DEFINED AT LINE 288 IN MAIN.asm
MINUS_:             027D DEFINED AT LINE 306 IN MAIN.asm
MINUS:              027D DEFINED AT LINE 307 IN MAIN.asm
SUB:                0289 DEFINED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 312 IN MAIN.asm
SUB1:               0293 DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
SUB2:               029A DEFINED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
SUB3:               029D DEFINED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
                    > USED AT LINE 1721 IN MAIN.asm
STAR_:              02A5 DEFINED AT LINE 337 IN MAIN.asm
STAR:               02A5 DEFINED AT LINE 338 IN MAIN.asm
MUL:                02AD DEFINED AT LINE 344 IN MAIN.asm
MUL2:               02AF DEFINED AT LINE 347 IN MAIN.asm
MUL3:               02B7 DEFINED AT LINE 352 IN MAIN.asm
                    > USED AT LINE 361 IN MAIN.asm
PLUS_:              02C9 DEFINED AT LINE 367 IN MAIN.asm
PLUS:               02C9 DEFINED AT LINE 368 IN MAIN.asm
ADD:                02C9 DEFINED AT LINE 369 IN MAIN.asm
ADD1:               02D4 DEFINED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
ADD3:               02D8 DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 570 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
ADD4:               02E2 DEFINED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
UPCASE_:            02E5 DEFINED AT LINE 394 IN MAIN.asm
UPCASE:             02E5 DEFINED AT LINE 395 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 404 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 405 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 409 IN MAIN.asm
                    > USED AT LINE 398 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 421 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 422 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 423 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 438 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 439 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 440 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 449 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 460 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 461 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 462 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 493 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 514 IN MAIN.asm
CARET:              039F DEFINED AT LINE 518 IN MAIN.asm
GO:                 039F DEFINED AT LINE 519 IN MAIN.asm
GO1:                03A0 DEFINED AT LINE 521 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
                    > USED AT LINE 1484 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 535 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 536 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 537 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 545 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 552 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 559 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 560 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 561 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 572 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 576 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 579 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 580 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 588 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 589 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 590 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 602 IN MAIN.asm
PRINTARRAY:         0411 DEFINED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
PRINTCHAR:          0414 DEFINED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
PRINTSTRING:        0423 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
PRINTSTRING0:       042A DEFINED AT LINE 634 IN MAIN.asm
                    > USED AT LINE 641 IN MAIN.asm
PRINTSTRING1:       042D DEFINED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
PRINTNUMBER:        0438 DEFINED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
PRINTDEC:           0443 DEFINED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
PRINTDEC1:          0451 DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
PRINTHEX:           0460 DEFINED AT LINE 675 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
PRINTHEX1:          046C DEFINED AT LINE 682 IN MAIN.asm
                    > USED AT LINE 679 IN MAIN.asm
PRINTHEX2:          0477 DEFINED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 686 IN MAIN.asm
PRINTHEX3:          0486 DEFINED AT LINE 698 IN MAIN.asm
                    > USED AT LINE 688 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
PRINTHEX4:          048F DEFINED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 704 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 722 IN MAIN.asm
ABS_:               0610 DEFINED AT LINE 753 IN MAIN.asm
ABSOLUTE:           0610 DEFINED AT LINE 754 IN MAIN.asm
ABSOLUTE1:          061B DEFINED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
ALLOC_:             061E DEFINED AT LINE 770 IN MAIN.asm
MEMALLOCATE:        061E DEFINED AT LINE 771 IN MAIN.asm
ALN_:               0620 DEFINED AT LINE 776 IN MAIN.asm
ARRAYLENGTH:        0620 DEFINED AT LINE 777 IN MAIN.asm
ARRAYLENGTH1:       0626 DEFINED AT LINE 784 IN MAIN.asm
ARGS_:              0629 DEFINED AT LINE 789 IN MAIN.asm
VAR_:               0629 DEFINED AT LINE 792 IN MAIN.asm
BYE_:               062B DEFINED AT LINE 797 IN MAIN.asm
CGO_:               062E DEFINED AT LINE 802 IN MAIN.asm
CURSORGO:           062E DEFINED AT LINE 803 IN MAIN.asm
CLL_:               0636 DEFINED AT LINE 812 IN MAIN.asm
CLEARLINE:          0636 DEFINED AT LINE 813 IN MAIN.asm
CLS_:               063F DEFINED AT LINE 822 IN MAIN.asm
CLEARSCREEN:        063F DEFINED AT LINE 823 IN MAIN.asm
CMV_:               0644 DEFINED AT LINE 829 IN MAIN.asm
CURSORMOVE:         0644 DEFINED AT LINE 830 IN MAIN.asm
CURSORMOVE1:        0650 DEFINED AT LINE 839 IN MAIN.asm
DEC_:               0652 DEFINED AT LINE 842 IN MAIN.asm
DECBASE:            0652 DEFINED AT LINE 843 IN MAIN.asm
DECBASE1:           0654 DEFINED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
DIV_:               0659 DEFINED AT LINE 850 IN MAIN.asm
ECHO_:              065C DEFINED AT LINE 855 IN MAIN.asm
ECHO:               065C DEFINED AT LINE 856 IN MAIN.asm
F_:                 0662 DEFINED AT LINE 862 IN MAIN.asm
IN_:                0665 DEFINED AT LINE 868 IN MAIN.asm
INPUT:              0665 DEFINED AT LINE 869 IN MAIN.asm
OUT_:               0670 DEFINED AT LINE 881 IN MAIN.asm
OUTPUT:             0670 DEFINED AT LINE 882 IN MAIN.asm
NIL_:               0679 DEFINED AT LINE 892 IN MAIN.asm
RECUR_:             067C DEFINED AT LINE 896 IN MAIN.asm
RECUR:              067C DEFINED AT LINE 897 IN MAIN.asm
REMAIN_:            0682 DEFINED AT LINE 903 IN MAIN.asm
REMAIN:             0682 DEFINED AT LINE 904 IN MAIN.asm
RETURN_:            0688 DEFINED AT LINE 911 IN MAIN.asm
RETURN:             0688 DEFINED AT LINE 912 IN MAIN.asm
RETURN1:            068F DEFINED AT LINE 918 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
SBB_:               0692 DEFINED AT LINE 922 IN MAIN.asm
STRINGBEGIN:        0692 DEFINED AT LINE 923 IN MAIN.asm
SBE_:               069A DEFINED AT LINE 930 IN MAIN.asm
STRINGEND:          069A DEFINED AT LINE 931 IN MAIN.asm
STRINGEND1:         06C1 DEFINED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 926 IN MAIN.asm
SCMP_:              06C9 DEFINED AT LINE 955 IN MAIN.asm
SELECT_:            06D1 DEFINED AT LINE 964 IN MAIN.asm
SLN_:               06D4 DEFINED AT LINE 968 IN MAIN.asm
T_:                 06DB DEFINED AT LINE 975 IN MAIN.asm
ADR_:               0700 DEFINED AT LINE 984 IN MAIN.asm
ADDROF:             0700 DEFINED AT LINE 985 IN MAIN.asm
ADDROF2:            0706 DEFINED AT LINE 990 IN MAIN.asm
WHILE_:             0708 DEFINED AT LINE 996 IN MAIN.asm
WHILE:              0708 DEFINED AT LINE 997 IN MAIN.asm
WHILE1:             070F DEFINED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
BYTE_:              0722 DEFINED AT LINE 1015 IN MAIN.asm
BYTEMODE:           0722 DEFINED AT LINE 1016 IN MAIN.asm
BYTEMODE1:          0724 DEFINED AT LINE 1018 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
CMT_:               0729 DEFINED AT LINE 1023 IN MAIN.asm
COMMENT:            0729 DEFINED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
CUR_:               0732 DEFINED AT LINE 1034 IN MAIN.asm
CURSORSHOW:         0732 DEFINED AT LINE 1035 IN MAIN.asm
CURSORSHOW1:        073C DEFINED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1041 IN MAIN.asm
HEX_:               0741 DEFINED AT LINE 1047 IN MAIN.asm
FREE_:              0746 DEFINED AT LINE 1053 IN MAIN.asm
MEMFREE:            0746 DEFINED AT LINE 1054 IN MAIN.asm
MEMFREE1:           0747 DEFINED AT LINE 1056 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
FRA_:               074C DEFINED AT LINE 1062 IN MAIN.asm
MEMFREEARRAY:       074C DEFINED AT LINE 1063 IN MAIN.asm
MAX_:               0751 DEFINED AT LINE 1071 IN MAIN.asm
MAXIMUM:            0751 DEFINED AT LINE 1072 IN MAIN.asm
MAXIMUM1:           075B DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 1078 IN MAIN.asm
MIN_:               075D DEFINED AT LINE 1086 IN MAIN.asm
MINIMUM:            075D DEFINED AT LINE 1087 IN MAIN.asm
MINIMUM1:           0767 DEFINED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 1093 IN MAIN.asm
SYS_:               0769 DEFINED AT LINE 1100 IN MAIN.asm
VOID_:              076B DEFINED AT LINE 1105 IN MAIN.asm
VOID:               076B DEFINED AT LINE 1106 IN MAIN.asm
WORD_:              0773 DEFINED AT LINE 1114 IN MAIN.asm
WORDMODE:           0773 DEFINED AT LINE 1115 IN MAIN.asm
XOR_:               0778 DEFINED AT LINE 1120 IN MAIN.asm
XOR1:               0779 DEFINED AT LINE 1122 IN MAIN.asm
ERROR1:             0783 DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
DIV1:               0789 DEFINED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
DIV2:               0793 DEFINED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
COMMA:              07A4 DEFINED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
READCHAR:           07B1 DEFINED AT LINE 1170 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
READSTRING:         07BA DEFINED AT LINE 1177 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 44
READSTRING1:        07BF DEFINED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1190 IN MAIN.asm
READSTRING2:        07D3 DEFINED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
READNUMBER:         07DC DEFINED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
PERFORMM_1656S1200: 07E5 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER1:        0803 DEFINED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1207 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
PERFORMM_1673S1217: 080A DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER2:        080D DEFINED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
PERFORMM_1677S1221: 0814 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER3:        0815 DEFINED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
SELECT:             081B DEFINED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
SELECT1:            0826 DEFINED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
SELECT1A:           0837 DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 1244 IN MAIN.asm
SELECT1B:           0838 DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
SELECT2:            083B DEFINED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
TILDE:              0842 DEFINED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 577 IN MAIN.asm
INVERT:             0842 DEFINED AT LINE 1269 IN MAIN.asm
DOLLAR:             084C DEFINED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
HEXNUM:             084C DEFINED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 44
HEXNUM1:            084F DEFINED AT LINE 1283 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
HEXNUM2:            0857 DEFINED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1287 IN MAIN.asm
QUESTION:           0869 DEFINED AT LINE 1304 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
IF:                 0869 DEFINED AT LINE 1305 IN MAIN.asm
QUOTE:              0876 DEFINED AT LINE 1318 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
STRING:             0876 DEFINED AT LINE 1319 IN MAIN.asm
STRING1:            087F DEFINED AT LINE 1326 IN MAIN.asm
                    > USED AT LINE 1334 IN MAIN.asm
STRING2:            0882 DEFINED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1325 IN MAIN.asm
STRING3:            0888 DEFINED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 1333 IN MAIN.asm
PERCENT:            0890 DEFINED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
ARG:                0890 DEFINED AT LINE 1346 IN MAIN.asm
ARG0:               08AC DEFINED AT LINE 1365 IN MAIN.asm
                    > USED AT LINE 1371 IN MAIN.asm
ARG0A:              08B5 DEFINED AT LINE 1373 IN MAIN.asm
                    > USED AT LINE 1352 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
ARG1:               08BA DEFINED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 1369 IN MAIN.asm
ARG1A:              08C2 DEFINED AT LINE 1383 IN MAIN.asm
                    > USED AT LINE 1375 IN MAIN.asm
NUM:                08C5 DEFINED AT LINE 1388 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
                    > USED AT LINE 44
NUM0:               08CE DEFINED AT LINE 1394 IN MAIN.asm
                    > USED AT LINE 1392 IN MAIN.asm
NUM1:               08CF DEFINED AT LINE 1396 IN MAIN.asm
                    > USED AT LINE 1413 IN MAIN.asm
NUM2:               08E7 DEFINED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1293 IN MAIN.asm
                    > USED AT LINE 1399 IN MAIN.asm
                    > USED AT LINE 1401 IN MAIN.asm
NUM3:               08F2 DEFINED AT LINE 1422 IN MAIN.asm
                    > USED AT LINE 1417 IN MAIN.asm
RBRACE:             08F5 DEFINED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
BLOCKEND:           08F5 DEFINED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 1012 IN MAIN.asm
BLOCKEND1:          0927 DEFINED AT LINE 1450 IN MAIN.asm
                    > USED AT LINE 1443 IN MAIN.asm
BLOCKEND2:          0933 DEFINED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
BLOCKEND3:          0945 DEFINED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
BLOCKEND4:          0959 DEFINED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
GOBLOCK:            0962 DEFINED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 533 IN MAIN.asm
GOBLOCK2:           0987 DEFINED AT LINE 1503 IN MAIN.asm
                    > USED AT LINE 1584 IN MAIN.asm
GOBLOCK3:           0991 DEFINED AT LINE 1509 IN MAIN.asm
GOFUNC:             0995 DEFINED AT LINE 1513 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
GOFUNC1:            09AE DEFINED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1542 IN MAIN.asm
GOFUNC2:            09B4 DEFINED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 1531 IN MAIN.asm
GOFUNC3:            09BF DEFINED AT LINE 1545 IN MAIN.asm
                    > USED AT LINE 1521 IN MAIN.asm
GOFUNC4:            09D7 DEFINED AT LINE 1562 IN MAIN.asm
                    > USED AT LINE 1559 IN MAIN.asm
GOFUNC5:            09DA DEFINED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 1571 IN MAIN.asm
GOFUNC6:            09DD DEFINED AT LINE 1569 IN MAIN.asm
                    > USED AT LINE 1564 IN MAIN.asm
GOFUNC7:            09E0 DEFINED AT LINE 1572 IN MAIN.asm
GOFUNC8:            09E4 DEFINED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
ASSIGN:             09EF DEFINED AT LINE 1588 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
ASSIGN0:            09F1 DEFINED AT LINE 1591 IN MAIN.asm
                    > USED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 391 IN MAIN.asm
ASSIGN1:            09F5 DEFINED AT LINE 1594 IN MAIN.asm
ASSIGN2:            09FE DEFINED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 1598 IN MAIN.asm
EQUALS:             0A00 DEFINED AT LINE 1606 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
NOTEQUALS:          0A07 DEFINED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
LESSTHANEQ:         0A0E DEFINED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           0A13 DEFINED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          0A18 DEFINED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
TRUE1:              0A1B DEFINED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
NULL1:              0A21 DEFINED AT LINE 1639 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
FALSE1:             0A21 DEFINED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 863 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1633 IN MAIN.asm
SPREAD:             0A27 DEFINED AT LINE 1645 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
SPREAD1:            0A34 DEFINED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 1670 IN MAIN.asm
SPREAD2:            0A3F DEFINED AT LINE 1664 IN MAIN.asm
                    > USED AT LINE 1661 IN MAIN.asm
SPREAD3:            0A41 DEFINED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
SHIFTLEFT:          0A4B DEFINED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT2:         0A55 DEFINED AT LINE 1686 IN MAIN.asm
                    > USED AT LINE 1683 IN MAIN.asm
SHIFTLEFT3:         0A5D DEFINED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 1694 IN MAIN.asm
SHIFTLEFT4:         0A5E DEFINED AT LINE 1693 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
SHIFTRIGHT:         0A67 DEFINED AT LINE 1701 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
SHIFTRIGHT2:        0A71 DEFINED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1707 IN MAIN.asm
SHIFTRIGHT3:        0A79 DEFINED AT LINE 1715 IN MAIN.asm
                    > USED AT LINE 1719 IN MAIN.asm
SHIFTRIGHT4:        0A7D DEFINED AT LINE 1718 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
DIVIDE:             0A86 DEFINED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
DIVIDE1:            0A8B DEFINED AT LINE 1729 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
DIVIDE2:            0A98 DEFINED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 1734 IN MAIN.asm
DIVIDE3:            0A99 DEFINED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
DOTNEXT:            0A9F DEFINED AT LINE 1745 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 696 IN MAIN.asm
DOTNEXT1:           0AA7 DEFINED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
PARSEARGS:          0AB9 DEFINED AT LINE 1761 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
PARSEARGS1:         0AC3 DEFINED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 1789 IN MAIN.asm
PARSEARGS1A:        0ACB DEFINED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 1771 IN MAIN.asm
PARSEARGS2:         0AD3 DEFINED AT LINE 1779 IN MAIN.asm
PARSEARGS3:         0ADB DEFINED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 1785 IN MAIN.asm
PARSEARGS4:         0ADE DEFINED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
                    > USED AT LINE 1778 IN MAIN.asm
PARSEARGS5:         0AE4 DEFINED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 1794 IN MAIN.asm
PARSEBLOCK:         0AEF DEFINED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 554 IN MAIN.asm
PARSEBLOCK1:        0AF3 DEFINED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
PARSEBLOCK2:        0B0C DEFINED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
PARSEBLOCK3:        0B12 DEFINED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
PARSEBLOCK4:        0B2C DEFINED AT LINE 1846 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
PARSEBLOCK5:        0B2F DEFINED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
PARSEBLOCK6:        0B5A DEFINED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 1857 IN MAIN.asm
CREATEFUNC:         0B5E DEFINED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
CREATEFUNC0:        0B7D DEFINED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 1888 IN MAIN.asm
CREATEFUNC1:        0B95 DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
CREATEFUNC2:        0BA8 DEFINED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 1920 IN MAIN.asm
CREATEFUNC2A:       0BC7 DEFINED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
CREATEFUNC3:        0BD6 DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
CREATEFUNC4:        0BE1 DEFINED AT LINE 1973 IN MAIN.asm
CREATEFUNC5:        0BE2 DEFINED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
VARIABLE:           0C00 DEFINED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
CONSTANT:           0C0F DEFINED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
CHARTABLE:          0C12 DEFINED AT LINE 2020 IN MAIN.asm
CHARTABLE1:         0C1C DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
CHARTABLE2:         0C26 DEFINED AT LINE 2035 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
CHARTABLE3:         0C28 DEFINED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
IDENTHASH:          0C2D DEFINED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
IDENTHASH1:         0C2F DEFINED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
IDENTHASH2:         0C37 DEFINED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
COMMANDTABLE:       0C3F DEFINED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
COMMANDTABLE2:      0C47 DEFINED AT LINE 2073 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
GETVARADDR:         0C4F DEFINED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 988 IN MAIN.asm
GETVARADDR1:        0C61 DEFINED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 2090 IN MAIN.asm
PUTSTR0:            0C66 DEFINED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
PUTSTR:             0C6A DEFINED AT LINE 2103 IN MAIN.asm
                    > USED AT LINE 1756 IN MAIN.asm
                    > USED AT LINE 2234 IN MAIN.asm
                    > USED AT LINE 2250 IN MAIN.asm
                    > USED AT LINE 2346 IN MAIN.asm
FORMATDEC0:         0C6F DEFINED AT LINE 2112 IN MAIN.asm
                    > USED AT LINE 2242 IN MAIN.asm
FORMATDEC:          0C72 DEFINED AT LINE 2119 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
FORMATDEC2:         0C82 DEFINED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2121 IN MAIN.asm
FORMATDEC4:         0CA2 DEFINED AT LINE 2147 IN MAIN.asm
                    > USED AT LINE 2136 IN MAIN.asm
                    > USED AT LINE 2138 IN MAIN.asm
                    > USED AT LINE 2140 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
                    > USED AT LINE 2145 IN MAIN.asm
FORMATDEC5:         0CA4 DEFINED AT LINE 2149 IN MAIN.asm
                    > USED AT LINE 2152 IN MAIN.asm
FORMATDEC6:         0CB4 DEFINED AT LINE 2161 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
FORMATDEC7:         0CB5 DEFINED AT LINE 2163 IN MAIN.asm
                    > USED AT LINE 2160 IN MAIN.asm
NESTING:            0CBB DEFINED AT LINE 2181 IN MAIN.asm
                    > USED AT LINE 2368 IN MAIN.asm
                    > USED AT LINE 2402 IN MAIN.asm
NESTING0:           0CC9 DEFINED AT LINE 2189 IN MAIN.asm
                    > USED AT LINE 2183 IN MAIN.asm
                    > USED AT LINE 2185 IN MAIN.asm
                    > USED AT LINE 2187 IN MAIN.asm
NESTING1A:          0CD0 DEFINED AT LINE 2194 IN MAIN.asm
                    > USED AT LINE 2191 IN MAIN.asm
NESTING1:           0CD3 DEFINED AT LINE 2197 IN MAIN.asm
                    > USED AT LINE 2188 IN MAIN.asm
NESTING2:           0CE2 DEFINED AT LINE 2206 IN MAIN.asm
                    > USED AT LINE 2201 IN MAIN.asm
                    > USED AT LINE 2203 IN MAIN.asm
NESTING3:           0CE4 DEFINED AT LINE 2209 IN MAIN.asm
                    > USED AT LINE 2205 IN MAIN.asm
NESTING4:           0CEF DEFINED AT LINE 2216 IN MAIN.asm
                    > USED AT LINE 2211 IN MAIN.asm
                    > USED AT LINE 2213 IN MAIN.asm
PROMPT:             0CF1 DEFINED AT LINE 2220 IN MAIN.asm
                    > USED AT LINE 2350 IN MAIN.asm
CRLF:               0CFA DEFINED AT LINE 2225 IN MAIN.asm
                    > USED AT LINE 2415 IN MAIN.asm
PRINTSTR:           0D01 DEFINED AT LINE 2232 IN MAIN.asm
                    > USED AT LINE 2221 IN MAIN.asm
                    > USED AT LINE 2226 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
                    > USED AT LINE 2480 IN MAIN.asm
                    > USED AT LINE 2 IN ansi.asm
                    > USED AT LINE 8 IN ansi.asm
                    > USED AT LINE 69 IN ansi.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 19
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 163
PRINTNUM:           0D08 DEFINED AT LINE 2240 IN MAIN.asm
                    > USED AT LINE 33 IN ansi.asm
                    > USED AT LINE 39 IN ansi.asm
                    > USED AT LINE 52 IN ansi.asm
STRINGCOMPARE:      0D21 DEFINED AT LINE 2255 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
STRINGCOMPARE1:     0D21 DEFINED AT LINE 2256 IN MAIN.asm
                    > USED AT LINE 2264 IN MAIN.asm
STRINGCOMPARE2:     0D2C DEFINED AT LINE 2265 IN MAIN.asm
                    > USED AT LINE 2259 IN MAIN.asm
STRINGCOMPARE3:     0D31 DEFINED AT LINE 2268 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
STRINGCOMPARE4:     0D34 DEFINED AT LINE 2270 IN MAIN.asm
                    > USED AT LINE 2267 IN MAIN.asm
STRINGLENGTH:       0D36 DEFINED AT LINE 2277 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
STRINGLENGTH1:      0D3B DEFINED AT LINE 2280 IN MAIN.asm
                    > USED AT LINE 2286 IN MAIN.asm
STRINGLENGTH2:      0D3D DEFINED AT LINE 2283 IN MAIN.asm
                    > USED AT LINE 2279 IN MAIN.asm
STRINGLENGTH3:      0D41 DEFINED AT LINE 2287 IN MAIN.asm
INIT:               0D42 DEFINED AT LINE 2294 IN MAIN.asm
                    > USED AT LINE 2343 IN MAIN.asm
INIT1:              0D4A DEFINED AT LINE 2298 IN MAIN.asm
                    > USED AT LINE 2304 IN MAIN.asm
WARMINIT:           0D52 DEFINED AT LINE 2306 IN MAIN.asm
COLDBOOT0:          0D65 DEFINED AT LINE 2313 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 2301 IN MAIN.asm
                    > USED AT LINE 2339 IN MAIN.asm
COLDINIT:           0D6F DEFINED AT LINE 2319 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0D80 DEFINED AT LINE 2328 IN MAIN.asm
                    > USED AT LINE 2331 IN MAIN.asm
COLDSTART:          0D8D DEFINED AT LINE 2337 IN MAIN.asm
START:              0D96 DEFINED AT LINE 2341 IN MAIN.asm
START1:             0D9C DEFINED AT LINE 2344 IN MAIN.asm
                    > USED AT LINE 2311 IN MAIN.asm
                    > USED AT LINE 2340 IN MAIN.asm
INTERPRET:          0DA2 DEFINED AT LINE 2348 IN MAIN.asm
                    > USED AT LINE 2452 IN MAIN.asm
                    > USED AT LINE 2468 IN MAIN.asm
INTERPRET2:         0DAE DEFINED AT LINE 2356 IN MAIN.asm
                    > USED AT LINE 2393 IN MAIN.asm
                    > USED AT LINE 2473 IN MAIN.asm
                    > USED AT LINE 2477 IN MAIN.asm
                    > USED AT LINE 2495 IN MAIN.asm
INTERPRET3:         0DB6 DEFINED AT LINE 2364 IN MAIN.asm
                    > USED AT LINE 2374 IN MAIN.asm
INTERPRET4:         0DBC DEFINED AT LINE 2370 IN MAIN.asm
                    > USED AT LINE 2362 IN MAIN.asm
INTERPRET5:         0DC1 DEFINED AT LINE 2377 IN MAIN.asm
                    > USED AT LINE 2403 IN MAIN.asm
                    > USED AT LINE 2418 IN MAIN.asm
INTERPRET5A:        0DDA DEFINED AT LINE 2392 IN MAIN.asm
INTERPRET6:         0DDC DEFINED AT LINE 2395 IN MAIN.asm
                    > USED AT LINE 2381 IN MAIN.asm
INTERPRET7:         0DEA DEFINED AT LINE 2405 IN MAIN.asm
                    > USED AT LINE 2385 IN MAIN.asm
INTERPRET8:         0DFD DEFINED AT LINE 2420 IN MAIN.asm
                    > USED AT LINE 2383 IN MAIN.asm
NEXT:               0E18 DEFINED AT LINE 2433 IN MAIN.asm
                    > USED AT LINE 2333 IN MAIN.asm
                    > USED AT LINE 2437 IN MAIN.asm
NEXT0:              0E2C DEFINED AT LINE 2447 IN MAIN.asm
                    > USED AT LINE 2445 IN MAIN.asm
NEXT1:              0E2D DEFINED AT LINE 2449 IN MAIN.asm
                    > USED AT LINE 2438 IN MAIN.asm
EXIT:               0E34 DEFINED AT LINE 2454 IN MAIN.asm
                    > USED AT LINE 2451 IN MAIN.asm
RUN:                0E38 DEFINED AT LINE 2459 IN MAIN.asm
                    > USED AT LINE 2466 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              0E3C DEFINED AT LINE 2464 IN MAIN.asm
                    > USED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 1138 IN MAIN.asm
BACKSPACE_:         0E4E DEFINED AT LINE 2470 IN MAIN.asm
                    > USED AT LINE 2388 IN MAIN.asm
REEDIT_:            0E5E DEFINED AT LINE 2479 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
REEDIT0:            0E6A DEFINED AT LINE 2484 IN MAIN.asm
                    > USED AT LINE 2490 IN MAIN.asm
REEDIT1:            0E6E DEFINED AT LINE 2487 IN MAIN.asm
                    > USED AT LINE 2483 IN MAIN.asm
ANSIPRINTSEQ:       0E7E DEFINED AT LINE 1 IN ansi.asm
                    > USED AT LINE 19 IN ansi.asm
                    > USED AT LINE 28 IN ansi.asm
                    > USED AT LINE 47 IN ansi.asm
                    > USED AT LINE 60 IN ansi.asm
ANSICLEARSCREEN:    0E85 DEFINED AT LINE 7 IN ansi.asm
                    > USED AT LINE 824 IN MAIN.asm
ANSICLEARLINE:      0E8E DEFINED AT LINE 16 IN ansi.asm
                    > USED AT LINE 817 IN MAIN.asm
ANSIGOTO:           0E9D DEFINED AT LINE 26 IN ansi.asm
                    > USED AT LINE 807 IN MAIN.asm
ANSIMOVE:           0EBA DEFINED AT LINE 45 IN ansi.asm
                    > USED AT LINE 838 IN MAIN.asm
ANSITEXTSTYLE:      0ECA DEFINED AT LINE 57 IN ansi.asm
ANSICURSORSHOW:     0ED9 DEFINED AT LINE 67 IN ansi.asm
                    > USED AT LINE 1044 IN MAIN.asm
TESTSSTART:         0F00 DEFINED AT LINE 14
                    > USED AT LINE 8
EXPECTM_2947S18:    0F89 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2951S23:    1007 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2952S24:    107B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2953S25:    10ED DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2954S26:    115F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2955S27:    11D1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2956S28:    1243 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2957S29:    12B7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2958S30:    132D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2959S31:    13A1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2960S32:    141F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2961S33:    1493 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2962S34:    1507 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2963S35:    157D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2964S36:    15F3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2965S37:    166F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2966S38:    16EB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2967S39:    1765 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2968S40:    17E3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2969S41:    1865 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2970S42:    18E5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2971S43:    195F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2972S44:    19E1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2973S45:    1A5F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2974S46:    1AD9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2975S47:    1B53 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2976S48:    1BD5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2977S49:    1C4F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2978S50:    1CC9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2979S51:    1D49 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2980S52:    1DD9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2981S53:    1E4F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2982S54:    1EC5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2983S55:    1F3D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2984S56:    1FB5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2985S57:    202F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2986S58:    20B1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2987S59:    212B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2988S60:    21B3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2989S61:    223B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2990S62:    22C5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2991S63:    234F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2992S64:    23DD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2993S65:    246B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2994S66:    24F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2995S67:    2587 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2996S68:    2613 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2997S69:    269F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2998S70:    2733 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2999S71:    27AF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3000S72:    2839 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3001S73:    28C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3002S74:    294F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3003S75:    29D9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3004S76:    2A53 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3005S77:    2ACF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3006S78:    2B4B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3007S79:    2BC5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3008S80:    2C3F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3009S81:    2CB9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3010S82:    2D33 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3011S83:    2DAD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3012S84:    2E27 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3013S85:    2EA1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3014S86:    2F1B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3015S87:    2F97 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3016S88:    3013 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            301E DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
DSTACK_SIZE:        0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 8 IN ram.asm
RSTACK_SIZE:        0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
NAMES_SIZE:         0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 15 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 18 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 21 IN ram.asm
STACK:              3200 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1488 IN MAIN.asm
                    > USED AT LINE 2334 IN MAIN.asm
                    > USED AT LINE 2338 IN MAIN.asm
                    > USED AT LINE 2342 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
DSTACK:             3200 DEFINED AT LINE 10 IN ram.asm
RSTACK:             3200 DEFINED AT LINE 12 IN ram.asm
NAMES:              3300 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
TIB:                3400 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 2353 IN MAIN.asm
                    > USED AT LINE 2361 IN MAIN.asm
                    > USED AT LINE 2397 IN MAIN.asm
                    > USED AT LINE 2407 IN MAIN.asm
                    > USED AT LINE 2422 IN MAIN.asm
                    > USED AT LINE 2425 IN MAIN.asm
                    > USED AT LINE 2482 IN MAIN.asm
                    > USED AT LINE 2491 IN MAIN.asm
BUFFER:             3500 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 2248 IN MAIN.asm
VARS:               3600 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 2325 IN MAIN.asm
RESTARTS:           36D0 DEFINED AT LINE 26 IN ram.asm
RST08:              36D0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              36D2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              36D4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              36D6 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              36D8 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              36DA DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               36DC DEFINED AT LINE 34 IN ram.asm
INTVEC:             36DE DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             36E0 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            36E2 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            36E4 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            36E6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2321 IN MAIN.asm
VTIBPTR:            36E6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 2354 IN MAIN.asm
                    > USED AT LINE 2424 IN MAIN.asm
VBUFPTR:            36E8 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
                    > USED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 2241 IN MAIN.asm
                    > USED AT LINE 2247 IN MAIN.asm
                    > USED AT LINE 2249 IN MAIN.asm
VHEAPPTR:           36EA DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 1057 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1320 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
                    > USED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
VNAMESPTR:          36EC DEFINED AT LINE 47 IN ram.asm
VRECURPTR:          36EE DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
VDATAWIDTH:         36F0 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 659 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
VNUMBASE:           36F1 DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
VHEXPREFIX:         36F2 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 677 IN MAIN.asm
VECHO:              36F3 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
VSTRMODE:           36F4 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
VPOINTER:           36FA DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 413 IN MAIN.asm
                    > USED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 1379 IN MAIN.asm
                    > USED AT LINE 1593 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
VREMAIN:            36FC DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
VSAVEDIP:           36FE DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 2307 IN MAIN.asm
                    > USED AT LINE 2427 IN MAIN.asm
VSAVEDDSP:          3700 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 2308 IN MAIN.asm
                    > USED AT LINE 2428 IN MAIN.asm
VSAVEDRSP:          3702 DEFINED AT LINE 67 IN ram.asm
                    > USED AT LINE 2309 IN MAIN.asm
                    > USED AT LINE 2429 IN MAIN.asm
VSAVEDNEXT:         3704 DEFINED AT LINE 68 IN ram.asm
                    > USED AT LINE 2310 IN MAIN.asm
                    > USED AT LINE 2430 IN MAIN.asm
VSAVEDBP:           3706 DEFINED AT LINE 69 IN ram.asm
VTEMP1:             3708 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 465 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 1431 IN MAIN.asm
                    > USED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1550 IN MAIN.asm
                    > USED AT LINE 1556 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1687 IN MAIN.asm
                    > USED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 1711 IN MAIN.asm
                    > USED AT LINE 1720 IN MAIN.asm
                    > USED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
VTEMP2:             370A DEFINED AT LINE 74 IN ram.asm
                    > USED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
VTEMP3:             370C DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
TBPTR:              3710 DEFINED AT LINE 77 IN ram.asm
TITLEBUF:           3712 DEFINED AT LINE 79 IN ram.asm
                    > USED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 2315 IN MAIN.asm
                    > USED AT LINE 2345 IN MAIN.asm
HEAP:               3726 DEFINED AT LINE 81 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1853 IN MAIN.asm
