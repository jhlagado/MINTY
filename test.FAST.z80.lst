0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hex./dec"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hex./dec `\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 1B               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 1B               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 1B               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 1B               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 1B               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 1B               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 1B               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 17               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 1B               LD   (RST08),HL   
0094   22 D2 1B               LD   (RST10),HL   
0097   22 D4 1B               LD   (RST18),HL   
009A   22 D6 1B               LD   (RST20),HL   
009D   22 D8 1B               LD   (RST28),HL   
00A0   22 DA 1B               LD   (RST30),HL   
00A3   22 DE 1B               LD   (INTVEC),HL   
00A6   22 E0 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0F               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  MINTY programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of MINTY code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put MINTY code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   0C                     DB   lsb(dquote_)   ; "     2
0182   04                     DB   lsb(hash_)   ; #     1
0183   09                     DB   lsb(dollar_)   ; $     1
0184   12                     DB   lsb(percent_)   ; %     1
0185   73                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   18                     DB   lsb(lparen_)   ; (     1
0188   6B                     DB   lsb(rparen_)   ; )     1
0189   A5                     DB   lsb(star_)   ; *     1
018A   C9                     DB   lsb(plus_)   ; +     1
018B   06                     DB   lsb(comma_)   ; ,     2
018C   7D                     DB   lsb(minus_)   ; -     1
018D   0F                     DB   lsb(dot_)   ; .     2
018E   1B                     DB   lsb(slash_)   ; /	    1
018F   1E                     DB   lsb(num_)   ; 0     1
0190   1E                     DB   lsb(num_)   ; 1
0191   1E                     DB   lsb(num_)   ; 2
0192   1E                     DB   lsb(num_)   ; 3
0193   1E                     DB   lsb(num_)   ; 4
0194   1E                     DB   lsb(num_)   ; 5
0195   1E                     DB   lsb(num_)   ; 6
0196   1E                     DB   lsb(num_)   ; 7
0197   1E                     DB   lsb(num_)   ; 8
0198   1E                     DB   lsb(num_)   ; 9
0199   04                     DB   lsb(colon_)   ; :     2
019A   5E                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   15                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   E5                     DB   lsb(upcase_)   ; A     1
01A1   E5                     DB   lsb(upcase_)   ; B
01A2   E5                     DB   lsb(upcase_)   ; C
01A3   E5                     DB   lsb(upcase_)   ; D
01A4   E5                     DB   lsb(upcase_)   ; E
01A5   E5                     DB   lsb(upcase_)   ; F
01A6   E5                     DB   lsb(upcase_)   ; G
01A7   E5                     DB   lsb(upcase_)   ; h
01A8   E5                     DB   lsb(upcase_)   ; I
01A9   E5                     DB   lsb(upcase_)   ; J
01AA   E5                     DB   lsb(upcase_)   ; K
01AB   E5                     DB   lsb(upcase_)   ; L
01AC   E5                     DB   lsb(upcase_)   ; M
01AD   E5                     DB   lsb(upcase_)   ; N
01AE   E5                     DB   lsb(upcase_)   ; O
01AF   E5                     DB   lsb(upcase_)   ; p
01B0   E5                     DB   lsb(upcase_)   ; Q
01B1   E5                     DB   lsb(upcase_)   ; R
01B2   E5                     DB   lsb(upcase_)   ; S
01B3   E5                     DB   lsb(upcase_)   ; T
01B4   E5                     DB   lsb(upcase_)   ; U
01B5   E5                     DB   lsb(upcase_)   ; V
01B6   E5                     DB   lsb(upcase_)   ; W
01B7   E5                     DB   lsb(upcase_)   ; X
01B8   E5                     DB   lsb(upcase_)   ; Y
01B9   E5                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 19                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 1A                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   26 1C                  DW   HEAP   ; vHeapPtr start of the free mem
01E4   00 18                  DW   NAMES   ; vNamesPtr
01E6   00 00                  DW   NUL   ; vRecurPtr
01E8   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E9   0A                     DB   10   ; vNumBase = 10
01EA   24                     DB   "$"   ; vHexPrefix
01EB   FF                     DB   TRUE   ; vEcho
01EC   00                     DB   FALSE   ; vStrMode
01ED   00                     DB   0   
01EE   00                     DB   0   
01EF   00                     DB   0   
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 49 4E 54 59 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMINTY V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                COLON_:      
0204                HASH_:       
0204   DD E9                  JP   (ix)   
0206                COMMA_:      
0206   C3 A2 07               JP   comma   
0209                DOLLAR_:      
0209   C3 23 08               JP   dollar   
020C                DQUOTE_:      
020C                QUOTE_:      
020C   C3 4D 08               JP   quote   
020F                DOT_:        
020F   C3 00 04               JP   dot   
0212                PERCENT_:      
0212   C3 67 08               JP   percent   
0215                QUESTION_:      
0215   C3 40 08               JP   question   
0218                LPAREN_:      
0218   C3 CB 03               JP   lbrace   
021B                SLASH_:      
021B   C3 00 05               JP   slash   
021E                NUM_:        
021E   C3 9C 08               JP   num   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 DE 09               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 C6 09               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 D7 09               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA 3E 0A               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA 22 0A               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA E5 09               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 EA 09               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                SEMICOLON_:      
025E                SEMICOLON:      
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A F0 1B               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   C3 D7 0B               JP   variable   
026B                             ;                               4
026B                RPAREN_:      
026B                             ; jp rparen
026B                RPAREN:      
026B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
026E   FD 46 09               LD   b,(iy+9)   
0271   DD E9                  JP   (ix)   
0273                             ; & and                          14
0273                             ; a b -- c
0273                AMPER_:      
0273                AMPER:       
0273                AND:         
0273   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0274   E1                     POP   hl   
0275   7B                     LD   a,e   
0276   A5                     AND   l   
0277   6F                     LD   l,a   
0278   7A                     LD   a,d   
0279   A4                     AND   h   
027A   67                     LD   h,a   
027B   18 5B                  JR   add3   
027D                             ; - sub
027D                             ; a b -- c
027D                             ; -- sub
027D                             ; b1 -- b2
027D                             ; -= sub
027D                             ; a b1 -- b2
027D                MINUS_:      
027D                MINUS:       
027D   03                     INC   bc   ; check if sign of a number
027E   0A                     LD   a,(bc)   
027F   0B                     DEC   bc   
0280   FE 30                  CP   "0"   
0282   38 05                  JR   c,sub   
0284   FE 3A                  CP   "9"+1   
0286   DA 9C 08               JP   c,num   
0289                SUB:         ; Subtract the value 2nd on stack from top of stack
0289   E1                     POP   hl   ; hl = arg_b
028A   03                     INC   bc   
028B   FE 2D                  CP   "-"   
028D   20 04                  JR   nz,sub1   
028F   2B                     DEC   hl   ; --
0290   C3 C8 09               JP   assign0   
0293                SUB1:        
0293   D1                     POP   de   ; de = arg_a
0294   FE 3D                  CP   "="   
0296   28 02                  JR   z,sub2   
0298   0B                     DEC   bc   ; -
0299   EB                     EX   de,hl   
029A                SUB2:        
029A   B7                     OR   a   ; -=
029B   ED 52                  SBC   hl,de   
029D                SUB3:        
029D   FE 3D                  CP   "="   
029F   CA C8 09               JP   z,assign0   
02A2   E5                     PUSH   hl   
02A3   DD E9                  JP   (ix)   
02A5                STAR_:       ; 21
02A5                STAR:        
02A5   03                     INC   bc   ; check for ** spread
02A6   0A                     LD   a,(bc)   
02A7   FE 2A                  CP   "*"   
02A9   CA FE 09               JP   z,spread   
02AC   0B                     DEC   bc   
02AD                MUL:         
02AD   D1                     POP   de   ; get first value
02AE   E1                     POP   hl   
02AF                MUL2:        
02AF   C5                     PUSH   bc   ; Preserve the IP
02B0   44 4D                  LD   bc,hl   ; bc = 2nd value
02B2   21 00 00               LD   hl,0   
02B5   3E 10                  LD   a,16   
02B7                MUL3:        
02B7   29                     ADD   hl,hl   
02B8   CB 13                  RL   e   
02BA   CB 12                  RL   d   
02BC   30 04                  JR   nc,$+6   
02BE   09                     ADD   hl,bc   
02BF   30 01                  JR   nc,$+3   
02C1   13                     INC   de   
02C2   3D                     DEC   a   
02C3   20 F2                  JR   nz,mul3   
02C5   C1                     POP   bc   ; Restore the IP
02C6   C3 D8 02               JP   add3   
02C9                             ; + add                         25
02C9                             ; a b -- c
02C9                PLUS_:       
02C9                PLUS:        
02C9                ADD:         
02C9   03                     INC   bc   
02CA   0A                     LD   a,(bc)   
02CB   FE 2B                  CP   "+"   ; ++ increment variable
02CD   20 05                  JR   nz,add1   
02CF   E1                     POP   hl   
02D0   23                     INC   hl   
02D1   C3 C8 09               JP   assign0   
02D4                ADD1:        
02D4   0B                     DEC   bc   
02D5   D1                     POP   de   ; second term
02D6   E1                     POP   hl   ; first term
02D7   19                     ADD   hl,de   
02D8                ADD3:        
02D8   03                     INC   bc   
02D9   0A                     LD   a,(bc)   
02DA   FE 3D                  CP   "="   
02DC   28 04                  JR   z,add4   
02DE   0B                     DEC   bc   
02DF   E5                     PUSH   hl   
02E0   DD E9                  JP   (ix)   
02E2                ADD4:        
02E2   C3 C8 09               JP   assign0   
02E5                             ;                               18
02E5                UPCASE_:      
02E5                UPCASE:      
02E5   0A                     LD   a,(bc)   ; a = identifier char
02E6   D6 41                  SUB   "A"   ; "A" = 0
02E8   18 1B                  JR   ident1   
02EA                             ;********************** PAGE 2 END *********************************************
02EA                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 1B                  LD   h,msb(VARS)   
0309   22 FA 1B               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 90 0A               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 16 0E               JP   error   
0343                LAMBDA2:      
0343   CD C6 0A               CALL   parseBlock   
0346   CD 35 0B               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 08 1C            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EA 1B               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A F0 1B               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EA 1B            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EA 1B               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 08 1C            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA 39 09               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 6C 09               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA 39 09               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 1B            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 1B            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 76 0A               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD C6 0A               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 D8 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 CC 08               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 19 08               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B FA 1B            LD   de,(vPointer)   
03ED   21 FA 1B               LD   hl,vPointer   
03F0   C3 D7 0B               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   03                     INC   bc   
0401   0A                     LD   a,(bc)   
0402   FE 61                  CP   "a"   ; .a print array
0404   28 0B                  JR   z,printArray   
0406   FE 63                  CP   "c"   ; .c print char
0408   28 0A                  JR   z,printChar   
040A   FE 73                  CP   "s"   ; .s print string
040C   28 15                  JR   z,printString   
040E   0B                     DEC   bc   
040F   18 27                  JR   printNumber   ; .  print number, fall through
0411                PRINTARRAY:      ; TODO
0411   C3 76 0A               JP   dotNext   
0414                             ; .c print char
0414                             ; char --
0414                PRINTCHAR:      
0414   E1                     POP   hl   ; a = char
0415   7D                     LD   a,l   
0416   ED 5B E8 1B            LD   de,(vBufPtr)   ; de = buffer*
041A   12                     LD   (de),a   
041B   13                     INC   de   
041C   ED 53 E8 1B            LD   (vBufPtr),de   ; save buffer*'
0420   C3 76 0A               JP   dotNext   
0423                             ; .s print string
0423                             ; string* --
0423                PRINTSTRING:      
0423   E1                     POP   hl   ; hl = string*
0424   ED 5B E8 1B            LD   de,(vBufPtr)   ; de = buffer*
0428   18 03                  JR   printString1   
042A                PRINTSTRING0:      
042A   12                     LD   (de),a   ; a -> buffer*
042B   13                     INC   de   ; string*++,
042C   23                     INC   hl   
042D                PRINTSTRING1:      
042D   7E                     LD   a,(hl)   ; a <- string*
042E   B7                     OR   a   ; if NUL exit loop
042F   20 F9                  JR   nz,printString0   
0431   ED 53 E8 1B            LD   (vBufPtr),de   ; save buffer*' in pointer
0435   C3 76 0A               JP   dotNext   
0438                             ; . print decimal
0438                             ; value --
0438                PRINTNUMBER:      
0438   3A F1 1B               LD   a,(vNumBase)   
043B   FE 10                  CP   16   
043D   CA 60 04               JP   z,printHex   ; else falls through
0440   C3 43 04               JP   printDec   
0443                             ; print decimal                 ; 70
0443                             ; value --
0443                PRINTDEC:      
0443   ED 5B E8 1B            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0447   D9                     EXX      
0448   E1                     POP   hl   ; hl = value
0449   3A F0 1B               LD   a,(vDataWidth)   
044C   3D                     DEC   a   
044D   20 02                  JR   nz,printDec1   
044F   26 00                  LD   h,0   
0451                PRINTDEC1:      
0451   CD 4C 0C               CALL   formatDec   
0454   D9                     EXX      ; de = buffer*' bc = IP
0455   3E 20                  LD   a," "   ; append space to buffer
0457   12                     LD   (de),a   
0458   13                     INC   de   ; string*++,
0459   ED 53 E8 1B            LD   (vBufPtr),de   ; update buffer* with buffer*'
045D   C3 76 0A               JP   dotNext   
0460                             ; buffer hex                    37
0460                             ; value --
0460                PRINTHEX:      
0460   ED 5B E8 1B            LD   de,(vBufPtr)   
0464   3A F2 1B               LD   a,(vHexPrefix)   ; "$"
0467   B7                     OR   a   ; skip if null
0468   28 02                  JR   z,printHex1   
046A   12                     LD   (de),a   
046B   13                     INC   de   ; string*++,
046C                PRINTHEX1:      
046C   E1                     POP   hl   ; hl = value
046D   3A F0 1B               LD   a,(vDataWidth)   
0470   3D                     DEC   a   
0471   28 04                  JR   z,printHex2   
0473   7C                     LD   a,h   
0474   CD 86 04               CALL   printHex3   
0477                PRINTHEX2:      
0477   7D                     LD   a,l   
0478   CD 86 04               CALL   printHex3   
047B   3E 20                  LD   a," "   ; append space to buffer
047D   12                     LD   (de),a   
047E   13                     INC   de   ; string*++,
047F   ED 53 E8 1B            LD   (vBufPtr),de   
0483   C3 76 0A               JP   dotNext   
0486                PRINTHEX3:      
0486   F5                     PUSH   af   
0487   1F                     RRA      
0488   1F                     RRA      
0489   1F                     RRA      
048A   1F                     RRA      
048B   CD 8F 04               CALL   printHex4   
048E   F1                     POP   af   
048F                PRINTHEX4:      
048F   E6 0F                  AND   0x0F   
0491   C6 90                  ADD   a,0x90   
0493   27                     DAA      
0494   CE 40                  ADC   a,0x40   
0496   27                     DAA      
0497   12                     LD   (de),a   
0498   13                     INC   de   ; string*++,
0499   C9                     RET      
049A                             ;********************** PAGE 4 END *********************************************
049A                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   CD 04 0C               CALL   identHash   
0504   21 37 07               LD   hl,error1   
0507   CD 19 0C               CALL   commandTable   
050A   51 00 00 00 00 5A 00 00 00 00 00 00 00 00 00 00 DB   lsb(div),0,0,0,0,lsb(f),0,0,0,0,0,0,0,0,0,0   
051A   00 00 00 F4 00 00 0A 00 00 00 00 00 00 00 00 00 DB   0,0,0,lsb(t),0,0,lsb(abs1),0,0,0,0,0,0,0,0,0   
052A   00 00 71 00 00 87 00 00 8F 00 00 00 77 5D 18 00 DB   0,0,lsb(rec),0,0,lsb(sbb),0,0,lsb(sbe),0,0,0,lsb(rem),lsb(in),lsb(alc),0   
053A   00 00 00 7D 00 00 00 BE 00 1A 00 C6 00 00 00 00 DB   0,0,0,lsb(ret),0,0,0,lsb(scp),0,lsb(aln),0,lsb(sel),0,0,0,0   
054A   00 00 4A 68 00 00 26 00 00 00 00 00 00 00 00 54 DB   0,0,lsb(dec),lsb(out),0,0,lsb(cgo),0,0,0,0,0,0,0,0,lsb(ech)   
055A   00 00 00 00 00 00 00 2E 00 ED 00 00 00 00 37 00 DB   0,0,0,0,0,0,0,lsb(cll),0,lsb(sln),0,0,0,0,lsb(cls),0   
056A   00 F7 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 DB   0,lsb(var),0,0,0,lsb(cmv),0,0,0,0,0,0,0,0,0,0   
057A   00 00 00 00 23 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,0,0,lsb(bye),0,0,0,0,0,0,0,0,0,0,0   
058A   00 78 00 22 08 00 00 00 00 00 00 00 00 00 00 00 DB   0,lsb(cur),0,lsb(byt),lsb(whi),0,0,0,0,0,0,0,0,0,0,0   
059A   60 00 00 00 43 00 00 32 3D 00 00 00 00 00 00 00 DB   lsb(voi),0,0,0,lsb(fra),0,0,lsb(hex),lsb(fre),0,0,0,0,0,0,0   
05AA   00 00 00 00 00 00 00 68 00 00 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,lsb(wrd),0,0,0,0,0,0,0,0   
05BA   00 00 00 00 00 00 00 00 00 6D 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,0,0,lsb(xor),0,0,0,0,0,0   
05CA   00 00 00 00 00 00 00 00 00 00 00 00 00 00 29 00 DB   0,0,0,0,0,0,0,0,0,0,0,0,0,0,lsb(cmt),0   
05DA   00 00 00 00 00 00 00 48 00 00 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,lsb(max),0,0,0,0,0,0,0,0   
05EA   00 00 00 00 00 00 00 00 00 00 00 00 00 54 00 00 DB   0,0,0,0,0,0,0,0,0,0,0,0,0,lsb(min),0,0   
05FA   00 00 00 00 00 00 00 00 00 00 00 F8 00 00 00 00 DB   0,0,0,0,0,0,0,0,0,0,0,lsb(nil),0,0,0,0   
060A                             ;********************** PAGE 5 END *********************************************
060A                             ;********************** PAGE 6 BEGIN *********************************************
060A                             ; /abs absolute
060A                             ; num -- num
060A                ABS1:        
060A                ABSOLUTE:      
060A   E1                     POP   hl   
060B   CB 7C                  BIT   7,h   
060D   28 06                  JR   z,absolute1   
060F   AF                     XOR   a   
0610   95                     SUB   l   
0611   6F                     LD   l,a   
0612   9F                     SBC   a,a   
0613   94                     SUB   h   
0614   67                     LD   h,a   
0615                ABSOLUTE1:      
0615   E5                     PUSH   hl   
0616   DD E9                  JP   (ix)   
0618                             ; /alc
0618                             ; size -- adr
0618                ALC:         
0618                MEMALLOCATE:      
0618   DD E9                  JP   (ix)   
061A                             ; /aln length of an array, num elements
061A                             ; array* -- num
061A                ALN:         
061A                ARRAYLENGTH:      
061A   E1                     POP   hl   
061B   2B                     DEC   hl   ; msb size
061C   56                     LD   d,(hl)   
061D   2B                     DEC   hl   ; lsb size
061E   5E                     LD   e,(hl)   
061F   EB                     EX   de,hl   
0620                ARRAYLENGTH1:      
0620   E5                     PUSH   hl   
0621   DD E9                  JP   (ix)   
0623                             ; /bye
0623                BYE:         
0623   C3 3F 0D               JP   coldBoot0   
0626                             ; /cgo cursorGo
0626                             ; row column --
0626                CGO:         
0626                CURSORGO:      
0626   D1                     POP   de   
0627   E1                     POP   hl   
0628   62                     LD   h,d   
0629   CD 77 0E               CALL   ansiGoto   
062C   DD E9                  JP   (ix)   
062E                             ; /cll clear line
062E                             ; num --
062E                CLL:         
062E                CLEARLINE:      
062E   E1                     POP   hl   
062F   7D                     LD   a,l   
0630   E6 03                  AND   $03   
0632   CD 68 0E               CALL   ansiClearLine   
0635   DD E9                  JP   (ix)   
0637                             ; /cls clear screen
0637                             ; --
0637                CLS:         
0637                CLEARSCREEN:      
0637   CD 5F 0E               CALL   ansiClearScreen   
063A   DD E9                  JP   (ix)   
063C                             ; /cmv cursor move
063C                             ; x dir --
063C                CMV:         
063C                CURSORMOVE:      
063C   E1                     POP   hl   
063D   7D                     LD   a,l   
063E   E6 03                  AND   $03   
0640   C6 41                  ADD   a,"A"   
0642   67                     LD   h,a   
0643   D1                     POP   de   
0644   6B                     LD   l,e   
0645   CD 94 0E               CALL   ansiMove   
0648                CURSORMOVE1:      
0648   DD E9                  JP   (ix)   
064A                DEC:         
064A                DECBASE:      
064A   3E 0A                  LD   a,10   
064C                DECBASE1:      
064C   32 F1 1B               LD   (vNumBase),a   
064F   DD E9                  JP   (ix)   
0651                             ; /div
0651                DIV:         
0651   C3 87 07               JP   div1   
0654                             ; /ech
0654                             ; bool --
0654                ECH:         
0654                ECHO:        
0654   E1                     POP   hl   
0655   22 F3 1B               LD   (vEcho),hl   
0658   DD E9                  JP   (ix)   
065A                             ; /f
065A                F:           
065A   C3 F8 09               JP   false1   
065D                             ; Z80 port input
065D                             ; /in
065D                             ; port -- value
065D                IN:          
065D                INPUT:       
065D   E1                     POP   hl   
065E   59                     LD   e,c   ; save IP
065F   4D                     LD   c,l   
0660   ED 68                  IN   l,(c)   
0662   26 00                  LD   h,0   
0664   4B                     LD   c,e   ; restore IP
0665   E5                     PUSH   hl   
0666   DD E9                  JP   (ix)   
0668                             ; /o Z80 port output
0668                             ; value port --
0668                OUT:         
0668                OUTPUT:      
0668   E1                     POP   hl   
0669   59                     LD   e,c   ; save IP
066A   4D                     LD   c,l   
066B   E1                     POP   hl   
066C   ED 69                  OUT   (c),l   
066E   4B                     LD   c,e   ; restore IP
066F   DD E9                  JP   (ix)   
0671                             ; /rec
0671                REC:         
0671                RECUR:       
0671   E1                     POP   hl   
0672   22 EE 1B               LD   (vRecurPtr),hl   
0675   DD E9                  JP   (ix)   
0677                             ; rem
0677                REM:         
0677                REMAIN:      
0677   2A FC 1B               LD   hl,(vRemain)   
067A   E5                     PUSH   hl   
067B   DD E9                  JP   (ix)   
067D                             ; /ret
067D                             ; --
067D                RET:         
067D                RETURN:      
067D   E1                     POP   hl   ; hl = condition, exit if true
067E   7D                     LD   a,l   
067F   B4                     OR   h   
0680   20 02                  JR   nz,return1   
0682   DD E9                  JP   (ix)   
0684                RETURN1:      
0684   C3 CC 08               JP   blockEnd   
0687                             ; /sbb
0687                SBB:         
0687                STRINGBEGIN:      
0687   21 FF FF               LD   hl,TRUE   ; string mode = true
068A   22 F4 1B               LD   (vStrMode),hl   
068D   18 27                  JR   stringEnd1   ; save hl in vBufPtr
068F                             ; /sbe
068F                             ; -- str*
068F                SBE:         
068F                STRINGEND:      
068F   21 00 00               LD   hl,FALSE   ; string mode = false
0692   22 F4 1B               LD   (vStrMode),hl   
0695   2A E8 1B               LD   hl,(vBufPtr)   ; append NUL to string
0698   AF                     XOR   a   
0699   77                     LD   (hl),a   
069A   23                     INC   hl   ; hl = string_end*
069B   ED 43 08 1C            LD   (vTemp1),bc   ; save IP
069F   11 00 1A               LD   de,BUFFER   ; de = string*
06A2   B7                     OR   a   ; bc = size
06A3   ED 52                  SBC   hl,de   
06A5   44 4D                  LD   bc,hl   
06A7   2A EA 1B               LD   hl,(vHeapPtr)   ; hl = hstring*
06AA   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06AB   D5                     PUSH   de   ; return hstring*
06AC   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06AE   ED 53 EA 1B            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06B2   ED 4B 08 1C            LD   bc,(vTemp1)   ; restore IP
06B6                STRINGEND1:      
06B6   21 00 1A               LD   hl,BUFFER   ; reset vBufPtr
06B9   22 E8 1B               LD   (vBufPtr),hl   
06BC   DD E9                  JP   (ix)   
06BE                             ; /scp string compare
06BE                SCP:         
06BE   D1                     POP   de   
06BF   E1                     POP   hl   
06C0   CD FB 0C               CALL   stringCompare   
06C3   E5                     PUSH   hl   
06C4   DD E9                  JP   (ix)   
06C6                             ; select case from an associative array of cases
06C6                             ; bool cases* --
06C6                SEL:         
06C6                SELECT:      
06C6   E1                     POP   hl   ; hl = case associative array [ key1 value1 ... ]
06C7   D1                     POP   de   ; de = select key
06C8   C5                     PUSH   bc   ; save IP
06C9   2B                     DEC   hl   ; bc = array length
06CA   46                     LD   b,(hl)   
06CB   2B                     DEC   hl   
06CC   4E                     LD   c,(hl)   
06CD   23                     INC   hl   
06CE   23                     INC   hl   
06CF   18 15                  JR   select2   
06D1                SELECT1:      
06D1   7E                     LD   a,(hl)   ; compare lsb case key with lsb select key, hl++
06D2   BB                     CP   e   
06D3   23                     INC   hl   ; hl++, flags are unaltered
06D4   20 0C                  JR   nz,select1a   
06D6   7E                     LD   a,(hl)   ; compare msb case key with msb select key, hl++
06D7   BA                     CP   d   
06D8   23                     INC   hl   ; hl++, flags are unaltered
06D9   20 08                  JR   nz,select1b   
06DB   5E                     LD   e,(hl)   
06DC   23                     INC   hl   
06DD   56                     LD   d,(hl)   
06DE   C1                     POP   bc   
06DF   C3 A0 03               JP   go1   
06E2                SELECT1A:      
06E2   23                     INC   hl   
06E3                SELECT1B:      
06E3   23                     INC   hl   
06E4   23                     INC   hl   
06E5   0B                     DEC   bc   
06E6                SELECT2:      
06E6   79                     LD   a,c   
06E7   B0                     OR   b   
06E8   20 E7                  JR   nz,select1   
06EA   C1                     POP   bc   
06EB   DD E9                  JP   (ix)   
06ED                             ; /sln
06ED                SLN:         
06ED   D1                     POP   de   
06EE   CD 10 0D               CALL   stringLength   
06F1   E5                     PUSH   hl   
06F2   DD E9                  JP   (ix)   
06F4                             ; /t
06F4                T:           
06F4   C3 F2 09               JP   true1   
06F7                             ; /var
06F7                             ; --
06F7                VAR:         
06F7                VARIABLES:      
06F7   21 00 1B               LD   hl,VARS   
06FA   C3 E6 0B               JP   constant   
06FD                             ;********************** PAGE 6 END *********************************************
06FD                          ALIGN   $100   
0700                             ;********************** PAGE 7 BEGIN *********************************************
0700                             ; /adr addrOf
0700                             ; char -- addr
0700                ADR:         
0700                ADDROF:      
0700   E1                     POP   hl   ; a = char
0701   7D                     LD   a,l   
0702   CD 29 0C               CALL   getVarAddr   
0705   E5                     PUSH   hl   
0706                ADDROF2:      
0706   DD E9                  JP   (ix)   
0708                             ; 13
0708                             ; /whi while true else break from loop
0708                             ; --
0708                WHI:         
0708                WHILE:       
0708   E1                     POP   hl   ; hl = condition, break if false
0709   7D                     LD   a,l   
070A   B4                     OR   h   
070B   28 02                  JR   z,while1   
070D   DD E9                  JP   (ix)   
070F                WHILE1:      
070F   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0711   FD 54                  LD   d,iyh   
0713   21 08 00               LD   hl,8   
0716   19                     ADD   hl,de   
0717   23                     INC   hl   
0718   23                     INC   hl   
0719   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
071C   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
071F   C3 CC 08               JP   blockEnd   
0722                             ; /byt
0722                BYT:         
0722                BYTEMODE:      
0722   3E 01                  LD   a,1   
0724                BYTEMODE1:      
0724   32 F0 1B               LD   (vDataWidth),a   
0727   DD E9                  JP   (ix)   
0729                             ; //
0729                CMT:         
0729                COMMENT:      
0729   03                     INC   bc   ; point to next char
072A   0A                     LD   a,(bc)   
072B   FE 20                  CP   " "   ; terminate on any char less than SP
072D   30 FA                  JR   nc,comment   
072F   0B                     DEC   bc   
0730   DD E9                  JP   (ix)   
0732                HEX:         
0732   3E 10                  LD   a,16   
0734   C3 4C 06               JP   decBase1   
0737                ERROR1:      
0737   21 01 00               LD   hl,1   ; error 1: unknown command
073A   C3 16 0E               JP   error   
073D                             ; /fre
073D                             ; adr --
073D                FRE:         
073D                MEMFREE:      
073D   E1                     POP   hl   
073E                MEMFREE1:      
073E   22 EA 1B               LD   (vHeapPtr),hl   
0741   DD E9                  JP   (ix)   
0743                             ; /fra
0743                             ; adr --
0743                FRA:         
0743                MEMFREEARRAY:      
0743   E1                     POP   hl   
0744   2B                     DEC   hl   
0745   2B                     DEC   hl   
0746   18 F6                  JR   memFree1   
0748                             ; /max maximum
0748                             ; a b -- c
0748                MAX:         
0748                MAXIMUM:      
0748   E1                     POP   hl   
0749   D1                     POP   de   
074A   E5                     PUSH   hl   
074B   B3                     OR   e   
074C   ED 52                  SBC   hl,de   
074E   30 02                  JR   nc,maximum1   
0750   E1                     POP   hl   
0751   D5                     PUSH   de   
0752                MAXIMUM1:      
0752   DD E9                  JP   (ix)   
0754                             ; /min minimum
0754                             ; a b -- c
0754                MIN:         
0754                MINIMUM:      
0754   E1                     POP   hl   
0755   D1                     POP   de   
0756   E5                     PUSH   hl   
0757   B3                     OR   e   
0758   ED 52                  SBC   hl,de   
075A   38 02                  JR   c,minimum1   
075C   E1                     POP   hl   
075D   D5                     PUSH   de   
075E                MINIMUM1:      
075E   DD E9                  JP   (ix)   
0760                             ; /voi clear out returned values
0760                             ; ?? --
0760                VOI:         
0760                VOID:        
0760   FD 5D                  LD   e,iyl   
0762   FD 54                  LD   d,iyh   
0764   EB                     EX   de,hl   
0765   F9                     LD   sp,hl   
0766   DD E9                  JP   (ix)   
0768                             ; /wrd
0768                WRD:         
0768                WORDMODE:      
0768   3E 02                  LD   a,2   
076A   C3 24 07               JP   byteMode1   
076D                             ; /xor
076D                XOR:         
076D   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
076E                XOR1:        
076E   E1                     POP   hl   
076F   7B                     LD   a,e   
0770   AD                     XOR   l   
0771   6F                     LD   l,a   
0772   7A                     LD   a,d   
0773   AC                     XOR   h   
0774   67                     LD   h,a   
0775   C3 D8 02               JP   add3   
0778                             ; /cur cursor hide / show
0778                             ; bool --
0778                CUR:         
0778                CURSORSHOW:      
0778   E1                     POP   hl   
0779   23                     INC   hl   
077A   7D                     LD   a,l   
077B   B4                     OR   h   
077C   3E 68                  LD   a,"h"   
077E   28 02                  JR   z,cursorShow1   
0780   3E 6C                  LD   a,"l"   
0782                CURSORSHOW1:      
0782   CD B3 0E               CALL   ansiCursorShow   
0785   DD E9                  JP   (ix)   
0787                             ;*******************************************************************
0787                             ; implementations continued
0787                             ;*******************************************************************
0787                DIV1:        
0787   E1                     POP   hl   ; hl = arg_b
0788   D1                     POP   de   ; de = arg_a
0789   03                     INC   bc   
078A   0A                     LD   a,(bc)   
078B   FE 3D                  CP   "="   
078D   28 02                  JR   z,div2   
078F   0B                     DEC   bc   ; /
0790   EB                     EX   de,hl   
0791                DIV2:        
0791   F5                     PUSH   af   ; preserve af, bc
0792   C5                     PUSH   bc   
0793   44 4D                  LD   bc,hl   
0795   CD 5D 0A               CALL   divide   
0798   EB                     EX   de,hl   
0799   ED 53 FC 1B            LD   (vRemain),de   
079D   C1                     POP   bc   ; restore
079E   F1                     POP   af   
079F   C3 9D 02               JP   sub3   
07A2                COMMA:       
07A2   03                     INC   bc   
07A3   0A                     LD   a,(bc)   
07A4   FE 63                  CP   "c"   ; .c print char
07A6   28 07                  JR   z,readChar   
07A8   FE 73                  CP   "s"   ; .s print string
07AA   28 0C                  JR   z,readString   
07AC   0B                     DEC   bc   
07AD   18 2B                  JR   readNumber   ; .  print number, fall through
07AF                READCHAR:      
07AF   CD 81 00               CALL   getchar   
07B2   26 00                  LD   h,0   
07B4   6F                     LD   l,a   
07B5   E5                     PUSH   hl   
07B6   DD E9                  JP   (ix)   
07B8                READSTRING:      
07B8   ED 5B EA 1B            LD   de,(vHeapPtr)   
07BC   D5                     PUSH   de   ; return start of string
07BD                READSTRING1:      
07BD   CD 81 00               CALL   getchar   
07C0   FE 0D                  CP   "\r"   
07C2   28 0D                  JR   z,readString2   
07C4   12                     LD   (de),a   
07C5   13                     INC   de   
07C6   3A F3 1B               LD   a,(vEcho)   
07C9   3C                     INC   a   
07CA   20 F1                  JR   nz,readString1   
07CC   CD 85 00               CALL   putchar   
07CF   18 EC                  JR   readString1   
07D1                READSTRING2:      
07D1   AF                     XOR   a   
07D2   12                     LD   (de),a   
07D3   13                     INC   de   
07D4   ED 53 EA 1B            LD   (vHeapPtr),de   
07D8   DD E9                  JP   (ix)   
07DA                READNUMBER:      
07DA   DD E5                  PUSH   ix   
07DC                          ;*Macro unroll:  PERFORM readString
07DC   DD 21 E3 07            LD   ix,performM_1684S1224   
07E0   C3 B8 07               JP   readString   
07E3                PERFORMM_1684S1224:      
07E3   60 69                  LD   hl,bc   ; save bc, hl = string*
07E5   E3                     EX   (sp),hl   
07E6   22 EA 1B               LD   (vHeapPtr),hl   ; restore heap* to before string
07E9   44 4D                  LD   bc,hl   
07EB   0A                     LD   a,(bc)   
07EC   FE 2D                  CP   "-"   
07EE   28 11                  JR   z,readNumber1   
07F0   FE 24                  CP   "$"   
07F2   28 17                  JR   z,readNumber2   
07F4   FE 30                  CP   "0"   
07F6   30 09                  JR   nc,readNumber1   
07F8   FE 3A                  CP   "9"+1   
07FA   38 05                  JR   c,readNumber1   
07FC   21 00 00               LD   hl,0   
07FF   18 12                  JR   readNumber3   
0801                READNUMBER1:      
0801                          ;*Macro unroll:  PERFORM num
0801   DD 21 08 08            LD   ix,performM_1701S1241   
0805   C3 9C 08               JP   num   
0808                PERFORMM_1701S1241:      
0808   E1                     POP   hl   
0809   18 08                  JR   readNumber3   
080B                READNUMBER2:      
080B                          ;*Macro unroll:  PERFORM hexNum
080B   DD 21 12 08            LD   ix,performM_1705S1245   
080F   C3 23 08               JP   hexNum   
0812                PERFORMM_1705S1245:      
0812   E1                     POP   hl   
0813                READNUMBER3:      
0813   C1                     POP   bc   
0814   DD E1                  POP   ix   
0816   E5                     PUSH   hl   
0817   DD E9                  JP   (ix)   
0819                             ; ~ bitwise invert
0819                TILDE:       
0819                INVERT:      
0819   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
081A   7D                     LD   a,l   
081B   2F                     CPL      
081C   6F                     LD   l,a   
081D   7C                     LD   a,h   
081E   2F                     CPL      
081F   67                     LD   h,a   
0820   C3 D8 02               JP   add3   
0823                             ; $ hex                         ; 22
0823                DOLLAR:      
0823                HEXNUM:      
0823   21 00 00               LD   hl,0   ; Clear hl to accept the number
0826                HEXNUM1:      
0826   03                     INC   bc   
0827   0A                     LD   a,(bc)   ; Get the character which is a numeral
0828   CB 77                  BIT   6,a   ; is it uppercase alpha?
082A   28 02                  JR   z,hexnum2   ; no a decimal
082C   D6 07                  SUB   7   ; sub 7  to make $a - $F
082E                HEXNUM2:      
082E   D6 30                  SUB   $30   ; form decimal digit
0830   DA BE 08               JP   c,num2   
0833   FE 10                  CP   $0F+1   
0835   D2 BE 08               JP   nc,num2   
0838   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0839   29                     ADD   hl,hl   ; 4X
083A   29                     ADD   hl,hl   ; 8X
083B   29                     ADD   hl,hl   ; 16X
083C   85                     ADD   a,l   ; add into bottom of hl
083D   6F                     LD   l,a   
083E   18 E6                  JR   hexnum1   
0840                             ; ? if                            23
0840                             ; condition then else -- value
0840                QUESTION:      
0840                IF:          
0840   D1                     POP   de   ; de = else
0841   E1                     POP   hl   ; hl = then
0842   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0843   7C                     LD   a,h   
0844   B5                     OR   l   
0845   E1                     POP   hl   ; hl = then
0846   CA A0 03               JP   z,go1   ; if z de = else
0849   EB                     EX   de,hl   ; condition = false, de = then
084A   C3 A0 03               JP   go1   
084D                             ; string                        ;38
084D                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
084D                QUOTE:       
084D                STRING:      
084D   2A EA 1B               LD   hl,(vHeapPtr)   ; hl = heap*
0850   E5                     PUSH   hl   ; save start of string
0851   0A                     LD   a,(bc)   
0852   5F                     LD   e,a   ; e = matching terminator
0853   03                     INC   bc   ; point to next char
0854   18 03                  JR   string2   
0856                STRING1:      
0856   77                     LD   (hl),a   
0857   23                     INC   hl   ; increase count
0858   03                     INC   bc   ; point to next char
0859                STRING2:      
0859   0A                     LD   a,(bc)   
085A   BB                     CP   e   ; is it the string terminator
085B   28 02                  JR   z,string3   
085D   18 F7                  JR   string1   
085F                STRING3:      
085F   AF                     XOR   a   ; write NUL to terminate string
0860   77                     LD   (hl),a   ; hl = end of string
0861   23                     INC   hl   
0862   22 EA 1B               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0865   DD E9                  JP   (ix)   
0867                             ; %a .. %z                      43
0867                             ; -- value
0867                             ; returns value of arg
0867                PERCENT:      
0867                ARG:         
0867   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
086A   FD 56 05               LD   d,(iy+5)   
086D   EB                     EX   de,hl   
086E   7D                     LD   a,l   ; arg_list* == null, skip
086F   B4                     OR   h   
0870   28 1A                  JR   z,arg0a   
0872   23                     INC   hl   ; a = num_args, hl = arg_list*
0873   7E                     LD   a,(hl)   
0874   23                     INC   hl   
0875   B7                     OR   a   
0876   28 14                  JR   z,arg0a   ; num_args == 0, skip
0878   5F                     LD   e,a   ; e = a = num_args
0879   03                     INC   bc   ; a = next char = dollar_name
087A   0A                     LD   a,(bc)   
087B   C5                     PUSH   bc   ; save IP
087C   43                     LD   b,e   ; b = e = num_args
087D   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0880   FD 56 03               LD   d,(iy+3)   
0883                ARG0:        
0883   1B                     DEC   de   ; a = dollar_name, de = next arg*
0884   1B                     DEC   de   
0885   BE                     CP   (hl)   
0886   28 09                  JR   z,arg1   
0888   23                     INC   hl   ; hl = next arg_list*
0889   10 F8                  DJNZ   arg0   
088B   C1                     POP   bc   ; no match, restore IP
088C                ARG0A:       
088C   11 00 00               LD   de,0   ; return 0
088F   18 08                  JR   arg1a   
0891                ARG1:        
0891   C1                     POP   bc   ; restore IP
0892   EB                     EX   de,hl   ; hl = arg*
0893   22 FA 1B               LD   (vPointer),hl   ; store arg* in setter
0896   5E                     LD   e,(hl)   
0897   23                     INC   hl   
0898   56                     LD   d,(hl)   ; de = arg
0899                ARG1A:       
0899   D5                     PUSH   de   ; push arg
089A   DD E9                  JP   (ix)   
089C                             ; 0..9 number                   37
089C                NUM:         
089C   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
089F   0A                     LD   a,(bc)   ; Get numeral or -
08A0   FE 2D                  CP   "-"   
08A2   20 01                  JR   nz,num0   
08A4   03                     INC   bc   ; move to next char, no flags affected
08A5                NUM0:        
08A5   08                     EX   af,af'   ; save zero flag = 0 for later
08A6                NUM1:        
08A6   0A                     LD   a,(bc)   ; read digit
08A7   D6 30                  SUB   "0"   ; less than 0?
08A9   38 13                  JR   c,num2   ; not a digit, exit loop
08AB   FE 0A                  CP   10   ; greater that 9?
08AD   30 0F                  JR   nc,num2   ; not a digit, exit loop
08AF   03                     INC   bc   ; inc IP
08B0   54 5D                  LD   de,hl   ; multiply hl * 10
08B2   29                     ADD   hl,hl   
08B3   29                     ADD   hl,hl   
08B4   19                     ADD   hl,de   
08B5   29                     ADD   hl,hl   
08B6   85                     ADD   a,l   ; add digit in a to hl
08B7   6F                     LD   l,a   
08B8   3E 00                  LD   a,0   
08BA   8C                     ADC   a,h   
08BB   67                     LD   h,a   
08BC   18 E8                  JR   num1   
08BE                NUM2:        
08BE   0B                     DEC   bc   
08BF   08                     EX   af,af'   ; restore zero flag
08C0   20 07                  JR   nz,num3   
08C2   EB                     EX   de,hl   ; negate the value of hl
08C3   21 00 00               LD   hl,0   
08C6   B7                     OR   a   ; jump to sub2
08C7   ED 52                  SBC   hl,de   
08C9                NUM3:        
08C9   E5                     PUSH   hl   ; Put the number on the stack
08CA   DD E9                  JP   (ix)   ; and process the next character
08CC                             ; }                               58
08CC                RBRACE:      
08CC                BLOCKEND:      
08CC   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
08CF   FD 56 01               LD   d,(iy+1)   
08D2   ED 53 08 1C            LD   (vTemp1),de   
08D6   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
08D9   FD 56 07               LD   d,(iy+7)   
08DC   ED 53 0A 1C            LD   (vTemp2),de   
08E0   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
08E3   FD 56 03               LD   d,(iy+3)   
08E6   EB                     EX   de,hl   
08E7   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
08EA   FD 56 01               LD   d,(iy+1)   
08ED   13                     INC   de   ; for carry flag <=
08EE   B7                     OR   a   
08EF   ED 52                  SBC   hl,de   
08F1   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
08F3   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
08F5   FD 5D                  LD   e,iyl   
08F7   21 08 00               LD   hl,8   
08FA   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
08FB   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
08FC   18 0C                  JR   blockEnd2   
08FE                BLOCKEND1:      ; same scope
08FE   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0901   FD 56 03               LD   d,(iy+3)   
0904   EB                     EX   de,hl   
0905   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0907   FD 5D                  LD   e,iyl   
0909   EB                     EX   de,hl   
090A                BLOCKEND2:      
090A   44 4D                  LD   bc,hl   ; bc = hl = BP
090C   B7                     OR   a   ; hl = BP - SP = count
090D   ED 72                  SBC   hl,sp   
090F   7D                     LD   a,l   
0910   B4                     OR   h   
0911   28 09                  JR   z,blockEnd3   
0913   C5                     PUSH   bc   ; bc = count, hl = BP
0914   44 4D                  LD   bc,hl   
0916   E1                     POP   hl   
0917   2B                     DEC   hl   ; hl = BP-1
0918   1B                     DEC   de   ; de = args*-1
0919   ED B8                  LDDR      
091B   13                     INC   de   
091C                BLOCKEND3:      
091C   EB                     EX   de,hl   ; sp = de = new tos*
091D   F9                     LD   sp,hl   
091E   ED 4B 0A 1C            LD   bc,(vTemp2)   
0922   FD 2A 08 1C            LD   iy,(vTemp1)   
0926   ED 5B EE 1B            LD   de,(vRecurPtr)   ; de = recur vector
092A   7B                     LD   a,e   ; check for NUL
092B   B2                     OR   d   
092C   20 02                  JR   nz,blockEnd4   
092E   DD E9                  JP   (ix)   
0930                BLOCKEND4:      
0930   21 00 00               LD   hl,0   ; clear recur vector
0933   22 EE 1B               LD   (vRecurPtr),hl   
0936   C3 A0 03               JP   go1   ; execute de
0939                GOBLOCK:      
0939   ED 53 08 1C            LD   (vTemp1),de   ; save de
093D   21 00 17               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0940   FD 54                  LD   d,iyh   
0942   FD 5D                  LD   e,iyl   
0944   B7                     OR   a   ; if stack* == BP then this is the root_scope
0945   ED 52                  SBC   hl,de   
0947   ED 5B 08 1C            LD   de,(vTemp1)   ; restore de
094B   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
094C   B4                     OR   h   
094D   3E 00                  LD   a,0   
094F   28 6A                  JR   z,goFunc8   
0951   C5                     PUSH   bc   ; push IP
0952   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0955   FD 46 05               LD   b,(iy+5)   
0958   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
095B   FD 66 03               LD   h,(iy+3)   
095E                GOBLOCK2:      
095E   C5                     PUSH   bc   ; arg_list*
095F   E5                     PUSH   hl   ; first_arg*
0960   FD E5                  PUSH   iy   ; push BP
0962   FD 21 00 00            LD   iy,0   ; BP = SP
0966   FD 39                  ADD   iy,sp   
0968                GOBLOCK3:      
0968   42 4B                  LD   bc,de   ; bc = de = block*-1
096A   DD E9                  JP   (ix)   
096C                GOFUNC:      ; execute func
096C   EB                     EX   de,hl   ; hl = func*
096D   5E                     LD   e,(hl)   ; de = partial_array*
096E   23                     INC   hl   
096F   56                     LD   d,(hl)   
0970   23                     INC   hl   
0971   7B                     LD   a,e   ; if partial_array* == null skip
0972   B2                     OR   d   
0973   28 21                  JR   z,goFunc3   
0975   ED 43 08 1C            LD   (vTemp1),bc   
0979   22 0A 1C               LD   (vTemp2),hl   ; save bc,hl
097C   EB                     EX   de,hl   ; hl = partial_array*
097D   2B                     DEC   hl   ; bc = count
097E   46                     LD   b,(hl)   
097F   2B                     DEC   hl   
0980   4E                     LD   c,(hl)   
0981   23                     INC   hl   ; hl = array data*
0982   23                     INC   hl   
0983   18 06                  JR   goFunc2   ; push each item on stack
0985                GOFUNC1:      
0985   5E                     LD   e,(hl)   ; de = partial item
0986   23                     INC   hl   
0987   56                     LD   d,(hl)   
0988   23                     INC   hl   
0989   D5                     PUSH   de   ; push on stack
098A   0B                     DEC   bc   
098B                GOFUNC2:      
098B   79                     LD   a,c   ; if count != 0 then loop
098C   B0                     OR   b   
098D   20 F6                  JR   nz,goFunc1   
098F   ED 4B 08 1C            LD   bc,(vTemp1)   ; restore bc
0993   2A 0A 1C               LD   hl,(vTemp2)   ; restore hl
0996                GOFUNC3:      
0996   5E                     LD   e,(hl)   ; de = block*
0997   23                     INC   hl   
0998   56                     LD   d,(hl)   
0999   23                     INC   hl   
099A   ED 53 08 1C            LD   (vTemp1),de   ; save block*
099E   5E                     LD   e,(hl)   ; de = arg_list*
099F   23                     INC   hl   
09A0   56                     LD   d,(hl)   
09A1   23                     INC   hl   
09A2   EB                     EX   de,hl   ; hl = arg_list*
09A3   ED 5B 08 1C            LD   de,(vTemp1)   ; restore de = block*
09A7   7D                     LD   a,l   ; if arg_list* == null a = 0
09A8   B4                     OR   h   
09A9   20 03                  JR   nz,goFunc4   
09AB   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
09AC   18 0D                  JR   goFunc8   
09AE                GOFUNC4:      ; allocate locals
09AE   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
09AF   18 03                  JR   goFunc6   
09B1                GOFUNC5:      ; loop
09B1   3B                     DEC   sp   
09B2   3B                     DEC   sp   
09B3   3D                     DEC   a   
09B4                GOFUNC6:      
09B4   B7                     OR   a   
09B5   20 FA                  JR   nz,goFunc5   ; end loop
09B7                GOFUNC7:      
09B7   23                     INC   hl   ; a = num_args* x 2
09B8   7E                     LD   a,(hl)   
09B9   2B                     DEC   hl   
09BA   87                     ADD   a,a   ; a *= 2
09BB                GOFUNC8:      
09BB   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
09BC   44 4D                  LD   bc,hl   
09BE   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
09C1   85                     ADD   a,l   
09C2   6F                     LD   l,a   
09C3   39                     ADD   hl,sp   
09C4   18 98                  JR   goBlock2   
09C6                             ; =                              21
09C6                             ; value _oldValue --            ; uses address in vPointer 15
09C6                ASSIGN:      
09C6   E1                     POP   hl   ; discard last accessed value
09C7   E1                     POP   hl   ; hl = new value
09C8                ASSIGN0:      
09C8   EB                     EX   de,hl   ; de = new value
09C9   2A FA 1B               LD   hl,(vPointer)   
09CC                ASSIGN1:      ; entry point from defineEnd
09CC   73                     LD   (hl),e   
09CD   3A F0 1B               LD   a,(vDataWidth)   
09D0   3D                     DEC   a   ; is it byte?
09D1   28 02                  JR   z,assign2   
09D3   23                     INC   hl   
09D4   72                     LD   (hl),d   
09D5                ASSIGN2:      
09D5   DD E9                  JP   (ix)   
09D7                             ; hl = value1, de = value2
09D7                             ; hl = result
09D7                EQUALS:      
09D7   B7                     OR   a   ; reset the carry flag
09D8   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
09DA   28 16                  JR   z,true1   
09DC   18 1A                  JR   false1   
09DE                NOTEQUALS:      
09DE   B7                     OR   a   ; reset the carry flag
09DF   ED 52                  SBC   hl,de   
09E1   20 0F                  JR   nz,true1   
09E3   18 13                  JR   false1   
09E5                             ; hl = value1 de = value2
09E5                             ; hl = result
09E5                LESSTHANEQ:      
09E5   B7                     OR   a   
09E6   ED 52                  SBC   hl,de   
09E8   18 05                  JR   lessthan1   
09EA                             ; hl = value1 de = value2
09EA                             ; hl = result
09EA                LESSTHAN:      
09EA   B7                     OR   a   
09EB   ED 52                  SBC   hl,de   
09ED   28 09                  JR   z,false1   
09EF                LESSTHAN1:      
09EF   FA F8 09               JP   m,false1   
09F2                TRUE1:       
09F2   21 FF FF               LD   hl,TRUE   
09F5   E5                     PUSH   hl   
09F6   DD E9                  JP   (ix)   
09F8                NULL1:       
09F8                NIL:         
09F8                FALSE1:      
09F8   21 00 00               LD   hl,FALSE   
09FB   E5                     PUSH   hl   
09FC   DD E9                  JP   (ix)   
09FE                SPREAD:      
09FE   E1                     POP   hl   ; hl = array*
09FF   ED 43 08 1C            LD   (vTemp1),bc   ; save bc
0A03   2B                     DEC   hl   ; bc = length
0A04   46                     LD   b,(hl)   
0A05   2B                     DEC   hl   
0A06   4E                     LD   c,(hl)   
0A07   23                     INC   hl   ; move back to array 0
0A08   23                     INC   hl   
0A09   18 0D                  JR   spread3   
0A0B                SPREAD1:      
0A0B   5E                     LD   e,(hl)   ; e = lsb data at hl
0A0C   23                     INC   hl   
0A0D   3A F0 1B               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0A10   57                     LD   d,a   
0A11   15                     DEC   d   
0A12   28 02                  JR   z,spread2   
0A14   56                     LD   d,(hl)   ; d = msb data at hl
0A15   23                     INC   hl   
0A16                SPREAD2:      
0A16   D5                     PUSH   de   ; return de
0A17   0B                     DEC   bc   ; count--
0A18                SPREAD3:      
0A18   79                     LD   a,c   ; exit loop if bc == 0
0A19   B0                     OR   b   
0A1A   20 EF                  JR   nz,spread1   
0A1C   ED 4B 08 1C            LD   bc,(vTemp1)   ; restore bc
0A20   DD E9                  JP   (ix)   
0A22                             ; shiftLeft
0A22                             ; value count <<
0A22                             ; count variable <<=
0A22                SHIFTLEFT:      
0A22   E1                     POP   hl   ; de = arg_a, hl = arg_b
0A23   D1                     POP   de   
0A24   03                     INC   bc   
0A25   0A                     LD   a,(bc)   
0A26   FE 3D                  CP   "="   
0A28   28 02                  JR   z,shiftLeft2   
0A2A   0B                     DEC   bc   
0A2B   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0A2C                SHIFTLEFT2:      
0A2C   ED 43 08 1C            LD   (vTemp1),bc   ; save IP
0A30   43                     LD   b,e   ; b = loop counter
0A31   04                     INC   b   ; test for counter=0 case
0A32   18 01                  JR   shiftLeft4   
0A34                SHIFTLEFT3:      
0A34   29                     ADD   hl,hl   ; left shift hl
0A35                SHIFTLEFT4:      
0A35   10 FD                  DJNZ   shiftLeft3   
0A37   ED 4B 08 1C            LD   bc,(vTemp1)   ; restore IP
0A3B   C3 9D 02               JP   sub3   
0A3E                             ; shiftRight
0A3E                             ; value count >>
0A3E                             ; count variable >>=
0A3E                SHIFTRIGHT:      
0A3E   E1                     POP   hl   ; de = arg_a, hl = arg_b
0A3F   D1                     POP   de   
0A40   03                     INC   bc   
0A41   0A                     LD   a,(bc)   
0A42   FE 3D                  CP   "="   
0A44   28 02                  JR   z,shiftRight2   
0A46   0B                     DEC   bc   
0A47   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0A48                SHIFTRIGHT2:      
0A48   ED 43 08 1C            LD   (vTemp1),bc   ; save IP
0A4C   43                     LD   b,e   ; b = loop counter
0A4D   04                     INC   b   ; test for counter=0 case
0A4E   18 04                  JR   shiftRight4   
0A50                SHIFTRIGHT3:      
0A50   CB 3C                  SRL   h   ; right shift hl
0A52   CB 1D                  RR   l   
0A54                SHIFTRIGHT4:      
0A54   10 FA                  DJNZ   shiftRight3   
0A56   ED 4B 08 1C            LD   bc,(vTemp1)   ; restore IP
0A5A   C3 9D 02               JP   sub3   
0A5D                             ; division subroutine.
0A5D                             ; bc: divisor, de: dividend, hl: remainder
0A5D                DIVIDE:      
0A5D   21 00 00               LD   hl,0   ; zero the remainder
0A60   3E 10                  LD   a,16   ; loop counter
0A62                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0A62   CB 21                  SLA   c   
0A64   CB 10                  RL   b   
0A66   ED 6A                  ADC   hl,hl   
0A68   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0A6A   38 03                  JR   c,divide2   
0A6C   0C                     INC   c   
0A6D   18 01                  JR   divide3   
0A6F                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0A6F   19                     ADD   hl,de   
0A70                DIVIDE3:      
0A70   3D                     DEC   a   
0A71   20 EF                  JR   nz,divide1   
0A73   50 59                  LD   de,bc   ; result from bc to de
0A75   C9                     RET      
0A76                DOTNEXT:      
0A76   3A F4 1B               LD   a,(vStrMode)   ; if string mode then exit
0A79   3C                     INC   a   
0A7A   20 02                  JR   nz,dotNext1   
0A7C   DD E9                  JP   (ix)   
0A7E                DOTNEXT1:      
0A7E   11 00 1A               LD   de,BUFFER   
0A81   2A E8 1B               LD   hl,(vBufPtr)   
0A84   36 00                  LD   (hl),0   ; store NUL at end of string
0A86   ED 53 E8 1B            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0A8A   EB                     EX   de,hl   ; hl = BUFFER
0A8B   CD 44 0C               CALL   putstr   
0A8E   DD E9                  JP   (ix)   
0A90                             ; arg_list - parses arg_list e.g. ab:c
0A90                             ; -- arg_list*
0A90                PARSEARGS:      
0A90   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0A93   2A EA 1B               LD   hl,(vHeapPtr)   ; hl = heap*
0A96   E5                     PUSH   hl   ; save start of arg_list
0A97   23                     INC   hl   ; skip length fields to start of string
0A98   23                     INC   hl   
0A99   03                     INC   bc   ; point to next char
0A9A                PARSEARGS1:      
0A9A   0A                     LD   a,(bc)   
0A9B   FE 3A                  CP   ":"   ; ":" switches from args to locals
0A9D   20 03                  JR   nz,parseArgs1a   
0A9F   14                     INC   d   ; non zero value local count acts as flag
0AA0   18 10                  JR   parseArgs3   
0AA2                PARSEARGS1A:      
0AA2   FE 61                  CP   "a"   ; < "a" terminates arg_list
0AA4   38 0F                  JR   c,parseArgs4   
0AA6   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0AA8   30 0B                  JR   nc,parseArgs4   
0AAA                PARSEARGS2:      
0AAA   77                     LD   (hl),a   
0AAB   23                     INC   hl   
0AAC   1C                     INC   e   ; increase arg count
0AAD   AF                     XOR   a   
0AAE   B2                     OR   d   
0AAF   28 01                  JR   z,parseArgs3   
0AB1   14                     INC   d   ; if d > 0 increase local count
0AB2                PARSEARGS3:      
0AB2   03                     INC   bc   ; point to next char
0AB3   18 E5                  JR   parseArgs1   
0AB5                PARSEARGS4:      
0AB5   0B                     DEC   bc   
0AB6   AF                     XOR   a   
0AB7   B2                     OR   d   
0AB8   28 01                  JR   z,parseArgs5   
0ABA   15                     DEC   d   ; remove initial inc
0ABB                PARSEARGS5:      
0ABB   23                     INC   hl   
0ABC   22 EA 1B               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0ABF   E1                     POP   hl   ; hl = start of arg_list
0AC0   72                     LD   (hl),d   ; write number of locals at start - 1
0AC1   23                     INC   hl   
0AC2   73                     LD   (hl),e   ; write number of args + locals at start - 2
0AC3   2B                     DEC   hl   
0AC4   E3                     EX   (sp),hl   
0AC5   E9                     JP   (hl)   
0AC6                             ; create block: parses block e.g. 00bbIC4uLi4g
0AC6                             ; -- block*
0AC6                PARSEBLOCK:      
0AC6   C5                     PUSH   bc   ; return pointer to first { of block
0AC7   03                     INC   bc   
0AC8   16 01                  LD   d,1   ; nesting: count first parenthesis
0ACA                PARSEBLOCK1:      ; Skip to end of definition
0ACA   0A                     LD   a,(bc)   ; Get the next character
0ACB   03                     INC   bc   ; Point to next character
0ACC   FE 21                  CP   " " + 1   ; ignore whitespace
0ACE   38 FA                  JR   c,parseBlock1   
0AD0   FE 27                  CP   "'"   ; quote char
0AD2   28 0F                  JR   z,parseBlock2   
0AD4   FE 22                  CP   DQ   ; double quote char
0AD6   28 0B                  JR   z,parseBlock2   
0AD8   FE 60                  CP   "`"   ; grave char
0ADA   28 07                  JR   z,parseBlock2   
0ADC   CB 7A                  BIT   7,d   
0ADE   20 EA                  JR   nz,parseBlock1   
0AE0   C3 E9 0A               JP   parseBlock3   
0AE3                PARSEBLOCK2:      
0AE3   3E 80                  LD   a,$80   
0AE5   AA                     XOR   d   
0AE6   57                     LD   d,a   
0AE7   18 E1                  JR   parseBlock1   
0AE9                PARSEBLOCK3:      
0AE9   FE 28                  CP   "("   
0AEB   28 16                  JR   z,parseBlock4   
0AED   FE 7B                  CP   "{"   
0AEF   28 12                  JR   z,parseBlock4   
0AF1   FE 5B                  CP   "["   
0AF3   28 0E                  JR   z,parseBlock4   
0AF5   FE 29                  CP   ")"   
0AF7   28 0D                  JR   z,parseBlock5   
0AF9   FE 7D                  CP   "}"   
0AFB   28 09                  JR   z,parseBlock5   
0AFD   FE 5D                  CP   "]"   
0AFF   28 05                  JR   z,parseBlock5   
0B01   18 C7                  JR   parseBlock1   
0B03                PARSEBLOCK4:      
0B03   14                     INC   d   
0B04   18 C4                  JR   parseBlock1   
0B06                PARSEBLOCK5:      
0B06   15                     DEC   d   
0B07   20 C1                  JR   nz,parseBlock1   ; get the next element
0B09   60 69                  LD   hl,bc   ; hl = IP
0B0B   11 26 1C               LD   de,HEAP   ; is IP pointing to object in heap
0B0E   B7                     OR   a   ; IP - HEAP
0B0F   ED 52                  SBC   hl,de   
0B11   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0B13   28 1C                  JR   z,parseBlock6   
0B15   60 69                  LD   hl,bc   ; hl = IP
0B17   D1                     POP   de   ; de = block*
0B18   ED 43 08 1C            LD   (vTemp1),bc   ; save IP
0B1C   B7                     OR   a   ; bc = size
0B1D   ED 52                  SBC   hl,de   
0B1F   44 4D                  LD   bc,hl   
0B21   EB                     EX   de,hl   ; hl = block* de = heap*
0B22   ED 5B EA 1B            LD   de,(vHeapPtr)   
0B26   D5                     PUSH   de   ; return hblock*
0B27   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0B29   ED 53 EA 1B            LD   (vHeapPtr),de   ; heap* += size
0B2D   ED 4B 08 1C            LD   bc,(vTemp1)   ; restore IP
0B31                PARSEBLOCK6:      
0B31   0B                     DEC   bc   ; balanced, exit
0B32   E1                     POP   hl   ; hl = block*
0B33   E3                     EX   (sp),hl   ; return to caller
0B34   E9                     JP   (hl)   
0B35                             ; create function
0B35                             ; arg_list* block* -- func*
0B35                CREATEFUNC:      
0B35   E1                     POP   hl   ; save retrn address
0B36   22 0C 1C               LD   (vTemp3),hl   
0B39   ED 43 08 1C            LD   (vTemp1),bc   ; save IP
0B3D   E1                     POP   hl   ; hl = block*
0B3E   22 0A 1C               LD   (vTemp2),hl   ; save block*
0B41   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0B44   FD 56 05               LD   d,(iy+5)   
0B47   7B                     LD   a,e   ; if arg_list == null then make a func
0B48   B2                     OR   d   
0B49   20 09                  JR   nz,createFunc0   
0B4B   21 00 00               LD   hl,0   ; partial_array = null
0B4E   ED 5B EA 1B            LD   de,(vHeapPtr)   ; de = compile*
0B52   18 65                  JR   createFunc5   
0B54                CREATEFUNC0:      
0B54   E1                     POP   hl   ; hl = inner_arg_list*
0B55   E5                     PUSH   hl   ; save inner_arg_list
0B56   ED 5B EA 1B            LD   de,(vHeapPtr)   ; de = compile*
0B5A   7E                     LD   a,(hl)   ; compile inner_num_locals
0B5B   4F                     LD   c,a   ; b = inner_num_locals
0B5C   12                     LD   (de),a   
0B5D   23                     INC   hl   
0B5E   13                     INC   de   
0B5F   7E                     LD   a,(hl)   ; compile inner_length
0B60   12                     LD   (de),a   
0B61   91                     SUB   c   ; a = inner_num args
0B62   23                     INC   hl   
0B63   13                     INC   de   
0B64   B7                     OR   a   ; compile args if inner_length > 0
0B65   28 05                  JR   z,createFunc1   
0B67   4F                     LD   c,a   ; bc = a
0B68   06 00                  LD   b,0   
0B6A   ED B0                  LDIR      
0B6C                CREATEFUNC1:      
0B6C   EB                     EX   de,hl   ; hl = outer_arg_list
0B6D   FD 5E 04               LD   e,(iy+4)   
0B70   FD 56 05               LD   d,(iy+5)   
0B73   EB                     EX   de,hl   
0B74   23                     INC   hl   ; a = outer_length
0B75   7E                     LD   a,(hl)   
0B76   23                     INC   hl   
0B77   B7                     OR   a   
0B78   28 05                  JR   z,createFunc2   
0B7A   4F                     LD   c,a   
0B7B   06 00                  LD   b,0   
0B7D   ED B0                  LDIR      ; append outer_args
0B7F                CREATEFUNC2:      ; a = outer_length
0B7F   47                     LD   b,a   ; b = a = outer_length
0B80   2A EA 1B               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0B83   23                     INC   hl   
0B84   7E                     LD   a,(hl)   ; add outer_length to new length
0B85   80                     ADD   a,b   
0B86   77                     LD   (hl),a   
0B87   2B                     DEC   hl   
0B88   78                     LD   a,b   ; save outer_length in a'
0B89   08                     EX   af,af'   
0B8A   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0B8B   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0B8C   B7                     OR   a   
0B8D   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0B8F   4F                     LD   c,a   ; c = inner_num_locals
0B90   06 00                  LD   b,0   ; bc = inner_num_locals
0B92   23                     INC   hl   ; a = inner_length
0B93   7E                     LD   a,(hl)   
0B94   91                     SUB   c   ; a = inner_num_args
0B95   23                     INC   hl   ; hl = inner_arg_chars
0B96   85                     ADD   a,l   ; hl += a
0B97   6F                     LD   l,a   
0B98   3E 00                  LD   a,0   
0B9A   84                     ADD   a,h   
0B9B   67                     LD   h,a   
0B9C   ED B0                  LDIR      ; append inner_locals
0B9E                CREATEFUNC2A:      
0B9E   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0B9F   12                     LD   (de),a   ; compile partial_array length field
0BA0   13                     INC   de   
0BA1   AF                     XOR   a   
0BA2   12                     LD   (de),a   
0BA3   13                     INC   de   
0BA4   D5                     PUSH   de   ; push partial_array*
0BA5   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0BA6   FD 5E 02               LD   e,(iy+2)   
0BA9   FD 56 03               LD   d,(iy+3)   
0BAC   EB                     EX   de,hl   
0BAD                CREATEFUNC3:      
0BAD   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0BAE   4E                     LD   c,(hl)   
0BAF   2B                     DEC   hl   
0BB0   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0BB1   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0BB2   13                     INC   de   
0BB3   79                     LD   a,c   
0BB4   12                     LD   (de),a   
0BB5   13                     INC   de   
0BB6   10 F5                  DJNZ   createFunc3   ; b = outer_length
0BB8                CREATEFUNC4:      
0BB8   E1                     POP   hl   ; hl = partial_array*
0BB9                CREATEFUNC5:      
0BB9   C1                     POP   bc   ; bc = new_arg_list*
0BBA   D5                     PUSH   de   ; return new func*
0BBB   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0BBC   73                     LD   (hl),e   ; compile partial_array* to func
0BBD   23                     INC   hl   
0BBE   72                     LD   (hl),d   
0BBF   23                     INC   hl   
0BC0   ED 5B 0A 1C            LD   de,(vTemp2)   ; de = block*
0BC4   73                     LD   (hl),e   ; compile block* to func
0BC5   23                     INC   hl   
0BC6   72                     LD   (hl),d   
0BC7   23                     INC   hl   
0BC8   71                     LD   (hl),c   ; compile new_arg_list* to func
0BC9   23                     INC   hl   
0BCA   70                     LD   (hl),b   
0BCB   23                     INC   hl   
0BCC   22 EA 1B               LD   (vHeapPtr),hl   ; bump heap ptr
0BCF   ED 4B 08 1C            LD   bc,(vTemp1)   ; restore IP
0BD3   2A 0C 1C               LD   hl,(vTemp3)   ; jump to return address
0BD6   E9                     JP   (hl)   
0BD7                             ;*******************************************************************
0BD7                             ; general routines
0BD7                             ;*******************************************************************
0BD7                             ; hl = address
0BD7                VARIABLE:      
0BD7   22 FA 1B               LD   (vPointer),hl   
0BDA   5E                     LD   e,(hl)   
0BDB   3A F0 1B               LD   a,(vDataWidth)   
0BDE   3D                     DEC   a   
0BDF   16 00                  LD   d,0   
0BE1   28 03                  JR   z,constant   
0BE3   23                     INC   hl   
0BE4   56                     LD   d,(hl)   
0BE5   2B                     DEC   hl   
0BE6                CONSTANT:      
0BE6   D5                     PUSH   de   
0BE7   DD E9                  JP   (ix)   
0BE9                             ; followed by a table
0BE9                             ; indexed on the 0-25 lowercase letter
0BE9                             ; db lsb(addr)
0BE9                             ; the final item index 26 matches any other char
0BE9                CHARTABLE:      
0BE9   03                     INC   bc   
0BEA   0A                     LD   a,(bc)   
0BEB   FE 7B                  CP   "z"+1   
0BED   30 10                  JR   nc,charTable3   
0BEF   D6 61                  SUB   "a"   
0BF1   38 0C                  JR   c,charTable3   
0BF3                CHARTABLE1:      
0BF3   E1                     POP   hl   
0BF4   85                     ADD   a,l   
0BF5   6F                     LD   l,a   
0BF6   7E                     LD   a,(hl)   ; must have the same msb as the table
0BF7   B7                     OR   a   ; a = 0, nop
0BF8   20 03                  JR   nz,charTable2   
0BFA   C3 37 07               JP   error1   
0BFD                CHARTABLE2:      
0BFD   6F                     LD   l,a   
0BFE   E9                     JP   (hl)   
0BFF                CHARTABLE3:      
0BFF   3E 1A                  LD   a,26   
0C01   0B                     DEC   bc   
0C02   18 EF                  JR   charTable1   
0C04                             ; 8-bit hash string
0C04                             ; bc = str
0C04                             ; a = hash
0C04                IDENTHASH:      
0C04   16 00                  LD   d,0   
0C06                IDENTHASH1:      
0C06   0A                     LD   a,(bc)   ; e = a = char
0C07   FE 21                  CP   " "+1   ; is a = white space
0C09   30 03                  JR   nc,identHash2   
0C0B   0B                     DEC   bc   
0C0C   7A                     LD   a,d   
0C0D   C9                     RET      
0C0E                IDENTHASH2:      ; not white space
0C0E   D6 61                  SUB   "a"   
0C10   5F                     LD   e,a   
0C11   7A                     LD   a,d   ; a = d = hash
0C12   87                     ADD   a,a   ; a *= 4
0C13   87                     ADD   a,a   
0C14   83                     ADD   a,e   ; a += char
0C15   57                     LD   d,a   ; d = a
0C16   03                     INC   bc   ; ip++
0C17   18 ED                  JR   identHash1   
0C19                             ; a = index
0C19                             ; hl = default
0C19                COMMANDTABLE:      
0C19   E3                     EX   (sp),hl   ; hl = table* (sp) = default*
0C1A   54                     LD   d,h   ; d = msb(table*) + 1
0C1B   14                     INC   d   
0C1C   FE 80                  CP   $80   ; index > $80
0C1E   38 01                  JR   c,commandTable2   
0C20   14                     INC   d   ; d = msb(table*) + 2
0C21                COMMANDTABLE2:      
0C21   85                     ADD   a,l   ; hl = dest**
0C22   6F                     LD   l,a   
0C23   5E                     LD   e,(hl)   ; e = lsb(dest*)
0C24   B7                     OR   a   ; if zero use default*
0C25   C8                     RET   z   
0C26   EB                     EX   de,hl   ; hl = dest*
0C27   D1                     POP   de   ; pop default*
0C28   E9                     JP   (hl)   
0C29                GETVARADDR:      
0C29   21 00 00               LD   hl,0   
0C2C   FE 7B                  CP   "z"+1   ; if a > z then exit
0C2E   D0                     RET   nc   
0C2F   D6 41                  SUB   "A"   ; a - 65
0C31   D8                     RET   c   ; if < A then exit
0C32   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0C34   38 05                  JR   c,getVarAddr1   
0C36   D6 06                  SUB   "a"-("Z"+1)   
0C38   FE 1A                  CP   "Z"-"A"+1   
0C3A   D8                     RET   c   ; if < a then exit
0C3B                GETVARADDR1:      
0C3B   87                     ADD   a,a   ; double a
0C3C   6F                     LD   l,a   
0C3D   26 1B                  LD   h,msb(VARS)   
0C3F   C9                     RET      
0C40                PUTSTR0:      
0C40   CD 85 00               CALL   putchar   
0C43   23                     INC   hl   
0C44                PUTSTR:      
0C44   7E                     LD   a,(hl)   
0C45   B7                     OR   a   
0C46   20 F8                  JR   nz,putstr0   
0C48   C9                     RET      
0C49                             ; hl = value
0C49                             ; de = buffer*
0C49                             ; a, bc, de, hl destroyed
0C49                FORMATDEC0:      
0C49   E5                     PUSH   hl   
0C4A   D9                     EXX      
0C4B   E1                     POP   hl   
0C4C                             ; hl = value
0C4C                             ; de' = buffer*
0C4C                             ; a, bc, de, hl destroyed
0C4C                FORMATDEC:      
0C4C   CB 7C                  BIT   7,h   
0C4E   28 0C                  JR   z,formatDec2   
0C50   D9                     EXX      
0C51   3E 2D                  LD   a,"-"   
0C53   12                     LD   (de),a   
0C54   13                     INC   de   
0C55   D9                     EXX      
0C56   AF                     XOR   a   
0C57   95                     SUB   l   
0C58   6F                     LD   l,a   
0C59   9F                     SBC   a,a   
0C5A   94                     SUB   h   
0C5B   67                     LD   h,a   
0C5C                FORMATDEC2:      
0C5C   0E 00                  LD   c,0   ; leading zeros flag = false
0C5E   11 F0 D8               LD   de,-10000   
0C61   CD 7C 0C               CALL   formatDec4   
0C64   11 18 FC               LD   de,-1000   
0C67   CD 7C 0C               CALL   formatDec4   
0C6A   11 9C FF               LD   de,-100   
0C6D   CD 7C 0C               CALL   formatDec4   
0C70   1E F6                  LD   e,-10   
0C72   CD 7C 0C               CALL   formatDec4   
0C75   0C                     INC   c   ; flag = true for at least digit
0C76   1E FF                  LD   e,-1   
0C78   CD 7C 0C               CALL   formatDec4   
0C7B   C9                     RET      
0C7C                FORMATDEC4:      
0C7C   06 2F                  LD   b,"0"-1   
0C7E                FORMATDEC5:      
0C7E   04                     INC   b   
0C7F   19                     ADD   hl,de   
0C80   38 FC                  JR   c,formatDec5   
0C82   ED 52                  SBC   hl,de   
0C84   3E 30                  LD   a,"0"   
0C86   B8                     CP   b   
0C87   20 05                  JR   nz,formatDec6   
0C89   AF                     XOR   a   
0C8A   B1                     OR   c   
0C8B   C8                     RET   z   
0C8C   18 01                  JR   formatDec7   
0C8E                FORMATDEC6:      
0C8E   0C                     INC   c   
0C8F                FORMATDEC7:      
0C8F   78                     LD   a,b   
0C90   D9                     EXX      
0C91   12                     LD   (de),a   
0C92   13                     INC   de   
0C93   D9                     EXX      
0C94   C9                     RET      
0C95                             ; **************************************************************************
0C95                             ; calculate nesting value
0C95                             ; a is char to be tested,
0C95                             ; e is the nesting value (initially 0)
0C95                             ; e is increased by ( and [
0C95                             ; e is decreased by ) and ]
0C95                             ; e has its bit 7 toggled by `
0C95                             ; limited to 127 levels
0C95                             ; **************************************************************************
0C95                NESTING:      
0C95   FE 27                  CP   "'"   ; quote char
0C97   28 0A                  JR   z,nesting0   
0C99   FE 22                  CP   DQ   ; double quote char
0C9B   28 06                  JR   z,nesting0   
0C9D   FE 60                  CP   "`"   ; grave char
0C9F   28 02                  JR   z,nesting0   
0CA1   18 0A                  JR   nesting1   
0CA3                NESTING0:      
0CA3   CB 7B                  BIT   7,e   
0CA5   28 03                  JR   z,nesting1a   
0CA7   CB BB                  RES   7,e   
0CA9   C9                     RET      
0CAA                NESTING1A:      
0CAA   CB FB                  SET   7,e   
0CAC   C9                     RET      
0CAD                NESTING1:      
0CAD   CB 7B                  BIT   7,e   
0CAF   C0                     RET   nz   
0CB0   FE 7B                  CP   "{"   
0CB2   28 08                  JR   z,nesting2   
0CB4   FE 5B                  CP   "["   
0CB6   28 04                  JR   z,nesting2   
0CB8   FE 28                  CP   "("   
0CBA   20 02                  JR   nz,nesting3   
0CBC                NESTING2:      
0CBC   1C                     INC   e   
0CBD   C9                     RET      
0CBE                NESTING3:      
0CBE   FE 7D                  CP   "}"   
0CC0   28 07                  JR   z,nesting4   
0CC2   FE 5D                  CP   "]"   
0CC4   28 03                  JR   z,nesting4   
0CC6   FE 29                  CP   ")"   
0CC8   C0                     RET   nz   
0CC9                NESTING4:      
0CC9   1D                     DEC   e   
0CCA   C9                     RET      
0CCB                PROMPT:      
0CCB   CD DB 0C               CALL   printStr   
0CCE   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0CD3   C9                     RET      
0CD4                CRLF:        
0CD4   CD DB 0C               CALL   printStr   
0CD7   0D 0A 00               .CSTR   "\r\n"   
0CDA   C9                     RET      
0CDB                             ; prints a null teminated string
0CDB                             ; the string should be immediately following the call
0CDB                PRINTSTR:      
0CDB   E3                     EX   (sp),hl   ; swap			
0CDC   CD 44 0C               CALL   putstr   
0CDF   23                     INC   hl   ; inc past NUL
0CE0   E3                     EX   (sp),hl   ; put it back	
0CE1   C9                     RET      
0CE2                             ; hl = number to print in decimal
0CE2                PRINTNUM:      
0CE2   ED 5B E8 1B            LD   de,(vBufPtr)   ; de' = buffer*
0CE6   CD 49 0C               CALL   formatDec0   
0CE9   D9                     EXX      ; restore de = buffer*
0CEA   3E 00                  LD   a,0   ; append NUL to buffer
0CEC   12                     LD   (de),a   
0CED   13                     INC   de   ; string*++,
0CEE   ED 53 E8 1B            LD   (vBufPtr),de   ; update buffer* with buffer*'
0CF2   21 00 1A               LD   hl,BUFFER   
0CF5   22 E8 1B               LD   (vBufPtr),hl   ; reset vBufPtr to vHeapPtr
0CF8   C3 44 0C               JP   putstr   
0CFB                             ; Compares two null terminated strings.
0CFB                             ; de = string1* hl = string2* -- bool
0CFB                             ; returns: hl = bool
0CFB                STRINGCOMPARE:      
0CFB                STRINGCOMPARE1:      
0CFB   1A                     LD   a,(de)   
0CFC   BE                     CP   (hl)   
0CFD   20 07                  JR   nz,stringCompare2   
0CFF   B7                     OR   a   
0D00   28 09                  JR   z,stringCompare3   
0D02   13                     INC   de   
0D03   23                     INC   hl   
0D04   18 F5                  JR   stringCompare1   
0D06                STRINGCOMPARE2:      
0D06   21 00 00               LD   hl,FALSE   
0D09   18 03                  JR   stringCompare4   
0D0B                STRINGCOMPARE3:      
0D0B   21 FF FF               LD   hl,TRUE   
0D0E                STRINGCOMPARE4:      
0D0E   E5                     PUSH   hl   
0D0F   C9                     RET      
0D10                             ; string length
0D10                             ; de = string*
0D10                             ; returns: hl = length
0D10                STRINGLENGTH:      
0D10   21 00 00               LD   hl,0   
0D13   18 02                  JR   stringLength2   
0D15                STRINGLENGTH1:      
0D15   13                     INC   de   
0D16   23                     INC   hl   
0D17                STRINGLENGTH2:      
0D17   1A                     LD   a,(de)   
0D18   B7                     OR   a   
0D19   20 FA                  JR   nz,stringLength1   
0D1B                STRINGLENGTH3:      
0D1B   C9                     RET      
0D1C                             ; 
0D1C                             ; MINTY interpreter
0D1C                             ; 
0D1C                INIT:        
0D1C   21 F0 01               LD   hl,titleStr   
0D1F   11 12 1C               LD   de,titleBuf   
0D22   06 14                  LD   b,20   
0D24                INIT1:       
0D24   1A                     LD   a,(de)   
0D25   BE                     CP   (hl)   
0D26   20 17                  JR   nz,coldBoot0   
0D28   13                     INC   de   
0D29   23                     INC   hl   
0D2A   10 F8                  DJNZ   init1   
0D2C                WARMINIT:      
0D2C   ED 4B FE 1B            LD   bc,(vSavedIP)   ; restore IP
0D30   ED 7B 00 1C            LD   sp,(vSavedDSP)   ; restore Data SP
0D34   FD 2A 02 1C            LD   iy,(vSavedRSP)   ; restore Return SP
0D38   DD 2A 04 1C            LD   ix,(vSavedNext)   ; restore Next
0D3C   C3 76 0D               JP   start1   
0D3F                COLDBOOT0:      
0D3F   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0D42   11 12 1C               LD   de,titleBuf   
0D45   06 14                  LD   b,20   
0D47   ED B0                  LDIR      
0D49                COLDINIT:      
0D49   21 DE 01               LD   hl,isysVars   
0D4C   11 E6 1B               LD   de,sysVars   
0D4F   01 12 00               LD   bc,4 * 2 + 10   
0D52   ED B0                  LDIR      
0D54   21 00 1B               LD   hl,vars   ; 52 vars LO HI
0D57   06 34                  LD   b,26*2   
0D59   AF                     XOR   a   
0D5A                COLDBOOT1:      
0D5A   77                     LD   (hl),a   
0D5B   23                     INC   hl   
0D5C   10 FC                  DJNZ   coldBoot1   
0D5E   DD 21 F2 0D            LD   ix,NEXT   
0D62   FD 21 00 17            LD   iy,STACK   
0D66   C9                     RET      
0D67                COLDSTART:      
0D67   31 00 17               LD   sp,STACK   
0D6A   CD 3F 0D               CALL   coldBoot0   
0D6D   C3 76 0D               JP   start1   
0D70                START:       
0D70   31 00 17               LD   sp,STACK   ; start MINTY
0D73   CD 1C 0D               CALL   init   ; setups
0D76                START1:      
0D76   21 12 1C               LD   hl,titleBuf   
0D79   CD 44 0C               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
0D7C                INTERPRET:      
0D7C   CD CB 0C               CALL   prompt   
0D7F   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0D82   21 00 19               LD   hl,TIB   
0D85   22 E6 1B               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0D88                INTERPRET2:      ; calculate nesting
0D88   1E 00                  LD   e,0   ; initilize nesting value
0D8A   C5                     PUSH   bc   ; save offset into TIB,
0D8B                             ; bc is also the count of chars in TIB
0D8B   21 00 19               LD   hl,TIB   ; hl is start of TIB
0D8E   18 06                  JR   interpret4   
0D90                INTERPRET3:      
0D90   7E                     LD   a,(hl)   ; a = char in TIB
0D91   23                     INC   hl   ; inc pointer into TIB
0D92   0B                     DEC   bc   ; dec count of chars in TIB
0D93   CD 95 0C               CALL   nesting   ; update nesting value
0D96                INTERPRET4:      
0D96   79                     LD   a,c   ; is count zero?
0D97   B0                     OR   b   
0D98   20 F6                  JR   nz,interpret3   ; if not loop
0D9A   C1                     POP   bc   ; restore offset into TIB
0D9B                INTERPRET5:      
0D9B   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0D9E   FE 20                  CP   $20   ; compare to space
0DA0   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0DA2   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0DA4   28 31                  JR   z,interpret8   
0DA6   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0DA8   28 1A                  JR   z,interpret7   ; if anything else its macro/control
0DAA   FE 08                  CP   CTRL_H   
0DAC   CA 28 0E               JP   z,backSpace_   
0DAF   FE 0A                  CP   CTRL_J   
0DB1   CA 38 0E               JP   z,reEdit_   
0DB4                INTERPRET5A:      
0DB4   18 D2                  JR   interpret2   
0DB6                INTERPRET6:      
0DB6   21 00 19               LD   hl,TIB   
0DB9   09                     ADD   hl,bc   
0DBA   77                     LD   (hl),a   ; store the character in textbuf
0DBB   03                     INC   bc   
0DBC   CD 85 00               CALL   putchar   ; echo character to screen
0DBF   CD 95 0C               CALL   nesting   
0DC2   18 D7                  JR   interpret5   ; wait for next character
0DC4                INTERPRET7:      
0DC4   21 00 19               LD   hl,TIB   
0DC7   09                     ADD   hl,bc   
0DC8   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0DCA   23                     INC   hl   
0DCB   36 0A                  LD   (hl),"\n"   
0DCD   23                     INC   hl   
0DCE   03                     INC   bc   
0DCF   03                     INC   bc   
0DD0   CD D4 0C               CALL   crlf   ; echo character to screen
0DD3   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0DD4   B7                     OR   a   
0DD5   20 C4                  JR   nz,interpret5   
0DD7                INTERPRET8:      
0DD7   21 00 19               LD   hl,TIB   
0DDA   09                     ADD   hl,bc   
0DDB   22 E6 1B               LD   (vTIBPtr),hl   
0DDE   01 00 19               LD   bc,TIB   
0DE1   ED 43 FE 1B            LD   (vSavedIP),bc   ; save IP
0DE5   ED 73 00 1C            LD   (vSavedDSP),sp   ; save Data SP
0DE9   FD 22 02 1C            LD   (vSavedRSP),iy   ; save Return SP
0DED   DD 22 04 1C            LD   (vSavedNext),ix   ; save Next
0DF1   0B                     DEC   bc   
0DF2                NEXT:        
0DF2   03                     INC   bc   ; Increment the IP
0DF3   0A                     LD   a,(bc)   ; Get the next character and dispatch
0DF4   FE 20                  CP   " "   ; whitespace?
0DF6   28 FA                  JR   z,next   ; space? ignore
0DF8   38 0D                  JR   c,next1   
0DFA   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0DFC   6F                     LD   l,a   ; index into table
0DFD   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0DFF   6E                     LD   l,(hl)   ; get low jump address
0E00   24                     INC   h   ; page 2
0E01   FE BA                  CP   "Z" - "!" + 1 + $80   
0E03   38 01                  JR   c,next0   
0E05   24                     INC   h   ; page 3
0E06                NEXT0:       
0E06   E9                     JP   (hl)   ; Jump to routine
0E07                NEXT1:       
0E07   FE 00                  CP   NUL   ; end of input string?
0E09   28 03                  JR   z,exit   
0E0B   C3 7C 0D               JP   interpret   ; no, other whitespace, macros?
0E0E                EXIT:        
0E0E   03                     INC   bc   
0E0F   60 69                  LD   hl,bc   
0E11   E9                     JP   (hl)   
0E12                RUN:         
0E12   C1                     POP   bc   
0E13   0B                     DEC   bc   
0E14   DD E9                  JP   (ix)   
0E16                ERROR:       
0E16   E5                     PUSH   hl   
0E17   CD 12 0E               CALL   run   
0E1A   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
0E25   C3 7C 0D               JP   interpret   
0E28                BACKSPACE_:      
0E28   79                     LD   a,c   
0E29   B0                     OR   b   
0E2A   CA 88 0D               JP   z,interpret2   
0E2D   0B                     DEC   bc   
0E2E   CD DB 0C               CALL   printStr   
0E31   08 20 08 00            .CSTR   "\b \b"   
0E35   C3 88 0D               JP   interpret2   
0E38                REEDIT_:      
0E38   CD DB 0C               CALL   printStr   
0E3B   0D 3E 20 00            .CSTR   "\r> "   
0E3F   21 00 19               LD   hl,TIB   
0E42   18 04                  JR   reEdit1   
0E44                REEDIT0:      
0E44   CD 85 00               CALL   putchar   
0E47   23                     INC   hl   
0E48                REEDIT1:      
0E48   7E                     LD   a,(hl)   
0E49   FE 0D                  CP   "\r"   
0E4B   20 F7                  JR   nz,reEdit0   
0E4D   11 00 19               LD   de,TIB   
0E50   B7                     OR   a   
0E51   ED 52                  SBC   hl,de   
0E53   44 4D                  LD   bc,hl   
0E55   C3 88 0D               JP   interpret2   
0E58                ANSIPRINTSEQ:      
0E58   CD DB 0C               CALL   printStr   
0E5B   1B 5B 00               DB   ESC,"[",0   
0E5E   C9                     RET      
0E5F                             ; clears screen and sets cursor to 0,0
0E5F                ANSICLEARSCREEN:      
0E5F   CD DB 0C               CALL   printStr   
0E62   1B 5B                  DB   ESC,"["   
0E64   32 4A 00               DB   "2J",0   ; falls through
0E67                             ; call ansiPrintStr
0E67                             ; .cstr "H"
0E67   C9                     RET      
0E68                             ; a = 0:toEnd 1:toStart 2:entireLine
0E68                ANSICLEARLINE:      
0E68   C6 30                  ADD   a,"0"   ; ascii
0E6A   08                     EX   af,af'   ; save a
0E6B   CD 58 0E               CALL   ansiPrintSeq   
0E6E   08                     EX   af,af'   ; restore
0E6F   CD 85 00               CALL   putChar   
0E72   3E 4B                  LD   a,"K"   
0E74   C3 85 00               JP   putChar   
0E77                             ; h = column, l = row
0E77                ANSIGOTO:      
0E77   D9                     EXX      ; save hl
0E78   CD 58 0E               CALL   ansiPrintSeq   
0E7B   D9                     EXX      ; restore hl
0E7C   7C                     LD   a,h   ; save column
0E7D   08                     EX   af,af'   
0E7E   26 00                  LD   h,0   ; print row
0E80   CD E2 0C               CALL   printNum   
0E83   3E 3B                  LD   a,";"   
0E85   CD 85 00               CALL   putChar   
0E88   08                     EX   af,af'   ; restore column
0E89   6C                     LD   l,h   ; print column
0E8A   26 00                  LD   h,0   
0E8C   CD E2 0C               CALL   printNum   
0E8F   3E 48                  LD   a,"H"   
0E91   C3 85 00               JP   putChar   
0E94                             ; h = "A":Up "B":Down "C":Forward "D":Back
0E94                             ; l = amount
0E94                ANSIMOVE:      
0E94   D9                     EXX      ; save hl
0E95   CD 58 0E               CALL   ansiPrintSeq   
0E98   D9                     EXX      ; restore hl
0E99   7C                     LD   a,h   
0E9A   08                     EX   af,af'   ; save a
0E9B   26 00                  LD   h,0   ; print amount
0E9D   CD E2 0C               CALL   printNum   
0EA0   08                     EX   af,af'   ; restore a
0EA1   C3 85 00               JP   putChar   ; print direction code
0EA4                             ; a = 0:normal 1:bold 2:low 4:underline 5:blink 7:reverse
0EA4                ANSITEXTSTYLE:      
0EA4   C6 30                  ADD   a,"0"   ; ascii
0EA6   08                     EX   af,af'   ; save a
0EA7   CD 58 0E               CALL   ansiPrintSeq   
0EAA   08                     EX   af,af'   ; restore
0EAB   CD 85 00               CALL   putChar   
0EAE   3E 6D                  LD   a,"m"   
0EB0   C3 85 00               JP   putChar   
0EB3                             ; a = "h":show "l":hide
0EB3                ANSICURSORSHOW:      
0EB3   08                     EX   af,af'   ; save a
0EB4   CD DB 0C               CALL   printStr   
0EB7   1B 5B                  DB   ESC,"["   
0EB9   3F 32 35 6C 00         DB   "?25l",0   
0EBE   08                     EX   af,af'   ; restore
0EBF   C3 85 00               JP   putChar   
0EC2                          ALIGN   $100   
0F00                TESTSSTART:      
0F00                             ; test "/f", false
0F00                             ; call printStr
0F00                             ; .cstr "Done!"
0F00                             ; HALT
0F00                          ;*Macro unroll:  test "/f", false
0F00   31 00 17               LD   SP,STACK   
0F03   CD 49 0D               CALL   coldInit   
0F06   CD E4 15               CALL   execStr   
0F09   2F 66 00               DB   "/f",0   
0F0C   E1                     POP   HL   
0F0D   E5                     PUSH   HL   
0F0E   11 00 00               LD   DE,false   
0F11   B7                     OR   A   
0F12   ED 52                  SBC   HL,DE   
0F14   7D                     LD   A,L   
0F15   B4                     OR   H   
0F16   CA 73 0F               JP   Z,expectM_2944S21   
0F19   CD DB 0C               CALL   printStr   
0F1C   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0F25   CD DB 0C               CALL   printStr   
0F28   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F37   21 00 00               LD   hl,false   
0F3A   E5                     PUSH   hl   
0F3B   E5                     PUSH   hl   
0F3C   CD 12 0E               CALL   run   
0F3F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
0F4B   CD DB 0C               CALL   printStr   
0F4E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F5B   E1                     POP   hl   
0F5C   E5                     PUSH   hl   
0F5D   E5                     PUSH   hl   
0F5E   CD 12 0E               CALL   run   
0F61   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
0F72   76                     HALT      
0F73                EXPECTM_2944S21:      
0F73   E1                     POP   HL   
0F74                          ;*Macro unroll:  test "/t", true
0F74   31 00 17               LD   SP,STACK   
0F77   CD 49 0D               CALL   coldInit   
0F7A   CD E4 15               CALL   execStr   
0F7D   2F 74 00               DB   "/t",0   
0F80   E1                     POP   HL   
0F81   E5                     PUSH   HL   
0F82   11 FF FF               LD   DE,true   
0F85   B7                     OR   A   
0F86   ED 52                  SBC   HL,DE   
0F88   7D                     LD   A,L   
0F89   B4                     OR   H   
0F8A   CA E7 0F               JP   Z,expectM_2945S22   
0F8D   CD DB 0C               CALL   printStr   
0F90   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0F99   CD DB 0C               CALL   printStr   
0F9C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FAB   21 FF FF               LD   hl,true   
0FAE   E5                     PUSH   hl   
0FAF   E5                     PUSH   hl   
0FB0   CD 12 0E               CALL   run   
0FB3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
0FBF   CD DB 0C               CALL   printStr   
0FC2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FCF   E1                     POP   hl   
0FD0   E5                     PUSH   hl   
0FD1   E5                     PUSH   hl   
0FD2   CD 12 0E               CALL   run   
0FD5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
0FE6   76                     HALT      
0FE7                EXPECTM_2945S22:      
0FE7   E1                     POP   HL   
0FE8                          ;*Macro unroll:  test "1", 1
0FE8   31 00 17               LD   SP,STACK   
0FEB   CD 49 0D               CALL   coldInit   
0FEE   CD E4 15               CALL   execStr   
0FF1   31 00                  DB   "1",0   
0FF3   E1                     POP   HL   
0FF4   E5                     PUSH   HL   
0FF5   11 01 00               LD   DE,1   
0FF8   B7                     OR   A   
0FF9   ED 52                  SBC   HL,DE   
0FFB   7D                     LD   A,L   
0FFC   B4                     OR   H   
0FFD   CA 59 10               JP   Z,expectM_2946S23   
1000   CD DB 0C               CALL   printStr   
1003   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
100B   CD DB 0C               CALL   printStr   
100E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
101D   21 01 00               LD   hl,1   
1020   E5                     PUSH   hl   
1021   E5                     PUSH   hl   
1022   CD 12 0E               CALL   run   
1025   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1031   CD DB 0C               CALL   printStr   
1034   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1041   E1                     POP   hl   
1042   E5                     PUSH   hl   
1043   E5                     PUSH   hl   
1044   CD 12 0E               CALL   run   
1047   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1058   76                     HALT      
1059                EXPECTM_2946S23:      
1059   E1                     POP   HL   
105A                          ;*Macro unroll:  test "2", 2
105A   31 00 17               LD   SP,STACK   
105D   CD 49 0D               CALL   coldInit   
1060   CD E4 15               CALL   execStr   
1063   32 00                  DB   "2",0   
1065   E1                     POP   HL   
1066   E5                     PUSH   HL   
1067   11 02 00               LD   DE,2   
106A   B7                     OR   A   
106B   ED 52                  SBC   HL,DE   
106D   7D                     LD   A,L   
106E   B4                     OR   H   
106F   CA CB 10               JP   Z,expectM_2947S24   
1072   CD DB 0C               CALL   printStr   
1075   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
107D   CD DB 0C               CALL   printStr   
1080   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
108F   21 02 00               LD   hl,2   
1092   E5                     PUSH   hl   
1093   E5                     PUSH   hl   
1094   CD 12 0E               CALL   run   
1097   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
10A3   CD DB 0C               CALL   printStr   
10A6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10B3   E1                     POP   hl   
10B4   E5                     PUSH   hl   
10B5   E5                     PUSH   hl   
10B6   CD 12 0E               CALL   run   
10B9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
10CA   76                     HALT      
10CB                EXPECTM_2947S24:      
10CB   E1                     POP   HL   
10CC                          ;*Macro unroll:  test "1", 1
10CC   31 00 17               LD   SP,STACK   
10CF   CD 49 0D               CALL   coldInit   
10D2   CD E4 15               CALL   execStr   
10D5   31 00                  DB   "1",0   
10D7   E1                     POP   HL   
10D8   E5                     PUSH   HL   
10D9   11 01 00               LD   DE,1   
10DC   B7                     OR   A   
10DD   ED 52                  SBC   HL,DE   
10DF   7D                     LD   A,L   
10E0   B4                     OR   H   
10E1   CA 3D 11               JP   Z,expectM_2948S25   
10E4   CD DB 0C               CALL   printStr   
10E7   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
10EF   CD DB 0C               CALL   printStr   
10F2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1101   21 01 00               LD   hl,1   
1104   E5                     PUSH   hl   
1105   E5                     PUSH   hl   
1106   CD 12 0E               CALL   run   
1109   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1115   CD DB 0C               CALL   printStr   
1118   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1125   E1                     POP   hl   
1126   E5                     PUSH   hl   
1127   E5                     PUSH   hl   
1128   CD 12 0E               CALL   run   
112B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
113C   76                     HALT      
113D                EXPECTM_2948S25:      
113D   E1                     POP   HL   
113E                          ;*Macro unroll:  test "0", 0
113E   31 00 17               LD   SP,STACK   
1141   CD 49 0D               CALL   coldInit   
1144   CD E4 15               CALL   execStr   
1147   30 00                  DB   "0",0   
1149   E1                     POP   HL   
114A   E5                     PUSH   HL   
114B   11 00 00               LD   DE,0   
114E   B7                     OR   A   
114F   ED 52                  SBC   HL,DE   
1151   7D                     LD   A,L   
1152   B4                     OR   H   
1153   CA AF 11               JP   Z,expectM_2949S26   
1156   CD DB 0C               CALL   printStr   
1159   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1161   CD DB 0C               CALL   printStr   
1164   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1173   21 00 00               LD   hl,0   
1176   E5                     PUSH   hl   
1177   E5                     PUSH   hl   
1178   CD 12 0E               CALL   run   
117B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1187   CD DB 0C               CALL   printStr   
118A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1197   E1                     POP   hl   
1198   E5                     PUSH   hl   
1199   E5                     PUSH   hl   
119A   CD 12 0E               CALL   run   
119D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
11AE   76                     HALT      
11AF                EXPECTM_2949S26:      
11AF   E1                     POP   HL   
11B0                          ;*Macro unroll:  test "10", 10
11B0   31 00 17               LD   SP,STACK   
11B3   CD 49 0D               CALL   coldInit   
11B6   CD E4 15               CALL   execStr   
11B9   31 30 00               DB   "10",0   
11BC   E1                     POP   HL   
11BD   E5                     PUSH   HL   
11BE   11 0A 00               LD   DE,10   
11C1   B7                     OR   A   
11C2   ED 52                  SBC   HL,DE   
11C4   7D                     LD   A,L   
11C5   B4                     OR   H   
11C6   CA 23 12               JP   Z,expectM_2950S27   
11C9   CD DB 0C               CALL   printStr   
11CC   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
11D5   CD DB 0C               CALL   printStr   
11D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11E7   21 0A 00               LD   hl,10   
11EA   E5                     PUSH   hl   
11EB   E5                     PUSH   hl   
11EC   CD 12 0E               CALL   run   
11EF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
11FB   CD DB 0C               CALL   printStr   
11FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
120B   E1                     POP   hl   
120C   E5                     PUSH   hl   
120D   E5                     PUSH   hl   
120E   CD 12 0E               CALL   run   
1211   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1222   76                     HALT      
1223                EXPECTM_2950S27:      
1223   E1                     POP   HL   
1224                          ;*Macro unroll:  test "123", 123
1224   31 00 17               LD   SP,STACK   
1227   CD 49 0D               CALL   coldInit   
122A   CD E4 15               CALL   execStr   
122D   31 32 33 00            DB   "123",0   
1231   E1                     POP   HL   
1232   E5                     PUSH   HL   
1233   11 7B 00               LD   DE,123   
1236   B7                     OR   A   
1237   ED 52                  SBC   HL,DE   
1239   7D                     LD   A,L   
123A   B4                     OR   H   
123B   CA 99 12               JP   Z,expectM_2951S28   
123E   CD DB 0C               CALL   printStr   
1241   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
124B   CD DB 0C               CALL   printStr   
124E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
125D   21 7B 00               LD   hl,123   
1260   E5                     PUSH   hl   
1261   E5                     PUSH   hl   
1262   CD 12 0E               CALL   run   
1265   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1271   CD DB 0C               CALL   printStr   
1274   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1281   E1                     POP   hl   
1282   E5                     PUSH   hl   
1283   E5                     PUSH   hl   
1284   CD 12 0E               CALL   run   
1287   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1298   76                     HALT      
1299                EXPECTM_2951S28:      
1299   E1                     POP   HL   
129A                          ;*Macro unroll:  test "-1",-1
129A   31 00 17               LD   SP,STACK   
129D   CD 49 0D               CALL   coldInit   
12A0   CD E4 15               CALL   execStr   
12A3   2D 31 00               DB   "-1",0   
12A6   E1                     POP   HL   
12A7   E5                     PUSH   HL   
12A8   11 FF FF               LD   DE,-1   
12AB   B7                     OR   A   
12AC   ED 52                  SBC   HL,DE   
12AE   7D                     LD   A,L   
12AF   B4                     OR   H   
12B0   CA 0D 13               JP   Z,expectM_2952S29   
12B3   CD DB 0C               CALL   printStr   
12B6   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
12BF   CD DB 0C               CALL   printStr   
12C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12D1   21 FF FF               LD   hl,-1   
12D4   E5                     PUSH   hl   
12D5   E5                     PUSH   hl   
12D6   CD 12 0E               CALL   run   
12D9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
12E5   CD DB 0C               CALL   printStr   
12E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12F5   E1                     POP   hl   
12F6   E5                     PUSH   hl   
12F7   E5                     PUSH   hl   
12F8   CD 12 0E               CALL   run   
12FB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
130C   76                     HALT      
130D                EXPECTM_2952S29:      
130D   E1                     POP   HL   
130E                          ;*Macro unroll:  test "-1/abs",1
130E   31 00 17               LD   SP,STACK   
1311   CD 49 0D               CALL   coldInit   
1314   CD E4 15               CALL   execStr   
1317   2D 31 2F 61 62 73 00   DB   "-1/abs",0   
131E   E1                     POP   HL   
131F   E5                     PUSH   HL   
1320   11 01 00               LD   DE,1   
1323   B7                     OR   A   
1324   ED 52                  SBC   HL,DE   
1326   7D                     LD   A,L   
1327   B4                     OR   H   
1328   CA 89 13               JP   Z,expectM_2953S30   
132B   CD DB 0C               CALL   printStr   
132E   43 6F 64 65 3A 20 2D 31 2F 61 62 73 00 .CSTR   "Code: ","-1/abs"   
133B   CD DB 0C               CALL   printStr   
133E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
134D   21 01 00               LD   hl,1   
1350   E5                     PUSH   hl   
1351   E5                     PUSH   hl   
1352   CD 12 0E               CALL   run   
1355   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1361   CD DB 0C               CALL   printStr   
1364   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1371   E1                     POP   hl   
1372   E5                     PUSH   hl   
1373   E5                     PUSH   hl   
1374   CD 12 0E               CALL   run   
1377   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1388   76                     HALT      
1389                EXPECTM_2953S30:      
1389   E1                     POP   HL   
138A                          ;*Macro unroll:  test "_a", $61
138A   31 00 17               LD   SP,STACK   
138D   CD 49 0D               CALL   coldInit   
1390   CD E4 15               CALL   execStr   
1393   5F 61 00               DB   "_a",0   
1396   E1                     POP   HL   
1397   E5                     PUSH   HL   
1398   11 61 00               LD   DE,$61   
139B   B7                     OR   A   
139C   ED 52                  SBC   HL,DE   
139E   7D                     LD   A,L   
139F   B4                     OR   H   
13A0   CA FD 13               JP   Z,expectM_2954S31   
13A3   CD DB 0C               CALL   printStr   
13A6   43 6F 64 65 3A 20 5F 61 00 .CSTR   "Code: ","_a"   
13AF   CD DB 0C               CALL   printStr   
13B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13C1   21 61 00               LD   hl,$61   
13C4   E5                     PUSH   hl   
13C5   E5                     PUSH   hl   
13C6   CD 12 0E               CALL   run   
13C9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
13D5   CD DB 0C               CALL   printStr   
13D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13E5   E1                     POP   hl   
13E6   E5                     PUSH   hl   
13E7   E5                     PUSH   hl   
13E8   CD 12 0E               CALL   run   
13EB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
13FC   76                     HALT      
13FD                EXPECTM_2954S31:      
13FD   E1                     POP   HL   
13FE                          ;*Macro unroll:  test "__", $5F
13FE   31 00 17               LD   SP,STACK   
1401   CD 49 0D               CALL   coldInit   
1404   CD E4 15               CALL   execStr   
1407   5F 5F 00               DB   "__",0   
140A   E1                     POP   HL   
140B   E5                     PUSH   HL   
140C   11 5F 00               LD   DE,$5F   
140F   B7                     OR   A   
1410   ED 52                  SBC   HL,DE   
1412   7D                     LD   A,L   
1413   B4                     OR   H   
1414   CA 71 14               JP   Z,expectM_2955S32   
1417   CD DB 0C               CALL   printStr   
141A   43 6F 64 65 3A 20 5F 5F 00 .CSTR   "Code: ","__"   
1423   CD DB 0C               CALL   printStr   
1426   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1435   21 5F 00               LD   hl,$5F   
1438   E5                     PUSH   hl   
1439   E5                     PUSH   hl   
143A   CD 12 0E               CALL   run   
143D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1449   CD DB 0C               CALL   printStr   
144C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1459   E1                     POP   hl   
145A   E5                     PUSH   hl   
145B   E5                     PUSH   hl   
145C   CD 12 0E               CALL   run   
145F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1470   76                     HALT      
1471                EXPECTM_2955S32:      
1471   E1                     POP   HL   
1472                          ;*Macro unroll:  test "$10", $10
1472   31 00 17               LD   SP,STACK   
1475   CD 49 0D               CALL   coldInit   
1478   CD E4 15               CALL   execStr   
147B   24 31 30 00            DB   "$10",0   
147F   E1                     POP   HL   
1480   E5                     PUSH   HL   
1481   11 10 00               LD   DE,$10   
1484   B7                     OR   A   
1485   ED 52                  SBC   HL,DE   
1487   7D                     LD   A,L   
1488   B4                     OR   H   
1489   CA E7 14               JP   Z,expectM_2956S33   
148C   CD DB 0C               CALL   printStr   
148F   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
1499   CD DB 0C               CALL   printStr   
149C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14AB   21 10 00               LD   hl,$10   
14AE   E5                     PUSH   hl   
14AF   E5                     PUSH   hl   
14B0   CD 12 0E               CALL   run   
14B3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
14BF   CD DB 0C               CALL   printStr   
14C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14CF   E1                     POP   hl   
14D0   E5                     PUSH   hl   
14D1   E5                     PUSH   hl   
14D2   CD 12 0E               CALL   run   
14D5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
14E6   76                     HALT      
14E7                EXPECTM_2956S33:      
14E7   E1                     POP   HL   
14E8                          ;*Macro unroll:  test "$FF", $FF
14E8   31 00 17               LD   SP,STACK   
14EB   CD 49 0D               CALL   coldInit   
14EE   CD E4 15               CALL   execStr   
14F1   24 46 46 00            DB   "$FF",0   
14F5   E1                     POP   HL   
14F6   E5                     PUSH   HL   
14F7   11 FF 00               LD   DE,$FF   
14FA   B7                     OR   A   
14FB   ED 52                  SBC   HL,DE   
14FD   7D                     LD   A,L   
14FE   B4                     OR   H   
14FF   CA 5D 15               JP   Z,expectM_2957S34   
1502   CD DB 0C               CALL   printStr   
1505   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
150F   CD DB 0C               CALL   printStr   
1512   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1521   21 FF 00               LD   hl,$FF   
1524   E5                     PUSH   hl   
1525   E5                     PUSH   hl   
1526   CD 12 0E               CALL   run   
1529   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1535   CD DB 0C               CALL   printStr   
1538   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1545   E1                     POP   hl   
1546   E5                     PUSH   hl   
1547   E5                     PUSH   hl   
1548   CD 12 0E               CALL   run   
154B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
155C   76                     HALT      
155D                EXPECTM_2957S34:      
155D   E1                     POP   HL   
155E                          ;*Macro unroll:  test "-1 2 +",1
155E   31 00 17               LD   SP,STACK   
1561   CD 49 0D               CALL   coldInit   
1564   CD E4 15               CALL   execStr   
1567   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
156E   E1                     POP   HL   
156F   E5                     PUSH   HL   
1570   11 01 00               LD   DE,1   
1573   B7                     OR   A   
1574   ED 52                  SBC   HL,DE   
1576   7D                     LD   A,L   
1577   B4                     OR   H   
1578   CA D9 15               JP   Z,expectM_2958S35   
157B   CD DB 0C               CALL   printStr   
157E   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
158B   CD DB 0C               CALL   printStr   
158E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
159D   21 01 00               LD   hl,1   
15A0   E5                     PUSH   hl   
15A1   E5                     PUSH   hl   
15A2   CD 12 0E               CALL   run   
15A5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
15B1   CD DB 0C               CALL   printStr   
15B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15C1   E1                     POP   hl   
15C2   E5                     PUSH   hl   
15C3   E5                     PUSH   hl   
15C4   CD 12 0E               CALL   run   
15C7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
15D8   76                     HALT      
15D9                EXPECTM_2958S35:      
15D9   E1                     POP   HL   
15DA                             ; test "-1 1 +",0
15DA                             ; test "1 2 +", 3
15DA                             ; test "4 1 2 +", 3
15DA                             ; test "123 456 +", 123+456
15DA                             ; test "64 128 +", 64+128
15DA                             ; test "1 2 +", 3
15DA                             ; test "1a= a++ a",2
15DA                             ; test "-1 -1 -",0
15DA                             ; test "5 3 -", 2
15DA                             ; test "2 1 -",1
15DA                             ; test "3a= a-- a",2
15DA                             ; test "3 5 &", 1
15DA                             ; test "3 5 |", 7
15DA                             ; test "3 5 /xor", 6
15DA                             ; test "3a= 5 a/xor a= a",6
15DA                             ; test "0 !", true
15DA                             ; test "2 !", false
15DA                             ; test "0 !!", false
15DA                             ; test "2 !!", true
15DA                             ; test "2 3 *", 6
15DA                             ; test "1 2 3 + *", 5
15DA                             ; test "7 3 /", 2
15DA                             ; test "100a= 1a+= a", 101
15DA                             ; test "100a= 1a-= a", 99
15DA                             ; test "100a= 2a*= a", 200
15DA                             ; test "100a= 2 a/= a", 50
15DA                             ; test "2a= 3b= a b+= b", 5
15DA                             ; test "2a= 3b= a b-= b", 1
15DA                             ; test "2a= 3b= a b*= b", 6
15DA                             ; test "2a= 6b= a b/= b", 3
15DA                             ; test "$55a= $AAa&= a",0
15DA                             ; test "$55a= $AAa|= a",$FF
15DA                             ; test "$A5a= $AAa /xor= a",$0F
15DA                             ; test "$00AA~",$FF55
15DA                             ; test "$AAAAa= a~= a",$5555
15DA                             ; test "3x= 1 x <<= x", 6
15DA                             ; test "10x= 1 x >>= x", 5
15DA                             ; test "7 3 / /rem", 1
15DA                             ; test "7 3 /", 2
15DA                             ; test "2 3 ==", FALSE
15DA                             ; test "3 3 ==", TRUE
15DA                             ; test "1 2 <", TRUE
15DA                             ; test "2 1 <", FALSE
15DA                             ; test "2 3 <", TRUE
15DA                             ; test "3 3 <", FALSE
15DA                             ; test "1 2 >", FALSE
15DA                             ; test "2 1 >", TRUE
15DA                             ; test "3 3 >", FALSE
15DA                             ; test "4 3 >", TRUE
15DA                             ; test "2 2 <=", TRUE
15DA                             ; test "2 2 >=", TRUE
15DA                             ; test "3 1 <<", 6
15DA                             ; test "10 1 >>", 5
15DA                             ; test "1 x = x", 1
15DA                             ; test "1{}^", 1
15DA                             ; test "{1}^", 1
15DA                             ; test "{{1}^}^", 1
15DA                             ; test "{{{1}^}^}^", 1
15DA                             ; test "1 /f{10}{20} ? +", 21
15DA                             ; test "1 /t{10}{20} ? +", 11
15DA                             ; test "\\{2}^", 2
15DA                             ; test "\\a{2}^", 2
15DA                             ; test "5 \\a{%a}^", 5
15DA                             ; test "5 \\a:b{%a}^", 5
15DA                             ; test "\\a{{2}^}^", 2
15DA                             ; test "1 5 \\a{{%a}^}^", 5
15DA                             ; test "1 5 \\ab{{%a}^}^", 1
15DA                             ; test "1 5 \\a{{%a 2 +}^}^", 7
15DA                             ; test "1 5 \\ab{{%a %b +}^}^", 6
15DA                             ; test "\\a{2} x= 1 x^", 2
15DA                             ; test "\\a{%a} x= 0 1 x^", 1
15DA                             ; test "\\ab{%b} x= 1 2 x^", 2
15DA                             ; test "\\a:b{%a} x= 1 2 x^", 2
15DA                             ; test "\\ab{%b} x= 1 2 x^", 2
15DA                             ; test "\\ab{%b %a} x= 10 15 x^ -", 5
15DA                             ; test "\\a:b{2} x= 1 x^", 2
15DA                             ; test "\\:b{100 %b = %b} x= x^", 100
15DA                             ; test "\\a:b{1 %b = %b} x= 2 x^", 1
15DA                             ; test "\\a:b{%a %b = %b} x= 2 x^", 2
15DA                             ; test "1 10 20 \\ab{/t {%a}{%b} ?}^ +", 11
15DA                             ; test "1 10 20 \\ab{/f {%a}{%b} ?}^ +", 21
15DA                             ; test "[10 20 30] 1;", 20
15DA                             ; test "[10 20 30 40] /aln", 4
15DA                             ; test "/byt [1 2 3] 1;", 2
15DA                             ; test "/byt [_A _B _C] 1;", 66
15DA                             ; test "[{10}{20}{30}] 0;^ ", 10
15DA                             ; test "10 20 \\ab{[{%a}{%b}] 0;^}^", 10
15DA                             ; test "0 10 20 \\iab{[{%a}{%b}] %i;^}^", 10
15DA                             ; test "1 10 20 \\iab{[{%a}{%b}] %i;^}^", 20
15DA                             ; test "3i= ( i i-- i/whi )^ + +", 6
15DA                             ; test "3i= [ ( i i-- i/whi )^ ] 1;", 2
15DA                             ; test "0 j= 4 i= ( i j + j= i i-- i/whi )^ j ", 10
15DA                             ; test "0j= 0i= ( i j+= i++ i 5< /whi )^ j ", 10
15DA                             ; test "0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t", 12
15DA                             ; test "3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^", 6
15DA                             ; test "/t \\f{1 %f/whi 2 +}^",3
15DA                             ; test "/f \\f{1 %f/whi 2 +}^",1
15DA                             ; test "_A 1 - /adr", NUL
15DA                             ; test "_Z 1 + /adr", NUL
15DA                             ; test "_a 1 - /adr", NUL
15DA                             ; test "_z 1 + /adr", NUL
15DA                             ; test "_z /adr", VARS + (("z"-"a")+("Z"-"A")+1)*2
15DA                             ; test "_a /adr", VARS + ("Z"-"A"+1)*2
15DA                             ; test "_Z /adr", VARS + ("Z"-"A")*2
15DA                             ; test "_A /adr", VARS
15DA                             ; test "\\a{%a} F=1F^", 1
15DA                             ; test "1 \\b{\\a{%a}}^F= 3F^",3
15DA                             ; test "1 \\b{\\a{%a%b-}}^F= 3F^",2
15DA                             ; test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
15DA                             ; test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
15DA                             ; test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
15DA                             ; test "'hello'/sln",5
15DA                             ; test "'hello' 'hell' /scp", false
15DA                             ; test "'hello' 'hello' /scp", true
15DA                             ; test "/sbb `=` 1. 2. 3. `=` /sbe '=1 2 3 =' /scp", TRUE
15DA                             ; test "[1 2 3]** + +", 6
15DA                             ; test "/byt[_a [_b _c]** _d]2;", $63
15DA                             ; test "_B [_A {1} _B {2}] /sel", 2
15DA                             ; test "1 2 /max", 2
15DA                             ; test "2 1 /max", 2
15DA                             ; test "1 2 /min", 1
15DA                             ; test "2 1 /min", 1
15DA                             ; 
15DA   CD DB 0C               CALL   printStr   
15DD   44 6F 6E 65 21 00      .CSTR   "Done!"   
15E3   76                     HALT      
15E4                             ; executes a null teminated string (null executes exit_)
15E4                             ; the string should be immedaitely following the call
15E4                EXECSTR:      ; create a root stack frame
15E4   C1                     POP   bc   ; bc = code*
15E5   0B                     DEC   bc   ; dec to prepare for next routine
15E6   11 00 00               LD   de,0   
15E9   D5                     PUSH   de   ; push fake IP
15EA   D5                     PUSH   de   ; push null arg_list*
15EB   D5                     PUSH   de   ; push null first_arg*
15EC   D5                     PUSH   de   ; push fake BP
15ED   DD E9                  JP   (ix)   
15EF                DSTACK_SIZE:   EQU   $100   ; Data stack size
15EF                RSTACK_SIZE:   EQU   $100   ; Return stack size
15EF                NAMES_SIZE:   EQU   $100   ; Arg names size
15EF                TIBSIZE:   EQU   $100   ; 256 bytes
15EF                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
15EF                          ALIGN   $100   
1600                          DS   DSTACK_SIZE   
1700                STACK:       
1700                DSTACK:      
1700                RSTACK:      
1700                          DS   RSTACK_SIZE   
1800                NAMES:       
1800                          DS   NAMES_SIZE   
1900                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
1A00                          ALIGN   $100   
1A00                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
1B00                          ALIGN   $100   
1B00                VARS:        
1B00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
1BD0                RESTARTS:      
1BD0                RST08:    DS   2   
1BD2                RST10:    DS   2   
1BD4                RST18:    DS   2   
1BD6                RST20:    DS   2   
1BD8                RST28:    DS   2   
1BDA                RST30:    DS   2   ; 
1BDC                BAUD:     DS   2   ; 
1BDE                INTVEC:   DS   2   ; 
1BE0                NMIVEC:   DS   2   ; 
1BE2                GETCVEC:   DS   2   ; 
1BE4                PUTCVEC:   DS   2   ; 
1BE6                SYSVARS:      
1BE6                             ; initialised sys variables (preserved)
1BE6                VTIBPTR:   DS   2   
1BE8                VBUFPTR:   DS   2   
1BEA                VHEAPPTR:   DS   2   
1BEC                VNAMESPTR:   DS   2   
1BEE                VRECURPTR:   DS   2   
1BF0                VDATAWIDTH:   DS   1   
1BF1                VNUMBASE:   DS   1   
1BF2                VHEXPREFIX:   DS   1   
1BF3                VECHO:    DS   1   
1BF4                VSTRMODE:   DS   1   
1BF5                          DS   1   
1BF6                          DS   1   
1BF7                          DS   1   
1BF8                          DS   1   
1BF9                          DS   1   
1BFA                             ; uninitialised sys variables (preserved)
1BFA                VPOINTER:   DS   2   ; 
1BFC                VREMAIN:   DS   2   ; 
1BFE                VSAVEDIP:   DS   2   ; 
1C00                VSAVEDDSP:   DS   2   ; 
1C02                VSAVEDRSP:   DS   2   ; 
1C04                VSAVEDNEXT:   DS   2   ; 
1C06                VSAVEDBP:   DS   2   ; 
1C08                             ; uninitialised sys variables (unpreserved)
1C08                VTEMP1:   DS   2   ; 
1C0A                VTEMP2:   DS   2   ; 
1C0C                VTEMP3:   DS   2   ; 
1C0E                          DS   2   ; 
1C10                TBPTR:    DS   2   ; reserved for tests
1C12                TITLEBUF:   DS   20   
1C26                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 173 IN MAIN.asm
                    > USED AT LINE 3 IN ansi.asm
                    > USED AT LINE 9 IN ansi.asm
                    > USED AT LINE 70 IN ansi.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 2368 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 2090 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2474 IN MAIN.asm
                    > USED AT LINE 21 IN ansi.asm
                    > USED AT LINE 23 IN ansi.asm
                    > USED AT LINE 35 IN ansi.asm
                    > USED AT LINE 41 IN ansi.asm
                    > USED AT LINE 54 IN ansi.asm
                    > USED AT LINE 62 IN ansi.asm
                    > USED AT LINE 64 IN ansi.asm
                    > USED AT LINE 73 IN ansi.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 2258 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 163 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
                    > USED AT LINE 1628 IN MAIN.asm
                    > USED AT LINE 2255 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2371 IN MAIN.asm
                    > USED AT LINE 2439 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2376 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2378 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2309 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 172 IN MAIN.asm
                    > USED AT LINE 2284 IN MAIN.asm
                    > USED AT LINE 2303 IN MAIN.asm
COLON_:             0204 DEFINED AT LINE 177 IN MAIN.asm
HASH_:              0204 DEFINED AT LINE 178 IN MAIN.asm
COMMA_:             0206 DEFINED AT LINE 181 IN MAIN.asm
DOLLAR_:            0209 DEFINED AT LINE 184 IN MAIN.asm
DQUOTE_:            020C DEFINED AT LINE 187 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 188 IN MAIN.asm
DOT_:               020F DEFINED AT LINE 191 IN MAIN.asm
PERCENT_:           0212 DEFINED AT LINE 194 IN MAIN.asm
QUESTION_:          0215 DEFINED AT LINE 197 IN MAIN.asm
LPAREN_:            0218 DEFINED AT LINE 200 IN MAIN.asm
SLASH_:             021B DEFINED AT LINE 203 IN MAIN.asm
NUM_:               021E DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 209 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 210 IN MAIN.asm
NOT:                022C DEFINED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 222 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 223 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 236 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 237 IN MAIN.asm
LT_:                024C DEFINED AT LINE 245 IN MAIN.asm
LT:                 024C DEFINED AT LINE 246 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SEMICOLON_:         025E DEFINED AT LINE 261 IN MAIN.asm
SEMICOLON:          025E DEFINED AT LINE 262 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 269 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 271 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
RPAREN_:            026B DEFINED AT LINE 276 IN MAIN.asm
RPAREN:             026B DEFINED AT LINE 278 IN MAIN.asm
AMPER_:             0273 DEFINED AT LINE 286 IN MAIN.asm
AMPER:              0273 DEFINED AT LINE 287 IN MAIN.asm
AND:                0273 DEFINED AT LINE 288 IN MAIN.asm
MINUS_:             027D DEFINED AT LINE 306 IN MAIN.asm
MINUS:              027D DEFINED AT LINE 307 IN MAIN.asm
SUB:                0289 DEFINED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 312 IN MAIN.asm
SUB1:               0293 DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
SUB2:               029A DEFINED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
SUB3:               029D DEFINED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 1708 IN MAIN.asm
STAR_:              02A5 DEFINED AT LINE 337 IN MAIN.asm
STAR:               02A5 DEFINED AT LINE 338 IN MAIN.asm
MUL:                02AD DEFINED AT LINE 344 IN MAIN.asm
MUL2:               02AF DEFINED AT LINE 347 IN MAIN.asm
MUL3:               02B7 DEFINED AT LINE 352 IN MAIN.asm
                    > USED AT LINE 361 IN MAIN.asm
PLUS_:              02C9 DEFINED AT LINE 367 IN MAIN.asm
PLUS:               02C9 DEFINED AT LINE 368 IN MAIN.asm
ADD:                02C9 DEFINED AT LINE 369 IN MAIN.asm
ADD1:               02D4 DEFINED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
ADD3:               02D8 DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 570 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
ADD4:               02E2 DEFINED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
UPCASE_:            02E5 DEFINED AT LINE 394 IN MAIN.asm
UPCASE:             02E5 DEFINED AT LINE 395 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 404 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 405 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 409 IN MAIN.asm
                    > USED AT LINE 398 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 421 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 422 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 423 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 438 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 439 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 440 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 449 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 460 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 461 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 462 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 493 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 514 IN MAIN.asm
CARET:              039F DEFINED AT LINE 518 IN MAIN.asm
GO:                 039F DEFINED AT LINE 519 IN MAIN.asm
GO1:                03A0 DEFINED AT LINE 521 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 535 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 536 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 537 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 545 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 552 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 559 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 560 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 561 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 572 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 576 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 579 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 580 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 588 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 589 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 590 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 602 IN MAIN.asm
PRINTARRAY:         0411 DEFINED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
PRINTCHAR:          0414 DEFINED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
PRINTSTRING:        0423 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
PRINTSTRING0:       042A DEFINED AT LINE 634 IN MAIN.asm
                    > USED AT LINE 641 IN MAIN.asm
PRINTSTRING1:       042D DEFINED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
PRINTNUMBER:        0438 DEFINED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
PRINTDEC:           0443 DEFINED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
PRINTDEC1:          0451 DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
PRINTHEX:           0460 DEFINED AT LINE 675 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
PRINTHEX1:          046C DEFINED AT LINE 682 IN MAIN.asm
                    > USED AT LINE 679 IN MAIN.asm
PRINTHEX2:          0477 DEFINED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 686 IN MAIN.asm
PRINTHEX3:          0486 DEFINED AT LINE 698 IN MAIN.asm
                    > USED AT LINE 688 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
PRINTHEX4:          048F DEFINED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 704 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 722 IN MAIN.asm
ABS1:               060A DEFINED AT LINE 750 IN MAIN.asm
ABSOLUTE:           060A DEFINED AT LINE 751 IN MAIN.asm
ABSOLUTE1:          0615 DEFINED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
ALC:                0618 DEFINED AT LINE 767 IN MAIN.asm
MEMALLOCATE:        0618 DEFINED AT LINE 768 IN MAIN.asm
ALN:                061A DEFINED AT LINE 773 IN MAIN.asm
ARRAYLENGTH:        061A DEFINED AT LINE 774 IN MAIN.asm
ARRAYLENGTH1:       0620 DEFINED AT LINE 781 IN MAIN.asm
BYE:                0623 DEFINED AT LINE 786 IN MAIN.asm
CGO:                0626 DEFINED AT LINE 791 IN MAIN.asm
CURSORGO:           0626 DEFINED AT LINE 792 IN MAIN.asm
CLL:                062E DEFINED AT LINE 801 IN MAIN.asm
CLEARLINE:          062E DEFINED AT LINE 802 IN MAIN.asm
CLS:                0637 DEFINED AT LINE 811 IN MAIN.asm
CLEARSCREEN:        0637 DEFINED AT LINE 812 IN MAIN.asm
CMV:                063C DEFINED AT LINE 818 IN MAIN.asm
CURSORMOVE:         063C DEFINED AT LINE 819 IN MAIN.asm
CURSORMOVE1:        0648 DEFINED AT LINE 828 IN MAIN.asm
DEC:                064A DEFINED AT LINE 831 IN MAIN.asm
DECBASE:            064A DEFINED AT LINE 832 IN MAIN.asm
DECBASE1:           064C DEFINED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
DIV:                0651 DEFINED AT LINE 839 IN MAIN.asm
ECH:                0654 DEFINED AT LINE 844 IN MAIN.asm
ECHO:               0654 DEFINED AT LINE 845 IN MAIN.asm
F:                  065A DEFINED AT LINE 851 IN MAIN.asm
IN:                 065D DEFINED AT LINE 857 IN MAIN.asm
INPUT:              065D DEFINED AT LINE 858 IN MAIN.asm
OUT:                0668 DEFINED AT LINE 870 IN MAIN.asm
OUTPUT:             0668 DEFINED AT LINE 871 IN MAIN.asm
REC:                0671 DEFINED AT LINE 881 IN MAIN.asm
RECUR:              0671 DEFINED AT LINE 882 IN MAIN.asm
REM:                0677 DEFINED AT LINE 888 IN MAIN.asm
REMAIN:             0677 DEFINED AT LINE 889 IN MAIN.asm
RET:                067D DEFINED AT LINE 896 IN MAIN.asm
RETURN:             067D DEFINED AT LINE 897 IN MAIN.asm
RETURN1:            0684 DEFINED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
SBB:                0687 DEFINED AT LINE 907 IN MAIN.asm
STRINGBEGIN:        0687 DEFINED AT LINE 908 IN MAIN.asm
SBE:                068F DEFINED AT LINE 915 IN MAIN.asm
STRINGEND:          068F DEFINED AT LINE 916 IN MAIN.asm
STRINGEND1:         06B6 DEFINED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
SCP:                06BE DEFINED AT LINE 940 IN MAIN.asm
SEL:                06C6 DEFINED AT LINE 949 IN MAIN.asm
SELECT:             06C6 DEFINED AT LINE 950 IN MAIN.asm
SELECT1:            06D1 DEFINED AT LINE 961 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
SELECT1A:           06E2 DEFINED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
SELECT1B:           06E3 DEFINED AT LINE 977 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
SELECT2:            06E6 DEFINED AT LINE 981 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
SLN:                06ED DEFINED AT LINE 989 IN MAIN.asm
T:                  06F4 DEFINED AT LINE 996 IN MAIN.asm
VAR:                06F7 DEFINED AT LINE 1001 IN MAIN.asm
VARIABLES:          06F7 DEFINED AT LINE 1002 IN MAIN.asm
ADR:                0700 DEFINED AT LINE 1012 IN MAIN.asm
ADDROF:             0700 DEFINED AT LINE 1013 IN MAIN.asm
ADDROF2:            0706 DEFINED AT LINE 1018 IN MAIN.asm
WHI:                0708 DEFINED AT LINE 1024 IN MAIN.asm
WHILE:              0708 DEFINED AT LINE 1025 IN MAIN.asm
WHILE1:             070F DEFINED AT LINE 1031 IN MAIN.asm
                    > USED AT LINE 1029 IN MAIN.asm
BYT:                0722 DEFINED AT LINE 1043 IN MAIN.asm
BYTEMODE:           0722 DEFINED AT LINE 1044 IN MAIN.asm
BYTEMODE1:          0724 DEFINED AT LINE 1046 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
CMT:                0729 DEFINED AT LINE 1051 IN MAIN.asm
COMMENT:            0729 DEFINED AT LINE 1052 IN MAIN.asm
                    > USED AT LINE 1056 IN MAIN.asm
HEX:                0732 DEFINED AT LINE 1060 IN MAIN.asm
ERROR1:             0737 DEFINED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
FRE:                073D DEFINED AT LINE 1070 IN MAIN.asm
MEMFREE:            073D DEFINED AT LINE 1071 IN MAIN.asm
MEMFREE1:           073E DEFINED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
FRA:                0743 DEFINED AT LINE 1079 IN MAIN.asm
MEMFREEARRAY:       0743 DEFINED AT LINE 1080 IN MAIN.asm
MAX:                0748 DEFINED AT LINE 1088 IN MAIN.asm
MAXIMUM:            0748 DEFINED AT LINE 1089 IN MAIN.asm
MAXIMUM1:           0752 DEFINED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
MIN:                0754 DEFINED AT LINE 1103 IN MAIN.asm
MINIMUM:            0754 DEFINED AT LINE 1104 IN MAIN.asm
MINIMUM1:           075E DEFINED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
VOI:                0760 DEFINED AT LINE 1118 IN MAIN.asm
VOID:               0760 DEFINED AT LINE 1119 IN MAIN.asm
WRD:                0768 DEFINED AT LINE 1127 IN MAIN.asm
WORDMODE:           0768 DEFINED AT LINE 1128 IN MAIN.asm
XOR:                076D DEFINED AT LINE 1133 IN MAIN.asm
XOR1:               076E DEFINED AT LINE 1135 IN MAIN.asm
CUR:                0778 DEFINED AT LINE 1147 IN MAIN.asm
CURSORSHOW:         0778 DEFINED AT LINE 1148 IN MAIN.asm
CURSORSHOW1:        0782 DEFINED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 1154 IN MAIN.asm
DIV1:               0787 DEFINED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
DIV2:               0791 DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
COMMA:              07A2 DEFINED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
READCHAR:           07AF DEFINED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
READSTRING:         07B8 DEFINED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 44
READSTRING1:        07BD DEFINED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
READSTRING2:        07D1 DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1207 IN MAIN.asm
READNUMBER:         07DA DEFINED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
PERFORMM_1684S1224: 07E3 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER1:        0801 DEFINED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
PERFORMM_1701S1241: 0808 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER2:        080B DEFINED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
PERFORMM_1705S1245: 0812 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER3:        0813 DEFINED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
TILDE:              0819 DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 577 IN MAIN.asm
INVERT:             0819 DEFINED AT LINE 1255 IN MAIN.asm
DOLLAR:             0823 DEFINED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
HEXNUM:             0823 DEFINED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 44
HEXNUM1:            0826 DEFINED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
HEXNUM2:            082E DEFINED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
QUESTION:           0840 DEFINED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
IF:                 0840 DEFINED AT LINE 1291 IN MAIN.asm
QUOTE:              084D DEFINED AT LINE 1304 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
STRING:             084D DEFINED AT LINE 1305 IN MAIN.asm
STRING1:            0856 DEFINED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1320 IN MAIN.asm
STRING2:            0859 DEFINED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
STRING3:            085F DEFINED AT LINE 1321 IN MAIN.asm
                    > USED AT LINE 1319 IN MAIN.asm
PERCENT:            0867 DEFINED AT LINE 1331 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
ARG:                0867 DEFINED AT LINE 1332 IN MAIN.asm
ARG0:               0883 DEFINED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
ARG0A:              088C DEFINED AT LINE 1359 IN MAIN.asm
                    > USED AT LINE 1338 IN MAIN.asm
                    > USED AT LINE 1343 IN MAIN.asm
ARG1:               0891 DEFINED AT LINE 1362 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
ARG1A:              0899 DEFINED AT LINE 1369 IN MAIN.asm
                    > USED AT LINE 1361 IN MAIN.asm
NUM:                089C DEFINED AT LINE 1374 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
                    > USED AT LINE 44
NUM0:               08A5 DEFINED AT LINE 1380 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
NUM1:               08A6 DEFINED AT LINE 1382 IN MAIN.asm
                    > USED AT LINE 1399 IN MAIN.asm
NUM2:               08BE DEFINED AT LINE 1400 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1385 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
NUM3:               08C9 DEFINED AT LINE 1408 IN MAIN.asm
                    > USED AT LINE 1403 IN MAIN.asm
RBRACE:             08CC DEFINED AT LINE 1413 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
BLOCKEND:           08CC DEFINED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 1040 IN MAIN.asm
BLOCKEND1:          08FE DEFINED AT LINE 1436 IN MAIN.asm
                    > USED AT LINE 1429 IN MAIN.asm
BLOCKEND2:          090A DEFINED AT LINE 1443 IN MAIN.asm
                    > USED AT LINE 1435 IN MAIN.asm
BLOCKEND3:          091C DEFINED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
BLOCKEND4:          0930 DEFINED AT LINE 1467 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
GOBLOCK:            0939 DEFINED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 533 IN MAIN.asm
GOBLOCK2:           095E DEFINED AT LINE 1489 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
GOBLOCK3:           0968 DEFINED AT LINE 1495 IN MAIN.asm
GOFUNC:             096C DEFINED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
GOFUNC1:            0985 DEFINED AT LINE 1518 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
GOFUNC2:            098B DEFINED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
GOFUNC3:            0996 DEFINED AT LINE 1531 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
GOFUNC4:            09AE DEFINED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 1545 IN MAIN.asm
GOFUNC5:            09B1 DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1557 IN MAIN.asm
GOFUNC6:            09B4 DEFINED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 1550 IN MAIN.asm
GOFUNC7:            09B7 DEFINED AT LINE 1558 IN MAIN.asm
GOFUNC8:            09BB DEFINED AT LINE 1563 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
ASSIGN:             09C6 DEFINED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
ASSIGN0:            09C8 DEFINED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 391 IN MAIN.asm
ASSIGN1:            09CC DEFINED AT LINE 1580 IN MAIN.asm
ASSIGN2:            09D5 DEFINED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 1584 IN MAIN.asm
EQUALS:             09D7 DEFINED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
NOTEQUALS:          09DE DEFINED AT LINE 1598 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
LESSTHANEQ:         09E5 DEFINED AT LINE 1606 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           09EA DEFINED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          09EF DEFINED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
TRUE1:              09F2 DEFINED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
NULL1:              09F8 DEFINED AT LINE 1625 IN MAIN.asm
NIL:                09F8 DEFINED AT LINE 1626 IN MAIN.asm
FALSE1:             09F8 DEFINED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1619 IN MAIN.asm
SPREAD:             09FE DEFINED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
SPREAD1:            0A0B DEFINED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
SPREAD2:            0A16 DEFINED AT LINE 1651 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
SPREAD3:            0A18 DEFINED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
SHIFTLEFT:          0A22 DEFINED AT LINE 1664 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT2:         0A2C DEFINED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1670 IN MAIN.asm
SHIFTLEFT3:         0A34 DEFINED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 1681 IN MAIN.asm
SHIFTLEFT4:         0A35 DEFINED AT LINE 1680 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
SHIFTRIGHT:         0A3E DEFINED AT LINE 1688 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
SHIFTRIGHT2:        0A48 DEFINED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1694 IN MAIN.asm
SHIFTRIGHT3:        0A50 DEFINED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1706 IN MAIN.asm
SHIFTRIGHT4:        0A54 DEFINED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 1701 IN MAIN.asm
DIVIDE:             0A5D DEFINED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
DIVIDE1:            0A62 DEFINED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 1728 IN MAIN.asm
DIVIDE2:            0A6F DEFINED AT LINE 1724 IN MAIN.asm
                    > USED AT LINE 1721 IN MAIN.asm
DIVIDE3:            0A70 DEFINED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 1723 IN MAIN.asm
DOTNEXT:            0A76 DEFINED AT LINE 1732 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 696 IN MAIN.asm
DOTNEXT1:           0A7E DEFINED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 1735 IN MAIN.asm
PARSEARGS:          0A90 DEFINED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
PARSEARGS1:         0A9A DEFINED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
PARSEARGS1A:        0AA2 DEFINED AT LINE 1761 IN MAIN.asm
                    > USED AT LINE 1758 IN MAIN.asm
PARSEARGS2:         0AAA DEFINED AT LINE 1766 IN MAIN.asm
PARSEARGS3:         0AB2 DEFINED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1772 IN MAIN.asm
PARSEARGS4:         0AB5 DEFINED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
                    > USED AT LINE 1765 IN MAIN.asm
PARSEARGS5:         0ABB DEFINED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 1781 IN MAIN.asm
PARSEBLOCK:         0AC6 DEFINED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 554 IN MAIN.asm
PARSEBLOCK1:        0ACA DEFINED AT LINE 1800 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
PARSEBLOCK2:        0AE3 DEFINED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
                    > USED AT LINE 1810 IN MAIN.asm
PARSEBLOCK3:        0AE9 DEFINED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
PARSEBLOCK4:        0B03 DEFINED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
                    > USED AT LINE 1825 IN MAIN.asm
PARSEBLOCK5:        0B06 DEFINED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1831 IN MAIN.asm
PARSEBLOCK6:        0B31 DEFINED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
CREATEFUNC:         0B35 DEFINED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
CREATEFUNC0:        0B54 DEFINED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
CREATEFUNC1:        0B6C DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
CREATEFUNC2:        0B7F DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
CREATEFUNC2A:       0B9E DEFINED AT LINE 1937 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
CREATEFUNC3:        0BAD DEFINED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
CREATEFUNC4:        0BB8 DEFINED AT LINE 1960 IN MAIN.asm
CREATEFUNC5:        0BB9 DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
VARIABLE:           0BD7 DEFINED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
CONSTANT:           0BE6 DEFINED AT LINE 1999 IN MAIN.asm
                    > USED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
CHARTABLE:          0BE9 DEFINED AT LINE 2007 IN MAIN.asm
CHARTABLE1:         0BF3 DEFINED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
CHARTABLE2:         0BFD DEFINED AT LINE 2022 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
CHARTABLE3:         0BFF DEFINED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
IDENTHASH:          0C04 DEFINED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
IDENTHASH1:         0C06 DEFINED AT LINE 2035 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
IDENTHASH2:         0C0E DEFINED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
COMMANDTABLE:       0C19 DEFINED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
COMMANDTABLE2:      0C21 DEFINED AT LINE 2062 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
GETVARADDR:         0C29 DEFINED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 1016 IN MAIN.asm
GETVARADDR1:        0C3B DEFINED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2079 IN MAIN.asm
PUTSTR0:            0C40 DEFINED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 2095 IN MAIN.asm
PUTSTR:             0C44 DEFINED AT LINE 2092 IN MAIN.asm
                    > USED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 2223 IN MAIN.asm
                    > USED AT LINE 2239 IN MAIN.asm
                    > USED AT LINE 2335 IN MAIN.asm
FORMATDEC0:         0C49 DEFINED AT LINE 2101 IN MAIN.asm
                    > USED AT LINE 2231 IN MAIN.asm
FORMATDEC:          0C4C DEFINED AT LINE 2108 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
FORMATDEC2:         0C5C DEFINED AT LINE 2122 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
FORMATDEC4:         0C7C DEFINED AT LINE 2136 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
                    > USED AT LINE 2127 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 2131 IN MAIN.asm
                    > USED AT LINE 2134 IN MAIN.asm
FORMATDEC5:         0C7E DEFINED AT LINE 2138 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
FORMATDEC6:         0C8E DEFINED AT LINE 2150 IN MAIN.asm
                    > USED AT LINE 2145 IN MAIN.asm
FORMATDEC7:         0C8F DEFINED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
NESTING:            0C95 DEFINED AT LINE 2170 IN MAIN.asm
                    > USED AT LINE 2357 IN MAIN.asm
                    > USED AT LINE 2391 IN MAIN.asm
NESTING0:           0CA3 DEFINED AT LINE 2178 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
                    > USED AT LINE 2174 IN MAIN.asm
                    > USED AT LINE 2176 IN MAIN.asm
NESTING1A:          0CAA DEFINED AT LINE 2183 IN MAIN.asm
                    > USED AT LINE 2180 IN MAIN.asm
NESTING1:           0CAD DEFINED AT LINE 2186 IN MAIN.asm
                    > USED AT LINE 2177 IN MAIN.asm
NESTING2:           0CBC DEFINED AT LINE 2195 IN MAIN.asm
                    > USED AT LINE 2190 IN MAIN.asm
                    > USED AT LINE 2192 IN MAIN.asm
NESTING3:           0CBE DEFINED AT LINE 2198 IN MAIN.asm
                    > USED AT LINE 2194 IN MAIN.asm
NESTING4:           0CC9 DEFINED AT LINE 2205 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
                    > USED AT LINE 2202 IN MAIN.asm
PROMPT:             0CCB DEFINED AT LINE 2209 IN MAIN.asm
                    > USED AT LINE 2339 IN MAIN.asm
CRLF:               0CD4 DEFINED AT LINE 2214 IN MAIN.asm
                    > USED AT LINE 2404 IN MAIN.asm
PRINTSTR:           0CDB DEFINED AT LINE 2221 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
                    > USED AT LINE 2215 IN MAIN.asm
                    > USED AT LINE 2464 IN MAIN.asm
                    > USED AT LINE 2469 IN MAIN.asm
                    > USED AT LINE 2 IN ansi.asm
                    > USED AT LINE 8 IN ansi.asm
                    > USED AT LINE 69 IN ansi.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 161
PRINTNUM:           0CE2 DEFINED AT LINE 2229 IN MAIN.asm
                    > USED AT LINE 33 IN ansi.asm
                    > USED AT LINE 39 IN ansi.asm
                    > USED AT LINE 52 IN ansi.asm
STRINGCOMPARE:      0CFB DEFINED AT LINE 2244 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
STRINGCOMPARE1:     0CFB DEFINED AT LINE 2245 IN MAIN.asm
                    > USED AT LINE 2253 IN MAIN.asm
STRINGCOMPARE2:     0D06 DEFINED AT LINE 2254 IN MAIN.asm
                    > USED AT LINE 2248 IN MAIN.asm
STRINGCOMPARE3:     0D0B DEFINED AT LINE 2257 IN MAIN.asm
                    > USED AT LINE 2250 IN MAIN.asm
STRINGCOMPARE4:     0D0E DEFINED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 2256 IN MAIN.asm
STRINGLENGTH:       0D10 DEFINED AT LINE 2266 IN MAIN.asm
                    > USED AT LINE 991 IN MAIN.asm
STRINGLENGTH1:      0D15 DEFINED AT LINE 2269 IN MAIN.asm
                    > USED AT LINE 2275 IN MAIN.asm
STRINGLENGTH2:      0D17 DEFINED AT LINE 2272 IN MAIN.asm
                    > USED AT LINE 2268 IN MAIN.asm
STRINGLENGTH3:      0D1B DEFINED AT LINE 2276 IN MAIN.asm
INIT:               0D1C DEFINED AT LINE 2283 IN MAIN.asm
                    > USED AT LINE 2332 IN MAIN.asm
INIT1:              0D24 DEFINED AT LINE 2287 IN MAIN.asm
                    > USED AT LINE 2293 IN MAIN.asm
WARMINIT:           0D2C DEFINED AT LINE 2295 IN MAIN.asm
COLDBOOT0:          0D3F DEFINED AT LINE 2302 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 2290 IN MAIN.asm
                    > USED AT LINE 2328 IN MAIN.asm
COLDINIT:           0D49 DEFINED AT LINE 2308 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0D5A DEFINED AT LINE 2317 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
COLDSTART:          0D67 DEFINED AT LINE 2326 IN MAIN.asm
START:              0D70 DEFINED AT LINE 2330 IN MAIN.asm
START1:             0D76 DEFINED AT LINE 2333 IN MAIN.asm
                    > USED AT LINE 2300 IN MAIN.asm
                    > USED AT LINE 2329 IN MAIN.asm
INTERPRET:          0D7C DEFINED AT LINE 2337 IN MAIN.asm
                    > USED AT LINE 2441 IN MAIN.asm
                    > USED AT LINE 2457 IN MAIN.asm
INTERPRET2:         0D88 DEFINED AT LINE 2345 IN MAIN.asm
                    > USED AT LINE 2382 IN MAIN.asm
                    > USED AT LINE 2462 IN MAIN.asm
                    > USED AT LINE 2466 IN MAIN.asm
                    > USED AT LINE 2484 IN MAIN.asm
INTERPRET3:         0D90 DEFINED AT LINE 2353 IN MAIN.asm
                    > USED AT LINE 2363 IN MAIN.asm
INTERPRET4:         0D96 DEFINED AT LINE 2359 IN MAIN.asm
                    > USED AT LINE 2351 IN MAIN.asm
INTERPRET5:         0D9B DEFINED AT LINE 2366 IN MAIN.asm
                    > USED AT LINE 2392 IN MAIN.asm
                    > USED AT LINE 2407 IN MAIN.asm
INTERPRET5A:        0DB4 DEFINED AT LINE 2381 IN MAIN.asm
INTERPRET6:         0DB6 DEFINED AT LINE 2384 IN MAIN.asm
                    > USED AT LINE 2370 IN MAIN.asm
INTERPRET7:         0DC4 DEFINED AT LINE 2394 IN MAIN.asm
                    > USED AT LINE 2374 IN MAIN.asm
INTERPRET8:         0DD7 DEFINED AT LINE 2409 IN MAIN.asm
                    > USED AT LINE 2372 IN MAIN.asm
NEXT:               0DF2 DEFINED AT LINE 2422 IN MAIN.asm
                    > USED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 2426 IN MAIN.asm
NEXT0:              0E06 DEFINED AT LINE 2436 IN MAIN.asm
                    > USED AT LINE 2434 IN MAIN.asm
NEXT1:              0E07 DEFINED AT LINE 2438 IN MAIN.asm
                    > USED AT LINE 2427 IN MAIN.asm
EXIT:               0E0E DEFINED AT LINE 2443 IN MAIN.asm
                    > USED AT LINE 2440 IN MAIN.asm
RUN:                0E12 DEFINED AT LINE 2448 IN MAIN.asm
                    > USED AT LINE 2455 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              0E16 DEFINED AT LINE 2453 IN MAIN.asm
                    > USED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
BACKSPACE_:         0E28 DEFINED AT LINE 2459 IN MAIN.asm
                    > USED AT LINE 2377 IN MAIN.asm
REEDIT_:            0E38 DEFINED AT LINE 2468 IN MAIN.asm
                    > USED AT LINE 2379 IN MAIN.asm
REEDIT0:            0E44 DEFINED AT LINE 2473 IN MAIN.asm
                    > USED AT LINE 2479 IN MAIN.asm
REEDIT1:            0E48 DEFINED AT LINE 2476 IN MAIN.asm
                    > USED AT LINE 2472 IN MAIN.asm
ANSIPRINTSEQ:       0E58 DEFINED AT LINE 1 IN ansi.asm
                    > USED AT LINE 19 IN ansi.asm
                    > USED AT LINE 28 IN ansi.asm
                    > USED AT LINE 47 IN ansi.asm
                    > USED AT LINE 60 IN ansi.asm
ANSICLEARSCREEN:    0E5F DEFINED AT LINE 7 IN ansi.asm
                    > USED AT LINE 813 IN MAIN.asm
ANSICLEARLINE:      0E68 DEFINED AT LINE 16 IN ansi.asm
                    > USED AT LINE 806 IN MAIN.asm
ANSIGOTO:           0E77 DEFINED AT LINE 26 IN ansi.asm
                    > USED AT LINE 796 IN MAIN.asm
ANSIMOVE:           0E94 DEFINED AT LINE 45 IN ansi.asm
                    > USED AT LINE 827 IN MAIN.asm
ANSITEXTSTYLE:      0EA4 DEFINED AT LINE 57 IN ansi.asm
ANSICURSORSHOW:     0EB3 DEFINED AT LINE 67 IN ansi.asm
                    > USED AT LINE 1157 IN MAIN.asm
TESTSSTART:         0F00 DEFINED AT LINE 14
                    > USED AT LINE 8
EXPECTM_2944S21:    0F73 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2945S22:    0FE7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2946S23:    1059 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2947S24:    10CB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2948S25:    113D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2949S26:    11AF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2950S27:    1223 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2951S28:    1299 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2952S29:    130D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2953S30:    1389 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2954S31:    13FD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2955S32:    1471 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2956S33:    14E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2957S34:    155D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2958S35:    15D9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            15E4 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
DSTACK_SIZE:        0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 8 IN ram.asm
RSTACK_SIZE:        0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
NAMES_SIZE:         0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 15 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 18 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 21 IN ram.asm
STACK:              1700 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 2323 IN MAIN.asm
                    > USED AT LINE 2327 IN MAIN.asm
                    > USED AT LINE 2331 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
DSTACK:             1700 DEFINED AT LINE 10 IN ram.asm
RSTACK:             1700 DEFINED AT LINE 12 IN ram.asm
NAMES:              1800 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
TIB:                1900 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 2342 IN MAIN.asm
                    > USED AT LINE 2350 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
                    > USED AT LINE 2396 IN MAIN.asm
                    > USED AT LINE 2411 IN MAIN.asm
                    > USED AT LINE 2414 IN MAIN.asm
                    > USED AT LINE 2471 IN MAIN.asm
                    > USED AT LINE 2480 IN MAIN.asm
BUFFER:             1A00 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 2237 IN MAIN.asm
VARS:               1B00 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 2314 IN MAIN.asm
RESTARTS:           1BD0 DEFINED AT LINE 26 IN ram.asm
RST08:              1BD0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              1BD2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              1BD4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              1BD6 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              1BD8 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              1BDA DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               1BDC DEFINED AT LINE 34 IN ram.asm
INTVEC:             1BDE DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             1BE0 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            1BE2 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            1BE4 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            1BE6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2310 IN MAIN.asm
VTIBPTR:            1BE6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 2343 IN MAIN.asm
                    > USED AT LINE 2413 IN MAIN.asm
VBUFPTR:            1BE8 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
                    > USED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 936 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
                    > USED AT LINE 2230 IN MAIN.asm
                    > USED AT LINE 2236 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
VHEAPPTR:           1BEA DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1325 IN MAIN.asm
                    > USED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
VNAMESPTR:          1BEC DEFINED AT LINE 47 IN ram.asm
VRECURPTR:          1BEE DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 1462 IN MAIN.asm
                    > USED AT LINE 1469 IN MAIN.asm
VDATAWIDTH:         1BF0 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 659 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 1047 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1645 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
VNUMBASE:           1BF1 DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
VHEXPREFIX:         1BF2 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 677 IN MAIN.asm
VECHO:              1BF3 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 1210 IN MAIN.asm
VSTRMODE:           1BF4 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
VPOINTER:           1BFA DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 413 IN MAIN.asm
                    > USED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 1365 IN MAIN.asm
                    > USED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
VREMAIN:            1BFC DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 1179 IN MAIN.asm
VSAVEDIP:           1BFE DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 2416 IN MAIN.asm
VSAVEDDSP:          1C00 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 2297 IN MAIN.asm
                    > USED AT LINE 2417 IN MAIN.asm
VSAVEDRSP:          1C02 DEFINED AT LINE 67 IN ram.asm
                    > USED AT LINE 2298 IN MAIN.asm
                    > USED AT LINE 2418 IN MAIN.asm
VSAVEDNEXT:         1C04 DEFINED AT LINE 68 IN ram.asm
                    > USED AT LINE 2299 IN MAIN.asm
                    > USED AT LINE 2419 IN MAIN.asm
VSAVEDBP:           1C06 DEFINED AT LINE 69 IN ram.asm
VTEMP1:             1C08 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 465 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 1417 IN MAIN.asm
                    > USED AT LINE 1461 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1508 IN MAIN.asm
                    > USED AT LINE 1529 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1542 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
                    > USED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1847 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
VTEMP2:             1C0A DEFINED AT LINE 74 IN ram.asm
                    > USED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
VTEMP3:             1C0C DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 1981 IN MAIN.asm
TBPTR:              1C10 DEFINED AT LINE 77 IN ram.asm
TITLEBUF:           1C12 DEFINED AT LINE 79 IN ram.asm
                    > USED AT LINE 2285 IN MAIN.asm
                    > USED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 2334 IN MAIN.asm
HEAP:               1C26 DEFINED AT LINE 81 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1840 IN MAIN.asm
