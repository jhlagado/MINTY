0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hex./dec"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hex./dec `\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 5F               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 5F               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 5F               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 5F               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 5F               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 5F               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 5F               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 5F               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 5F               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 5F               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 5B               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 5F               LD   (RST08),HL   
0094   22 D2 5F               LD   (RST10),HL   
0097   22 D4 5F               LD   (RST18),HL   
009A   22 D6 5F               LD   (RST20),HL   
009D   22 D8 5F               LD   (RST28),HL   
00A0   22 DA 5F               LD   (RST30),HL   
00A3   22 DE 5F               LD   (INTVEC),HL   
00A6   22 E0 5F               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 5F               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 5F               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0F               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  MINTY programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of MINTY code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put MINTY code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   0C                     DB   lsb(dquote_)   ; "     2
0182   04                     DB   lsb(hash_)   ; #     1
0183   09                     DB   lsb(dollar_)   ; $     1
0184   12                     DB   lsb(percent_)   ; %     1
0185   73                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   18                     DB   lsb(lparen_)   ; (     1
0188   6B                     DB   lsb(rparen_)   ; )     1
0189   A5                     DB   lsb(star_)   ; *     1
018A   C9                     DB   lsb(plus_)   ; +     1
018B   06                     DB   lsb(comma_)   ; ,     2
018C   7D                     DB   lsb(minus_)   ; -     1
018D   0F                     DB   lsb(dot_)   ; .     2
018E   1B                     DB   lsb(slash_)   ; /	    1
018F   1E                     DB   lsb(num_)   ; 0     1
0190   1E                     DB   lsb(num_)   ; 1
0191   1E                     DB   lsb(num_)   ; 2
0192   1E                     DB   lsb(num_)   ; 3
0193   1E                     DB   lsb(num_)   ; 4
0194   1E                     DB   lsb(num_)   ; 5
0195   1E                     DB   lsb(num_)   ; 6
0196   1E                     DB   lsb(num_)   ; 7
0197   1E                     DB   lsb(num_)   ; 8
0198   1E                     DB   lsb(num_)   ; 9
0199   04                     DB   lsb(colon_)   ; :     2
019A   5E                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   15                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   E5                     DB   lsb(upcase_)   ; A     1
01A1   E5                     DB   lsb(upcase_)   ; B
01A2   E5                     DB   lsb(upcase_)   ; C
01A3   E5                     DB   lsb(upcase_)   ; D
01A4   E5                     DB   lsb(upcase_)   ; E
01A5   E5                     DB   lsb(upcase_)   ; F
01A6   E5                     DB   lsb(upcase_)   ; G
01A7   E5                     DB   lsb(upcase_)   ; h
01A8   E5                     DB   lsb(upcase_)   ; I
01A9   E5                     DB   lsb(upcase_)   ; J
01AA   E5                     DB   lsb(upcase_)   ; K
01AB   E5                     DB   lsb(upcase_)   ; L
01AC   E5                     DB   lsb(upcase_)   ; M
01AD   E5                     DB   lsb(upcase_)   ; N
01AE   E5                     DB   lsb(upcase_)   ; O
01AF   E5                     DB   lsb(upcase_)   ; p
01B0   E5                     DB   lsb(upcase_)   ; Q
01B1   E5                     DB   lsb(upcase_)   ; R
01B2   E5                     DB   lsb(upcase_)   ; S
01B3   E5                     DB   lsb(upcase_)   ; T
01B4   E5                     DB   lsb(upcase_)   ; U
01B5   E5                     DB   lsb(upcase_)   ; V
01B6   E5                     DB   lsb(upcase_)   ; W
01B7   E5                     DB   lsb(upcase_)   ; X
01B8   E5                     DB   lsb(upcase_)   ; Y
01B9   E5                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 5D                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 5E                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   26 60                  DW   HEAP   ; vHeapPtr start of the free mem
01E4   00 5C                  DW   NAMES   ; vNamesPtr
01E6   00 00                  DW   NUL   ; vRecurPtr
01E8   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E9   0A                     DB   10   ; vNumBase = 10
01EA   24                     DB   "$"   ; vHexPrefix
01EB   FF                     DB   TRUE   ; vEcho
01EC   00                     DB   FALSE   ; vStrMode
01ED   00                     DB   0   
01EE   00                     DB   0   
01EF   00                     DB   0   
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 49 4E 54 59 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMINTY V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                COLON_:      
0204                HASH_:       
0204   DD E9                  JP   (ix)   
0206                COMMA_:      
0206   C3 A2 07               JP   comma   
0209                DOLLAR_:      
0209   C3 23 08               JP   dollar   
020C                DQUOTE_:      
020C                QUOTE_:      
020C   C3 4D 08               JP   quote   
020F                DOT_:        
020F   C3 00 04               JP   dot   
0212                PERCENT_:      
0212   C3 67 08               JP   percent   
0215                QUESTION_:      
0215   C3 40 08               JP   question   
0218                LPAREN_:      
0218   C3 CB 03               JP   lbrace   
021B                SLASH_:      
021B   C3 00 05               JP   slash   
021E                NUM_:        
021E   C3 9C 08               JP   num   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 DE 09               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 C6 09               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 D7 09               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA 3E 0A               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA 22 0A               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA E5 09               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 EA 09               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                SEMICOLON_:      
025E                SEMICOLON:      
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A F0 5F               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   C3 D7 0B               JP   variable   
026B                             ;                               4
026B                RPAREN_:      
026B                             ; jp rparen
026B                RPAREN:      
026B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
026E   FD 46 09               LD   b,(iy+9)   
0271   DD E9                  JP   (ix)   
0273                             ; & and                          14
0273                             ; a b -- c
0273                AMPER_:      
0273                AMPER:       
0273                AND:         
0273   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0274   E1                     POP   hl   
0275   7B                     LD   a,e   
0276   A5                     AND   l   
0277   6F                     LD   l,a   
0278   7A                     LD   a,d   
0279   A4                     AND   h   
027A   67                     LD   h,a   
027B   18 5B                  JR   add3   
027D                             ; - sub
027D                             ; a b -- c
027D                             ; -- sub
027D                             ; b1 -- b2
027D                             ; -= sub
027D                             ; a b1 -- b2
027D                MINUS_:      
027D                MINUS:       
027D   03                     INC   bc   ; check if sign of a number
027E   0A                     LD   a,(bc)   
027F   0B                     DEC   bc   
0280   FE 30                  CP   "0"   
0282   38 05                  JR   c,sub   
0284   FE 3A                  CP   "9"+1   
0286   DA 9C 08               JP   c,num   
0289                SUB:         ; Subtract the value 2nd on stack from top of stack
0289   E1                     POP   hl   ; hl = arg_b
028A   03                     INC   bc   
028B   FE 2D                  CP   "-"   
028D   20 04                  JR   nz,sub1   
028F   2B                     DEC   hl   ; --
0290   C3 C8 09               JP   assign0   
0293                SUB1:        
0293   D1                     POP   de   ; de = arg_a
0294   FE 3D                  CP   "="   
0296   28 02                  JR   z,sub2   
0298   0B                     DEC   bc   ; -
0299   EB                     EX   de,hl   
029A                SUB2:        
029A   B7                     OR   a   ; -=
029B   ED 52                  SBC   hl,de   
029D                SUB3:        
029D   FE 3D                  CP   "="   
029F   CA C8 09               JP   z,assign0   
02A2   E5                     PUSH   hl   
02A3   DD E9                  JP   (ix)   
02A5                STAR_:       ; 21
02A5                STAR:        
02A5   03                     INC   bc   ; check for ** spread
02A6   0A                     LD   a,(bc)   
02A7   FE 2A                  CP   "*"   
02A9   CA FE 09               JP   z,spread   
02AC   0B                     DEC   bc   
02AD                MUL:         
02AD   D1                     POP   de   ; get first value
02AE   E1                     POP   hl   
02AF                MUL2:        
02AF   C5                     PUSH   bc   ; Preserve the IP
02B0   44 4D                  LD   bc,hl   ; bc = 2nd value
02B2   21 00 00               LD   hl,0   
02B5   3E 10                  LD   a,16   
02B7                MUL3:        
02B7   29                     ADD   hl,hl   
02B8   CB 13                  RL   e   
02BA   CB 12                  RL   d   
02BC   30 04                  JR   nc,$+6   
02BE   09                     ADD   hl,bc   
02BF   30 01                  JR   nc,$+3   
02C1   13                     INC   de   
02C2   3D                     DEC   a   
02C3   20 F2                  JR   nz,mul3   
02C5   C1                     POP   bc   ; Restore the IP
02C6   C3 D8 02               JP   add3   
02C9                             ; + add                         25
02C9                             ; a b -- c
02C9                PLUS_:       
02C9                PLUS:        
02C9                ADD:         
02C9   03                     INC   bc   
02CA   0A                     LD   a,(bc)   
02CB   FE 2B                  CP   "+"   ; ++ increment variable
02CD   20 05                  JR   nz,add1   
02CF   E1                     POP   hl   
02D0   23                     INC   hl   
02D1   C3 C8 09               JP   assign0   
02D4                ADD1:        
02D4   0B                     DEC   bc   
02D5   D1                     POP   de   ; second term
02D6   E1                     POP   hl   ; first term
02D7   19                     ADD   hl,de   
02D8                ADD3:        
02D8   03                     INC   bc   
02D9   0A                     LD   a,(bc)   
02DA   FE 3D                  CP   "="   
02DC   28 04                  JR   z,add4   
02DE   0B                     DEC   bc   
02DF   E5                     PUSH   hl   
02E0   DD E9                  JP   (ix)   
02E2                ADD4:        
02E2   C3 C8 09               JP   assign0   
02E5                             ;                               18
02E5                UPCASE_:      
02E5                UPCASE:      
02E5   0A                     LD   a,(bc)   ; a = identifier char
02E6   D6 41                  SUB   "A"   ; "A" = 0
02E8   18 1B                  JR   ident1   
02EA                             ;********************** PAGE 2 END *********************************************
02EA                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 5F                  LD   h,msb(VARS)   
0309   22 FA 5F               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 90 0A               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 16 0E               JP   error   
0343                LAMBDA2:      
0343   CD C6 0A               CALL   parseBlock   
0346   CD 35 0B               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 08 60            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EA 5F               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A F0 5F               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EA 5F            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EA 5F               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 08 60            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA 39 09               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 6C 09               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA 39 09               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 5F            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 5F            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 76 0A               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD C6 0A               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 D8 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 CC 08               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 19 08               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B FA 5F            LD   de,(vPointer)   
03ED   21 FA 5F               LD   hl,vPointer   
03F0   C3 D7 0B               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   03                     INC   bc   
0401   0A                     LD   a,(bc)   
0402   FE 61                  CP   "a"   ; .a print array
0404   28 0B                  JR   z,printArray   
0406   FE 63                  CP   "c"   ; .c print char
0408   28 0A                  JR   z,printChar   
040A   FE 73                  CP   "s"   ; .s print string
040C   28 15                  JR   z,printString   
040E   0B                     DEC   bc   
040F   18 27                  JR   printNumber   ; .  print number, fall through
0411                PRINTARRAY:      ; TODO
0411   C3 76 0A               JP   dotNext   
0414                             ; .c print char
0414                             ; char --
0414                PRINTCHAR:      
0414   E1                     POP   hl   ; a = char
0415   7D                     LD   a,l   
0416   ED 5B E8 5F            LD   de,(vBufPtr)   ; de = buffer*
041A   12                     LD   (de),a   
041B   13                     INC   de   
041C   ED 53 E8 5F            LD   (vBufPtr),de   ; save buffer*'
0420   C3 76 0A               JP   dotNext   
0423                             ; .s print string
0423                             ; string* --
0423                PRINTSTRING:      
0423   E1                     POP   hl   ; hl = string*
0424   ED 5B E8 5F            LD   de,(vBufPtr)   ; de = buffer*
0428   18 03                  JR   printString1   
042A                PRINTSTRING0:      
042A   12                     LD   (de),a   ; a -> buffer*
042B   13                     INC   de   ; string*++,
042C   23                     INC   hl   
042D                PRINTSTRING1:      
042D   7E                     LD   a,(hl)   ; a <- string*
042E   B7                     OR   a   ; if NUL exit loop
042F   20 F9                  JR   nz,printString0   
0431   ED 53 E8 5F            LD   (vBufPtr),de   ; save buffer*' in pointer
0435   C3 76 0A               JP   dotNext   
0438                             ; . print decimal
0438                             ; value --
0438                PRINTNUMBER:      
0438   3A F1 5F               LD   a,(vNumBase)   
043B   FE 10                  CP   16   
043D   CA 60 04               JP   z,printHex   ; else falls through
0440   C3 43 04               JP   printDec   
0443                             ; print decimal                 ; 70
0443                             ; value --
0443                PRINTDEC:      
0443   ED 5B E8 5F            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0447   D9                     EXX      
0448   E1                     POP   hl   ; hl = value
0449   3A F0 5F               LD   a,(vDataWidth)   
044C   3D                     DEC   a   
044D   20 02                  JR   nz,printDec1   
044F   26 00                  LD   h,0   
0451                PRINTDEC1:      
0451   CD 4C 0C               CALL   formatDec   
0454   D9                     EXX      ; de = buffer*' bc = IP
0455   3E 20                  LD   a," "   ; append space to buffer
0457   12                     LD   (de),a   
0458   13                     INC   de   ; string*++,
0459   ED 53 E8 5F            LD   (vBufPtr),de   ; update buffer* with buffer*'
045D   C3 76 0A               JP   dotNext   
0460                             ; buffer hex                    37
0460                             ; value --
0460                PRINTHEX:      
0460   ED 5B E8 5F            LD   de,(vBufPtr)   
0464   3A F2 5F               LD   a,(vHexPrefix)   ; "$"
0467   B7                     OR   a   ; skip if null
0468   28 02                  JR   z,printHex1   
046A   12                     LD   (de),a   
046B   13                     INC   de   ; string*++,
046C                PRINTHEX1:      
046C   E1                     POP   hl   ; hl = value
046D   3A F0 5F               LD   a,(vDataWidth)   
0470   3D                     DEC   a   
0471   28 04                  JR   z,printHex2   
0473   7C                     LD   a,h   
0474   CD 86 04               CALL   printHex3   
0477                PRINTHEX2:      
0477   7D                     LD   a,l   
0478   CD 86 04               CALL   printHex3   
047B   3E 20                  LD   a," "   ; append space to buffer
047D   12                     LD   (de),a   
047E   13                     INC   de   ; string*++,
047F   ED 53 E8 5F            LD   (vBufPtr),de   
0483   C3 76 0A               JP   dotNext   
0486                PRINTHEX3:      
0486   F5                     PUSH   af   
0487   1F                     RRA      
0488   1F                     RRA      
0489   1F                     RRA      
048A   1F                     RRA      
048B   CD 8F 04               CALL   printHex4   
048E   F1                     POP   af   
048F                PRINTHEX4:      
048F   E6 0F                  AND   0x0F   
0491   C6 90                  ADD   a,0x90   
0493   27                     DAA      
0494   CE 40                  ADC   a,0x40   
0496   27                     DAA      
0497   12                     LD   (de),a   
0498   13                     INC   de   ; string*++,
0499   C9                     RET      
049A                             ;********************** PAGE 4 END *********************************************
049A                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   CD 04 0C               CALL   identHash   
0504   21 37 07               LD   hl,error1   
0507   CD 19 0C               CALL   commandTable   
050A   51 00 00 00 00 5A 00 00 00 00 00 00 00 00 00 00 DB   lsb(div),0,0,0,0,lsb(f),0,0,0,0,0,0,0,0,0,0   
051A   00 00 00 F4 00 00 0A 00 00 00 00 00 00 00 00 00 DB   0,0,0,lsb(t),0,0,lsb(abs1),0,0,0,0,0,0,0,0,0   
052A   00 00 71 00 00 87 00 00 8F 00 00 00 77 5D 18 00 DB   0,0,lsb(rec),0,0,lsb(sbb),0,0,lsb(sbe),0,0,0,lsb(rem),lsb(in),lsb(alc),0   
053A   00 00 00 7D 00 00 00 BE 00 1A 00 C6 00 00 00 00 DB   0,0,0,lsb(ret),0,0,0,lsb(scp),0,lsb(aln),0,lsb(sel),0,0,0,0   
054A   00 00 4A 68 00 00 26 00 00 00 00 00 00 00 00 54 DB   0,0,lsb(dec),lsb(out),0,0,lsb(cgo),0,0,0,0,0,0,0,0,lsb(ech)   
055A   00 00 00 00 00 00 00 2E 00 ED 00 00 00 00 37 00 DB   0,0,0,0,0,0,0,lsb(cll),0,lsb(sln),0,0,0,0,lsb(cls),0   
056A   00 F7 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 DB   0,lsb(var),0,0,0,lsb(cmv),0,0,0,0,0,0,0,0,0,0   
057A   00 00 00 00 23 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,0,0,lsb(bye),0,0,0,0,0,0,0,0,0,0,0   
058A   00 78 00 22 08 00 00 00 00 00 00 00 00 00 00 00 DB   0,lsb(cur),0,lsb(byt),lsb(whi),0,0,0,0,0,0,0,0,0,0,0   
059A   60 00 00 00 43 00 00 32 3D 00 00 00 00 00 00 00 DB   lsb(voi),0,0,0,lsb(fra),0,0,lsb(hex),lsb(fre),0,0,0,0,0,0,0   
05AA   00 00 00 00 00 00 00 68 00 00 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,lsb(wrd),0,0,0,0,0,0,0,0   
05BA   00 00 00 00 00 00 00 00 00 6D 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,0,0,lsb(xor),0,0,0,0,0,0   
05CA   00 00 00 00 00 00 00 00 00 00 00 00 00 00 29 00 DB   0,0,0,0,0,0,0,0,0,0,0,0,0,0,lsb(cmt),0   
05DA   00 00 00 00 00 00 00 48 00 00 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,lsb(max),0,0,0,0,0,0,0,0   
05EA   00 00 00 00 00 00 00 00 00 00 00 00 00 54 00 00 DB   0,0,0,0,0,0,0,0,0,0,0,0,0,lsb(min),0,0   
05FA   00 00 00 00 00 00 00 00 00 00 00 F8 00 00 00 00 DB   0,0,0,0,0,0,0,0,0,0,0,lsb(nil),0,0,0,0   
060A                             ;********************** PAGE 5 END *********************************************
060A                             ;********************** PAGE 6 BEGIN *********************************************
060A                             ; /abs absolute
060A                             ; num -- num
060A                ABS1:        
060A                ABSOLUTE:      
060A   E1                     POP   hl   
060B   CB 7C                  BIT   7,h   
060D   28 06                  JR   z,absolute1   
060F   AF                     XOR   a   
0610   95                     SUB   l   
0611   6F                     LD   l,a   
0612   9F                     SBC   a,a   
0613   94                     SUB   h   
0614   67                     LD   h,a   
0615                ABSOLUTE1:      
0615   E5                     PUSH   hl   
0616   DD E9                  JP   (ix)   
0618                             ; /alc
0618                             ; size -- adr
0618                ALC:         
0618                MEMALLOCATE:      
0618   DD E9                  JP   (ix)   
061A                             ; /aln length of an array, num elements
061A                             ; array* -- num
061A                ALN:         
061A                ARRAYLENGTH:      
061A   E1                     POP   hl   
061B   2B                     DEC   hl   ; msb size
061C   56                     LD   d,(hl)   
061D   2B                     DEC   hl   ; lsb size
061E   5E                     LD   e,(hl)   
061F   EB                     EX   de,hl   
0620                ARRAYLENGTH1:      
0620   E5                     PUSH   hl   
0621   DD E9                  JP   (ix)   
0623                             ; /bye
0623                BYE:         
0623   C3 3F 0D               JP   coldBoot0   
0626                             ; /cgo cursorGo
0626                             ; row column --
0626                CGO:         
0626                CURSORGO:      
0626   D1                     POP   de   
0627   E1                     POP   hl   
0628   62                     LD   h,d   
0629   CD 77 0E               CALL   ansiGoto   
062C   DD E9                  JP   (ix)   
062E                             ; /cll clear line
062E                             ; num --
062E                CLL:         
062E                CLEARLINE:      
062E   E1                     POP   hl   
062F   7D                     LD   a,l   
0630   E6 03                  AND   $03   
0632   CD 68 0E               CALL   ansiClearLine   
0635   DD E9                  JP   (ix)   
0637                             ; /cls clear screen
0637                             ; --
0637                CLS:         
0637                CLEARSCREEN:      
0637   CD 5F 0E               CALL   ansiClearScreen   
063A   DD E9                  JP   (ix)   
063C                             ; /cmv cursor move
063C                             ; x dir --
063C                CMV:         
063C                CURSORMOVE:      
063C   E1                     POP   hl   
063D   7D                     LD   a,l   
063E   E6 03                  AND   $03   
0640   C6 41                  ADD   a,"A"   
0642   67                     LD   h,a   
0643   D1                     POP   de   
0644   6B                     LD   l,e   
0645   CD 94 0E               CALL   ansiMove   
0648                CURSORMOVE1:      
0648   DD E9                  JP   (ix)   
064A                DEC:         
064A                DECBASE:      
064A   3E 0A                  LD   a,10   
064C                DECBASE1:      
064C   32 F1 5F               LD   (vNumBase),a   
064F   DD E9                  JP   (ix)   
0651                             ; /div
0651                DIV:         
0651   C3 87 07               JP   div1   
0654                             ; /ech
0654                             ; bool --
0654                ECH:         
0654                ECHO:        
0654   E1                     POP   hl   
0655   22 F3 5F               LD   (vEcho),hl   
0658   DD E9                  JP   (ix)   
065A                             ; /f
065A                F:           
065A   C3 F8 09               JP   false1   
065D                             ; Z80 port input
065D                             ; /in
065D                             ; port -- value
065D                IN:          
065D                INPUT:       
065D   E1                     POP   hl   
065E   59                     LD   e,c   ; save IP
065F   4D                     LD   c,l   
0660   ED 68                  IN   l,(c)   
0662   26 00                  LD   h,0   
0664   4B                     LD   c,e   ; restore IP
0665   E5                     PUSH   hl   
0666   DD E9                  JP   (ix)   
0668                             ; /o Z80 port output
0668                             ; value port --
0668                OUT:         
0668                OUTPUT:      
0668   E1                     POP   hl   
0669   59                     LD   e,c   ; save IP
066A   4D                     LD   c,l   
066B   E1                     POP   hl   
066C   ED 69                  OUT   (c),l   
066E   4B                     LD   c,e   ; restore IP
066F   DD E9                  JP   (ix)   
0671                             ; /rec
0671                REC:         
0671                RECUR:       
0671   E1                     POP   hl   
0672   22 EE 5F               LD   (vRecurPtr),hl   
0675   DD E9                  JP   (ix)   
0677                             ; rem
0677                REM:         
0677                REMAIN:      
0677   2A FC 5F               LD   hl,(vRemain)   
067A   E5                     PUSH   hl   
067B   DD E9                  JP   (ix)   
067D                             ; /ret
067D                             ; --
067D                RET:         
067D                RETURN:      
067D   E1                     POP   hl   ; hl = condition, exit if true
067E   7D                     LD   a,l   
067F   B4                     OR   h   
0680   20 02                  JR   nz,return1   
0682   DD E9                  JP   (ix)   
0684                RETURN1:      
0684   C3 CC 08               JP   blockEnd   
0687                             ; /sbb
0687                SBB:         
0687                STRINGBEGIN:      
0687   21 FF FF               LD   hl,TRUE   ; string mode = true
068A   22 F4 5F               LD   (vStrMode),hl   
068D   18 27                  JR   stringEnd1   ; save hl in vBufPtr
068F                             ; /sbe
068F                             ; -- str*
068F                SBE:         
068F                STRINGEND:      
068F   21 00 00               LD   hl,FALSE   ; string mode = false
0692   22 F4 5F               LD   (vStrMode),hl   
0695   2A E8 5F               LD   hl,(vBufPtr)   ; append NUL to string
0698   AF                     XOR   a   
0699   77                     LD   (hl),a   
069A   23                     INC   hl   ; hl = string_end*
069B   ED 43 08 60            LD   (vTemp1),bc   ; save IP
069F   11 00 5E               LD   de,BUFFER   ; de = string*
06A2   B7                     OR   a   ; bc = size
06A3   ED 52                  SBC   hl,de   
06A5   44 4D                  LD   bc,hl   
06A7   2A EA 5F               LD   hl,(vHeapPtr)   ; hl = hstring*
06AA   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06AB   D5                     PUSH   de   ; return hstring*
06AC   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06AE   ED 53 EA 5F            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06B2   ED 4B 08 60            LD   bc,(vTemp1)   ; restore IP
06B6                STRINGEND1:      
06B6   21 00 5E               LD   hl,BUFFER   ; reset vBufPtr
06B9   22 E8 5F               LD   (vBufPtr),hl   
06BC   DD E9                  JP   (ix)   
06BE                             ; /scp string compare
06BE                SCP:         
06BE   D1                     POP   de   
06BF   E1                     POP   hl   
06C0   CD FB 0C               CALL   stringCompare   
06C3   E5                     PUSH   hl   
06C4   DD E9                  JP   (ix)   
06C6                             ; select case from an associative array of cases
06C6                             ; bool cases* --
06C6                SEL:         
06C6                SELECT:      
06C6   E1                     POP   hl   ; hl = case associative array [ key1 value1 ... ]
06C7   D1                     POP   de   ; de = select key
06C8   C5                     PUSH   bc   ; save IP
06C9   2B                     DEC   hl   ; bc = array length
06CA   46                     LD   b,(hl)   
06CB   2B                     DEC   hl   
06CC   4E                     LD   c,(hl)   
06CD   23                     INC   hl   
06CE   23                     INC   hl   
06CF   18 15                  JR   select2   
06D1                SELECT1:      
06D1   7E                     LD   a,(hl)   ; compare lsb case key with lsb select key, hl++
06D2   BB                     CP   e   
06D3   23                     INC   hl   ; hl++, flags are unaltered
06D4   20 0C                  JR   nz,select1a   
06D6   7E                     LD   a,(hl)   ; compare msb case key with msb select key, hl++
06D7   BA                     CP   d   
06D8   23                     INC   hl   ; hl++, flags are unaltered
06D9   20 08                  JR   nz,select1b   
06DB   5E                     LD   e,(hl)   
06DC   23                     INC   hl   
06DD   56                     LD   d,(hl)   
06DE   C1                     POP   bc   
06DF   C3 A0 03               JP   go1   
06E2                SELECT1A:      
06E2   23                     INC   hl   
06E3                SELECT1B:      
06E3   23                     INC   hl   
06E4   23                     INC   hl   
06E5   0B                     DEC   bc   
06E6                SELECT2:      
06E6   79                     LD   a,c   
06E7   B0                     OR   b   
06E8   20 E7                  JR   nz,select1   
06EA   C1                     POP   bc   
06EB   DD E9                  JP   (ix)   
06ED                             ; /sln
06ED                SLN:         
06ED   D1                     POP   de   
06EE   CD 10 0D               CALL   stringLength   
06F1   E5                     PUSH   hl   
06F2   DD E9                  JP   (ix)   
06F4                             ; /t
06F4                T:           
06F4   C3 F2 09               JP   true1   
06F7                             ; /var
06F7                             ; --
06F7                VAR:         
06F7                VARIABLES:      
06F7   21 00 5F               LD   hl,VARS   
06FA   C3 E6 0B               JP   constant   
06FD                             ;********************** PAGE 6 END *********************************************
06FD                          ALIGN   $100   
0700                             ;********************** PAGE 7 BEGIN *********************************************
0700                             ; /adr addrOf
0700                             ; char -- addr
0700                ADR:         
0700                ADDROF:      
0700   E1                     POP   hl   ; a = char
0701   7D                     LD   a,l   
0702   CD 29 0C               CALL   getVarAddr   
0705   E5                     PUSH   hl   
0706                ADDROF2:      
0706   DD E9                  JP   (ix)   
0708                             ; 13
0708                             ; /whi while true else break from loop
0708                             ; --
0708                WHI:         
0708                WHILE:       
0708   E1                     POP   hl   ; hl = condition, break if false
0709   7D                     LD   a,l   
070A   B4                     OR   h   
070B   28 02                  JR   z,while1   
070D   DD E9                  JP   (ix)   
070F                WHILE1:      
070F   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0711   FD 54                  LD   d,iyh   
0713   21 08 00               LD   hl,8   
0716   19                     ADD   hl,de   
0717   23                     INC   hl   
0718   23                     INC   hl   
0719   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
071C   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
071F   C3 CC 08               JP   blockEnd   
0722                             ; /byt
0722                BYT:         
0722                BYTEMODE:      
0722   3E 01                  LD   a,1   
0724                BYTEMODE1:      
0724   32 F0 5F               LD   (vDataWidth),a   
0727   DD E9                  JP   (ix)   
0729                             ; //
0729                CMT:         
0729                COMMENT:      
0729   03                     INC   bc   ; point to next char
072A   0A                     LD   a,(bc)   
072B   FE 20                  CP   " "   ; terminate on any char less than SP
072D   30 FA                  JR   nc,comment   
072F   0B                     DEC   bc   
0730   DD E9                  JP   (ix)   
0732                HEX:         
0732   3E 10                  LD   a,16   
0734   C3 4C 06               JP   decBase1   
0737                ERROR1:      
0737   21 01 00               LD   hl,1   ; error 1: unknown command
073A   C3 16 0E               JP   error   
073D                             ; /fre
073D                             ; adr --
073D                FRE:         
073D                MEMFREE:      
073D   E1                     POP   hl   
073E                MEMFREE1:      
073E   22 EA 5F               LD   (vHeapPtr),hl   
0741   DD E9                  JP   (ix)   
0743                             ; /fra
0743                             ; adr --
0743                FRA:         
0743                MEMFREEARRAY:      
0743   E1                     POP   hl   
0744   2B                     DEC   hl   
0745   2B                     DEC   hl   
0746   18 F6                  JR   memFree1   
0748                             ; /max maximum
0748                             ; a b -- c
0748                MAX:         
0748                MAXIMUM:      
0748   E1                     POP   hl   
0749   D1                     POP   de   
074A   E5                     PUSH   hl   
074B   B3                     OR   e   
074C   ED 52                  SBC   hl,de   
074E   30 02                  JR   nc,maximum1   
0750   E1                     POP   hl   
0751   D5                     PUSH   de   
0752                MAXIMUM1:      
0752   DD E9                  JP   (ix)   
0754                             ; /min minimum
0754                             ; a b -- c
0754                MIN:         
0754                MINIMUM:      
0754   E1                     POP   hl   
0755   D1                     POP   de   
0756   E5                     PUSH   hl   
0757   B3                     OR   e   
0758   ED 52                  SBC   hl,de   
075A   38 02                  JR   c,minimum1   
075C   E1                     POP   hl   
075D   D5                     PUSH   de   
075E                MINIMUM1:      
075E   DD E9                  JP   (ix)   
0760                             ; /voi clear out returned values
0760                             ; ?? --
0760                VOI:         
0760                VOID:        
0760   FD 5D                  LD   e,iyl   
0762   FD 54                  LD   d,iyh   
0764   EB                     EX   de,hl   
0765   F9                     LD   sp,hl   
0766   DD E9                  JP   (ix)   
0768                             ; /wrd
0768                WRD:         
0768                WORDMODE:      
0768   3E 02                  LD   a,2   
076A   C3 24 07               JP   byteMode1   
076D                             ; /xor
076D                XOR:         
076D   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
076E                XOR1:        
076E   E1                     POP   hl   
076F   7B                     LD   a,e   
0770   AD                     XOR   l   
0771   6F                     LD   l,a   
0772   7A                     LD   a,d   
0773   AC                     XOR   h   
0774   67                     LD   h,a   
0775   C3 D8 02               JP   add3   
0778                             ; /cur cursor hide / show
0778                             ; bool --
0778                CUR:         
0778                CURSORSHOW:      
0778   E1                     POP   hl   
0779   23                     INC   hl   
077A   7D                     LD   a,l   
077B   B4                     OR   h   
077C   3E 68                  LD   a,"h"   
077E   28 02                  JR   z,cursorShow1   
0780   3E 6C                  LD   a,"l"   
0782                CURSORSHOW1:      
0782   CD B3 0E               CALL   ansiCursorShow   
0785   DD E9                  JP   (ix)   
0787                             ;*******************************************************************
0787                             ; implementations continued
0787                             ;*******************************************************************
0787                DIV1:        
0787   E1                     POP   hl   ; hl = arg_b
0788   D1                     POP   de   ; de = arg_a
0789   03                     INC   bc   
078A   0A                     LD   a,(bc)   
078B   FE 3D                  CP   "="   
078D   28 02                  JR   z,div2   
078F   0B                     DEC   bc   ; /
0790   EB                     EX   de,hl   
0791                DIV2:        
0791   F5                     PUSH   af   ; preserve af, bc
0792   C5                     PUSH   bc   
0793   44 4D                  LD   bc,hl   
0795   CD 5D 0A               CALL   divide   
0798   EB                     EX   de,hl   
0799   ED 53 FC 5F            LD   (vRemain),de   
079D   C1                     POP   bc   ; restore
079E   F1                     POP   af   
079F   C3 9D 02               JP   sub3   
07A2                COMMA:       
07A2   03                     INC   bc   
07A3   0A                     LD   a,(bc)   
07A4   FE 63                  CP   "c"   ; .c print char
07A6   28 07                  JR   z,readChar   
07A8   FE 73                  CP   "s"   ; .s print string
07AA   28 0C                  JR   z,readString   
07AC   0B                     DEC   bc   
07AD   18 2B                  JR   readNumber   ; .  print number, fall through
07AF                READCHAR:      
07AF   CD 81 00               CALL   getchar   
07B2   26 00                  LD   h,0   
07B4   6F                     LD   l,a   
07B5   E5                     PUSH   hl   
07B6   DD E9                  JP   (ix)   
07B8                READSTRING:      
07B8   ED 5B EA 5F            LD   de,(vHeapPtr)   
07BC   D5                     PUSH   de   ; return start of string
07BD                READSTRING1:      
07BD   CD 81 00               CALL   getchar   
07C0   FE 0D                  CP   "\r"   
07C2   28 0D                  JR   z,readString2   
07C4   12                     LD   (de),a   
07C5   13                     INC   de   
07C6   3A F3 5F               LD   a,(vEcho)   
07C9   3C                     INC   a   
07CA   20 F1                  JR   nz,readString1   
07CC   CD 85 00               CALL   putchar   
07CF   18 EC                  JR   readString1   
07D1                READSTRING2:      
07D1   AF                     XOR   a   
07D2   12                     LD   (de),a   
07D3   13                     INC   de   
07D4   ED 53 EA 5F            LD   (vHeapPtr),de   
07D8   DD E9                  JP   (ix)   
07DA                READNUMBER:      
07DA   DD E5                  PUSH   ix   
07DC                          ;*Macro unroll:  PERFORM readString
07DC   DD 21 E3 07            LD   ix,performM_1684S1224   
07E0   C3 B8 07               JP   readString   
07E3                PERFORMM_1684S1224:      
07E3   60 69                  LD   hl,bc   ; save bc, hl = string*
07E5   E3                     EX   (sp),hl   
07E6   22 EA 5F               LD   (vHeapPtr),hl   ; restore heap* to before string
07E9   44 4D                  LD   bc,hl   
07EB   0A                     LD   a,(bc)   
07EC   FE 2D                  CP   "-"   
07EE   28 11                  JR   z,readNumber1   
07F0   FE 24                  CP   "$"   
07F2   28 17                  JR   z,readNumber2   
07F4   FE 30                  CP   "0"   
07F6   30 09                  JR   nc,readNumber1   
07F8   FE 3A                  CP   "9"+1   
07FA   38 05                  JR   c,readNumber1   
07FC   21 00 00               LD   hl,0   
07FF   18 12                  JR   readNumber3   
0801                READNUMBER1:      
0801                          ;*Macro unroll:  PERFORM num
0801   DD 21 08 08            LD   ix,performM_1701S1241   
0805   C3 9C 08               JP   num   
0808                PERFORMM_1701S1241:      
0808   E1                     POP   hl   
0809   18 08                  JR   readNumber3   
080B                READNUMBER2:      
080B                          ;*Macro unroll:  PERFORM hexNum
080B   DD 21 12 08            LD   ix,performM_1705S1245   
080F   C3 23 08               JP   hexNum   
0812                PERFORMM_1705S1245:      
0812   E1                     POP   hl   
0813                READNUMBER3:      
0813   C1                     POP   bc   
0814   DD E1                  POP   ix   
0816   E5                     PUSH   hl   
0817   DD E9                  JP   (ix)   
0819                             ; ~ bitwise invert
0819                TILDE:       
0819                INVERT:      
0819   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
081A   7D                     LD   a,l   
081B   2F                     CPL      
081C   6F                     LD   l,a   
081D   7C                     LD   a,h   
081E   2F                     CPL      
081F   67                     LD   h,a   
0820   C3 D8 02               JP   add3   
0823                             ; $ hex                         ; 22
0823                DOLLAR:      
0823                HEXNUM:      
0823   21 00 00               LD   hl,0   ; Clear hl to accept the number
0826                HEXNUM1:      
0826   03                     INC   bc   
0827   0A                     LD   a,(bc)   ; Get the character which is a numeral
0828   CB 77                  BIT   6,a   ; is it uppercase alpha?
082A   28 02                  JR   z,hexnum2   ; no a decimal
082C   D6 07                  SUB   7   ; sub 7  to make $a - $F
082E                HEXNUM2:      
082E   D6 30                  SUB   $30   ; form decimal digit
0830   DA BE 08               JP   c,num2   
0833   FE 10                  CP   $0F+1   
0835   D2 BE 08               JP   nc,num2   
0838   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0839   29                     ADD   hl,hl   ; 4X
083A   29                     ADD   hl,hl   ; 8X
083B   29                     ADD   hl,hl   ; 16X
083C   85                     ADD   a,l   ; add into bottom of hl
083D   6F                     LD   l,a   
083E   18 E6                  JR   hexnum1   
0840                             ; ? if                            23
0840                             ; condition then else -- value
0840                QUESTION:      
0840                IF:          
0840   D1                     POP   de   ; de = else
0841   E1                     POP   hl   ; hl = then
0842   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0843   7C                     LD   a,h   
0844   B5                     OR   l   
0845   E1                     POP   hl   ; hl = then
0846   CA A0 03               JP   z,go1   ; if z de = else
0849   EB                     EX   de,hl   ; condition = false, de = then
084A   C3 A0 03               JP   go1   
084D                             ; string                        ;38
084D                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
084D                QUOTE:       
084D                STRING:      
084D   2A EA 5F               LD   hl,(vHeapPtr)   ; hl = heap*
0850   E5                     PUSH   hl   ; save start of string
0851   0A                     LD   a,(bc)   
0852   5F                     LD   e,a   ; e = matching terminator
0853   03                     INC   bc   ; point to next char
0854   18 03                  JR   string2   
0856                STRING1:      
0856   77                     LD   (hl),a   
0857   23                     INC   hl   ; increase count
0858   03                     INC   bc   ; point to next char
0859                STRING2:      
0859   0A                     LD   a,(bc)   
085A   BB                     CP   e   ; is it the string terminator
085B   28 02                  JR   z,string3   
085D   18 F7                  JR   string1   
085F                STRING3:      
085F   AF                     XOR   a   ; write NUL to terminate string
0860   77                     LD   (hl),a   ; hl = end of string
0861   23                     INC   hl   
0862   22 EA 5F               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0865   DD E9                  JP   (ix)   
0867                             ; %a .. %z                      43
0867                             ; -- value
0867                             ; returns value of arg
0867                PERCENT:      
0867                ARG:         
0867   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
086A   FD 56 05               LD   d,(iy+5)   
086D   EB                     EX   de,hl   
086E   7D                     LD   a,l   ; arg_list* == null, skip
086F   B4                     OR   h   
0870   28 1A                  JR   z,arg0a   
0872   23                     INC   hl   ; a = num_args, hl = arg_list*
0873   7E                     LD   a,(hl)   
0874   23                     INC   hl   
0875   B7                     OR   a   
0876   28 14                  JR   z,arg0a   ; num_args == 0, skip
0878   5F                     LD   e,a   ; e = a = num_args
0879   03                     INC   bc   ; a = next char = dollar_name
087A   0A                     LD   a,(bc)   
087B   C5                     PUSH   bc   ; save IP
087C   43                     LD   b,e   ; b = e = num_args
087D   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0880   FD 56 03               LD   d,(iy+3)   
0883                ARG0:        
0883   1B                     DEC   de   ; a = dollar_name, de = next arg*
0884   1B                     DEC   de   
0885   BE                     CP   (hl)   
0886   28 09                  JR   z,arg1   
0888   23                     INC   hl   ; hl = next arg_list*
0889   10 F8                  DJNZ   arg0   
088B   C1                     POP   bc   ; no match, restore IP
088C                ARG0A:       
088C   11 00 00               LD   de,0   ; return 0
088F   18 08                  JR   arg1a   
0891                ARG1:        
0891   C1                     POP   bc   ; restore IP
0892   EB                     EX   de,hl   ; hl = arg*
0893   22 FA 5F               LD   (vPointer),hl   ; store arg* in setter
0896   5E                     LD   e,(hl)   
0897   23                     INC   hl   
0898   56                     LD   d,(hl)   ; de = arg
0899                ARG1A:       
0899   D5                     PUSH   de   ; push arg
089A   DD E9                  JP   (ix)   
089C                             ; 0..9 number                   37
089C                NUM:         
089C   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
089F   0A                     LD   a,(bc)   ; Get numeral or -
08A0   FE 2D                  CP   "-"   
08A2   20 01                  JR   nz,num0   
08A4   03                     INC   bc   ; move to next char, no flags affected
08A5                NUM0:        
08A5   08                     EX   af,af'   ; save zero flag = 0 for later
08A6                NUM1:        
08A6   0A                     LD   a,(bc)   ; read digit
08A7   D6 30                  SUB   "0"   ; less than 0?
08A9   38 13                  JR   c,num2   ; not a digit, exit loop
08AB   FE 0A                  CP   10   ; greater that 9?
08AD   30 0F                  JR   nc,num2   ; not a digit, exit loop
08AF   03                     INC   bc   ; inc IP
08B0   54 5D                  LD   de,hl   ; multiply hl * 10
08B2   29                     ADD   hl,hl   
08B3   29                     ADD   hl,hl   
08B4   19                     ADD   hl,de   
08B5   29                     ADD   hl,hl   
08B6   85                     ADD   a,l   ; add digit in a to hl
08B7   6F                     LD   l,a   
08B8   3E 00                  LD   a,0   
08BA   8C                     ADC   a,h   
08BB   67                     LD   h,a   
08BC   18 E8                  JR   num1   
08BE                NUM2:        
08BE   0B                     DEC   bc   
08BF   08                     EX   af,af'   ; restore zero flag
08C0   20 07                  JR   nz,num3   
08C2   EB                     EX   de,hl   ; negate the value of hl
08C3   21 00 00               LD   hl,0   
08C6   B7                     OR   a   ; jump to sub2
08C7   ED 52                  SBC   hl,de   
08C9                NUM3:        
08C9   E5                     PUSH   hl   ; Put the number on the stack
08CA   DD E9                  JP   (ix)   ; and process the next character
08CC                             ; }                               58
08CC                RBRACE:      
08CC                BLOCKEND:      
08CC   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
08CF   FD 56 01               LD   d,(iy+1)   
08D2   ED 53 08 60            LD   (vTemp1),de   
08D6   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
08D9   FD 56 07               LD   d,(iy+7)   
08DC   ED 53 0A 60            LD   (vTemp2),de   
08E0   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
08E3   FD 56 03               LD   d,(iy+3)   
08E6   EB                     EX   de,hl   
08E7   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
08EA   FD 56 01               LD   d,(iy+1)   
08ED   13                     INC   de   ; for carry flag <=
08EE   B7                     OR   a   
08EF   ED 52                  SBC   hl,de   
08F1   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
08F3   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
08F5   FD 5D                  LD   e,iyl   
08F7   21 08 00               LD   hl,8   
08FA   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
08FB   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
08FC   18 0C                  JR   blockEnd2   
08FE                BLOCKEND1:      ; same scope
08FE   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0901   FD 56 03               LD   d,(iy+3)   
0904   EB                     EX   de,hl   
0905   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0907   FD 5D                  LD   e,iyl   
0909   EB                     EX   de,hl   
090A                BLOCKEND2:      
090A   44 4D                  LD   bc,hl   ; bc = hl = BP
090C   B7                     OR   a   ; hl = BP - SP = count
090D   ED 72                  SBC   hl,sp   
090F   7D                     LD   a,l   
0910   B4                     OR   h   
0911   28 09                  JR   z,blockEnd3   
0913   C5                     PUSH   bc   ; bc = count, hl = BP
0914   44 4D                  LD   bc,hl   
0916   E1                     POP   hl   
0917   2B                     DEC   hl   ; hl = BP-1
0918   1B                     DEC   de   ; de = args*-1
0919   ED B8                  LDDR      
091B   13                     INC   de   
091C                BLOCKEND3:      
091C   EB                     EX   de,hl   ; sp = de = new tos*
091D   F9                     LD   sp,hl   
091E   ED 4B 0A 60            LD   bc,(vTemp2)   
0922   FD 2A 08 60            LD   iy,(vTemp1)   
0926   ED 5B EE 5F            LD   de,(vRecurPtr)   ; de = recur vector
092A   7B                     LD   a,e   ; check for NUL
092B   B2                     OR   d   
092C   20 02                  JR   nz,blockEnd4   
092E   DD E9                  JP   (ix)   
0930                BLOCKEND4:      
0930   21 00 00               LD   hl,0   ; clear recur vector
0933   22 EE 5F               LD   (vRecurPtr),hl   
0936   C3 A0 03               JP   go1   ; execute de
0939                GOBLOCK:      
0939   ED 53 08 60            LD   (vTemp1),de   ; save de
093D   21 00 5B               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0940   FD 54                  LD   d,iyh   
0942   FD 5D                  LD   e,iyl   
0944   B7                     OR   a   ; if stack* == BP then this is the root_scope
0945   ED 52                  SBC   hl,de   
0947   ED 5B 08 60            LD   de,(vTemp1)   ; restore de
094B   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
094C   B4                     OR   h   
094D   3E 00                  LD   a,0   
094F   28 6A                  JR   z,goFunc8   
0951   C5                     PUSH   bc   ; push IP
0952   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0955   FD 46 05               LD   b,(iy+5)   
0958   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
095B   FD 66 03               LD   h,(iy+3)   
095E                GOBLOCK2:      
095E   C5                     PUSH   bc   ; arg_list*
095F   E5                     PUSH   hl   ; first_arg*
0960   FD E5                  PUSH   iy   ; push BP
0962   FD 21 00 00            LD   iy,0   ; BP = SP
0966   FD 39                  ADD   iy,sp   
0968                GOBLOCK3:      
0968   42 4B                  LD   bc,de   ; bc = de = block*-1
096A   DD E9                  JP   (ix)   
096C                GOFUNC:      ; execute func
096C   EB                     EX   de,hl   ; hl = func*
096D   5E                     LD   e,(hl)   ; de = partial_array*
096E   23                     INC   hl   
096F   56                     LD   d,(hl)   
0970   23                     INC   hl   
0971   7B                     LD   a,e   ; if partial_array* == null skip
0972   B2                     OR   d   
0973   28 21                  JR   z,goFunc3   
0975   ED 43 08 60            LD   (vTemp1),bc   
0979   22 0A 60               LD   (vTemp2),hl   ; save bc,hl
097C   EB                     EX   de,hl   ; hl = partial_array*
097D   2B                     DEC   hl   ; bc = count
097E   46                     LD   b,(hl)   
097F   2B                     DEC   hl   
0980   4E                     LD   c,(hl)   
0981   23                     INC   hl   ; hl = array data*
0982   23                     INC   hl   
0983   18 06                  JR   goFunc2   ; push each item on stack
0985                GOFUNC1:      
0985   5E                     LD   e,(hl)   ; de = partial item
0986   23                     INC   hl   
0987   56                     LD   d,(hl)   
0988   23                     INC   hl   
0989   D5                     PUSH   de   ; push on stack
098A   0B                     DEC   bc   
098B                GOFUNC2:      
098B   79                     LD   a,c   ; if count != 0 then loop
098C   B0                     OR   b   
098D   20 F6                  JR   nz,goFunc1   
098F   ED 4B 08 60            LD   bc,(vTemp1)   ; restore bc
0993   2A 0A 60               LD   hl,(vTemp2)   ; restore hl
0996                GOFUNC3:      
0996   5E                     LD   e,(hl)   ; de = block*
0997   23                     INC   hl   
0998   56                     LD   d,(hl)   
0999   23                     INC   hl   
099A   ED 53 08 60            LD   (vTemp1),de   ; save block*
099E   5E                     LD   e,(hl)   ; de = arg_list*
099F   23                     INC   hl   
09A0   56                     LD   d,(hl)   
09A1   23                     INC   hl   
09A2   EB                     EX   de,hl   ; hl = arg_list*
09A3   ED 5B 08 60            LD   de,(vTemp1)   ; restore de = block*
09A7   7D                     LD   a,l   ; if arg_list* == null a = 0
09A8   B4                     OR   h   
09A9   20 03                  JR   nz,goFunc4   
09AB   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
09AC   18 0D                  JR   goFunc8   
09AE                GOFUNC4:      ; allocate locals
09AE   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
09AF   18 03                  JR   goFunc6   
09B1                GOFUNC5:      ; loop
09B1   3B                     DEC   sp   
09B2   3B                     DEC   sp   
09B3   3D                     DEC   a   
09B4                GOFUNC6:      
09B4   B7                     OR   a   
09B5   20 FA                  JR   nz,goFunc5   ; end loop
09B7                GOFUNC7:      
09B7   23                     INC   hl   ; a = num_args* x 2
09B8   7E                     LD   a,(hl)   
09B9   2B                     DEC   hl   
09BA   87                     ADD   a,a   ; a *= 2
09BB                GOFUNC8:      
09BB   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
09BC   44 4D                  LD   bc,hl   
09BE   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
09C1   85                     ADD   a,l   
09C2   6F                     LD   l,a   
09C3   39                     ADD   hl,sp   
09C4   18 98                  JR   goBlock2   
09C6                             ; =                              21
09C6                             ; value _oldValue --            ; uses address in vPointer 15
09C6                ASSIGN:      
09C6   E1                     POP   hl   ; discard last accessed value
09C7   E1                     POP   hl   ; hl = new value
09C8                ASSIGN0:      
09C8   EB                     EX   de,hl   ; de = new value
09C9   2A FA 5F               LD   hl,(vPointer)   
09CC                ASSIGN1:      ; entry point from defineEnd
09CC   73                     LD   (hl),e   
09CD   3A F0 5F               LD   a,(vDataWidth)   
09D0   3D                     DEC   a   ; is it byte?
09D1   28 02                  JR   z,assign2   
09D3   23                     INC   hl   
09D4   72                     LD   (hl),d   
09D5                ASSIGN2:      
09D5   DD E9                  JP   (ix)   
09D7                             ; hl = value1, de = value2
09D7                             ; hl = result
09D7                EQUALS:      
09D7   B7                     OR   a   ; reset the carry flag
09D8   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
09DA   28 16                  JR   z,true1   
09DC   18 1A                  JR   false1   
09DE                NOTEQUALS:      
09DE   B7                     OR   a   ; reset the carry flag
09DF   ED 52                  SBC   hl,de   
09E1   20 0F                  JR   nz,true1   
09E3   18 13                  JR   false1   
09E5                             ; hl = value1 de = value2
09E5                             ; hl = result
09E5                LESSTHANEQ:      
09E5   B7                     OR   a   
09E6   ED 52                  SBC   hl,de   
09E8   18 05                  JR   lessthan1   
09EA                             ; hl = value1 de = value2
09EA                             ; hl = result
09EA                LESSTHAN:      
09EA   B7                     OR   a   
09EB   ED 52                  SBC   hl,de   
09ED   28 09                  JR   z,false1   
09EF                LESSTHAN1:      
09EF   FA F8 09               JP   m,false1   
09F2                TRUE1:       
09F2   21 FF FF               LD   hl,TRUE   
09F5   E5                     PUSH   hl   
09F6   DD E9                  JP   (ix)   
09F8                NULL1:       
09F8                NIL:         
09F8                FALSE1:      
09F8   21 00 00               LD   hl,FALSE   
09FB   E5                     PUSH   hl   
09FC   DD E9                  JP   (ix)   
09FE                SPREAD:      
09FE   E1                     POP   hl   ; hl = array*
09FF   ED 43 08 60            LD   (vTemp1),bc   ; save bc
0A03   2B                     DEC   hl   ; bc = length
0A04   46                     LD   b,(hl)   
0A05   2B                     DEC   hl   
0A06   4E                     LD   c,(hl)   
0A07   23                     INC   hl   ; move back to array 0
0A08   23                     INC   hl   
0A09   18 0D                  JR   spread3   
0A0B                SPREAD1:      
0A0B   5E                     LD   e,(hl)   ; e = lsb data at hl
0A0C   23                     INC   hl   
0A0D   3A F0 5F               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0A10   57                     LD   d,a   
0A11   15                     DEC   d   
0A12   28 02                  JR   z,spread2   
0A14   56                     LD   d,(hl)   ; d = msb data at hl
0A15   23                     INC   hl   
0A16                SPREAD2:      
0A16   D5                     PUSH   de   ; return de
0A17   0B                     DEC   bc   ; count--
0A18                SPREAD3:      
0A18   79                     LD   a,c   ; exit loop if bc == 0
0A19   B0                     OR   b   
0A1A   20 EF                  JR   nz,spread1   
0A1C   ED 4B 08 60            LD   bc,(vTemp1)   ; restore bc
0A20   DD E9                  JP   (ix)   
0A22                             ; shiftLeft
0A22                             ; value count <<
0A22                             ; count variable <<=
0A22                SHIFTLEFT:      
0A22   E1                     POP   hl   ; de = arg_a, hl = arg_b
0A23   D1                     POP   de   
0A24   03                     INC   bc   
0A25   0A                     LD   a,(bc)   
0A26   FE 3D                  CP   "="   
0A28   28 02                  JR   z,shiftLeft2   
0A2A   0B                     DEC   bc   
0A2B   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0A2C                SHIFTLEFT2:      
0A2C   ED 43 08 60            LD   (vTemp1),bc   ; save IP
0A30   43                     LD   b,e   ; b = loop counter
0A31   04                     INC   b   ; test for counter=0 case
0A32   18 01                  JR   shiftLeft4   
0A34                SHIFTLEFT3:      
0A34   29                     ADD   hl,hl   ; left shift hl
0A35                SHIFTLEFT4:      
0A35   10 FD                  DJNZ   shiftLeft3   
0A37   ED 4B 08 60            LD   bc,(vTemp1)   ; restore IP
0A3B   C3 9D 02               JP   sub3   
0A3E                             ; shiftRight
0A3E                             ; value count >>
0A3E                             ; count variable >>=
0A3E                SHIFTRIGHT:      
0A3E   E1                     POP   hl   ; de = arg_a, hl = arg_b
0A3F   D1                     POP   de   
0A40   03                     INC   bc   
0A41   0A                     LD   a,(bc)   
0A42   FE 3D                  CP   "="   
0A44   28 02                  JR   z,shiftRight2   
0A46   0B                     DEC   bc   
0A47   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0A48                SHIFTRIGHT2:      
0A48   ED 43 08 60            LD   (vTemp1),bc   ; save IP
0A4C   43                     LD   b,e   ; b = loop counter
0A4D   04                     INC   b   ; test for counter=0 case
0A4E   18 04                  JR   shiftRight4   
0A50                SHIFTRIGHT3:      
0A50   CB 3C                  SRL   h   ; right shift hl
0A52   CB 1D                  RR   l   
0A54                SHIFTRIGHT4:      
0A54   10 FA                  DJNZ   shiftRight3   
0A56   ED 4B 08 60            LD   bc,(vTemp1)   ; restore IP
0A5A   C3 9D 02               JP   sub3   
0A5D                             ; division subroutine.
0A5D                             ; bc: divisor, de: dividend, hl: remainder
0A5D                DIVIDE:      
0A5D   21 00 00               LD   hl,0   ; zero the remainder
0A60   3E 10                  LD   a,16   ; loop counter
0A62                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0A62   CB 21                  SLA   c   
0A64   CB 10                  RL   b   
0A66   ED 6A                  ADC   hl,hl   
0A68   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0A6A   38 03                  JR   c,divide2   
0A6C   0C                     INC   c   
0A6D   18 01                  JR   divide3   
0A6F                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0A6F   19                     ADD   hl,de   
0A70                DIVIDE3:      
0A70   3D                     DEC   a   
0A71   20 EF                  JR   nz,divide1   
0A73   50 59                  LD   de,bc   ; result from bc to de
0A75   C9                     RET      
0A76                DOTNEXT:      
0A76   3A F4 5F               LD   a,(vStrMode)   ; if string mode then exit
0A79   3C                     INC   a   
0A7A   20 02                  JR   nz,dotNext1   
0A7C   DD E9                  JP   (ix)   
0A7E                DOTNEXT1:      
0A7E   11 00 5E               LD   de,BUFFER   
0A81   2A E8 5F               LD   hl,(vBufPtr)   
0A84   36 00                  LD   (hl),0   ; store NUL at end of string
0A86   ED 53 E8 5F            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0A8A   EB                     EX   de,hl   ; hl = BUFFER
0A8B   CD 44 0C               CALL   putstr   
0A8E   DD E9                  JP   (ix)   
0A90                             ; arg_list - parses arg_list e.g. ab:c
0A90                             ; -- arg_list*
0A90                PARSEARGS:      
0A90   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0A93   2A EA 5F               LD   hl,(vHeapPtr)   ; hl = heap*
0A96   E5                     PUSH   hl   ; save start of arg_list
0A97   23                     INC   hl   ; skip length fields to start of string
0A98   23                     INC   hl   
0A99   03                     INC   bc   ; point to next char
0A9A                PARSEARGS1:      
0A9A   0A                     LD   a,(bc)   
0A9B   FE 3A                  CP   ":"   ; ":" switches from args to locals
0A9D   20 03                  JR   nz,parseArgs1a   
0A9F   14                     INC   d   ; non zero value local count acts as flag
0AA0   18 10                  JR   parseArgs3   
0AA2                PARSEARGS1A:      
0AA2   FE 61                  CP   "a"   ; < "a" terminates arg_list
0AA4   38 0F                  JR   c,parseArgs4   
0AA6   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0AA8   30 0B                  JR   nc,parseArgs4   
0AAA                PARSEARGS2:      
0AAA   77                     LD   (hl),a   
0AAB   23                     INC   hl   
0AAC   1C                     INC   e   ; increase arg count
0AAD   AF                     XOR   a   
0AAE   B2                     OR   d   
0AAF   28 01                  JR   z,parseArgs3   
0AB1   14                     INC   d   ; if d > 0 increase local count
0AB2                PARSEARGS3:      
0AB2   03                     INC   bc   ; point to next char
0AB3   18 E5                  JR   parseArgs1   
0AB5                PARSEARGS4:      
0AB5   0B                     DEC   bc   
0AB6   AF                     XOR   a   
0AB7   B2                     OR   d   
0AB8   28 01                  JR   z,parseArgs5   
0ABA   15                     DEC   d   ; remove initial inc
0ABB                PARSEARGS5:      
0ABB   23                     INC   hl   
0ABC   22 EA 5F               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0ABF   E1                     POP   hl   ; hl = start of arg_list
0AC0   72                     LD   (hl),d   ; write number of locals at start - 1
0AC1   23                     INC   hl   
0AC2   73                     LD   (hl),e   ; write number of args + locals at start - 2
0AC3   2B                     DEC   hl   
0AC4   E3                     EX   (sp),hl   
0AC5   E9                     JP   (hl)   
0AC6                             ; create block: parses block e.g. 00bbIC4uLi4g
0AC6                             ; -- block*
0AC6                PARSEBLOCK:      
0AC6   C5                     PUSH   bc   ; return pointer to first { of block
0AC7   03                     INC   bc   
0AC8   16 01                  LD   d,1   ; nesting: count first parenthesis
0ACA                PARSEBLOCK1:      ; Skip to end of definition
0ACA   0A                     LD   a,(bc)   ; Get the next character
0ACB   03                     INC   bc   ; Point to next character
0ACC   FE 21                  CP   " " + 1   ; ignore whitespace
0ACE   38 FA                  JR   c,parseBlock1   
0AD0   FE 27                  CP   "'"   ; quote char
0AD2   28 0F                  JR   z,parseBlock2   
0AD4   FE 22                  CP   DQ   ; double quote char
0AD6   28 0B                  JR   z,parseBlock2   
0AD8   FE 60                  CP   "`"   ; grave char
0ADA   28 07                  JR   z,parseBlock2   
0ADC   CB 7A                  BIT   7,d   
0ADE   20 EA                  JR   nz,parseBlock1   
0AE0   C3 E9 0A               JP   parseBlock3   
0AE3                PARSEBLOCK2:      
0AE3   3E 80                  LD   a,$80   
0AE5   AA                     XOR   d   
0AE6   57                     LD   d,a   
0AE7   18 E1                  JR   parseBlock1   
0AE9                PARSEBLOCK3:      
0AE9   FE 28                  CP   "("   
0AEB   28 16                  JR   z,parseBlock4   
0AED   FE 7B                  CP   "{"   
0AEF   28 12                  JR   z,parseBlock4   
0AF1   FE 5B                  CP   "["   
0AF3   28 0E                  JR   z,parseBlock4   
0AF5   FE 29                  CP   ")"   
0AF7   28 0D                  JR   z,parseBlock5   
0AF9   FE 7D                  CP   "}"   
0AFB   28 09                  JR   z,parseBlock5   
0AFD   FE 5D                  CP   "]"   
0AFF   28 05                  JR   z,parseBlock5   
0B01   18 C7                  JR   parseBlock1   
0B03                PARSEBLOCK4:      
0B03   14                     INC   d   
0B04   18 C4                  JR   parseBlock1   
0B06                PARSEBLOCK5:      
0B06   15                     DEC   d   
0B07   20 C1                  JR   nz,parseBlock1   ; get the next element
0B09   60 69                  LD   hl,bc   ; hl = IP
0B0B   11 26 60               LD   de,HEAP   ; is IP pointing to object in heap
0B0E   B7                     OR   a   ; IP - HEAP
0B0F   ED 52                  SBC   hl,de   
0B11   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0B13   28 1C                  JR   z,parseBlock6   
0B15   60 69                  LD   hl,bc   ; hl = IP
0B17   D1                     POP   de   ; de = block*
0B18   ED 43 08 60            LD   (vTemp1),bc   ; save IP
0B1C   B7                     OR   a   ; bc = size
0B1D   ED 52                  SBC   hl,de   
0B1F   44 4D                  LD   bc,hl   
0B21   EB                     EX   de,hl   ; hl = block* de = heap*
0B22   ED 5B EA 5F            LD   de,(vHeapPtr)   
0B26   D5                     PUSH   de   ; return hblock*
0B27   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0B29   ED 53 EA 5F            LD   (vHeapPtr),de   ; heap* += size
0B2D   ED 4B 08 60            LD   bc,(vTemp1)   ; restore IP
0B31                PARSEBLOCK6:      
0B31   0B                     DEC   bc   ; balanced, exit
0B32   E1                     POP   hl   ; hl = block*
0B33   E3                     EX   (sp),hl   ; return to caller
0B34   E9                     JP   (hl)   
0B35                             ; create function
0B35                             ; arg_list* block* -- func*
0B35                CREATEFUNC:      
0B35   E1                     POP   hl   ; save retrn address
0B36   22 0C 60               LD   (vTemp3),hl   
0B39   ED 43 08 60            LD   (vTemp1),bc   ; save IP
0B3D   E1                     POP   hl   ; hl = block*
0B3E   22 0A 60               LD   (vTemp2),hl   ; save block*
0B41   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0B44   FD 56 05               LD   d,(iy+5)   
0B47   7B                     LD   a,e   ; if arg_list == null then make a func
0B48   B2                     OR   d   
0B49   20 09                  JR   nz,createFunc0   
0B4B   21 00 00               LD   hl,0   ; partial_array = null
0B4E   ED 5B EA 5F            LD   de,(vHeapPtr)   ; de = compile*
0B52   18 65                  JR   createFunc5   
0B54                CREATEFUNC0:      
0B54   E1                     POP   hl   ; hl = inner_arg_list*
0B55   E5                     PUSH   hl   ; save inner_arg_list
0B56   ED 5B EA 5F            LD   de,(vHeapPtr)   ; de = compile*
0B5A   7E                     LD   a,(hl)   ; compile inner_num_locals
0B5B   4F                     LD   c,a   ; b = inner_num_locals
0B5C   12                     LD   (de),a   
0B5D   23                     INC   hl   
0B5E   13                     INC   de   
0B5F   7E                     LD   a,(hl)   ; compile inner_length
0B60   12                     LD   (de),a   
0B61   91                     SUB   c   ; a = inner_num args
0B62   23                     INC   hl   
0B63   13                     INC   de   
0B64   B7                     OR   a   ; compile args if inner_length > 0
0B65   28 05                  JR   z,createFunc1   
0B67   4F                     LD   c,a   ; bc = a
0B68   06 00                  LD   b,0   
0B6A   ED B0                  LDIR      
0B6C                CREATEFUNC1:      
0B6C   EB                     EX   de,hl   ; hl = outer_arg_list
0B6D   FD 5E 04               LD   e,(iy+4)   
0B70   FD 56 05               LD   d,(iy+5)   
0B73   EB                     EX   de,hl   
0B74   23                     INC   hl   ; a = outer_length
0B75   7E                     LD   a,(hl)   
0B76   23                     INC   hl   
0B77   B7                     OR   a   
0B78   28 05                  JR   z,createFunc2   
0B7A   4F                     LD   c,a   
0B7B   06 00                  LD   b,0   
0B7D   ED B0                  LDIR      ; append outer_args
0B7F                CREATEFUNC2:      ; a = outer_length
0B7F   47                     LD   b,a   ; b = a = outer_length
0B80   2A EA 5F               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0B83   23                     INC   hl   
0B84   7E                     LD   a,(hl)   ; add outer_length to new length
0B85   80                     ADD   a,b   
0B86   77                     LD   (hl),a   
0B87   2B                     DEC   hl   
0B88   78                     LD   a,b   ; save outer_length in a'
0B89   08                     EX   af,af'   
0B8A   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0B8B   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0B8C   B7                     OR   a   
0B8D   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0B8F   4F                     LD   c,a   ; c = inner_num_locals
0B90   06 00                  LD   b,0   ; bc = inner_num_locals
0B92   23                     INC   hl   ; a = inner_length
0B93   7E                     LD   a,(hl)   
0B94   91                     SUB   c   ; a = inner_num_args
0B95   23                     INC   hl   ; hl = inner_arg_chars
0B96   85                     ADD   a,l   ; hl += a
0B97   6F                     LD   l,a   
0B98   3E 00                  LD   a,0   
0B9A   84                     ADD   a,h   
0B9B   67                     LD   h,a   
0B9C   ED B0                  LDIR      ; append inner_locals
0B9E                CREATEFUNC2A:      
0B9E   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0B9F   12                     LD   (de),a   ; compile partial_array length field
0BA0   13                     INC   de   
0BA1   AF                     XOR   a   
0BA2   12                     LD   (de),a   
0BA3   13                     INC   de   
0BA4   D5                     PUSH   de   ; push partial_array*
0BA5   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0BA6   FD 5E 02               LD   e,(iy+2)   
0BA9   FD 56 03               LD   d,(iy+3)   
0BAC   EB                     EX   de,hl   
0BAD                CREATEFUNC3:      
0BAD   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0BAE   4E                     LD   c,(hl)   
0BAF   2B                     DEC   hl   
0BB0   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0BB1   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0BB2   13                     INC   de   
0BB3   79                     LD   a,c   
0BB4   12                     LD   (de),a   
0BB5   13                     INC   de   
0BB6   10 F5                  DJNZ   createFunc3   ; b = outer_length
0BB8                CREATEFUNC4:      
0BB8   E1                     POP   hl   ; hl = partial_array*
0BB9                CREATEFUNC5:      
0BB9   C1                     POP   bc   ; bc = new_arg_list*
0BBA   D5                     PUSH   de   ; return new func*
0BBB   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0BBC   73                     LD   (hl),e   ; compile partial_array* to func
0BBD   23                     INC   hl   
0BBE   72                     LD   (hl),d   
0BBF   23                     INC   hl   
0BC0   ED 5B 0A 60            LD   de,(vTemp2)   ; de = block*
0BC4   73                     LD   (hl),e   ; compile block* to func
0BC5   23                     INC   hl   
0BC6   72                     LD   (hl),d   
0BC7   23                     INC   hl   
0BC8   71                     LD   (hl),c   ; compile new_arg_list* to func
0BC9   23                     INC   hl   
0BCA   70                     LD   (hl),b   
0BCB   23                     INC   hl   
0BCC   22 EA 5F               LD   (vHeapPtr),hl   ; bump heap ptr
0BCF   ED 4B 08 60            LD   bc,(vTemp1)   ; restore IP
0BD3   2A 0C 60               LD   hl,(vTemp3)   ; jump to return address
0BD6   E9                     JP   (hl)   
0BD7                             ;*******************************************************************
0BD7                             ; general routines
0BD7                             ;*******************************************************************
0BD7                             ; hl = address
0BD7                VARIABLE:      
0BD7   22 FA 5F               LD   (vPointer),hl   
0BDA   5E                     LD   e,(hl)   
0BDB   3A F0 5F               LD   a,(vDataWidth)   
0BDE   3D                     DEC   a   
0BDF   16 00                  LD   d,0   
0BE1   28 03                  JR   z,constant   
0BE3   23                     INC   hl   
0BE4   56                     LD   d,(hl)   
0BE5   2B                     DEC   hl   
0BE6                CONSTANT:      
0BE6   D5                     PUSH   de   
0BE7   DD E9                  JP   (ix)   
0BE9                             ; followed by a table
0BE9                             ; indexed on the 0-25 lowercase letter
0BE9                             ; db lsb(addr)
0BE9                             ; the final item index 26 matches any other char
0BE9                CHARTABLE:      
0BE9   03                     INC   bc   
0BEA   0A                     LD   a,(bc)   
0BEB   FE 7B                  CP   "z"+1   
0BED   30 10                  JR   nc,charTable3   
0BEF   D6 61                  SUB   "a"   
0BF1   38 0C                  JR   c,charTable3   
0BF3                CHARTABLE1:      
0BF3   E1                     POP   hl   
0BF4   85                     ADD   a,l   
0BF5   6F                     LD   l,a   
0BF6   7E                     LD   a,(hl)   ; must have the same msb as the table
0BF7   B7                     OR   a   ; a = 0, nop
0BF8   20 03                  JR   nz,charTable2   
0BFA   C3 37 07               JP   error1   
0BFD                CHARTABLE2:      
0BFD   6F                     LD   l,a   
0BFE   E9                     JP   (hl)   
0BFF                CHARTABLE3:      
0BFF   3E 1A                  LD   a,26   
0C01   0B                     DEC   bc   
0C02   18 EF                  JR   charTable1   
0C04                             ; 8-bit hash string
0C04                             ; bc = str
0C04                             ; a = hash
0C04                IDENTHASH:      
0C04   16 00                  LD   d,0   
0C06                IDENTHASH1:      
0C06   0A                     LD   a,(bc)   ; e = a = char
0C07   FE 21                  CP   " "+1   ; is a = white space
0C09   30 03                  JR   nc,identHash2   
0C0B   0B                     DEC   bc   
0C0C   7A                     LD   a,d   
0C0D   C9                     RET      
0C0E                IDENTHASH2:      ; not white space
0C0E   D6 61                  SUB   "a"   
0C10   5F                     LD   e,a   
0C11   7A                     LD   a,d   ; a = d = hash
0C12   87                     ADD   a,a   ; a *= 4
0C13   87                     ADD   a,a   
0C14   83                     ADD   a,e   ; a += char
0C15   57                     LD   d,a   ; d = a
0C16   03                     INC   bc   ; ip++
0C17   18 ED                  JR   identHash1   
0C19                             ; a = index
0C19                             ; hl = default
0C19                COMMANDTABLE:      
0C19   E3                     EX   (sp),hl   ; hl = table* (sp) = default*
0C1A   54                     LD   d,h   ; d = msb(table*) + 1
0C1B   14                     INC   d   
0C1C   FE 80                  CP   $80   ; index > $80
0C1E   38 01                  JR   c,commandTable2   
0C20   14                     INC   d   ; d = msb(table*) + 2
0C21                COMMANDTABLE2:      
0C21   85                     ADD   a,l   ; hl = dest**
0C22   6F                     LD   l,a   
0C23   5E                     LD   e,(hl)   ; e = lsb(dest*)
0C24   B7                     OR   a   ; if zero use default*
0C25   C8                     RET   z   
0C26   EB                     EX   de,hl   ; hl = dest*
0C27   D1                     POP   de   ; pop default*
0C28   E9                     JP   (hl)   
0C29                GETVARADDR:      
0C29   21 00 00               LD   hl,0   
0C2C   FE 7B                  CP   "z"+1   ; if a > z then exit
0C2E   D0                     RET   nc   
0C2F   D6 41                  SUB   "A"   ; a - 65
0C31   D8                     RET   c   ; if < A then exit
0C32   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0C34   38 05                  JR   c,getVarAddr1   
0C36   D6 06                  SUB   "a"-("Z"+1)   
0C38   FE 1A                  CP   "Z"-"A"+1   
0C3A   D8                     RET   c   ; if < a then exit
0C3B                GETVARADDR1:      
0C3B   87                     ADD   a,a   ; double a
0C3C   6F                     LD   l,a   
0C3D   26 5F                  LD   h,msb(VARS)   
0C3F   C9                     RET      
0C40                PUTSTR0:      
0C40   CD 85 00               CALL   putchar   
0C43   23                     INC   hl   
0C44                PUTSTR:      
0C44   7E                     LD   a,(hl)   
0C45   B7                     OR   a   
0C46   20 F8                  JR   nz,putstr0   
0C48   C9                     RET      
0C49                             ; hl = value
0C49                             ; de = buffer*
0C49                             ; a, bc, de, hl destroyed
0C49                FORMATDEC0:      
0C49   E5                     PUSH   hl   
0C4A   D9                     EXX      
0C4B   E1                     POP   hl   
0C4C                             ; hl = value
0C4C                             ; de' = buffer*
0C4C                             ; a, bc, de, hl destroyed
0C4C                FORMATDEC:      
0C4C   CB 7C                  BIT   7,h   
0C4E   28 0C                  JR   z,formatDec2   
0C50   D9                     EXX      
0C51   3E 2D                  LD   a,"-"   
0C53   12                     LD   (de),a   
0C54   13                     INC   de   
0C55   D9                     EXX      
0C56   AF                     XOR   a   
0C57   95                     SUB   l   
0C58   6F                     LD   l,a   
0C59   9F                     SBC   a,a   
0C5A   94                     SUB   h   
0C5B   67                     LD   h,a   
0C5C                FORMATDEC2:      
0C5C   0E 00                  LD   c,0   ; leading zeros flag = false
0C5E   11 F0 D8               LD   de,-10000   
0C61   CD 7C 0C               CALL   formatDec4   
0C64   11 18 FC               LD   de,-1000   
0C67   CD 7C 0C               CALL   formatDec4   
0C6A   11 9C FF               LD   de,-100   
0C6D   CD 7C 0C               CALL   formatDec4   
0C70   1E F6                  LD   e,-10   
0C72   CD 7C 0C               CALL   formatDec4   
0C75   0C                     INC   c   ; flag = true for at least digit
0C76   1E FF                  LD   e,-1   
0C78   CD 7C 0C               CALL   formatDec4   
0C7B   C9                     RET      
0C7C                FORMATDEC4:      
0C7C   06 2F                  LD   b,"0"-1   
0C7E                FORMATDEC5:      
0C7E   04                     INC   b   
0C7F   19                     ADD   hl,de   
0C80   38 FC                  JR   c,formatDec5   
0C82   ED 52                  SBC   hl,de   
0C84   3E 30                  LD   a,"0"   
0C86   B8                     CP   b   
0C87   20 05                  JR   nz,formatDec6   
0C89   AF                     XOR   a   
0C8A   B1                     OR   c   
0C8B   C8                     RET   z   
0C8C   18 01                  JR   formatDec7   
0C8E                FORMATDEC6:      
0C8E   0C                     INC   c   
0C8F                FORMATDEC7:      
0C8F   78                     LD   a,b   
0C90   D9                     EXX      
0C91   12                     LD   (de),a   
0C92   13                     INC   de   
0C93   D9                     EXX      
0C94   C9                     RET      
0C95                             ; **************************************************************************
0C95                             ; calculate nesting value
0C95                             ; a is char to be tested,
0C95                             ; e is the nesting value (initially 0)
0C95                             ; e is increased by ( and [
0C95                             ; e is decreased by ) and ]
0C95                             ; e has its bit 7 toggled by `
0C95                             ; limited to 127 levels
0C95                             ; **************************************************************************
0C95                NESTING:      
0C95   FE 27                  CP   "'"   ; quote char
0C97   28 0A                  JR   z,nesting0   
0C99   FE 22                  CP   DQ   ; double quote char
0C9B   28 06                  JR   z,nesting0   
0C9D   FE 60                  CP   "`"   ; grave char
0C9F   28 02                  JR   z,nesting0   
0CA1   18 0A                  JR   nesting1   
0CA3                NESTING0:      
0CA3   CB 7B                  BIT   7,e   
0CA5   28 03                  JR   z,nesting1a   
0CA7   CB BB                  RES   7,e   
0CA9   C9                     RET      
0CAA                NESTING1A:      
0CAA   CB FB                  SET   7,e   
0CAC   C9                     RET      
0CAD                NESTING1:      
0CAD   CB 7B                  BIT   7,e   
0CAF   C0                     RET   nz   
0CB0   FE 7B                  CP   "{"   
0CB2   28 08                  JR   z,nesting2   
0CB4   FE 5B                  CP   "["   
0CB6   28 04                  JR   z,nesting2   
0CB8   FE 28                  CP   "("   
0CBA   20 02                  JR   nz,nesting3   
0CBC                NESTING2:      
0CBC   1C                     INC   e   
0CBD   C9                     RET      
0CBE                NESTING3:      
0CBE   FE 7D                  CP   "}"   
0CC0   28 07                  JR   z,nesting4   
0CC2   FE 5D                  CP   "]"   
0CC4   28 03                  JR   z,nesting4   
0CC6   FE 29                  CP   ")"   
0CC8   C0                     RET   nz   
0CC9                NESTING4:      
0CC9   1D                     DEC   e   
0CCA   C9                     RET      
0CCB                PROMPT:      
0CCB   CD DB 0C               CALL   printStr   
0CCE   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0CD3   C9                     RET      
0CD4                CRLF:        
0CD4   CD DB 0C               CALL   printStr   
0CD7   0D 0A 00               .CSTR   "\r\n"   
0CDA   C9                     RET      
0CDB                             ; prints a null teminated string
0CDB                             ; the string should be immediately following the call
0CDB                PRINTSTR:      
0CDB   E3                     EX   (sp),hl   ; swap			
0CDC   CD 44 0C               CALL   putstr   
0CDF   23                     INC   hl   ; inc past NUL
0CE0   E3                     EX   (sp),hl   ; put it back	
0CE1   C9                     RET      
0CE2                             ; hl = number to print in decimal
0CE2                PRINTNUM:      
0CE2   ED 5B E8 5F            LD   de,(vBufPtr)   ; de' = buffer*
0CE6   CD 49 0C               CALL   formatDec0   
0CE9   D9                     EXX      ; restore de = buffer*
0CEA   3E 00                  LD   a,0   ; append NUL to buffer
0CEC   12                     LD   (de),a   
0CED   13                     INC   de   ; string*++,
0CEE   ED 53 E8 5F            LD   (vBufPtr),de   ; update buffer* with buffer*'
0CF2   21 00 5E               LD   hl,BUFFER   
0CF5   22 E8 5F               LD   (vBufPtr),hl   ; reset vBufPtr to vHeapPtr
0CF8   C3 44 0C               JP   putstr   
0CFB                             ; Compares two null terminated strings.
0CFB                             ; de = string1* hl = string2* -- bool
0CFB                             ; returns: hl = bool
0CFB                STRINGCOMPARE:      
0CFB                STRINGCOMPARE1:      
0CFB   1A                     LD   a,(de)   
0CFC   BE                     CP   (hl)   
0CFD   20 07                  JR   nz,stringCompare2   
0CFF   B7                     OR   a   
0D00   28 09                  JR   z,stringCompare3   
0D02   13                     INC   de   
0D03   23                     INC   hl   
0D04   18 F5                  JR   stringCompare1   
0D06                STRINGCOMPARE2:      
0D06   21 00 00               LD   hl,FALSE   
0D09   18 03                  JR   stringCompare4   
0D0B                STRINGCOMPARE3:      
0D0B   21 FF FF               LD   hl,TRUE   
0D0E                STRINGCOMPARE4:      
0D0E   E5                     PUSH   hl   
0D0F   C9                     RET      
0D10                             ; string length
0D10                             ; de = string*
0D10                             ; returns: hl = length
0D10                STRINGLENGTH:      
0D10   21 00 00               LD   hl,0   
0D13   18 02                  JR   stringLength2   
0D15                STRINGLENGTH1:      
0D15   13                     INC   de   
0D16   23                     INC   hl   
0D17                STRINGLENGTH2:      
0D17   1A                     LD   a,(de)   
0D18   B7                     OR   a   
0D19   20 FA                  JR   nz,stringLength1   
0D1B                STRINGLENGTH3:      
0D1B   C9                     RET      
0D1C                             ; 
0D1C                             ; MINTY interpreter
0D1C                             ; 
0D1C                INIT:        
0D1C   21 F0 01               LD   hl,titleStr   
0D1F   11 12 60               LD   de,titleBuf   
0D22   06 14                  LD   b,20   
0D24                INIT1:       
0D24   1A                     LD   a,(de)   
0D25   BE                     CP   (hl)   
0D26   20 17                  JR   nz,coldBoot0   
0D28   13                     INC   de   
0D29   23                     INC   hl   
0D2A   10 F8                  DJNZ   init1   
0D2C                WARMINIT:      
0D2C   ED 4B FE 5F            LD   bc,(vSavedIP)   ; restore IP
0D30   ED 7B 00 60            LD   sp,(vSavedDSP)   ; restore Data SP
0D34   FD 2A 02 60            LD   iy,(vSavedRSP)   ; restore Return SP
0D38   DD 2A 04 60            LD   ix,(vSavedNext)   ; restore Next
0D3C   C3 76 0D               JP   start1   
0D3F                COLDBOOT0:      
0D3F   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0D42   11 12 60               LD   de,titleBuf   
0D45   06 14                  LD   b,20   
0D47   ED B0                  LDIR      
0D49                COLDINIT:      
0D49   21 DE 01               LD   hl,isysVars   
0D4C   11 E6 5F               LD   de,sysVars   
0D4F   01 12 00               LD   bc,4 * 2 + 10   
0D52   ED B0                  LDIR      
0D54   21 00 5F               LD   hl,vars   ; 52 vars LO HI
0D57   06 34                  LD   b,26*2   
0D59   AF                     XOR   a   
0D5A                COLDBOOT1:      
0D5A   77                     LD   (hl),a   
0D5B   23                     INC   hl   
0D5C   10 FC                  DJNZ   coldBoot1   
0D5E   DD 21 F2 0D            LD   ix,NEXT   
0D62   FD 21 00 5B            LD   iy,STACK   
0D66   C9                     RET      
0D67                COLDSTART:      
0D67   31 00 5B               LD   sp,STACK   
0D6A   CD 3F 0D               CALL   coldBoot0   
0D6D   C3 76 0D               JP   start1   
0D70                START:       
0D70   31 00 5B               LD   sp,STACK   ; start MINTY
0D73   CD 1C 0D               CALL   init   ; setups
0D76                START1:      
0D76   21 12 60               LD   hl,titleBuf   
0D79   CD 44 0C               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
0D7C                INTERPRET:      
0D7C   CD CB 0C               CALL   prompt   
0D7F   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0D82   21 00 5D               LD   hl,TIB   
0D85   22 E6 5F               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0D88                INTERPRET2:      ; calculate nesting
0D88   1E 00                  LD   e,0   ; initilize nesting value
0D8A   C5                     PUSH   bc   ; save offset into TIB,
0D8B                             ; bc is also the count of chars in TIB
0D8B   21 00 5D               LD   hl,TIB   ; hl is start of TIB
0D8E   18 06                  JR   interpret4   
0D90                INTERPRET3:      
0D90   7E                     LD   a,(hl)   ; a = char in TIB
0D91   23                     INC   hl   ; inc pointer into TIB
0D92   0B                     DEC   bc   ; dec count of chars in TIB
0D93   CD 95 0C               CALL   nesting   ; update nesting value
0D96                INTERPRET4:      
0D96   79                     LD   a,c   ; is count zero?
0D97   B0                     OR   b   
0D98   20 F6                  JR   nz,interpret3   ; if not loop
0D9A   C1                     POP   bc   ; restore offset into TIB
0D9B                INTERPRET5:      
0D9B   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0D9E   FE 20                  CP   $20   ; compare to space
0DA0   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0DA2   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0DA4   28 31                  JR   z,interpret8   
0DA6   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0DA8   28 1A                  JR   z,interpret7   ; if anything else its macro/control
0DAA   FE 08                  CP   CTRL_H   
0DAC   CA 28 0E               JP   z,backSpace_   
0DAF   FE 0A                  CP   CTRL_J   
0DB1   CA 38 0E               JP   z,reEdit_   
0DB4                INTERPRET5A:      
0DB4   18 D2                  JR   interpret2   
0DB6                INTERPRET6:      
0DB6   21 00 5D               LD   hl,TIB   
0DB9   09                     ADD   hl,bc   
0DBA   77                     LD   (hl),a   ; store the character in textbuf
0DBB   03                     INC   bc   
0DBC   CD 85 00               CALL   putchar   ; echo character to screen
0DBF   CD 95 0C               CALL   nesting   
0DC2   18 D7                  JR   interpret5   ; wait for next character
0DC4                INTERPRET7:      
0DC4   21 00 5D               LD   hl,TIB   
0DC7   09                     ADD   hl,bc   
0DC8   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0DCA   23                     INC   hl   
0DCB   36 0A                  LD   (hl),"\n"   
0DCD   23                     INC   hl   
0DCE   03                     INC   bc   
0DCF   03                     INC   bc   
0DD0   CD D4 0C               CALL   crlf   ; echo character to screen
0DD3   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0DD4   B7                     OR   a   
0DD5   20 C4                  JR   nz,interpret5   
0DD7                INTERPRET8:      
0DD7   21 00 5D               LD   hl,TIB   
0DDA   09                     ADD   hl,bc   
0DDB   22 E6 5F               LD   (vTIBPtr),hl   
0DDE   01 00 5D               LD   bc,TIB   
0DE1   ED 43 FE 5F            LD   (vSavedIP),bc   ; save IP
0DE5   ED 73 00 60            LD   (vSavedDSP),sp   ; save Data SP
0DE9   FD 22 02 60            LD   (vSavedRSP),iy   ; save Return SP
0DED   DD 22 04 60            LD   (vSavedNext),ix   ; save Next
0DF1   0B                     DEC   bc   
0DF2                NEXT:        
0DF2   03                     INC   bc   ; Increment the IP
0DF3   0A                     LD   a,(bc)   ; Get the next character and dispatch
0DF4   FE 20                  CP   " "   ; whitespace?
0DF6   28 FA                  JR   z,next   ; space? ignore
0DF8   38 0D                  JR   c,next1   
0DFA   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0DFC   6F                     LD   l,a   ; index into table
0DFD   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0DFF   6E                     LD   l,(hl)   ; get low jump address
0E00   24                     INC   h   ; page 2
0E01   FE BA                  CP   "Z" - "!" + 1 + $80   
0E03   38 01                  JR   c,next0   
0E05   24                     INC   h   ; page 3
0E06                NEXT0:       
0E06   E9                     JP   (hl)   ; Jump to routine
0E07                NEXT1:       
0E07   FE 00                  CP   NUL   ; end of input string?
0E09   28 03                  JR   z,exit   
0E0B   C3 7C 0D               JP   interpret   ; no, other whitespace, macros?
0E0E                EXIT:        
0E0E   03                     INC   bc   
0E0F   60 69                  LD   hl,bc   
0E11   E9                     JP   (hl)   
0E12                RUN:         
0E12   C1                     POP   bc   
0E13   0B                     DEC   bc   
0E14   DD E9                  JP   (ix)   
0E16                ERROR:       
0E16   E5                     PUSH   hl   
0E17   CD 12 0E               CALL   run   
0E1A   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
0E25   C3 7C 0D               JP   interpret   
0E28                BACKSPACE_:      
0E28   79                     LD   a,c   
0E29   B0                     OR   b   
0E2A   CA 88 0D               JP   z,interpret2   
0E2D   0B                     DEC   bc   
0E2E   CD DB 0C               CALL   printStr   
0E31   08 20 08 00            .CSTR   "\b \b"   
0E35   C3 88 0D               JP   interpret2   
0E38                REEDIT_:      
0E38   CD DB 0C               CALL   printStr   
0E3B   0D 3E 20 00            .CSTR   "\r> "   
0E3F   21 00 5D               LD   hl,TIB   
0E42   18 04                  JR   reEdit1   
0E44                REEDIT0:      
0E44   CD 85 00               CALL   putchar   
0E47   23                     INC   hl   
0E48                REEDIT1:      
0E48   7E                     LD   a,(hl)   
0E49   FE 0D                  CP   "\r"   
0E4B   20 F7                  JR   nz,reEdit0   
0E4D   11 00 5D               LD   de,TIB   
0E50   B7                     OR   a   
0E51   ED 52                  SBC   hl,de   
0E53   44 4D                  LD   bc,hl   
0E55   C3 88 0D               JP   interpret2   
0E58                ANSIPRINTSEQ:      
0E58   CD DB 0C               CALL   printStr   
0E5B   1B 5B 00               DB   ESC,"[",0   
0E5E   C9                     RET      
0E5F                             ; clears screen and sets cursor to 0,0
0E5F                ANSICLEARSCREEN:      
0E5F   CD DB 0C               CALL   printStr   
0E62   1B 5B                  DB   ESC,"["   
0E64   32 4A 00               DB   "2J",0   ; falls through
0E67                             ; call ansiPrintStr
0E67                             ; .cstr "H"
0E67   C9                     RET      
0E68                             ; a = 0:toEnd 1:toStart 2:entireLine
0E68                ANSICLEARLINE:      
0E68   C6 30                  ADD   a,"0"   ; ascii
0E6A   08                     EX   af,af'   ; save a
0E6B   CD 58 0E               CALL   ansiPrintSeq   
0E6E   08                     EX   af,af'   ; restore
0E6F   CD 85 00               CALL   putChar   
0E72   3E 4B                  LD   a,"K"   
0E74   C3 85 00               JP   putChar   
0E77                             ; h = column, l = row
0E77                ANSIGOTO:      
0E77   D9                     EXX      ; save hl
0E78   CD 58 0E               CALL   ansiPrintSeq   
0E7B   D9                     EXX      ; restore hl
0E7C   7C                     LD   a,h   ; save column
0E7D   08                     EX   af,af'   
0E7E   26 00                  LD   h,0   ; print row
0E80   CD E2 0C               CALL   printNum   
0E83   3E 3B                  LD   a,";"   
0E85   CD 85 00               CALL   putChar   
0E88   08                     EX   af,af'   ; restore column
0E89   6C                     LD   l,h   ; print column
0E8A   26 00                  LD   h,0   
0E8C   CD E2 0C               CALL   printNum   
0E8F   3E 48                  LD   a,"H"   
0E91   C3 85 00               JP   putChar   
0E94                             ; h = "A":Up "B":Down "C":Forward "D":Back
0E94                             ; l = amount
0E94                ANSIMOVE:      
0E94   D9                     EXX      ; save hl
0E95   CD 58 0E               CALL   ansiPrintSeq   
0E98   D9                     EXX      ; restore hl
0E99   7C                     LD   a,h   
0E9A   08                     EX   af,af'   ; save a
0E9B   26 00                  LD   h,0   ; print amount
0E9D   CD E2 0C               CALL   printNum   
0EA0   08                     EX   af,af'   ; restore a
0EA1   C3 85 00               JP   putChar   ; print direction code
0EA4                             ; a = 0:normal 1:bold 2:low 4:underline 5:blink 7:reverse
0EA4                ANSITEXTSTYLE:      
0EA4   C6 30                  ADD   a,"0"   ; ascii
0EA6   08                     EX   af,af'   ; save a
0EA7   CD 58 0E               CALL   ansiPrintSeq   
0EAA   08                     EX   af,af'   ; restore
0EAB   CD 85 00               CALL   putChar   
0EAE   3E 6D                  LD   a,"m"   
0EB0   C3 85 00               JP   putChar   
0EB3                             ; a = "h":show "l":hide
0EB3                ANSICURSORSHOW:      
0EB3   08                     EX   af,af'   ; save a
0EB4   CD DB 0C               CALL   printStr   
0EB7   1B 5B                  DB   ESC,"["   
0EB9   3F 32 35 6C 00         DB   "?25l",0   
0EBE   08                     EX   af,af'   ; restore
0EBF   C3 85 00               JP   putChar   
0EC2                          ALIGN   $100   
0F00                TESTSSTART:      
0F00                          ;*Macro unroll:  test "/f", false
0F00   31 00 5B               LD   SP,STACK   
0F03   CD 49 0D               CALL   coldInit   
0F06   CD 00 59               CALL   execStr   
0F09   2F 66 00               DB   "/f",0   
0F0C   E1                     POP   HL   
0F0D   E5                     PUSH   HL   
0F0E   11 00 00               LD   DE,false   
0F11   B7                     OR   A   
0F12   ED 52                  SBC   HL,DE   
0F14   7D                     LD   A,L   
0F15   B4                     OR   H   
0F16   CA 73 0F               JP   Z,expectM_2940S16   
0F19   CD DB 0C               CALL   printStr   
0F1C   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0F25   CD DB 0C               CALL   printStr   
0F28   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F37   21 00 00               LD   hl,false   
0F3A   E5                     PUSH   hl   
0F3B   E5                     PUSH   hl   
0F3C   CD 12 0E               CALL   run   
0F3F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
0F4B   CD DB 0C               CALL   printStr   
0F4E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F5B   E1                     POP   hl   
0F5C   E5                     PUSH   hl   
0F5D   E5                     PUSH   hl   
0F5E   CD 12 0E               CALL   run   
0F61   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
0F72   76                     HALT      
0F73                EXPECTM_2940S16:      
0F73   E1                     POP   HL   
0F74   CD DB 0C               CALL   printStr   
0F77   44 6F 6E 65 21 00      .CSTR   "Done!"   
0F7D   76                     HALT      
0F7E                          ;*Macro unroll:  test "/f", false
0F7E   31 00 5B               LD   SP,STACK   
0F81   CD 49 0D               CALL   coldInit   
0F84   CD 00 59               CALL   execStr   
0F87   2F 66 00               DB   "/f",0   
0F8A   E1                     POP   HL   
0F8B   E5                     PUSH   HL   
0F8C   11 00 00               LD   DE,false   
0F8F   B7                     OR   A   
0F90   ED 52                  SBC   HL,DE   
0F92   7D                     LD   A,L   
0F93   B4                     OR   H   
0F94   CA F1 0F               JP   Z,expectM_2944S21   
0F97   CD DB 0C               CALL   printStr   
0F9A   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0FA3   CD DB 0C               CALL   printStr   
0FA6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FB5   21 00 00               LD   hl,false   
0FB8   E5                     PUSH   hl   
0FB9   E5                     PUSH   hl   
0FBA   CD 12 0E               CALL   run   
0FBD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
0FC9   CD DB 0C               CALL   printStr   
0FCC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FD9   E1                     POP   hl   
0FDA   E5                     PUSH   hl   
0FDB   E5                     PUSH   hl   
0FDC   CD 12 0E               CALL   run   
0FDF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
0FF0   76                     HALT      
0FF1                EXPECTM_2944S21:      
0FF1   E1                     POP   HL   
0FF2                          ;*Macro unroll:  test "/t", true
0FF2   31 00 5B               LD   SP,STACK   
0FF5   CD 49 0D               CALL   coldInit   
0FF8   CD 00 59               CALL   execStr   
0FFB   2F 74 00               DB   "/t",0   
0FFE   E1                     POP   HL   
0FFF   E5                     PUSH   HL   
1000   11 FF FF               LD   DE,true   
1003   B7                     OR   A   
1004   ED 52                  SBC   HL,DE   
1006   7D                     LD   A,L   
1007   B4                     OR   H   
1008   CA 65 10               JP   Z,expectM_2945S22   
100B   CD DB 0C               CALL   printStr   
100E   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
1017   CD DB 0C               CALL   printStr   
101A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1029   21 FF FF               LD   hl,true   
102C   E5                     PUSH   hl   
102D   E5                     PUSH   hl   
102E   CD 12 0E               CALL   run   
1031   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
103D   CD DB 0C               CALL   printStr   
1040   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
104D   E1                     POP   hl   
104E   E5                     PUSH   hl   
104F   E5                     PUSH   hl   
1050   CD 12 0E               CALL   run   
1053   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1064   76                     HALT      
1065                EXPECTM_2945S22:      
1065   E1                     POP   HL   
1066                          ;*Macro unroll:  test "1", 1
1066   31 00 5B               LD   SP,STACK   
1069   CD 49 0D               CALL   coldInit   
106C   CD 00 59               CALL   execStr   
106F   31 00                  DB   "1",0   
1071   E1                     POP   HL   
1072   E5                     PUSH   HL   
1073   11 01 00               LD   DE,1   
1076   B7                     OR   A   
1077   ED 52                  SBC   HL,DE   
1079   7D                     LD   A,L   
107A   B4                     OR   H   
107B   CA D7 10               JP   Z,expectM_2946S23   
107E   CD DB 0C               CALL   printStr   
1081   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
1089   CD DB 0C               CALL   printStr   
108C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
109B   21 01 00               LD   hl,1   
109E   E5                     PUSH   hl   
109F   E5                     PUSH   hl   
10A0   CD 12 0E               CALL   run   
10A3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
10AF   CD DB 0C               CALL   printStr   
10B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10BF   E1                     POP   hl   
10C0   E5                     PUSH   hl   
10C1   E5                     PUSH   hl   
10C2   CD 12 0E               CALL   run   
10C5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
10D6   76                     HALT      
10D7                EXPECTM_2946S23:      
10D7   E1                     POP   HL   
10D8                          ;*Macro unroll:  test "2", 2
10D8   31 00 5B               LD   SP,STACK   
10DB   CD 49 0D               CALL   coldInit   
10DE   CD 00 59               CALL   execStr   
10E1   32 00                  DB   "2",0   
10E3   E1                     POP   HL   
10E4   E5                     PUSH   HL   
10E5   11 02 00               LD   DE,2   
10E8   B7                     OR   A   
10E9   ED 52                  SBC   HL,DE   
10EB   7D                     LD   A,L   
10EC   B4                     OR   H   
10ED   CA 49 11               JP   Z,expectM_2947S24   
10F0   CD DB 0C               CALL   printStr   
10F3   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
10FB   CD DB 0C               CALL   printStr   
10FE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
110D   21 02 00               LD   hl,2   
1110   E5                     PUSH   hl   
1111   E5                     PUSH   hl   
1112   CD 12 0E               CALL   run   
1115   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1121   CD DB 0C               CALL   printStr   
1124   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1131   E1                     POP   hl   
1132   E5                     PUSH   hl   
1133   E5                     PUSH   hl   
1134   CD 12 0E               CALL   run   
1137   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1148   76                     HALT      
1149                EXPECTM_2947S24:      
1149   E1                     POP   HL   
114A                          ;*Macro unroll:  test "1", 1
114A   31 00 5B               LD   SP,STACK   
114D   CD 49 0D               CALL   coldInit   
1150   CD 00 59               CALL   execStr   
1153   31 00                  DB   "1",0   
1155   E1                     POP   HL   
1156   E5                     PUSH   HL   
1157   11 01 00               LD   DE,1   
115A   B7                     OR   A   
115B   ED 52                  SBC   HL,DE   
115D   7D                     LD   A,L   
115E   B4                     OR   H   
115F   CA BB 11               JP   Z,expectM_2948S25   
1162   CD DB 0C               CALL   printStr   
1165   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
116D   CD DB 0C               CALL   printStr   
1170   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
117F   21 01 00               LD   hl,1   
1182   E5                     PUSH   hl   
1183   E5                     PUSH   hl   
1184   CD 12 0E               CALL   run   
1187   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1193   CD DB 0C               CALL   printStr   
1196   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11A3   E1                     POP   hl   
11A4   E5                     PUSH   hl   
11A5   E5                     PUSH   hl   
11A6   CD 12 0E               CALL   run   
11A9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
11BA   76                     HALT      
11BB                EXPECTM_2948S25:      
11BB   E1                     POP   HL   
11BC                          ;*Macro unroll:  test "0", 0
11BC   31 00 5B               LD   SP,STACK   
11BF   CD 49 0D               CALL   coldInit   
11C2   CD 00 59               CALL   execStr   
11C5   30 00                  DB   "0",0   
11C7   E1                     POP   HL   
11C8   E5                     PUSH   HL   
11C9   11 00 00               LD   DE,0   
11CC   B7                     OR   A   
11CD   ED 52                  SBC   HL,DE   
11CF   7D                     LD   A,L   
11D0   B4                     OR   H   
11D1   CA 2D 12               JP   Z,expectM_2949S26   
11D4   CD DB 0C               CALL   printStr   
11D7   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
11DF   CD DB 0C               CALL   printStr   
11E2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11F1   21 00 00               LD   hl,0   
11F4   E5                     PUSH   hl   
11F5   E5                     PUSH   hl   
11F6   CD 12 0E               CALL   run   
11F9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1205   CD DB 0C               CALL   printStr   
1208   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1215   E1                     POP   hl   
1216   E5                     PUSH   hl   
1217   E5                     PUSH   hl   
1218   CD 12 0E               CALL   run   
121B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
122C   76                     HALT      
122D                EXPECTM_2949S26:      
122D   E1                     POP   HL   
122E                          ;*Macro unroll:  test "10", 10
122E   31 00 5B               LD   SP,STACK   
1231   CD 49 0D               CALL   coldInit   
1234   CD 00 59               CALL   execStr   
1237   31 30 00               DB   "10",0   
123A   E1                     POP   HL   
123B   E5                     PUSH   HL   
123C   11 0A 00               LD   DE,10   
123F   B7                     OR   A   
1240   ED 52                  SBC   HL,DE   
1242   7D                     LD   A,L   
1243   B4                     OR   H   
1244   CA A1 12               JP   Z,expectM_2950S27   
1247   CD DB 0C               CALL   printStr   
124A   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1253   CD DB 0C               CALL   printStr   
1256   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1265   21 0A 00               LD   hl,10   
1268   E5                     PUSH   hl   
1269   E5                     PUSH   hl   
126A   CD 12 0E               CALL   run   
126D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1279   CD DB 0C               CALL   printStr   
127C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1289   E1                     POP   hl   
128A   E5                     PUSH   hl   
128B   E5                     PUSH   hl   
128C   CD 12 0E               CALL   run   
128F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
12A0   76                     HALT      
12A1                EXPECTM_2950S27:      
12A1   E1                     POP   HL   
12A2                          ;*Macro unroll:  test "123", 123
12A2   31 00 5B               LD   SP,STACK   
12A5   CD 49 0D               CALL   coldInit   
12A8   CD 00 59               CALL   execStr   
12AB   31 32 33 00            DB   "123",0   
12AF   E1                     POP   HL   
12B0   E5                     PUSH   HL   
12B1   11 7B 00               LD   DE,123   
12B4   B7                     OR   A   
12B5   ED 52                  SBC   HL,DE   
12B7   7D                     LD   A,L   
12B8   B4                     OR   H   
12B9   CA 17 13               JP   Z,expectM_2951S28   
12BC   CD DB 0C               CALL   printStr   
12BF   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
12C9   CD DB 0C               CALL   printStr   
12CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12DB   21 7B 00               LD   hl,123   
12DE   E5                     PUSH   hl   
12DF   E5                     PUSH   hl   
12E0   CD 12 0E               CALL   run   
12E3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
12EF   CD DB 0C               CALL   printStr   
12F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12FF   E1                     POP   hl   
1300   E5                     PUSH   hl   
1301   E5                     PUSH   hl   
1302   CD 12 0E               CALL   run   
1305   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1316   76                     HALT      
1317                EXPECTM_2951S28:      
1317   E1                     POP   HL   
1318                          ;*Macro unroll:  test "-1",-1
1318   31 00 5B               LD   SP,STACK   
131B   CD 49 0D               CALL   coldInit   
131E   CD 00 59               CALL   execStr   
1321   2D 31 00               DB   "-1",0   
1324   E1                     POP   HL   
1325   E5                     PUSH   HL   
1326   11 FF FF               LD   DE,-1   
1329   B7                     OR   A   
132A   ED 52                  SBC   HL,DE   
132C   7D                     LD   A,L   
132D   B4                     OR   H   
132E   CA 8B 13               JP   Z,expectM_2952S29   
1331   CD DB 0C               CALL   printStr   
1334   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
133D   CD DB 0C               CALL   printStr   
1340   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
134F   21 FF FF               LD   hl,-1   
1352   E5                     PUSH   hl   
1353   E5                     PUSH   hl   
1354   CD 12 0E               CALL   run   
1357   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1363   CD DB 0C               CALL   printStr   
1366   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1373   E1                     POP   hl   
1374   E5                     PUSH   hl   
1375   E5                     PUSH   hl   
1376   CD 12 0E               CALL   run   
1379   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
138A   76                     HALT      
138B                EXPECTM_2952S29:      
138B   E1                     POP   HL   
138C                          ;*Macro unroll:  test "-1/abs",1
138C   31 00 5B               LD   SP,STACK   
138F   CD 49 0D               CALL   coldInit   
1392   CD 00 59               CALL   execStr   
1395   2D 31 2F 61 62 73 00   DB   "-1/abs",0   
139C   E1                     POP   HL   
139D   E5                     PUSH   HL   
139E   11 01 00               LD   DE,1   
13A1   B7                     OR   A   
13A2   ED 52                  SBC   HL,DE   
13A4   7D                     LD   A,L   
13A5   B4                     OR   H   
13A6   CA 07 14               JP   Z,expectM_2953S30   
13A9   CD DB 0C               CALL   printStr   
13AC   43 6F 64 65 3A 20 2D 31 2F 61 62 73 00 .CSTR   "Code: ","-1/abs"   
13B9   CD DB 0C               CALL   printStr   
13BC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13CB   21 01 00               LD   hl,1   
13CE   E5                     PUSH   hl   
13CF   E5                     PUSH   hl   
13D0   CD 12 0E               CALL   run   
13D3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
13DF   CD DB 0C               CALL   printStr   
13E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13EF   E1                     POP   hl   
13F0   E5                     PUSH   hl   
13F1   E5                     PUSH   hl   
13F2   CD 12 0E               CALL   run   
13F5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1406   76                     HALT      
1407                EXPECTM_2953S30:      
1407   E1                     POP   HL   
1408                          ;*Macro unroll:  test "_a", $61
1408   31 00 5B               LD   SP,STACK   
140B   CD 49 0D               CALL   coldInit   
140E   CD 00 59               CALL   execStr   
1411   5F 61 00               DB   "_a",0   
1414   E1                     POP   HL   
1415   E5                     PUSH   HL   
1416   11 61 00               LD   DE,$61   
1419   B7                     OR   A   
141A   ED 52                  SBC   HL,DE   
141C   7D                     LD   A,L   
141D   B4                     OR   H   
141E   CA 7B 14               JP   Z,expectM_2954S31   
1421   CD DB 0C               CALL   printStr   
1424   43 6F 64 65 3A 20 5F 61 00 .CSTR   "Code: ","_a"   
142D   CD DB 0C               CALL   printStr   
1430   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
143F   21 61 00               LD   hl,$61   
1442   E5                     PUSH   hl   
1443   E5                     PUSH   hl   
1444   CD 12 0E               CALL   run   
1447   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1453   CD DB 0C               CALL   printStr   
1456   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1463   E1                     POP   hl   
1464   E5                     PUSH   hl   
1465   E5                     PUSH   hl   
1466   CD 12 0E               CALL   run   
1469   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
147A   76                     HALT      
147B                EXPECTM_2954S31:      
147B   E1                     POP   HL   
147C                          ;*Macro unroll:  test "__", $5F
147C   31 00 5B               LD   SP,STACK   
147F   CD 49 0D               CALL   coldInit   
1482   CD 00 59               CALL   execStr   
1485   5F 5F 00               DB   "__",0   
1488   E1                     POP   HL   
1489   E5                     PUSH   HL   
148A   11 5F 00               LD   DE,$5F   
148D   B7                     OR   A   
148E   ED 52                  SBC   HL,DE   
1490   7D                     LD   A,L   
1491   B4                     OR   H   
1492   CA EF 14               JP   Z,expectM_2955S32   
1495   CD DB 0C               CALL   printStr   
1498   43 6F 64 65 3A 20 5F 5F 00 .CSTR   "Code: ","__"   
14A1   CD DB 0C               CALL   printStr   
14A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14B3   21 5F 00               LD   hl,$5F   
14B6   E5                     PUSH   hl   
14B7   E5                     PUSH   hl   
14B8   CD 12 0E               CALL   run   
14BB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
14C7   CD DB 0C               CALL   printStr   
14CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14D7   E1                     POP   hl   
14D8   E5                     PUSH   hl   
14D9   E5                     PUSH   hl   
14DA   CD 12 0E               CALL   run   
14DD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
14EE   76                     HALT      
14EF                EXPECTM_2955S32:      
14EF   E1                     POP   HL   
14F0                          ;*Macro unroll:  test "$10", $10
14F0   31 00 5B               LD   SP,STACK   
14F3   CD 49 0D               CALL   coldInit   
14F6   CD 00 59               CALL   execStr   
14F9   24 31 30 00            DB   "$10",0   
14FD   E1                     POP   HL   
14FE   E5                     PUSH   HL   
14FF   11 10 00               LD   DE,$10   
1502   B7                     OR   A   
1503   ED 52                  SBC   HL,DE   
1505   7D                     LD   A,L   
1506   B4                     OR   H   
1507   CA 65 15               JP   Z,expectM_2956S33   
150A   CD DB 0C               CALL   printStr   
150D   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
1517   CD DB 0C               CALL   printStr   
151A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1529   21 10 00               LD   hl,$10   
152C   E5                     PUSH   hl   
152D   E5                     PUSH   hl   
152E   CD 12 0E               CALL   run   
1531   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
153D   CD DB 0C               CALL   printStr   
1540   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
154D   E1                     POP   hl   
154E   E5                     PUSH   hl   
154F   E5                     PUSH   hl   
1550   CD 12 0E               CALL   run   
1553   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1564   76                     HALT      
1565                EXPECTM_2956S33:      
1565   E1                     POP   HL   
1566                          ;*Macro unroll:  test "$FF", $FF
1566   31 00 5B               LD   SP,STACK   
1569   CD 49 0D               CALL   coldInit   
156C   CD 00 59               CALL   execStr   
156F   24 46 46 00            DB   "$FF",0   
1573   E1                     POP   HL   
1574   E5                     PUSH   HL   
1575   11 FF 00               LD   DE,$FF   
1578   B7                     OR   A   
1579   ED 52                  SBC   HL,DE   
157B   7D                     LD   A,L   
157C   B4                     OR   H   
157D   CA DB 15               JP   Z,expectM_2957S34   
1580   CD DB 0C               CALL   printStr   
1583   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
158D   CD DB 0C               CALL   printStr   
1590   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
159F   21 FF 00               LD   hl,$FF   
15A2   E5                     PUSH   hl   
15A3   E5                     PUSH   hl   
15A4   CD 12 0E               CALL   run   
15A7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
15B3   CD DB 0C               CALL   printStr   
15B6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15C3   E1                     POP   hl   
15C4   E5                     PUSH   hl   
15C5   E5                     PUSH   hl   
15C6   CD 12 0E               CALL   run   
15C9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
15DA   76                     HALT      
15DB                EXPECTM_2957S34:      
15DB   E1                     POP   HL   
15DC                          ;*Macro unroll:  test "-1 2 +",1
15DC   31 00 5B               LD   SP,STACK   
15DF   CD 49 0D               CALL   coldInit   
15E2   CD 00 59               CALL   execStr   
15E5   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
15EC   E1                     POP   HL   
15ED   E5                     PUSH   HL   
15EE   11 01 00               LD   DE,1   
15F1   B7                     OR   A   
15F2   ED 52                  SBC   HL,DE   
15F4   7D                     LD   A,L   
15F5   B4                     OR   H   
15F6   CA 57 16               JP   Z,expectM_2958S35   
15F9   CD DB 0C               CALL   printStr   
15FC   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1609   CD DB 0C               CALL   printStr   
160C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
161B   21 01 00               LD   hl,1   
161E   E5                     PUSH   hl   
161F   E5                     PUSH   hl   
1620   CD 12 0E               CALL   run   
1623   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
162F   CD DB 0C               CALL   printStr   
1632   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
163F   E1                     POP   hl   
1640   E5                     PUSH   hl   
1641   E5                     PUSH   hl   
1642   CD 12 0E               CALL   run   
1645   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1656   76                     HALT      
1657                EXPECTM_2958S35:      
1657   E1                     POP   HL   
1658                          ;*Macro unroll:  test "-1 1 +",0
1658   31 00 5B               LD   SP,STACK   
165B   CD 49 0D               CALL   coldInit   
165E   CD 00 59               CALL   execStr   
1661   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
1668   E1                     POP   HL   
1669   E5                     PUSH   HL   
166A   11 00 00               LD   DE,0   
166D   B7                     OR   A   
166E   ED 52                  SBC   HL,DE   
1670   7D                     LD   A,L   
1671   B4                     OR   H   
1672   CA D3 16               JP   Z,expectM_2959S36   
1675   CD DB 0C               CALL   printStr   
1678   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1685   CD DB 0C               CALL   printStr   
1688   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1697   21 00 00               LD   hl,0   
169A   E5                     PUSH   hl   
169B   E5                     PUSH   hl   
169C   CD 12 0E               CALL   run   
169F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
16AB   CD DB 0C               CALL   printStr   
16AE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16BB   E1                     POP   hl   
16BC   E5                     PUSH   hl   
16BD   E5                     PUSH   hl   
16BE   CD 12 0E               CALL   run   
16C1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
16D2   76                     HALT      
16D3                EXPECTM_2959S36:      
16D3   E1                     POP   HL   
16D4                          ;*Macro unroll:  test "1 2 +", 3
16D4   31 00 5B               LD   SP,STACK   
16D7   CD 49 0D               CALL   coldInit   
16DA   CD 00 59               CALL   execStr   
16DD   31 20 32 20 2B 00      DB   "1 2 +",0   
16E3   E1                     POP   HL   
16E4   E5                     PUSH   HL   
16E5   11 03 00               LD   DE,3   
16E8   B7                     OR   A   
16E9   ED 52                  SBC   HL,DE   
16EB   7D                     LD   A,L   
16EC   B4                     OR   H   
16ED   CA 4D 17               JP   Z,expectM_2960S37   
16F0   CD DB 0C               CALL   printStr   
16F3   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
16FF   CD DB 0C               CALL   printStr   
1702   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1711   21 03 00               LD   hl,3   
1714   E5                     PUSH   hl   
1715   E5                     PUSH   hl   
1716   CD 12 0E               CALL   run   
1719   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1725   CD DB 0C               CALL   printStr   
1728   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1735   E1                     POP   hl   
1736   E5                     PUSH   hl   
1737   E5                     PUSH   hl   
1738   CD 12 0E               CALL   run   
173B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
174C   76                     HALT      
174D                EXPECTM_2960S37:      
174D   E1                     POP   HL   
174E                          ;*Macro unroll:  test "4 1 2 +", 3
174E   31 00 5B               LD   SP,STACK   
1751   CD 49 0D               CALL   coldInit   
1754   CD 00 59               CALL   execStr   
1757   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
175F   E1                     POP   HL   
1760   E5                     PUSH   HL   
1761   11 03 00               LD   DE,3   
1764   B7                     OR   A   
1765   ED 52                  SBC   HL,DE   
1767   7D                     LD   A,L   
1768   B4                     OR   H   
1769   CA CB 17               JP   Z,expectM_2961S38   
176C   CD DB 0C               CALL   printStr   
176F   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
177D   CD DB 0C               CALL   printStr   
1780   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
178F   21 03 00               LD   hl,3   
1792   E5                     PUSH   hl   
1793   E5                     PUSH   hl   
1794   CD 12 0E               CALL   run   
1797   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
17A3   CD DB 0C               CALL   printStr   
17A6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17B3   E1                     POP   hl   
17B4   E5                     PUSH   hl   
17B5   E5                     PUSH   hl   
17B6   CD 12 0E               CALL   run   
17B9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
17CA   76                     HALT      
17CB                EXPECTM_2961S38:      
17CB   E1                     POP   HL   
17CC                          ;*Macro unroll:  test "123 456 +", 123+456
17CC   31 00 5B               LD   SP,STACK   
17CF   CD 49 0D               CALL   coldInit   
17D2   CD 00 59               CALL   execStr   
17D5   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
17DF   E1                     POP   HL   
17E0   E5                     PUSH   HL   
17E1   11 43 02               LD   DE,123+456   
17E4   B7                     OR   A   
17E5   ED 52                  SBC   HL,DE   
17E7   7D                     LD   A,L   
17E8   B4                     OR   H   
17E9   CA 4D 18               JP   Z,expectM_2962S39   
17EC   CD DB 0C               CALL   printStr   
17EF   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
17FF   CD DB 0C               CALL   printStr   
1802   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1811   21 43 02               LD   hl,123+456   
1814   E5                     PUSH   hl   
1815   E5                     PUSH   hl   
1816   CD 12 0E               CALL   run   
1819   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1825   CD DB 0C               CALL   printStr   
1828   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1835   E1                     POP   hl   
1836   E5                     PUSH   hl   
1837   E5                     PUSH   hl   
1838   CD 12 0E               CALL   run   
183B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
184C   76                     HALT      
184D                EXPECTM_2962S39:      
184D   E1                     POP   HL   
184E                          ;*Macro unroll:  test "64 128 +", 64+128
184E   31 00 5B               LD   SP,STACK   
1851   CD 49 0D               CALL   coldInit   
1854   CD 00 59               CALL   execStr   
1857   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1860   E1                     POP   HL   
1861   E5                     PUSH   HL   
1862   11 C0 00               LD   DE,64+128   
1865   B7                     OR   A   
1866   ED 52                  SBC   HL,DE   
1868   7D                     LD   A,L   
1869   B4                     OR   H   
186A   CA CD 18               JP   Z,expectM_2963S40   
186D   CD DB 0C               CALL   printStr   
1870   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
187F   CD DB 0C               CALL   printStr   
1882   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1891   21 C0 00               LD   hl,64+128   
1894   E5                     PUSH   hl   
1895   E5                     PUSH   hl   
1896   CD 12 0E               CALL   run   
1899   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
18A5   CD DB 0C               CALL   printStr   
18A8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18B5   E1                     POP   hl   
18B6   E5                     PUSH   hl   
18B7   E5                     PUSH   hl   
18B8   CD 12 0E               CALL   run   
18BB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
18CC   76                     HALT      
18CD                EXPECTM_2963S40:      
18CD   E1                     POP   HL   
18CE                          ;*Macro unroll:  test "1 2 +", 3
18CE   31 00 5B               LD   SP,STACK   
18D1   CD 49 0D               CALL   coldInit   
18D4   CD 00 59               CALL   execStr   
18D7   31 20 32 20 2B 00      DB   "1 2 +",0   
18DD   E1                     POP   HL   
18DE   E5                     PUSH   HL   
18DF   11 03 00               LD   DE,3   
18E2   B7                     OR   A   
18E3   ED 52                  SBC   HL,DE   
18E5   7D                     LD   A,L   
18E6   B4                     OR   H   
18E7   CA 47 19               JP   Z,expectM_2964S41   
18EA   CD DB 0C               CALL   printStr   
18ED   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
18F9   CD DB 0C               CALL   printStr   
18FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
190B   21 03 00               LD   hl,3   
190E   E5                     PUSH   hl   
190F   E5                     PUSH   hl   
1910   CD 12 0E               CALL   run   
1913   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
191F   CD DB 0C               CALL   printStr   
1922   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
192F   E1                     POP   hl   
1930   E5                     PUSH   hl   
1931   E5                     PUSH   hl   
1932   CD 12 0E               CALL   run   
1935   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1946   76                     HALT      
1947                EXPECTM_2964S41:      
1947   E1                     POP   HL   
1948                          ;*Macro unroll:  test "1a= a++ a",2
1948   31 00 5B               LD   SP,STACK   
194B   CD 49 0D               CALL   coldInit   
194E   CD 00 59               CALL   execStr   
1951   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
195B   E1                     POP   HL   
195C   E5                     PUSH   HL   
195D   11 02 00               LD   DE,2   
1960   B7                     OR   A   
1961   ED 52                  SBC   HL,DE   
1963   7D                     LD   A,L   
1964   B4                     OR   H   
1965   CA C9 19               JP   Z,expectM_2965S42   
1968   CD DB 0C               CALL   printStr   
196B   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
197B   CD DB 0C               CALL   printStr   
197E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
198D   21 02 00               LD   hl,2   
1990   E5                     PUSH   hl   
1991   E5                     PUSH   hl   
1992   CD 12 0E               CALL   run   
1995   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
19A1   CD DB 0C               CALL   printStr   
19A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19B1   E1                     POP   hl   
19B2   E5                     PUSH   hl   
19B3   E5                     PUSH   hl   
19B4   CD 12 0E               CALL   run   
19B7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
19C8   76                     HALT      
19C9                EXPECTM_2965S42:      
19C9   E1                     POP   HL   
19CA                          ;*Macro unroll:  test "-1 -1 -",0
19CA   31 00 5B               LD   SP,STACK   
19CD   CD 49 0D               CALL   coldInit   
19D0   CD 00 59               CALL   execStr   
19D3   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
19DB   E1                     POP   HL   
19DC   E5                     PUSH   HL   
19DD   11 00 00               LD   DE,0   
19E0   B7                     OR   A   
19E1   ED 52                  SBC   HL,DE   
19E3   7D                     LD   A,L   
19E4   B4                     OR   H   
19E5   CA 47 1A               JP   Z,expectM_2966S43   
19E8   CD DB 0C               CALL   printStr   
19EB   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
19F9   CD DB 0C               CALL   printStr   
19FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A0B   21 00 00               LD   hl,0   
1A0E   E5                     PUSH   hl   
1A0F   E5                     PUSH   hl   
1A10   CD 12 0E               CALL   run   
1A13   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1A1F   CD DB 0C               CALL   printStr   
1A22   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A2F   E1                     POP   hl   
1A30   E5                     PUSH   hl   
1A31   E5                     PUSH   hl   
1A32   CD 12 0E               CALL   run   
1A35   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1A46   76                     HALT      
1A47                EXPECTM_2966S43:      
1A47   E1                     POP   HL   
1A48                          ;*Macro unroll:  test "5 3 -", 2
1A48   31 00 5B               LD   SP,STACK   
1A4B   CD 49 0D               CALL   coldInit   
1A4E   CD 00 59               CALL   execStr   
1A51   35 20 33 20 2D 00      DB   "5 3 -",0   
1A57   E1                     POP   HL   
1A58   E5                     PUSH   HL   
1A59   11 02 00               LD   DE,2   
1A5C   B7                     OR   A   
1A5D   ED 52                  SBC   HL,DE   
1A5F   7D                     LD   A,L   
1A60   B4                     OR   H   
1A61   CA C1 1A               JP   Z,expectM_2967S44   
1A64   CD DB 0C               CALL   printStr   
1A67   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1A73   CD DB 0C               CALL   printStr   
1A76   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A85   21 02 00               LD   hl,2   
1A88   E5                     PUSH   hl   
1A89   E5                     PUSH   hl   
1A8A   CD 12 0E               CALL   run   
1A8D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1A99   CD DB 0C               CALL   printStr   
1A9C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AA9   E1                     POP   hl   
1AAA   E5                     PUSH   hl   
1AAB   E5                     PUSH   hl   
1AAC   CD 12 0E               CALL   run   
1AAF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1AC0   76                     HALT      
1AC1                EXPECTM_2967S44:      
1AC1   E1                     POP   HL   
1AC2                          ;*Macro unroll:  test "2 1 -",1
1AC2   31 00 5B               LD   SP,STACK   
1AC5   CD 49 0D               CALL   coldInit   
1AC8   CD 00 59               CALL   execStr   
1ACB   32 20 31 20 2D 00      DB   "2 1 -",0   
1AD1   E1                     POP   HL   
1AD2   E5                     PUSH   HL   
1AD3   11 01 00               LD   DE,1   
1AD6   B7                     OR   A   
1AD7   ED 52                  SBC   HL,DE   
1AD9   7D                     LD   A,L   
1ADA   B4                     OR   H   
1ADB   CA 3B 1B               JP   Z,expectM_2968S45   
1ADE   CD DB 0C               CALL   printStr   
1AE1   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1AED   CD DB 0C               CALL   printStr   
1AF0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AFF   21 01 00               LD   hl,1   
1B02   E5                     PUSH   hl   
1B03   E5                     PUSH   hl   
1B04   CD 12 0E               CALL   run   
1B07   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1B13   CD DB 0C               CALL   printStr   
1B16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B23   E1                     POP   hl   
1B24   E5                     PUSH   hl   
1B25   E5                     PUSH   hl   
1B26   CD 12 0E               CALL   run   
1B29   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1B3A   76                     HALT      
1B3B                EXPECTM_2968S45:      
1B3B   E1                     POP   HL   
1B3C                          ;*Macro unroll:  test "3a= a-- a",2
1B3C   31 00 5B               LD   SP,STACK   
1B3F   CD 49 0D               CALL   coldInit   
1B42   CD 00 59               CALL   execStr   
1B45   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1B4F   E1                     POP   HL   
1B50   E5                     PUSH   HL   
1B51   11 02 00               LD   DE,2   
1B54   B7                     OR   A   
1B55   ED 52                  SBC   HL,DE   
1B57   7D                     LD   A,L   
1B58   B4                     OR   H   
1B59   CA BD 1B               JP   Z,expectM_2969S46   
1B5C   CD DB 0C               CALL   printStr   
1B5F   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1B6F   CD DB 0C               CALL   printStr   
1B72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B81   21 02 00               LD   hl,2   
1B84   E5                     PUSH   hl   
1B85   E5                     PUSH   hl   
1B86   CD 12 0E               CALL   run   
1B89   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1B95   CD DB 0C               CALL   printStr   
1B98   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BA5   E1                     POP   hl   
1BA6   E5                     PUSH   hl   
1BA7   E5                     PUSH   hl   
1BA8   CD 12 0E               CALL   run   
1BAB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1BBC   76                     HALT      
1BBD                EXPECTM_2969S46:      
1BBD   E1                     POP   HL   
1BBE                          ;*Macro unroll:  test "3 5 &", 1
1BBE   31 00 5B               LD   SP,STACK   
1BC1   CD 49 0D               CALL   coldInit   
1BC4   CD 00 59               CALL   execStr   
1BC7   33 20 35 20 26 00      DB   "3 5 &",0   
1BCD   E1                     POP   HL   
1BCE   E5                     PUSH   HL   
1BCF   11 01 00               LD   DE,1   
1BD2   B7                     OR   A   
1BD3   ED 52                  SBC   HL,DE   
1BD5   7D                     LD   A,L   
1BD6   B4                     OR   H   
1BD7   CA 37 1C               JP   Z,expectM_2970S47   
1BDA   CD DB 0C               CALL   printStr   
1BDD   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1BE9   CD DB 0C               CALL   printStr   
1BEC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BFB   21 01 00               LD   hl,1   
1BFE   E5                     PUSH   hl   
1BFF   E5                     PUSH   hl   
1C00   CD 12 0E               CALL   run   
1C03   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1C0F   CD DB 0C               CALL   printStr   
1C12   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C1F   E1                     POP   hl   
1C20   E5                     PUSH   hl   
1C21   E5                     PUSH   hl   
1C22   CD 12 0E               CALL   run   
1C25   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1C36   76                     HALT      
1C37                EXPECTM_2970S47:      
1C37   E1                     POP   HL   
1C38                          ;*Macro unroll:  test "3 5 |", 7
1C38   31 00 5B               LD   SP,STACK   
1C3B   CD 49 0D               CALL   coldInit   
1C3E   CD 00 59               CALL   execStr   
1C41   33 20 35 20 7C 00      DB   "3 5 |",0   
1C47   E1                     POP   HL   
1C48   E5                     PUSH   HL   
1C49   11 07 00               LD   DE,7   
1C4C   B7                     OR   A   
1C4D   ED 52                  SBC   HL,DE   
1C4F   7D                     LD   A,L   
1C50   B4                     OR   H   
1C51   CA B1 1C               JP   Z,expectM_2971S48   
1C54   CD DB 0C               CALL   printStr   
1C57   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1C63   CD DB 0C               CALL   printStr   
1C66   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C75   21 07 00               LD   hl,7   
1C78   E5                     PUSH   hl   
1C79   E5                     PUSH   hl   
1C7A   CD 12 0E               CALL   run   
1C7D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1C89   CD DB 0C               CALL   printStr   
1C8C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C99   E1                     POP   hl   
1C9A   E5                     PUSH   hl   
1C9B   E5                     PUSH   hl   
1C9C   CD 12 0E               CALL   run   
1C9F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1CB0   76                     HALT      
1CB1                EXPECTM_2971S48:      
1CB1   E1                     POP   HL   
1CB2                          ;*Macro unroll:  test "3 5 /xor", 6
1CB2   31 00 5B               LD   SP,STACK   
1CB5   CD 49 0D               CALL   coldInit   
1CB8   CD 00 59               CALL   execStr   
1CBB   33 20 35 20 2F 78 6F 72 00 DB   "3 5 /xor",0   
1CC4   E1                     POP   HL   
1CC5   E5                     PUSH   HL   
1CC6   11 06 00               LD   DE,6   
1CC9   B7                     OR   A   
1CCA   ED 52                  SBC   HL,DE   
1CCC   7D                     LD   A,L   
1CCD   B4                     OR   H   
1CCE   CA 31 1D               JP   Z,expectM_2972S49   
1CD1   CD DB 0C               CALL   printStr   
1CD4   43 6F 64 65 3A 20 33 20 35 20 2F 78 6F 72 00 .CSTR   "Code: ","3 5 /xor"   
1CE3   CD DB 0C               CALL   printStr   
1CE6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CF5   21 06 00               LD   hl,6   
1CF8   E5                     PUSH   hl   
1CF9   E5                     PUSH   hl   
1CFA   CD 12 0E               CALL   run   
1CFD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1D09   CD DB 0C               CALL   printStr   
1D0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D19   E1                     POP   hl   
1D1A   E5                     PUSH   hl   
1D1B   E5                     PUSH   hl   
1D1C   CD 12 0E               CALL   run   
1D1F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1D30   76                     HALT      
1D31                EXPECTM_2972S49:      
1D31   E1                     POP   HL   
1D32                          ;*Macro unroll:  test "3a= 5 a/xor a= a",6
1D32   31 00 5B               LD   SP,STACK   
1D35   CD 49 0D               CALL   coldInit   
1D38   CD 00 59               CALL   execStr   
1D3B   33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 DB   "3a= 5 a/xor a= a",0   
1D4C   E1                     POP   HL   
1D4D   E5                     PUSH   HL   
1D4E   11 06 00               LD   DE,6   
1D51   B7                     OR   A   
1D52   ED 52                  SBC   HL,DE   
1D54   7D                     LD   A,L   
1D55   B4                     OR   H   
1D56   CA C1 1D               JP   Z,expectM_2973S50   
1D59   CD DB 0C               CALL   printStr   
1D5C   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/xor a= a"   
1D73   CD DB 0C               CALL   printStr   
1D76   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D85   21 06 00               LD   hl,6   
1D88   E5                     PUSH   hl   
1D89   E5                     PUSH   hl   
1D8A   CD 12 0E               CALL   run   
1D8D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1D99   CD DB 0C               CALL   printStr   
1D9C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DA9   E1                     POP   hl   
1DAA   E5                     PUSH   hl   
1DAB   E5                     PUSH   hl   
1DAC   CD 12 0E               CALL   run   
1DAF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1DC0   76                     HALT      
1DC1                EXPECTM_2973S50:      
1DC1   E1                     POP   HL   
1DC2                          ;*Macro unroll:  test "0 !", true
1DC2   31 00 5B               LD   SP,STACK   
1DC5   CD 49 0D               CALL   coldInit   
1DC8   CD 00 59               CALL   execStr   
1DCB   30 20 21 00            DB   "0 !",0   
1DCF   E1                     POP   HL   
1DD0   E5                     PUSH   HL   
1DD1   11 FF FF               LD   DE,true   
1DD4   B7                     OR   A   
1DD5   ED 52                  SBC   HL,DE   
1DD7   7D                     LD   A,L   
1DD8   B4                     OR   H   
1DD9   CA 37 1E               JP   Z,expectM_2974S51   
1DDC   CD DB 0C               CALL   printStr   
1DDF   43 6F 64 65 3A 20 30 20 21 00 .CSTR   "Code: ","0 !"   
1DE9   CD DB 0C               CALL   printStr   
1DEC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DFB   21 FF FF               LD   hl,true   
1DFE   E5                     PUSH   hl   
1DFF   E5                     PUSH   hl   
1E00   CD 12 0E               CALL   run   
1E03   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1E0F   CD DB 0C               CALL   printStr   
1E12   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E1F   E1                     POP   hl   
1E20   E5                     PUSH   hl   
1E21   E5                     PUSH   hl   
1E22   CD 12 0E               CALL   run   
1E25   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1E36   76                     HALT      
1E37                EXPECTM_2974S51:      
1E37   E1                     POP   HL   
1E38                          ;*Macro unroll:  test "2 !", false
1E38   31 00 5B               LD   SP,STACK   
1E3B   CD 49 0D               CALL   coldInit   
1E3E   CD 00 59               CALL   execStr   
1E41   32 20 21 00            DB   "2 !",0   
1E45   E1                     POP   HL   
1E46   E5                     PUSH   HL   
1E47   11 00 00               LD   DE,false   
1E4A   B7                     OR   A   
1E4B   ED 52                  SBC   HL,DE   
1E4D   7D                     LD   A,L   
1E4E   B4                     OR   H   
1E4F   CA AD 1E               JP   Z,expectM_2975S52   
1E52   CD DB 0C               CALL   printStr   
1E55   43 6F 64 65 3A 20 32 20 21 00 .CSTR   "Code: ","2 !"   
1E5F   CD DB 0C               CALL   printStr   
1E62   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E71   21 00 00               LD   hl,false   
1E74   E5                     PUSH   hl   
1E75   E5                     PUSH   hl   
1E76   CD 12 0E               CALL   run   
1E79   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1E85   CD DB 0C               CALL   printStr   
1E88   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E95   E1                     POP   hl   
1E96   E5                     PUSH   hl   
1E97   E5                     PUSH   hl   
1E98   CD 12 0E               CALL   run   
1E9B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1EAC   76                     HALT      
1EAD                EXPECTM_2975S52:      
1EAD   E1                     POP   HL   
1EAE                          ;*Macro unroll:  test "0 !!", false
1EAE   31 00 5B               LD   SP,STACK   
1EB1   CD 49 0D               CALL   coldInit   
1EB4   CD 00 59               CALL   execStr   
1EB7   30 20 21 21 00         DB   "0 !!",0   
1EBC   E1                     POP   HL   
1EBD   E5                     PUSH   HL   
1EBE   11 00 00               LD   DE,false   
1EC1   B7                     OR   A   
1EC2   ED 52                  SBC   HL,DE   
1EC4   7D                     LD   A,L   
1EC5   B4                     OR   H   
1EC6   CA 25 1F               JP   Z,expectM_2976S53   
1EC9   CD DB 0C               CALL   printStr   
1ECC   43 6F 64 65 3A 20 30 20 21 21 00 .CSTR   "Code: ","0 !!"   
1ED7   CD DB 0C               CALL   printStr   
1EDA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EE9   21 00 00               LD   hl,false   
1EEC   E5                     PUSH   hl   
1EED   E5                     PUSH   hl   
1EEE   CD 12 0E               CALL   run   
1EF1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1EFD   CD DB 0C               CALL   printStr   
1F00   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F0D   E1                     POP   hl   
1F0E   E5                     PUSH   hl   
1F0F   E5                     PUSH   hl   
1F10   CD 12 0E               CALL   run   
1F13   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1F24   76                     HALT      
1F25                EXPECTM_2976S53:      
1F25   E1                     POP   HL   
1F26                          ;*Macro unroll:  test "2 !!", true
1F26   31 00 5B               LD   SP,STACK   
1F29   CD 49 0D               CALL   coldInit   
1F2C   CD 00 59               CALL   execStr   
1F2F   32 20 21 21 00         DB   "2 !!",0   
1F34   E1                     POP   HL   
1F35   E5                     PUSH   HL   
1F36   11 FF FF               LD   DE,true   
1F39   B7                     OR   A   
1F3A   ED 52                  SBC   HL,DE   
1F3C   7D                     LD   A,L   
1F3D   B4                     OR   H   
1F3E   CA 9D 1F               JP   Z,expectM_2977S54   
1F41   CD DB 0C               CALL   printStr   
1F44   43 6F 64 65 3A 20 32 20 21 21 00 .CSTR   "Code: ","2 !!"   
1F4F   CD DB 0C               CALL   printStr   
1F52   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F61   21 FF FF               LD   hl,true   
1F64   E5                     PUSH   hl   
1F65   E5                     PUSH   hl   
1F66   CD 12 0E               CALL   run   
1F69   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1F75   CD DB 0C               CALL   printStr   
1F78   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F85   E1                     POP   hl   
1F86   E5                     PUSH   hl   
1F87   E5                     PUSH   hl   
1F88   CD 12 0E               CALL   run   
1F8B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1F9C   76                     HALT      
1F9D                EXPECTM_2977S54:      
1F9D   E1                     POP   HL   
1F9E                          ;*Macro unroll:  test "2 3 *", 6
1F9E   31 00 5B               LD   SP,STACK   
1FA1   CD 49 0D               CALL   coldInit   
1FA4   CD 00 59               CALL   execStr   
1FA7   32 20 33 20 2A 00      DB   "2 3 *",0   
1FAD   E1                     POP   HL   
1FAE   E5                     PUSH   HL   
1FAF   11 06 00               LD   DE,6   
1FB2   B7                     OR   A   
1FB3   ED 52                  SBC   HL,DE   
1FB5   7D                     LD   A,L   
1FB6   B4                     OR   H   
1FB7   CA 17 20               JP   Z,expectM_2978S55   
1FBA   CD DB 0C               CALL   printStr   
1FBD   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1FC9   CD DB 0C               CALL   printStr   
1FCC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FDB   21 06 00               LD   hl,6   
1FDE   E5                     PUSH   hl   
1FDF   E5                     PUSH   hl   
1FE0   CD 12 0E               CALL   run   
1FE3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1FEF   CD DB 0C               CALL   printStr   
1FF2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FFF   E1                     POP   hl   
2000   E5                     PUSH   hl   
2001   E5                     PUSH   hl   
2002   CD 12 0E               CALL   run   
2005   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2016   76                     HALT      
2017                EXPECTM_2978S55:      
2017   E1                     POP   HL   
2018                          ;*Macro unroll:  test "1 2 3 + *", 5
2018   31 00 5B               LD   SP,STACK   
201B   CD 49 0D               CALL   coldInit   
201E   CD 00 59               CALL   execStr   
2021   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
202B   E1                     POP   HL   
202C   E5                     PUSH   HL   
202D   11 05 00               LD   DE,5   
2030   B7                     OR   A   
2031   ED 52                  SBC   HL,DE   
2033   7D                     LD   A,L   
2034   B4                     OR   H   
2035   CA 99 20               JP   Z,expectM_2979S56   
2038   CD DB 0C               CALL   printStr   
203B   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
204B   CD DB 0C               CALL   printStr   
204E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
205D   21 05 00               LD   hl,5   
2060   E5                     PUSH   hl   
2061   E5                     PUSH   hl   
2062   CD 12 0E               CALL   run   
2065   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2071   CD DB 0C               CALL   printStr   
2074   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2081   E1                     POP   hl   
2082   E5                     PUSH   hl   
2083   E5                     PUSH   hl   
2084   CD 12 0E               CALL   run   
2087   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2098   76                     HALT      
2099                EXPECTM_2979S56:      
2099   E1                     POP   HL   
209A                          ;*Macro unroll:  test "7 3 /", 2
209A   31 00 5B               LD   SP,STACK   
209D   CD 49 0D               CALL   coldInit   
20A0   CD 00 59               CALL   execStr   
20A3   37 20 33 20 2F 00      DB   "7 3 /",0   
20A9   E1                     POP   HL   
20AA   E5                     PUSH   HL   
20AB   11 02 00               LD   DE,2   
20AE   B7                     OR   A   
20AF   ED 52                  SBC   HL,DE   
20B1   7D                     LD   A,L   
20B2   B4                     OR   H   
20B3   CA 13 21               JP   Z,expectM_2980S57   
20B6   CD DB 0C               CALL   printStr   
20B9   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
20C5   CD DB 0C               CALL   printStr   
20C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20D7   21 02 00               LD   hl,2   
20DA   E5                     PUSH   hl   
20DB   E5                     PUSH   hl   
20DC   CD 12 0E               CALL   run   
20DF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
20EB   CD DB 0C               CALL   printStr   
20EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20FB   E1                     POP   hl   
20FC   E5                     PUSH   hl   
20FD   E5                     PUSH   hl   
20FE   CD 12 0E               CALL   run   
2101   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2112   76                     HALT      
2113                EXPECTM_2980S57:      
2113   E1                     POP   HL   
2114                          ;*Macro unroll:  test "100a= 1a+= a", 101
2114   31 00 5B               LD   SP,STACK   
2117   CD 49 0D               CALL   coldInit   
211A   CD 00 59               CALL   execStr   
211D   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
212A   E1                     POP   HL   
212B   E5                     PUSH   HL   
212C   11 65 00               LD   DE,101   
212F   B7                     OR   A   
2130   ED 52                  SBC   HL,DE   
2132   7D                     LD   A,L   
2133   B4                     OR   H   
2134   CA 9B 21               JP   Z,expectM_2981S58   
2137   CD DB 0C               CALL   printStr   
213A   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
214D   CD DB 0C               CALL   printStr   
2150   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
215F   21 65 00               LD   hl,101   
2162   E5                     PUSH   hl   
2163   E5                     PUSH   hl   
2164   CD 12 0E               CALL   run   
2167   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2173   CD DB 0C               CALL   printStr   
2176   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2183   E1                     POP   hl   
2184   E5                     PUSH   hl   
2185   E5                     PUSH   hl   
2186   CD 12 0E               CALL   run   
2189   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
219A   76                     HALT      
219B                EXPECTM_2981S58:      
219B   E1                     POP   HL   
219C                          ;*Macro unroll:  test "100a= 1a-= a", 99
219C   31 00 5B               LD   SP,STACK   
219F   CD 49 0D               CALL   coldInit   
21A2   CD 00 59               CALL   execStr   
21A5   31 30 30 61 3D 20 31 61 2D 3D 20 61 00 DB   "100a= 1a-= a",0   
21B2   E1                     POP   HL   
21B3   E5                     PUSH   HL   
21B4   11 63 00               LD   DE,99   
21B7   B7                     OR   A   
21B8   ED 52                  SBC   HL,DE   
21BA   7D                     LD   A,L   
21BB   B4                     OR   H   
21BC   CA 23 22               JP   Z,expectM_2982S59   
21BF   CD DB 0C               CALL   printStr   
21C2   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2D 3D 20 61 00 .CSTR   "Code: ","100a= 1a-= a"   
21D5   CD DB 0C               CALL   printStr   
21D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21E7   21 63 00               LD   hl,99   
21EA   E5                     PUSH   hl   
21EB   E5                     PUSH   hl   
21EC   CD 12 0E               CALL   run   
21EF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
21FB   CD DB 0C               CALL   printStr   
21FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
220B   E1                     POP   hl   
220C   E5                     PUSH   hl   
220D   E5                     PUSH   hl   
220E   CD 12 0E               CALL   run   
2211   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2222   76                     HALT      
2223                EXPECTM_2982S59:      
2223   E1                     POP   HL   
2224                          ;*Macro unroll:  test "100a= 2a*= a", 200
2224   31 00 5B               LD   SP,STACK   
2227   CD 49 0D               CALL   coldInit   
222A   CD 00 59               CALL   execStr   
222D   31 30 30 61 3D 20 32 61 2A 3D 20 61 00 DB   "100a= 2a*= a",0   
223A   E1                     POP   HL   
223B   E5                     PUSH   HL   
223C   11 C8 00               LD   DE,200   
223F   B7                     OR   A   
2240   ED 52                  SBC   HL,DE   
2242   7D                     LD   A,L   
2243   B4                     OR   H   
2244   CA AB 22               JP   Z,expectM_2983S60   
2247   CD DB 0C               CALL   printStr   
224A   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 61 2A 3D 20 61 00 .CSTR   "Code: ","100a= 2a*= a"   
225D   CD DB 0C               CALL   printStr   
2260   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
226F   21 C8 00               LD   hl,200   
2272   E5                     PUSH   hl   
2273   E5                     PUSH   hl   
2274   CD 12 0E               CALL   run   
2277   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2283   CD DB 0C               CALL   printStr   
2286   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2293   E1                     POP   hl   
2294   E5                     PUSH   hl   
2295   E5                     PUSH   hl   
2296   CD 12 0E               CALL   run   
2299   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
22AA   76                     HALT      
22AB                EXPECTM_2983S60:      
22AB   E1                     POP   HL   
22AC                          ;*Macro unroll:  test "100a= 2 a/= a", 50
22AC   31 00 5B               LD   SP,STACK   
22AF   CD 49 0D               CALL   coldInit   
22B2   CD 00 59               CALL   execStr   
22B5   31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 DB   "100a= 2 a/= a",0   
22C3   E1                     POP   HL   
22C4   E5                     PUSH   HL   
22C5   11 32 00               LD   DE,50   
22C8   B7                     OR   A   
22C9   ED 52                  SBC   HL,DE   
22CB   7D                     LD   A,L   
22CC   B4                     OR   H   
22CD   CA 35 23               JP   Z,expectM_2984S61   
22D0   CD DB 0C               CALL   printStr   
22D3   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 .CSTR   "Code: ","100a= 2 a/= a"   
22E7   CD DB 0C               CALL   printStr   
22EA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22F9   21 32 00               LD   hl,50   
22FC   E5                     PUSH   hl   
22FD   E5                     PUSH   hl   
22FE   CD 12 0E               CALL   run   
2301   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
230D   CD DB 0C               CALL   printStr   
2310   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
231D   E1                     POP   hl   
231E   E5                     PUSH   hl   
231F   E5                     PUSH   hl   
2320   CD 12 0E               CALL   run   
2323   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2334   76                     HALT      
2335                EXPECTM_2984S61:      
2335   E1                     POP   HL   
2336                          ;*Macro unroll:  test "2a= 3b= a b+= b", 5
2336   31 00 5B               LD   SP,STACK   
2339   CD 49 0D               CALL   coldInit   
233C   CD 00 59               CALL   execStr   
233F   32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 DB   "2a= 3b= a b+= b",0   
234F   E1                     POP   HL   
2350   E5                     PUSH   HL   
2351   11 05 00               LD   DE,5   
2354   B7                     OR   A   
2355   ED 52                  SBC   HL,DE   
2357   7D                     LD   A,L   
2358   B4                     OR   H   
2359   CA C3 23               JP   Z,expectM_2985S62   
235C   CD DB 0C               CALL   printStr   
235F   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b+= b"   
2375   CD DB 0C               CALL   printStr   
2378   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2387   21 05 00               LD   hl,5   
238A   E5                     PUSH   hl   
238B   E5                     PUSH   hl   
238C   CD 12 0E               CALL   run   
238F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
239B   CD DB 0C               CALL   printStr   
239E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23AB   E1                     POP   hl   
23AC   E5                     PUSH   hl   
23AD   E5                     PUSH   hl   
23AE   CD 12 0E               CALL   run   
23B1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
23C2   76                     HALT      
23C3                EXPECTM_2985S62:      
23C3   E1                     POP   HL   
23C4                          ;*Macro unroll:  test "2a= 3b= a b-= b", 1
23C4   31 00 5B               LD   SP,STACK   
23C7   CD 49 0D               CALL   coldInit   
23CA   CD 00 59               CALL   execStr   
23CD   32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 DB   "2a= 3b= a b-= b",0   
23DD   E1                     POP   HL   
23DE   E5                     PUSH   HL   
23DF   11 01 00               LD   DE,1   
23E2   B7                     OR   A   
23E3   ED 52                  SBC   HL,DE   
23E5   7D                     LD   A,L   
23E6   B4                     OR   H   
23E7   CA 51 24               JP   Z,expectM_2986S63   
23EA   CD DB 0C               CALL   printStr   
23ED   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b-= b"   
2403   CD DB 0C               CALL   printStr   
2406   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2415   21 01 00               LD   hl,1   
2418   E5                     PUSH   hl   
2419   E5                     PUSH   hl   
241A   CD 12 0E               CALL   run   
241D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2429   CD DB 0C               CALL   printStr   
242C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2439   E1                     POP   hl   
243A   E5                     PUSH   hl   
243B   E5                     PUSH   hl   
243C   CD 12 0E               CALL   run   
243F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2450   76                     HALT      
2451                EXPECTM_2986S63:      
2451   E1                     POP   HL   
2452                          ;*Macro unroll:  test "2a= 3b= a b*= b", 6
2452   31 00 5B               LD   SP,STACK   
2455   CD 49 0D               CALL   coldInit   
2458   CD 00 59               CALL   execStr   
245B   32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 DB   "2a= 3b= a b*= b",0   
246B   E1                     POP   HL   
246C   E5                     PUSH   HL   
246D   11 06 00               LD   DE,6   
2470   B7                     OR   A   
2471   ED 52                  SBC   HL,DE   
2473   7D                     LD   A,L   
2474   B4                     OR   H   
2475   CA DF 24               JP   Z,expectM_2987S64   
2478   CD DB 0C               CALL   printStr   
247B   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b*= b"   
2491   CD DB 0C               CALL   printStr   
2494   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24A3   21 06 00               LD   hl,6   
24A6   E5                     PUSH   hl   
24A7   E5                     PUSH   hl   
24A8   CD 12 0E               CALL   run   
24AB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
24B7   CD DB 0C               CALL   printStr   
24BA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24C7   E1                     POP   hl   
24C8   E5                     PUSH   hl   
24C9   E5                     PUSH   hl   
24CA   CD 12 0E               CALL   run   
24CD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
24DE   76                     HALT      
24DF                EXPECTM_2987S64:      
24DF   E1                     POP   HL   
24E0                          ;*Macro unroll:  test "2a= 6b= a b/= b", 3
24E0   31 00 5B               LD   SP,STACK   
24E3   CD 49 0D               CALL   coldInit   
24E6   CD 00 59               CALL   execStr   
24E9   32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 DB   "2a= 6b= a b/= b",0   
24F9   E1                     POP   HL   
24FA   E5                     PUSH   HL   
24FB   11 03 00               LD   DE,3   
24FE   B7                     OR   A   
24FF   ED 52                  SBC   HL,DE   
2501   7D                     LD   A,L   
2502   B4                     OR   H   
2503   CA 6D 25               JP   Z,expectM_2988S65   
2506   CD DB 0C               CALL   printStr   
2509   43 6F 64 65 3A 20 32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 .CSTR   "Code: ","2a= 6b= a b/= b"   
251F   CD DB 0C               CALL   printStr   
2522   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2531   21 03 00               LD   hl,3   
2534   E5                     PUSH   hl   
2535   E5                     PUSH   hl   
2536   CD 12 0E               CALL   run   
2539   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2545   CD DB 0C               CALL   printStr   
2548   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2555   E1                     POP   hl   
2556   E5                     PUSH   hl   
2557   E5                     PUSH   hl   
2558   CD 12 0E               CALL   run   
255B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
256C   76                     HALT      
256D                EXPECTM_2988S65:      
256D   E1                     POP   HL   
256E                          ;*Macro unroll:  test "$55a= $AAa&= a",0
256E   31 00 5B               LD   SP,STACK   
2571   CD 49 0D               CALL   coldInit   
2574   CD 00 59               CALL   execStr   
2577   24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 DB   "$55a= $AAa&= a",0   
2586   E1                     POP   HL   
2587   E5                     PUSH   HL   
2588   11 00 00               LD   DE,0   
258B   B7                     OR   A   
258C   ED 52                  SBC   HL,DE   
258E   7D                     LD   A,L   
258F   B4                     OR   H   
2590   CA F9 25               JP   Z,expectM_2989S66   
2593   CD DB 0C               CALL   printStr   
2596   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa&= a"   
25AB   CD DB 0C               CALL   printStr   
25AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25BD   21 00 00               LD   hl,0   
25C0   E5                     PUSH   hl   
25C1   E5                     PUSH   hl   
25C2   CD 12 0E               CALL   run   
25C5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
25D1   CD DB 0C               CALL   printStr   
25D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25E1   E1                     POP   hl   
25E2   E5                     PUSH   hl   
25E3   E5                     PUSH   hl   
25E4   CD 12 0E               CALL   run   
25E7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
25F8   76                     HALT      
25F9                EXPECTM_2989S66:      
25F9   E1                     POP   HL   
25FA                          ;*Macro unroll:  test "$55a= $AAa|= a",$FF
25FA   31 00 5B               LD   SP,STACK   
25FD   CD 49 0D               CALL   coldInit   
2600   CD 00 59               CALL   execStr   
2603   24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 DB   "$55a= $AAa|= a",0   
2612   E1                     POP   HL   
2613   E5                     PUSH   HL   
2614   11 FF 00               LD   DE,$FF   
2617   B7                     OR   A   
2618   ED 52                  SBC   HL,DE   
261A   7D                     LD   A,L   
261B   B4                     OR   H   
261C   CA 85 26               JP   Z,expectM_2990S67   
261F   CD DB 0C               CALL   printStr   
2622   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa|= a"   
2637   CD DB 0C               CALL   printStr   
263A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2649   21 FF 00               LD   hl,$FF   
264C   E5                     PUSH   hl   
264D   E5                     PUSH   hl   
264E   CD 12 0E               CALL   run   
2651   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
265D   CD DB 0C               CALL   printStr   
2660   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
266D   E1                     POP   hl   
266E   E5                     PUSH   hl   
266F   E5                     PUSH   hl   
2670   CD 12 0E               CALL   run   
2673   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2684   76                     HALT      
2685                EXPECTM_2990S67:      
2685   E1                     POP   HL   
2686                          ;*Macro unroll:  test "$A5a= $AAa /xor= a",$0F
2686   31 00 5B               LD   SP,STACK   
2689   CD 49 0D               CALL   coldInit   
268C   CD 00 59               CALL   execStr   
268F   24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 DB   "$A5a= $AAa /xor= a",0   
26A2   E1                     POP   HL   
26A3   E5                     PUSH   HL   
26A4   11 0F 00               LD   DE,$0F   
26A7   B7                     OR   A   
26A8   ED 52                  SBC   HL,DE   
26AA   7D                     LD   A,L   
26AB   B4                     OR   H   
26AC   CA 19 27               JP   Z,expectM_2991S68   
26AF   CD DB 0C               CALL   printStr   
26B2   43 6F 64 65 3A 20 24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 .CSTR   "Code: ","$A5a= $AAa /xor= a"   
26CB   CD DB 0C               CALL   printStr   
26CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26DD   21 0F 00               LD   hl,$0F   
26E0   E5                     PUSH   hl   
26E1   E5                     PUSH   hl   
26E2   CD 12 0E               CALL   run   
26E5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
26F1   CD DB 0C               CALL   printStr   
26F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2701   E1                     POP   hl   
2702   E5                     PUSH   hl   
2703   E5                     PUSH   hl   
2704   CD 12 0E               CALL   run   
2707   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2718   76                     HALT      
2719                EXPECTM_2991S68:      
2719   E1                     POP   HL   
271A                          ;*Macro unroll:  test "$00AA~",$FF55
271A   31 00 5B               LD   SP,STACK   
271D   CD 49 0D               CALL   coldInit   
2720   CD 00 59               CALL   execStr   
2723   24 30 30 41 41 7E 00   DB   "$00AA~",0   
272A   E1                     POP   HL   
272B   E5                     PUSH   HL   
272C   11 55 FF               LD   DE,$FF55   
272F   B7                     OR   A   
2730   ED 52                  SBC   HL,DE   
2732   7D                     LD   A,L   
2733   B4                     OR   H   
2734   CA 95 27               JP   Z,expectM_2992S69   
2737   CD DB 0C               CALL   printStr   
273A   43 6F 64 65 3A 20 24 30 30 41 41 7E 00 .CSTR   "Code: ","$00AA~"   
2747   CD DB 0C               CALL   printStr   
274A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2759   21 55 FF               LD   hl,$FF55   
275C   E5                     PUSH   hl   
275D   E5                     PUSH   hl   
275E   CD 12 0E               CALL   run   
2761   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
276D   CD DB 0C               CALL   printStr   
2770   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
277D   E1                     POP   hl   
277E   E5                     PUSH   hl   
277F   E5                     PUSH   hl   
2780   CD 12 0E               CALL   run   
2783   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2794   76                     HALT      
2795                EXPECTM_2992S69:      
2795   E1                     POP   HL   
2796                          ;*Macro unroll:  test "$AAAAa= a~= a",$5555
2796   31 00 5B               LD   SP,STACK   
2799   CD 49 0D               CALL   coldInit   
279C   CD 00 59               CALL   execStr   
279F   24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 DB   "$AAAAa= a~= a",0   
27AD   E1                     POP   HL   
27AE   E5                     PUSH   HL   
27AF   11 55 55               LD   DE,$5555   
27B2   B7                     OR   A   
27B3   ED 52                  SBC   HL,DE   
27B5   7D                     LD   A,L   
27B6   B4                     OR   H   
27B7   CA 1F 28               JP   Z,expectM_2993S70   
27BA   CD DB 0C               CALL   printStr   
27BD   43 6F 64 65 3A 20 24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 .CSTR   "Code: ","$AAAAa= a~= a"   
27D1   CD DB 0C               CALL   printStr   
27D4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27E3   21 55 55               LD   hl,$5555   
27E6   E5                     PUSH   hl   
27E7   E5                     PUSH   hl   
27E8   CD 12 0E               CALL   run   
27EB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
27F7   CD DB 0C               CALL   printStr   
27FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2807   E1                     POP   hl   
2808   E5                     PUSH   hl   
2809   E5                     PUSH   hl   
280A   CD 12 0E               CALL   run   
280D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
281E   76                     HALT      
281F                EXPECTM_2993S70:      
281F   E1                     POP   HL   
2820                          ;*Macro unroll:  test "3x= 1 x <<= x", 6
2820   31 00 5B               LD   SP,STACK   
2823   CD 49 0D               CALL   coldInit   
2826   CD 00 59               CALL   execStr   
2829   33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 DB   "3x= 1 x <<= x",0   
2837   E1                     POP   HL   
2838   E5                     PUSH   HL   
2839   11 06 00               LD   DE,6   
283C   B7                     OR   A   
283D   ED 52                  SBC   HL,DE   
283F   7D                     LD   A,L   
2840   B4                     OR   H   
2841   CA A9 28               JP   Z,expectM_2994S71   
2844   CD DB 0C               CALL   printStr   
2847   43 6F 64 65 3A 20 33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 .CSTR   "Code: ","3x= 1 x <<= x"   
285B   CD DB 0C               CALL   printStr   
285E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
286D   21 06 00               LD   hl,6   
2870   E5                     PUSH   hl   
2871   E5                     PUSH   hl   
2872   CD 12 0E               CALL   run   
2875   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2881   CD DB 0C               CALL   printStr   
2884   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2891   E1                     POP   hl   
2892   E5                     PUSH   hl   
2893   E5                     PUSH   hl   
2894   CD 12 0E               CALL   run   
2897   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
28A8   76                     HALT      
28A9                EXPECTM_2994S71:      
28A9   E1                     POP   HL   
28AA                          ;*Macro unroll:  test "10x= 1 x >>= x", 5
28AA   31 00 5B               LD   SP,STACK   
28AD   CD 49 0D               CALL   coldInit   
28B0   CD 00 59               CALL   execStr   
28B3   31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 DB   "10x= 1 x >>= x",0   
28C2   E1                     POP   HL   
28C3   E5                     PUSH   HL   
28C4   11 05 00               LD   DE,5   
28C7   B7                     OR   A   
28C8   ED 52                  SBC   HL,DE   
28CA   7D                     LD   A,L   
28CB   B4                     OR   H   
28CC   CA 35 29               JP   Z,expectM_2995S72   
28CF   CD DB 0C               CALL   printStr   
28D2   43 6F 64 65 3A 20 31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 .CSTR   "Code: ","10x= 1 x >>= x"   
28E7   CD DB 0C               CALL   printStr   
28EA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28F9   21 05 00               LD   hl,5   
28FC   E5                     PUSH   hl   
28FD   E5                     PUSH   hl   
28FE   CD 12 0E               CALL   run   
2901   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
290D   CD DB 0C               CALL   printStr   
2910   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
291D   E1                     POP   hl   
291E   E5                     PUSH   hl   
291F   E5                     PUSH   hl   
2920   CD 12 0E               CALL   run   
2923   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2934   76                     HALT      
2935                EXPECTM_2995S72:      
2935   E1                     POP   HL   
2936                          ;*Macro unroll:  test "7 3 / /rem", 1
2936   31 00 5B               LD   SP,STACK   
2939   CD 49 0D               CALL   coldInit   
293C   CD 00 59               CALL   execStr   
293F   37 20 33 20 2F 20 2F 72 65 6D 00 DB   "7 3 / /rem",0   
294A   E1                     POP   HL   
294B   E5                     PUSH   HL   
294C   11 01 00               LD   DE,1   
294F   B7                     OR   A   
2950   ED 52                  SBC   HL,DE   
2952   7D                     LD   A,L   
2953   B4                     OR   H   
2954   CA B9 29               JP   Z,expectM_2996S73   
2957   CD DB 0C               CALL   printStr   
295A   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 6D 00 .CSTR   "Code: ","7 3 / /rem"   
296B   CD DB 0C               CALL   printStr   
296E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
297D   21 01 00               LD   hl,1   
2980   E5                     PUSH   hl   
2981   E5                     PUSH   hl   
2982   CD 12 0E               CALL   run   
2985   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2991   CD DB 0C               CALL   printStr   
2994   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29A1   E1                     POP   hl   
29A2   E5                     PUSH   hl   
29A3   E5                     PUSH   hl   
29A4   CD 12 0E               CALL   run   
29A7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
29B8   76                     HALT      
29B9                EXPECTM_2996S73:      
29B9   E1                     POP   HL   
29BA                          ;*Macro unroll:  test "7 3 /", 2
29BA   31 00 5B               LD   SP,STACK   
29BD   CD 49 0D               CALL   coldInit   
29C0   CD 00 59               CALL   execStr   
29C3   37 20 33 20 2F 00      DB   "7 3 /",0   
29C9   E1                     POP   HL   
29CA   E5                     PUSH   HL   
29CB   11 02 00               LD   DE,2   
29CE   B7                     OR   A   
29CF   ED 52                  SBC   HL,DE   
29D1   7D                     LD   A,L   
29D2   B4                     OR   H   
29D3   CA 33 2A               JP   Z,expectM_2997S74   
29D6   CD DB 0C               CALL   printStr   
29D9   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
29E5   CD DB 0C               CALL   printStr   
29E8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29F7   21 02 00               LD   hl,2   
29FA   E5                     PUSH   hl   
29FB   E5                     PUSH   hl   
29FC   CD 12 0E               CALL   run   
29FF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2A0B   CD DB 0C               CALL   printStr   
2A0E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A1B   E1                     POP   hl   
2A1C   E5                     PUSH   hl   
2A1D   E5                     PUSH   hl   
2A1E   CD 12 0E               CALL   run   
2A21   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2A32   76                     HALT      
2A33                EXPECTM_2997S74:      
2A33   E1                     POP   HL   
2A34                          ;*Macro unroll:  test "2 3 ==", FALSE
2A34   31 00 5B               LD   SP,STACK   
2A37   CD 49 0D               CALL   coldInit   
2A3A   CD 00 59               CALL   execStr   
2A3D   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2A44   E1                     POP   HL   
2A45   E5                     PUSH   HL   
2A46   11 00 00               LD   DE,FALSE   
2A49   B7                     OR   A   
2A4A   ED 52                  SBC   HL,DE   
2A4C   7D                     LD   A,L   
2A4D   B4                     OR   H   
2A4E   CA AF 2A               JP   Z,expectM_2998S75   
2A51   CD DB 0C               CALL   printStr   
2A54   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2A61   CD DB 0C               CALL   printStr   
2A64   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A73   21 00 00               LD   hl,FALSE   
2A76   E5                     PUSH   hl   
2A77   E5                     PUSH   hl   
2A78   CD 12 0E               CALL   run   
2A7B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2A87   CD DB 0C               CALL   printStr   
2A8A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A97   E1                     POP   hl   
2A98   E5                     PUSH   hl   
2A99   E5                     PUSH   hl   
2A9A   CD 12 0E               CALL   run   
2A9D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2AAE   76                     HALT      
2AAF                EXPECTM_2998S75:      
2AAF   E1                     POP   HL   
2AB0                          ;*Macro unroll:  test "3 3 ==", TRUE
2AB0   31 00 5B               LD   SP,STACK   
2AB3   CD 49 0D               CALL   coldInit   
2AB6   CD 00 59               CALL   execStr   
2AB9   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
2AC0   E1                     POP   HL   
2AC1   E5                     PUSH   HL   
2AC2   11 FF FF               LD   DE,TRUE   
2AC5   B7                     OR   A   
2AC6   ED 52                  SBC   HL,DE   
2AC8   7D                     LD   A,L   
2AC9   B4                     OR   H   
2ACA   CA 2B 2B               JP   Z,expectM_2999S76   
2ACD   CD DB 0C               CALL   printStr   
2AD0   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2ADD   CD DB 0C               CALL   printStr   
2AE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AEF   21 FF FF               LD   hl,TRUE   
2AF2   E5                     PUSH   hl   
2AF3   E5                     PUSH   hl   
2AF4   CD 12 0E               CALL   run   
2AF7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2B03   CD DB 0C               CALL   printStr   
2B06   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B13   E1                     POP   hl   
2B14   E5                     PUSH   hl   
2B15   E5                     PUSH   hl   
2B16   CD 12 0E               CALL   run   
2B19   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2B2A   76                     HALT      
2B2B                EXPECTM_2999S76:      
2B2B   E1                     POP   HL   
2B2C                          ;*Macro unroll:  test "1 2 <", TRUE
2B2C   31 00 5B               LD   SP,STACK   
2B2F   CD 49 0D               CALL   coldInit   
2B32   CD 00 59               CALL   execStr   
2B35   31 20 32 20 3C 00      DB   "1 2 <",0   
2B3B   E1                     POP   HL   
2B3C   E5                     PUSH   HL   
2B3D   11 FF FF               LD   DE,TRUE   
2B40   B7                     OR   A   
2B41   ED 52                  SBC   HL,DE   
2B43   7D                     LD   A,L   
2B44   B4                     OR   H   
2B45   CA A5 2B               JP   Z,expectM_3000S77   
2B48   CD DB 0C               CALL   printStr   
2B4B   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2B57   CD DB 0C               CALL   printStr   
2B5A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B69   21 FF FF               LD   hl,TRUE   
2B6C   E5                     PUSH   hl   
2B6D   E5                     PUSH   hl   
2B6E   CD 12 0E               CALL   run   
2B71   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2B7D   CD DB 0C               CALL   printStr   
2B80   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B8D   E1                     POP   hl   
2B8E   E5                     PUSH   hl   
2B8F   E5                     PUSH   hl   
2B90   CD 12 0E               CALL   run   
2B93   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2BA4   76                     HALT      
2BA5                EXPECTM_3000S77:      
2BA5   E1                     POP   HL   
2BA6                          ;*Macro unroll:  test "2 1 <", FALSE
2BA6   31 00 5B               LD   SP,STACK   
2BA9   CD 49 0D               CALL   coldInit   
2BAC   CD 00 59               CALL   execStr   
2BAF   32 20 31 20 3C 00      DB   "2 1 <",0   
2BB5   E1                     POP   HL   
2BB6   E5                     PUSH   HL   
2BB7   11 00 00               LD   DE,FALSE   
2BBA   B7                     OR   A   
2BBB   ED 52                  SBC   HL,DE   
2BBD   7D                     LD   A,L   
2BBE   B4                     OR   H   
2BBF   CA 1F 2C               JP   Z,expectM_3001S78   
2BC2   CD DB 0C               CALL   printStr   
2BC5   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2BD1   CD DB 0C               CALL   printStr   
2BD4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BE3   21 00 00               LD   hl,FALSE   
2BE6   E5                     PUSH   hl   
2BE7   E5                     PUSH   hl   
2BE8   CD 12 0E               CALL   run   
2BEB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2BF7   CD DB 0C               CALL   printStr   
2BFA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C07   E1                     POP   hl   
2C08   E5                     PUSH   hl   
2C09   E5                     PUSH   hl   
2C0A   CD 12 0E               CALL   run   
2C0D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2C1E   76                     HALT      
2C1F                EXPECTM_3001S78:      
2C1F   E1                     POP   HL   
2C20                          ;*Macro unroll:  test "2 3 <", TRUE
2C20   31 00 5B               LD   SP,STACK   
2C23   CD 49 0D               CALL   coldInit   
2C26   CD 00 59               CALL   execStr   
2C29   32 20 33 20 3C 00      DB   "2 3 <",0   
2C2F   E1                     POP   HL   
2C30   E5                     PUSH   HL   
2C31   11 FF FF               LD   DE,TRUE   
2C34   B7                     OR   A   
2C35   ED 52                  SBC   HL,DE   
2C37   7D                     LD   A,L   
2C38   B4                     OR   H   
2C39   CA 99 2C               JP   Z,expectM_3002S79   
2C3C   CD DB 0C               CALL   printStr   
2C3F   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2C4B   CD DB 0C               CALL   printStr   
2C4E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C5D   21 FF FF               LD   hl,TRUE   
2C60   E5                     PUSH   hl   
2C61   E5                     PUSH   hl   
2C62   CD 12 0E               CALL   run   
2C65   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2C71   CD DB 0C               CALL   printStr   
2C74   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C81   E1                     POP   hl   
2C82   E5                     PUSH   hl   
2C83   E5                     PUSH   hl   
2C84   CD 12 0E               CALL   run   
2C87   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2C98   76                     HALT      
2C99                EXPECTM_3002S79:      
2C99   E1                     POP   HL   
2C9A                          ;*Macro unroll:  test "3 3 <", FALSE
2C9A   31 00 5B               LD   SP,STACK   
2C9D   CD 49 0D               CALL   coldInit   
2CA0   CD 00 59               CALL   execStr   
2CA3   33 20 33 20 3C 00      DB   "3 3 <",0   
2CA9   E1                     POP   HL   
2CAA   E5                     PUSH   HL   
2CAB   11 00 00               LD   DE,FALSE   
2CAE   B7                     OR   A   
2CAF   ED 52                  SBC   HL,DE   
2CB1   7D                     LD   A,L   
2CB2   B4                     OR   H   
2CB3   CA 13 2D               JP   Z,expectM_3003S80   
2CB6   CD DB 0C               CALL   printStr   
2CB9   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2CC5   CD DB 0C               CALL   printStr   
2CC8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CD7   21 00 00               LD   hl,FALSE   
2CDA   E5                     PUSH   hl   
2CDB   E5                     PUSH   hl   
2CDC   CD 12 0E               CALL   run   
2CDF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2CEB   CD DB 0C               CALL   printStr   
2CEE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CFB   E1                     POP   hl   
2CFC   E5                     PUSH   hl   
2CFD   E5                     PUSH   hl   
2CFE   CD 12 0E               CALL   run   
2D01   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2D12   76                     HALT      
2D13                EXPECTM_3003S80:      
2D13   E1                     POP   HL   
2D14                          ;*Macro unroll:  test "1 2 >", FALSE
2D14   31 00 5B               LD   SP,STACK   
2D17   CD 49 0D               CALL   coldInit   
2D1A   CD 00 59               CALL   execStr   
2D1D   31 20 32 20 3E 00      DB   "1 2 >",0   
2D23   E1                     POP   HL   
2D24   E5                     PUSH   HL   
2D25   11 00 00               LD   DE,FALSE   
2D28   B7                     OR   A   
2D29   ED 52                  SBC   HL,DE   
2D2B   7D                     LD   A,L   
2D2C   B4                     OR   H   
2D2D   CA 8D 2D               JP   Z,expectM_3004S81   
2D30   CD DB 0C               CALL   printStr   
2D33   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2D3F   CD DB 0C               CALL   printStr   
2D42   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D51   21 00 00               LD   hl,FALSE   
2D54   E5                     PUSH   hl   
2D55   E5                     PUSH   hl   
2D56   CD 12 0E               CALL   run   
2D59   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2D65   CD DB 0C               CALL   printStr   
2D68   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D75   E1                     POP   hl   
2D76   E5                     PUSH   hl   
2D77   E5                     PUSH   hl   
2D78   CD 12 0E               CALL   run   
2D7B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2D8C   76                     HALT      
2D8D                EXPECTM_3004S81:      
2D8D   E1                     POP   HL   
2D8E                          ;*Macro unroll:  test "2 1 >", TRUE
2D8E   31 00 5B               LD   SP,STACK   
2D91   CD 49 0D               CALL   coldInit   
2D94   CD 00 59               CALL   execStr   
2D97   32 20 31 20 3E 00      DB   "2 1 >",0   
2D9D   E1                     POP   HL   
2D9E   E5                     PUSH   HL   
2D9F   11 FF FF               LD   DE,TRUE   
2DA2   B7                     OR   A   
2DA3   ED 52                  SBC   HL,DE   
2DA5   7D                     LD   A,L   
2DA6   B4                     OR   H   
2DA7   CA 07 2E               JP   Z,expectM_3005S82   
2DAA   CD DB 0C               CALL   printStr   
2DAD   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2DB9   CD DB 0C               CALL   printStr   
2DBC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DCB   21 FF FF               LD   hl,TRUE   
2DCE   E5                     PUSH   hl   
2DCF   E5                     PUSH   hl   
2DD0   CD 12 0E               CALL   run   
2DD3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2DDF   CD DB 0C               CALL   printStr   
2DE2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DEF   E1                     POP   hl   
2DF0   E5                     PUSH   hl   
2DF1   E5                     PUSH   hl   
2DF2   CD 12 0E               CALL   run   
2DF5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2E06   76                     HALT      
2E07                EXPECTM_3005S82:      
2E07   E1                     POP   HL   
2E08                          ;*Macro unroll:  test "3 3 >", FALSE
2E08   31 00 5B               LD   SP,STACK   
2E0B   CD 49 0D               CALL   coldInit   
2E0E   CD 00 59               CALL   execStr   
2E11   33 20 33 20 3E 00      DB   "3 3 >",0   
2E17   E1                     POP   HL   
2E18   E5                     PUSH   HL   
2E19   11 00 00               LD   DE,FALSE   
2E1C   B7                     OR   A   
2E1D   ED 52                  SBC   HL,DE   
2E1F   7D                     LD   A,L   
2E20   B4                     OR   H   
2E21   CA 81 2E               JP   Z,expectM_3006S83   
2E24   CD DB 0C               CALL   printStr   
2E27   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2E33   CD DB 0C               CALL   printStr   
2E36   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E45   21 00 00               LD   hl,FALSE   
2E48   E5                     PUSH   hl   
2E49   E5                     PUSH   hl   
2E4A   CD 12 0E               CALL   run   
2E4D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2E59   CD DB 0C               CALL   printStr   
2E5C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E69   E1                     POP   hl   
2E6A   E5                     PUSH   hl   
2E6B   E5                     PUSH   hl   
2E6C   CD 12 0E               CALL   run   
2E6F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2E80   76                     HALT      
2E81                EXPECTM_3006S83:      
2E81   E1                     POP   HL   
2E82                          ;*Macro unroll:  test "4 3 >", TRUE
2E82   31 00 5B               LD   SP,STACK   
2E85   CD 49 0D               CALL   coldInit   
2E88   CD 00 59               CALL   execStr   
2E8B   34 20 33 20 3E 00      DB   "4 3 >",0   
2E91   E1                     POP   HL   
2E92   E5                     PUSH   HL   
2E93   11 FF FF               LD   DE,TRUE   
2E96   B7                     OR   A   
2E97   ED 52                  SBC   HL,DE   
2E99   7D                     LD   A,L   
2E9A   B4                     OR   H   
2E9B   CA FB 2E               JP   Z,expectM_3007S84   
2E9E   CD DB 0C               CALL   printStr   
2EA1   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2EAD   CD DB 0C               CALL   printStr   
2EB0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EBF   21 FF FF               LD   hl,TRUE   
2EC2   E5                     PUSH   hl   
2EC3   E5                     PUSH   hl   
2EC4   CD 12 0E               CALL   run   
2EC7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2ED3   CD DB 0C               CALL   printStr   
2ED6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EE3   E1                     POP   hl   
2EE4   E5                     PUSH   hl   
2EE5   E5                     PUSH   hl   
2EE6   CD 12 0E               CALL   run   
2EE9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2EFA   76                     HALT      
2EFB                EXPECTM_3007S84:      
2EFB   E1                     POP   HL   
2EFC                          ;*Macro unroll:  test "2 2 <=", TRUE
2EFC   31 00 5B               LD   SP,STACK   
2EFF   CD 49 0D               CALL   coldInit   
2F02   CD 00 59               CALL   execStr   
2F05   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2F0C   E1                     POP   HL   
2F0D   E5                     PUSH   HL   
2F0E   11 FF FF               LD   DE,TRUE   
2F11   B7                     OR   A   
2F12   ED 52                  SBC   HL,DE   
2F14   7D                     LD   A,L   
2F15   B4                     OR   H   
2F16   CA 77 2F               JP   Z,expectM_3008S85   
2F19   CD DB 0C               CALL   printStr   
2F1C   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2F29   CD DB 0C               CALL   printStr   
2F2C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F3B   21 FF FF               LD   hl,TRUE   
2F3E   E5                     PUSH   hl   
2F3F   E5                     PUSH   hl   
2F40   CD 12 0E               CALL   run   
2F43   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2F4F   CD DB 0C               CALL   printStr   
2F52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F5F   E1                     POP   hl   
2F60   E5                     PUSH   hl   
2F61   E5                     PUSH   hl   
2F62   CD 12 0E               CALL   run   
2F65   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2F76   76                     HALT      
2F77                EXPECTM_3008S85:      
2F77   E1                     POP   HL   
2F78                          ;*Macro unroll:  test "2 2 >=", TRUE
2F78   31 00 5B               LD   SP,STACK   
2F7B   CD 49 0D               CALL   coldInit   
2F7E   CD 00 59               CALL   execStr   
2F81   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2F88   E1                     POP   HL   
2F89   E5                     PUSH   HL   
2F8A   11 FF FF               LD   DE,TRUE   
2F8D   B7                     OR   A   
2F8E   ED 52                  SBC   HL,DE   
2F90   7D                     LD   A,L   
2F91   B4                     OR   H   
2F92   CA F3 2F               JP   Z,expectM_3009S86   
2F95   CD DB 0C               CALL   printStr   
2F98   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2FA5   CD DB 0C               CALL   printStr   
2FA8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FB7   21 FF FF               LD   hl,TRUE   
2FBA   E5                     PUSH   hl   
2FBB   E5                     PUSH   hl   
2FBC   CD 12 0E               CALL   run   
2FBF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2FCB   CD DB 0C               CALL   printStr   
2FCE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FDB   E1                     POP   hl   
2FDC   E5                     PUSH   hl   
2FDD   E5                     PUSH   hl   
2FDE   CD 12 0E               CALL   run   
2FE1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2FF2   76                     HALT      
2FF3                EXPECTM_3009S86:      
2FF3   E1                     POP   HL   
2FF4                          ;*Macro unroll:  test "3 1 <<", 6
2FF4   31 00 5B               LD   SP,STACK   
2FF7   CD 49 0D               CALL   coldInit   
2FFA   CD 00 59               CALL   execStr   
2FFD   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
3004   E1                     POP   HL   
3005   E5                     PUSH   HL   
3006   11 06 00               LD   DE,6   
3009   B7                     OR   A   
300A   ED 52                  SBC   HL,DE   
300C   7D                     LD   A,L   
300D   B4                     OR   H   
300E   CA 6F 30               JP   Z,expectM_3010S87   
3011   CD DB 0C               CALL   printStr   
3014   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
3021   CD DB 0C               CALL   printStr   
3024   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3033   21 06 00               LD   hl,6   
3036   E5                     PUSH   hl   
3037   E5                     PUSH   hl   
3038   CD 12 0E               CALL   run   
303B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3047   CD DB 0C               CALL   printStr   
304A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3057   E1                     POP   hl   
3058   E5                     PUSH   hl   
3059   E5                     PUSH   hl   
305A   CD 12 0E               CALL   run   
305D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
306E   76                     HALT      
306F                EXPECTM_3010S87:      
306F   E1                     POP   HL   
3070                          ;*Macro unroll:  test "10 1 >>", 5
3070   31 00 5B               LD   SP,STACK   
3073   CD 49 0D               CALL   coldInit   
3076   CD 00 59               CALL   execStr   
3079   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
3081   E1                     POP   HL   
3082   E5                     PUSH   HL   
3083   11 05 00               LD   DE,5   
3086   B7                     OR   A   
3087   ED 52                  SBC   HL,DE   
3089   7D                     LD   A,L   
308A   B4                     OR   H   
308B   CA ED 30               JP   Z,expectM_3011S88   
308E   CD DB 0C               CALL   printStr   
3091   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
309F   CD DB 0C               CALL   printStr   
30A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30B1   21 05 00               LD   hl,5   
30B4   E5                     PUSH   hl   
30B5   E5                     PUSH   hl   
30B6   CD 12 0E               CALL   run   
30B9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
30C5   CD DB 0C               CALL   printStr   
30C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30D5   E1                     POP   hl   
30D6   E5                     PUSH   hl   
30D7   E5                     PUSH   hl   
30D8   CD 12 0E               CALL   run   
30DB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
30EC   76                     HALT      
30ED                EXPECTM_3011S88:      
30ED   E1                     POP   HL   
30EE                          ;*Macro unroll:  test "1 x = x", 1
30EE   31 00 5B               LD   SP,STACK   
30F1   CD 49 0D               CALL   coldInit   
30F4   CD 00 59               CALL   execStr   
30F7   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
30FF   E1                     POP   HL   
3100   E5                     PUSH   HL   
3101   11 01 00               LD   DE,1   
3104   B7                     OR   A   
3105   ED 52                  SBC   HL,DE   
3107   7D                     LD   A,L   
3108   B4                     OR   H   
3109   CA 6B 31               JP   Z,expectM_3012S89   
310C   CD DB 0C               CALL   printStr   
310F   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
311D   CD DB 0C               CALL   printStr   
3120   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
312F   21 01 00               LD   hl,1   
3132   E5                     PUSH   hl   
3133   E5                     PUSH   hl   
3134   CD 12 0E               CALL   run   
3137   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3143   CD DB 0C               CALL   printStr   
3146   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3153   E1                     POP   hl   
3154   E5                     PUSH   hl   
3155   E5                     PUSH   hl   
3156   CD 12 0E               CALL   run   
3159   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
316A   76                     HALT      
316B                EXPECTM_3012S89:      
316B   E1                     POP   HL   
316C                          ;*Macro unroll:  test "1{}^", 1
316C   31 00 5B               LD   SP,STACK   
316F   CD 49 0D               CALL   coldInit   
3172   CD 00 59               CALL   execStr   
3175   31 7B 7D 5E 00         DB   "1{}^",0   
317A   E1                     POP   HL   
317B   E5                     PUSH   HL   
317C   11 01 00               LD   DE,1   
317F   B7                     OR   A   
3180   ED 52                  SBC   HL,DE   
3182   7D                     LD   A,L   
3183   B4                     OR   H   
3184   CA E3 31               JP   Z,expectM_3013S90   
3187   CD DB 0C               CALL   printStr   
318A   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
3195   CD DB 0C               CALL   printStr   
3198   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31A7   21 01 00               LD   hl,1   
31AA   E5                     PUSH   hl   
31AB   E5                     PUSH   hl   
31AC   CD 12 0E               CALL   run   
31AF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
31BB   CD DB 0C               CALL   printStr   
31BE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31CB   E1                     POP   hl   
31CC   E5                     PUSH   hl   
31CD   E5                     PUSH   hl   
31CE   CD 12 0E               CALL   run   
31D1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
31E2   76                     HALT      
31E3                EXPECTM_3013S90:      
31E3   E1                     POP   HL   
31E4                          ;*Macro unroll:  test "{1}^", 1
31E4   31 00 5B               LD   SP,STACK   
31E7   CD 49 0D               CALL   coldInit   
31EA   CD 00 59               CALL   execStr   
31ED   7B 31 7D 5E 00         DB   "{1}^",0   
31F2   E1                     POP   HL   
31F3   E5                     PUSH   HL   
31F4   11 01 00               LD   DE,1   
31F7   B7                     OR   A   
31F8   ED 52                  SBC   HL,DE   
31FA   7D                     LD   A,L   
31FB   B4                     OR   H   
31FC   CA 5B 32               JP   Z,expectM_3014S91   
31FF   CD DB 0C               CALL   printStr   
3202   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
320D   CD DB 0C               CALL   printStr   
3210   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
321F   21 01 00               LD   hl,1   
3222   E5                     PUSH   hl   
3223   E5                     PUSH   hl   
3224   CD 12 0E               CALL   run   
3227   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3233   CD DB 0C               CALL   printStr   
3236   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3243   E1                     POP   hl   
3244   E5                     PUSH   hl   
3245   E5                     PUSH   hl   
3246   CD 12 0E               CALL   run   
3249   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
325A   76                     HALT      
325B                EXPECTM_3014S91:      
325B   E1                     POP   HL   
325C                          ;*Macro unroll:  test "{{1}^}^", 1
325C   31 00 5B               LD   SP,STACK   
325F   CD 49 0D               CALL   coldInit   
3262   CD 00 59               CALL   execStr   
3265   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
326D   E1                     POP   HL   
326E   E5                     PUSH   HL   
326F   11 01 00               LD   DE,1   
3272   B7                     OR   A   
3273   ED 52                  SBC   HL,DE   
3275   7D                     LD   A,L   
3276   B4                     OR   H   
3277   CA D9 32               JP   Z,expectM_3015S92   
327A   CD DB 0C               CALL   printStr   
327D   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
328B   CD DB 0C               CALL   printStr   
328E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
329D   21 01 00               LD   hl,1   
32A0   E5                     PUSH   hl   
32A1   E5                     PUSH   hl   
32A2   CD 12 0E               CALL   run   
32A5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
32B1   CD DB 0C               CALL   printStr   
32B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32C1   E1                     POP   hl   
32C2   E5                     PUSH   hl   
32C3   E5                     PUSH   hl   
32C4   CD 12 0E               CALL   run   
32C7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
32D8   76                     HALT      
32D9                EXPECTM_3015S92:      
32D9   E1                     POP   HL   
32DA                          ;*Macro unroll:  test "{{{1}^}^}^", 1
32DA   31 00 5B               LD   SP,STACK   
32DD   CD 49 0D               CALL   coldInit   
32E0   CD 00 59               CALL   execStr   
32E3   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
32EE   E1                     POP   HL   
32EF   E5                     PUSH   HL   
32F0   11 01 00               LD   DE,1   
32F3   B7                     OR   A   
32F4   ED 52                  SBC   HL,DE   
32F6   7D                     LD   A,L   
32F7   B4                     OR   H   
32F8   CA 5D 33               JP   Z,expectM_3016S93   
32FB   CD DB 0C               CALL   printStr   
32FE   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
330F   CD DB 0C               CALL   printStr   
3312   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3321   21 01 00               LD   hl,1   
3324   E5                     PUSH   hl   
3325   E5                     PUSH   hl   
3326   CD 12 0E               CALL   run   
3329   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3335   CD DB 0C               CALL   printStr   
3338   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3345   E1                     POP   hl   
3346   E5                     PUSH   hl   
3347   E5                     PUSH   hl   
3348   CD 12 0E               CALL   run   
334B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
335C   76                     HALT      
335D                EXPECTM_3016S93:      
335D   E1                     POP   HL   
335E                          ;*Macro unroll:  test "1 /f{10}{20} ? +", 21
335E   31 00 5B               LD   SP,STACK   
3361   CD 49 0D               CALL   coldInit   
3364   CD 00 59               CALL   execStr   
3367   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /f{10}{20} ? +",0   
3378   E1                     POP   HL   
3379   E5                     PUSH   HL   
337A   11 15 00               LD   DE,21   
337D   B7                     OR   A   
337E   ED 52                  SBC   HL,DE   
3380   7D                     LD   A,L   
3381   B4                     OR   H   
3382   CA ED 33               JP   Z,expectM_3017S94   
3385   CD DB 0C               CALL   printStr   
3388   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ? +"   
339F   CD DB 0C               CALL   printStr   
33A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33B1   21 15 00               LD   hl,21   
33B4   E5                     PUSH   hl   
33B5   E5                     PUSH   hl   
33B6   CD 12 0E               CALL   run   
33B9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
33C5   CD DB 0C               CALL   printStr   
33C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33D5   E1                     POP   hl   
33D6   E5                     PUSH   hl   
33D7   E5                     PUSH   hl   
33D8   CD 12 0E               CALL   run   
33DB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
33EC   76                     HALT      
33ED                EXPECTM_3017S94:      
33ED   E1                     POP   HL   
33EE                          ;*Macro unroll:  test "1 /t{10}{20} ? +", 11
33EE   31 00 5B               LD   SP,STACK   
33F1   CD 49 0D               CALL   coldInit   
33F4   CD 00 59               CALL   execStr   
33F7   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /t{10}{20} ? +",0   
3408   E1                     POP   HL   
3409   E5                     PUSH   HL   
340A   11 0B 00               LD   DE,11   
340D   B7                     OR   A   
340E   ED 52                  SBC   HL,DE   
3410   7D                     LD   A,L   
3411   B4                     OR   H   
3412   CA 7D 34               JP   Z,expectM_3018S95   
3415   CD DB 0C               CALL   printStr   
3418   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ? +"   
342F   CD DB 0C               CALL   printStr   
3432   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3441   21 0B 00               LD   hl,11   
3444   E5                     PUSH   hl   
3445   E5                     PUSH   hl   
3446   CD 12 0E               CALL   run   
3449   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3455   CD DB 0C               CALL   printStr   
3458   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3465   E1                     POP   hl   
3466   E5                     PUSH   hl   
3467   E5                     PUSH   hl   
3468   CD 12 0E               CALL   run   
346B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
347C   76                     HALT      
347D                EXPECTM_3018S95:      
347D   E1                     POP   HL   
347E                          ;*Macro unroll:  test "\\{2}^", 2
347E   31 00 5B               LD   SP,STACK   
3481   CD 49 0D               CALL   coldInit   
3484   CD 00 59               CALL   execStr   
3487   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
348D   E1                     POP   HL   
348E   E5                     PUSH   HL   
348F   11 02 00               LD   DE,2   
3492   B7                     OR   A   
3493   ED 52                  SBC   HL,DE   
3495   7D                     LD   A,L   
3496   B4                     OR   H   
3497   CA F7 34               JP   Z,expectM_3019S96   
349A   CD DB 0C               CALL   printStr   
349D   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
34A9   CD DB 0C               CALL   printStr   
34AC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34BB   21 02 00               LD   hl,2   
34BE   E5                     PUSH   hl   
34BF   E5                     PUSH   hl   
34C0   CD 12 0E               CALL   run   
34C3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
34CF   CD DB 0C               CALL   printStr   
34D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34DF   E1                     POP   hl   
34E0   E5                     PUSH   hl   
34E1   E5                     PUSH   hl   
34E2   CD 12 0E               CALL   run   
34E5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
34F6   76                     HALT      
34F7                EXPECTM_3019S96:      
34F7   E1                     POP   HL   
34F8                          ;*Macro unroll:  test "\\a{2}^", 2
34F8   31 00 5B               LD   SP,STACK   
34FB   CD 49 0D               CALL   coldInit   
34FE   CD 00 59               CALL   execStr   
3501   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
3508   E1                     POP   HL   
3509   E5                     PUSH   HL   
350A   11 02 00               LD   DE,2   
350D   B7                     OR   A   
350E   ED 52                  SBC   HL,DE   
3510   7D                     LD   A,L   
3511   B4                     OR   H   
3512   CA 73 35               JP   Z,expectM_3020S97   
3515   CD DB 0C               CALL   printStr   
3518   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
3525   CD DB 0C               CALL   printStr   
3528   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3537   21 02 00               LD   hl,2   
353A   E5                     PUSH   hl   
353B   E5                     PUSH   hl   
353C   CD 12 0E               CALL   run   
353F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
354B   CD DB 0C               CALL   printStr   
354E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
355B   E1                     POP   hl   
355C   E5                     PUSH   hl   
355D   E5                     PUSH   hl   
355E   CD 12 0E               CALL   run   
3561   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3572   76                     HALT      
3573                EXPECTM_3020S97:      
3573   E1                     POP   HL   
3574                          ;*Macro unroll:  test "5 \\a{%a}^", 5
3574   31 00 5B               LD   SP,STACK   
3577   CD 49 0D               CALL   coldInit   
357A   CD 00 59               CALL   execStr   
357D   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
3587   E1                     POP   HL   
3588   E5                     PUSH   HL   
3589   11 05 00               LD   DE,5   
358C   B7                     OR   A   
358D   ED 52                  SBC   HL,DE   
358F   7D                     LD   A,L   
3590   B4                     OR   H   
3591   CA F5 35               JP   Z,expectM_3021S98   
3594   CD DB 0C               CALL   printStr   
3597   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
35A7   CD DB 0C               CALL   printStr   
35AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35B9   21 05 00               LD   hl,5   
35BC   E5                     PUSH   hl   
35BD   E5                     PUSH   hl   
35BE   CD 12 0E               CALL   run   
35C1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
35CD   CD DB 0C               CALL   printStr   
35D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35DD   E1                     POP   hl   
35DE   E5                     PUSH   hl   
35DF   E5                     PUSH   hl   
35E0   CD 12 0E               CALL   run   
35E3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
35F4   76                     HALT      
35F5                EXPECTM_3021S98:      
35F5   E1                     POP   HL   
35F6                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
35F6   31 00 5B               LD   SP,STACK   
35F9   CD 49 0D               CALL   coldInit   
35FC   CD 00 59               CALL   execStr   
35FF   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
360B   E1                     POP   HL   
360C   E5                     PUSH   HL   
360D   11 05 00               LD   DE,5   
3610   B7                     OR   A   
3611   ED 52                  SBC   HL,DE   
3613   7D                     LD   A,L   
3614   B4                     OR   H   
3615   CA 7B 36               JP   Z,expectM_3022S99   
3618   CD DB 0C               CALL   printStr   
361B   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
362D   CD DB 0C               CALL   printStr   
3630   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
363F   21 05 00               LD   hl,5   
3642   E5                     PUSH   hl   
3643   E5                     PUSH   hl   
3644   CD 12 0E               CALL   run   
3647   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3653   CD DB 0C               CALL   printStr   
3656   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3663   E1                     POP   hl   
3664   E5                     PUSH   hl   
3665   E5                     PUSH   hl   
3666   CD 12 0E               CALL   run   
3669   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
367A   76                     HALT      
367B                EXPECTM_3022S99:      
367B   E1                     POP   HL   
367C                          ;*Macro unroll:  test "\\a{{2}^}^", 2
367C   31 00 5B               LD   SP,STACK   
367F   CD 49 0D               CALL   coldInit   
3682   CD 00 59               CALL   execStr   
3685   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
368F   E1                     POP   HL   
3690   E5                     PUSH   HL   
3691   11 02 00               LD   DE,2   
3694   B7                     OR   A   
3695   ED 52                  SBC   HL,DE   
3697   7D                     LD   A,L   
3698   B4                     OR   H   
3699   CA FD 36               JP   Z,expectM_3023S100   
369C   CD DB 0C               CALL   printStr   
369F   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
36AF   CD DB 0C               CALL   printStr   
36B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36C1   21 02 00               LD   hl,2   
36C4   E5                     PUSH   hl   
36C5   E5                     PUSH   hl   
36C6   CD 12 0E               CALL   run   
36C9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
36D5   CD DB 0C               CALL   printStr   
36D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36E5   E1                     POP   hl   
36E6   E5                     PUSH   hl   
36E7   E5                     PUSH   hl   
36E8   CD 12 0E               CALL   run   
36EB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
36FC   76                     HALT      
36FD                EXPECTM_3023S100:      
36FD   E1                     POP   HL   
36FE                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
36FE   31 00 5B               LD   SP,STACK   
3701   CD 49 0D               CALL   coldInit   
3704   CD 00 59               CALL   execStr   
3707   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
3716   E1                     POP   HL   
3717   E5                     PUSH   HL   
3718   11 05 00               LD   DE,5   
371B   B7                     OR   A   
371C   ED 52                  SBC   HL,DE   
371E   7D                     LD   A,L   
371F   B4                     OR   H   
3720   CA 89 37               JP   Z,expectM_3024S101   
3723   CD DB 0C               CALL   printStr   
3726   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
373B   CD DB 0C               CALL   printStr   
373E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
374D   21 05 00               LD   hl,5   
3750   E5                     PUSH   hl   
3751   E5                     PUSH   hl   
3752   CD 12 0E               CALL   run   
3755   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3761   CD DB 0C               CALL   printStr   
3764   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3771   E1                     POP   hl   
3772   E5                     PUSH   hl   
3773   E5                     PUSH   hl   
3774   CD 12 0E               CALL   run   
3777   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3788   76                     HALT      
3789                EXPECTM_3024S101:      
3789   E1                     POP   HL   
378A                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
378A   31 00 5B               LD   SP,STACK   
378D   CD 49 0D               CALL   coldInit   
3790   CD 00 59               CALL   execStr   
3793   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
37A3   E1                     POP   HL   
37A4   E5                     PUSH   HL   
37A5   11 01 00               LD   DE,1   
37A8   B7                     OR   A   
37A9   ED 52                  SBC   HL,DE   
37AB   7D                     LD   A,L   
37AC   B4                     OR   H   
37AD   CA 17 38               JP   Z,expectM_3025S102   
37B0   CD DB 0C               CALL   printStr   
37B3   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
37C9   CD DB 0C               CALL   printStr   
37CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37DB   21 01 00               LD   hl,1   
37DE   E5                     PUSH   hl   
37DF   E5                     PUSH   hl   
37E0   CD 12 0E               CALL   run   
37E3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
37EF   CD DB 0C               CALL   printStr   
37F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37FF   E1                     POP   hl   
3800   E5                     PUSH   hl   
3801   E5                     PUSH   hl   
3802   CD 12 0E               CALL   run   
3805   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3816   76                     HALT      
3817                EXPECTM_3025S102:      
3817   E1                     POP   HL   
3818                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
3818   31 00 5B               LD   SP,STACK   
381B   CD 49 0D               CALL   coldInit   
381E   CD 00 59               CALL   execStr   
3821   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
3834   E1                     POP   HL   
3835   E5                     PUSH   HL   
3836   11 07 00               LD   DE,7   
3839   B7                     OR   A   
383A   ED 52                  SBC   HL,DE   
383C   7D                     LD   A,L   
383D   B4                     OR   H   
383E   CA AB 38               JP   Z,expectM_3026S103   
3841   CD DB 0C               CALL   printStr   
3844   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
385D   CD DB 0C               CALL   printStr   
3860   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
386F   21 07 00               LD   hl,7   
3872   E5                     PUSH   hl   
3873   E5                     PUSH   hl   
3874   CD 12 0E               CALL   run   
3877   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3883   CD DB 0C               CALL   printStr   
3886   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3893   E1                     POP   hl   
3894   E5                     PUSH   hl   
3895   E5                     PUSH   hl   
3896   CD 12 0E               CALL   run   
3899   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
38AA   76                     HALT      
38AB                EXPECTM_3026S103:      
38AB   E1                     POP   HL   
38AC                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
38AC   31 00 5B               LD   SP,STACK   
38AF   CD 49 0D               CALL   coldInit   
38B2   CD 00 59               CALL   execStr   
38B5   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
38CA   E1                     POP   HL   
38CB   E5                     PUSH   HL   
38CC   11 06 00               LD   DE,6   
38CF   B7                     OR   A   
38D0   ED 52                  SBC   HL,DE   
38D2   7D                     LD   A,L   
38D3   B4                     OR   H   
38D4   CA 43 39               JP   Z,expectM_3027S104   
38D7   CD DB 0C               CALL   printStr   
38DA   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
38F5   CD DB 0C               CALL   printStr   
38F8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3907   21 06 00               LD   hl,6   
390A   E5                     PUSH   hl   
390B   E5                     PUSH   hl   
390C   CD 12 0E               CALL   run   
390F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
391B   CD DB 0C               CALL   printStr   
391E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
392B   E1                     POP   hl   
392C   E5                     PUSH   hl   
392D   E5                     PUSH   hl   
392E   CD 12 0E               CALL   run   
3931   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3942   76                     HALT      
3943                EXPECTM_3027S104:      
3943   E1                     POP   HL   
3944                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
3944   31 00 5B               LD   SP,STACK   
3947   CD 49 0D               CALL   coldInit   
394A   CD 00 59               CALL   execStr   
394D   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
395B   E1                     POP   HL   
395C   E5                     PUSH   HL   
395D   11 02 00               LD   DE,2   
3960   B7                     OR   A   
3961   ED 52                  SBC   HL,DE   
3963   7D                     LD   A,L   
3964   B4                     OR   H   
3965   CA CD 39               JP   Z,expectM_3028S105   
3968   CD DB 0C               CALL   printStr   
396B   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
397F   CD DB 0C               CALL   printStr   
3982   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3991   21 02 00               LD   hl,2   
3994   E5                     PUSH   hl   
3995   E5                     PUSH   hl   
3996   CD 12 0E               CALL   run   
3999   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
39A5   CD DB 0C               CALL   printStr   
39A8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39B5   E1                     POP   hl   
39B6   E5                     PUSH   hl   
39B7   E5                     PUSH   hl   
39B8   CD 12 0E               CALL   run   
39BB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
39CC   76                     HALT      
39CD                EXPECTM_3028S105:      
39CD   E1                     POP   HL   
39CE                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
39CE   31 00 5B               LD   SP,STACK   
39D1   CD 49 0D               CALL   coldInit   
39D4   CD 00 59               CALL   execStr   
39D7   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
39E8   E1                     POP   HL   
39E9   E5                     PUSH   HL   
39EA   11 01 00               LD   DE,1   
39ED   B7                     OR   A   
39EE   ED 52                  SBC   HL,DE   
39F0   7D                     LD   A,L   
39F1   B4                     OR   H   
39F2   CA 5D 3A               JP   Z,expectM_3029S106   
39F5   CD DB 0C               CALL   printStr   
39F8   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3A0F   CD DB 0C               CALL   printStr   
3A12   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A21   21 01 00               LD   hl,1   
3A24   E5                     PUSH   hl   
3A25   E5                     PUSH   hl   
3A26   CD 12 0E               CALL   run   
3A29   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3A35   CD DB 0C               CALL   printStr   
3A38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A45   E1                     POP   hl   
3A46   E5                     PUSH   hl   
3A47   E5                     PUSH   hl   
3A48   CD 12 0E               CALL   run   
3A4B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3A5C   76                     HALT      
3A5D                EXPECTM_3029S106:      
3A5D   E1                     POP   HL   
3A5E                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3A5E   31 00 5B               LD   SP,STACK   
3A61   CD 49 0D               CALL   coldInit   
3A64   CD 00 59               CALL   execStr   
3A67   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3A79   E1                     POP   HL   
3A7A   E5                     PUSH   HL   
3A7B   11 02 00               LD   DE,2   
3A7E   B7                     OR   A   
3A7F   ED 52                  SBC   HL,DE   
3A81   7D                     LD   A,L   
3A82   B4                     OR   H   
3A83   CA EF 3A               JP   Z,expectM_3030S107   
3A86   CD DB 0C               CALL   printStr   
3A89   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3AA1   CD DB 0C               CALL   printStr   
3AA4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AB3   21 02 00               LD   hl,2   
3AB6   E5                     PUSH   hl   
3AB7   E5                     PUSH   hl   
3AB8   CD 12 0E               CALL   run   
3ABB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3AC7   CD DB 0C               CALL   printStr   
3ACA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AD7   E1                     POP   hl   
3AD8   E5                     PUSH   hl   
3AD9   E5                     PUSH   hl   
3ADA   CD 12 0E               CALL   run   
3ADD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3AEE   76                     HALT      
3AEF                EXPECTM_3030S107:      
3AEF   E1                     POP   HL   
3AF0                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
3AF0   31 00 5B               LD   SP,STACK   
3AF3   CD 49 0D               CALL   coldInit   
3AF6   CD 00 59               CALL   execStr   
3AF9   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
3B0C   E1                     POP   HL   
3B0D   E5                     PUSH   HL   
3B0E   11 02 00               LD   DE,2   
3B11   B7                     OR   A   
3B12   ED 52                  SBC   HL,DE   
3B14   7D                     LD   A,L   
3B15   B4                     OR   H   
3B16   CA 83 3B               JP   Z,expectM_3031S108   
3B19   CD DB 0C               CALL   printStr   
3B1C   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
3B35   CD DB 0C               CALL   printStr   
3B38   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B47   21 02 00               LD   hl,2   
3B4A   E5                     PUSH   hl   
3B4B   E5                     PUSH   hl   
3B4C   CD 12 0E               CALL   run   
3B4F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3B5B   CD DB 0C               CALL   printStr   
3B5E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B6B   E1                     POP   hl   
3B6C   E5                     PUSH   hl   
3B6D   E5                     PUSH   hl   
3B6E   CD 12 0E               CALL   run   
3B71   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3B82   76                     HALT      
3B83                EXPECTM_3031S108:      
3B83   E1                     POP   HL   
3B84                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3B84   31 00 5B               LD   SP,STACK   
3B87   CD 49 0D               CALL   coldInit   
3B8A   CD 00 59               CALL   execStr   
3B8D   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3B9F   E1                     POP   HL   
3BA0   E5                     PUSH   HL   
3BA1   11 02 00               LD   DE,2   
3BA4   B7                     OR   A   
3BA5   ED 52                  SBC   HL,DE   
3BA7   7D                     LD   A,L   
3BA8   B4                     OR   H   
3BA9   CA 15 3C               JP   Z,expectM_3032S109   
3BAC   CD DB 0C               CALL   printStr   
3BAF   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3BC7   CD DB 0C               CALL   printStr   
3BCA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BD9   21 02 00               LD   hl,2   
3BDC   E5                     PUSH   hl   
3BDD   E5                     PUSH   hl   
3BDE   CD 12 0E               CALL   run   
3BE1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3BED   CD DB 0C               CALL   printStr   
3BF0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BFD   E1                     POP   hl   
3BFE   E5                     PUSH   hl   
3BFF   E5                     PUSH   hl   
3C00   CD 12 0E               CALL   run   
3C03   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3C14   76                     HALT      
3C15                EXPECTM_3032S109:      
3C15   E1                     POP   HL   
3C16                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3C16   31 00 5B               LD   SP,STACK   
3C19   CD 49 0D               CALL   coldInit   
3C1C   CD 00 59               CALL   execStr   
3C1F   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
3C38   E1                     POP   HL   
3C39   E5                     PUSH   HL   
3C3A   11 05 00               LD   DE,5   
3C3D   B7                     OR   A   
3C3E   ED 52                  SBC   HL,DE   
3C40   7D                     LD   A,L   
3C41   B4                     OR   H   
3C42   CA B5 3C               JP   Z,expectM_3033S110   
3C45   CD DB 0C               CALL   printStr   
3C48   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
3C67   CD DB 0C               CALL   printStr   
3C6A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C79   21 05 00               LD   hl,5   
3C7C   E5                     PUSH   hl   
3C7D   E5                     PUSH   hl   
3C7E   CD 12 0E               CALL   run   
3C81   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3C8D   CD DB 0C               CALL   printStr   
3C90   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C9D   E1                     POP   hl   
3C9E   E5                     PUSH   hl   
3C9F   E5                     PUSH   hl   
3CA0   CD 12 0E               CALL   run   
3CA3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3CB4   76                     HALT      
3CB5                EXPECTM_3033S110:      
3CB5   E1                     POP   HL   
3CB6                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
3CB6   31 00 5B               LD   SP,STACK   
3CB9   CD 49 0D               CALL   coldInit   
3CBC   CD 00 59               CALL   execStr   
3CBF   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
3CCF   E1                     POP   HL   
3CD0   E5                     PUSH   HL   
3CD1   11 02 00               LD   DE,2   
3CD4   B7                     OR   A   
3CD5   ED 52                  SBC   HL,DE   
3CD7   7D                     LD   A,L   
3CD8   B4                     OR   H   
3CD9   CA 43 3D               JP   Z,expectM_3034S111   
3CDC   CD DB 0C               CALL   printStr   
3CDF   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
3CF5   CD DB 0C               CALL   printStr   
3CF8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D07   21 02 00               LD   hl,2   
3D0A   E5                     PUSH   hl   
3D0B   E5                     PUSH   hl   
3D0C   CD 12 0E               CALL   run   
3D0F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3D1B   CD DB 0C               CALL   printStr   
3D1E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D2B   E1                     POP   hl   
3D2C   E5                     PUSH   hl   
3D2D   E5                     PUSH   hl   
3D2E   CD 12 0E               CALL   run   
3D31   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3D42   76                     HALT      
3D43                EXPECTM_3034S111:      
3D43   E1                     POP   HL   
3D44                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
3D44   31 00 5B               LD   SP,STACK   
3D47   CD 49 0D               CALL   coldInit   
3D4A   CD 00 59               CALL   execStr   
3D4D   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
3D64   E1                     POP   HL   
3D65   E5                     PUSH   HL   
3D66   11 64 00               LD   DE,100   
3D69   B7                     OR   A   
3D6A   ED 52                  SBC   HL,DE   
3D6C   7D                     LD   A,L   
3D6D   B4                     OR   H   
3D6E   CA DF 3D               JP   Z,expectM_3035S112   
3D71   CD DB 0C               CALL   printStr   
3D74   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
3D91   CD DB 0C               CALL   printStr   
3D94   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DA3   21 64 00               LD   hl,100   
3DA6   E5                     PUSH   hl   
3DA7   E5                     PUSH   hl   
3DA8   CD 12 0E               CALL   run   
3DAB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3DB7   CD DB 0C               CALL   printStr   
3DBA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DC7   E1                     POP   hl   
3DC8   E5                     PUSH   hl   
3DC9   E5                     PUSH   hl   
3DCA   CD 12 0E               CALL   run   
3DCD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3DDE   76                     HALT      
3DDF                EXPECTM_3035S112:      
3DDF   E1                     POP   HL   
3DE0                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
3DE0   31 00 5B               LD   SP,STACK   
3DE3   CD 49 0D               CALL   coldInit   
3DE6   CD 00 59               CALL   execStr   
3DE9   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
3E01   E1                     POP   HL   
3E02   E5                     PUSH   HL   
3E03   11 01 00               LD   DE,1   
3E06   B7                     OR   A   
3E07   ED 52                  SBC   HL,DE   
3E09   7D                     LD   A,L   
3E0A   B4                     OR   H   
3E0B   CA 7D 3E               JP   Z,expectM_3036S113   
3E0E   CD DB 0C               CALL   printStr   
3E11   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
3E2F   CD DB 0C               CALL   printStr   
3E32   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E41   21 01 00               LD   hl,1   
3E44   E5                     PUSH   hl   
3E45   E5                     PUSH   hl   
3E46   CD 12 0E               CALL   run   
3E49   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3E55   CD DB 0C               CALL   printStr   
3E58   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E65   E1                     POP   hl   
3E66   E5                     PUSH   hl   
3E67   E5                     PUSH   hl   
3E68   CD 12 0E               CALL   run   
3E6B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3E7C   76                     HALT      
3E7D                EXPECTM_3036S113:      
3E7D   E1                     POP   HL   
3E7E                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
3E7E   31 00 5B               LD   SP,STACK   
3E81   CD 49 0D               CALL   coldInit   
3E84   CD 00 59               CALL   execStr   
3E87   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
3EA0   E1                     POP   HL   
3EA1   E5                     PUSH   HL   
3EA2   11 02 00               LD   DE,2   
3EA5   B7                     OR   A   
3EA6   ED 52                  SBC   HL,DE   
3EA8   7D                     LD   A,L   
3EA9   B4                     OR   H   
3EAA   CA 1D 3F               JP   Z,expectM_3037S114   
3EAD   CD DB 0C               CALL   printStr   
3EB0   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
3ECF   CD DB 0C               CALL   printStr   
3ED2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EE1   21 02 00               LD   hl,2   
3EE4   E5                     PUSH   hl   
3EE5   E5                     PUSH   hl   
3EE6   CD 12 0E               CALL   run   
3EE9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3EF5   CD DB 0C               CALL   printStr   
3EF8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F05   E1                     POP   hl   
3F06   E5                     PUSH   hl   
3F07   E5                     PUSH   hl   
3F08   CD 12 0E               CALL   run   
3F0B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3F1C   76                     HALT      
3F1D                EXPECTM_3037S114:      
3F1D   E1                     POP   HL   
3F1E                          ;*Macro unroll:  test "1 10 20 \\ab{/t {%a}{%b} ?}^ +", 11
3F1E   31 00 5B               LD   SP,STACK   
3F21   CD 49 0D               CALL   coldInit   
3F24   CD 00 59               CALL   execStr   
3F27   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 20 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t {%a}{%b} ?}^ +",0   
3F45   E1                     POP   HL   
3F46   E5                     PUSH   HL   
3F47   11 0B 00               LD   DE,11   
3F4A   B7                     OR   A   
3F4B   ED 52                  SBC   HL,DE   
3F4D   7D                     LD   A,L   
3F4E   B4                     OR   H   
3F4F   CA C7 3F               JP   Z,expectM_3038S115   
3F52   CD DB 0C               CALL   printStr   
3F55   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 20 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t {%a}{%b} ?}^ +"   
3F79   CD DB 0C               CALL   printStr   
3F7C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F8B   21 0B 00               LD   hl,11   
3F8E   E5                     PUSH   hl   
3F8F   E5                     PUSH   hl   
3F90   CD 12 0E               CALL   run   
3F93   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3F9F   CD DB 0C               CALL   printStr   
3FA2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FAF   E1                     POP   hl   
3FB0   E5                     PUSH   hl   
3FB1   E5                     PUSH   hl   
3FB2   CD 12 0E               CALL   run   
3FB5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3FC6   76                     HALT      
3FC7                EXPECTM_3038S115:      
3FC7   E1                     POP   HL   
3FC8                          ;*Macro unroll:  test "1 10 20 \\ab{/f {%a}{%b} ?}^ +", 21
3FC8   31 00 5B               LD   SP,STACK   
3FCB   CD 49 0D               CALL   coldInit   
3FCE   CD 00 59               CALL   execStr   
3FD1   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 20 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f {%a}{%b} ?}^ +",0   
3FEF   E1                     POP   HL   
3FF0   E5                     PUSH   HL   
3FF1   11 15 00               LD   DE,21   
3FF4   B7                     OR   A   
3FF5   ED 52                  SBC   HL,DE   
3FF7   7D                     LD   A,L   
3FF8   B4                     OR   H   
3FF9   CA 71 40               JP   Z,expectM_3039S116   
3FFC   CD DB 0C               CALL   printStr   
3FFF   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 20 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f {%a}{%b} ?}^ +"   
4023   CD DB 0C               CALL   printStr   
4026   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4035   21 15 00               LD   hl,21   
4038   E5                     PUSH   hl   
4039   E5                     PUSH   hl   
403A   CD 12 0E               CALL   run   
403D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4049   CD DB 0C               CALL   printStr   
404C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4059   E1                     POP   hl   
405A   E5                     PUSH   hl   
405B   E5                     PUSH   hl   
405C   CD 12 0E               CALL   run   
405F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4070   76                     HALT      
4071                EXPECTM_3039S116:      
4071   E1                     POP   HL   
4072                          ;*Macro unroll:  test "[10 20 30] 1;", 20
4072   31 00 5B               LD   SP,STACK   
4075   CD 49 0D               CALL   coldInit   
4078   CD 00 59               CALL   execStr   
407B   5B 31 30 20 32 30 20 33 30 5D 20 31 3B 00 DB   "[10 20 30] 1;",0   
4089   E1                     POP   HL   
408A   E5                     PUSH   HL   
408B   11 14 00               LD   DE,20   
408E   B7                     OR   A   
408F   ED 52                  SBC   HL,DE   
4091   7D                     LD   A,L   
4092   B4                     OR   H   
4093   CA FB 40               JP   Z,expectM_3040S117   
4096   CD DB 0C               CALL   printStr   
4099   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 3B 00 .CSTR   "Code: ","[10 20 30] 1;"   
40AD   CD DB 0C               CALL   printStr   
40B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40BF   21 14 00               LD   hl,20   
40C2   E5                     PUSH   hl   
40C3   E5                     PUSH   hl   
40C4   CD 12 0E               CALL   run   
40C7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
40D3   CD DB 0C               CALL   printStr   
40D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40E3   E1                     POP   hl   
40E4   E5                     PUSH   hl   
40E5   E5                     PUSH   hl   
40E6   CD 12 0E               CALL   run   
40E9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
40FA   76                     HALT      
40FB                EXPECTM_3040S117:      
40FB   E1                     POP   HL   
40FC                          ;*Macro unroll:  test "[10 20 30 40] /aln", 4
40FC   31 00 5B               LD   SP,STACK   
40FF   CD 49 0D               CALL   coldInit   
4102   CD 00 59               CALL   execStr   
4105   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 6E 00 DB   "[10 20 30 40] /aln",0   
4118   E1                     POP   HL   
4119   E5                     PUSH   HL   
411A   11 04 00               LD   DE,4   
411D   B7                     OR   A   
411E   ED 52                  SBC   HL,DE   
4120   7D                     LD   A,L   
4121   B4                     OR   H   
4122   CA 8F 41               JP   Z,expectM_3041S118   
4125   CD DB 0C               CALL   printStr   
4128   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 6E 00 .CSTR   "Code: ","[10 20 30 40] /aln"   
4141   CD DB 0C               CALL   printStr   
4144   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4153   21 04 00               LD   hl,4   
4156   E5                     PUSH   hl   
4157   E5                     PUSH   hl   
4158   CD 12 0E               CALL   run   
415B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4167   CD DB 0C               CALL   printStr   
416A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4177   E1                     POP   hl   
4178   E5                     PUSH   hl   
4179   E5                     PUSH   hl   
417A   CD 12 0E               CALL   run   
417D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
418E   76                     HALT      
418F                EXPECTM_3041S118:      
418F   E1                     POP   HL   
4190                          ;*Macro unroll:  test "/byt [1 2 3] 1;", 2
4190   31 00 5B               LD   SP,STACK   
4193   CD 49 0D               CALL   coldInit   
4196   CD 00 59               CALL   execStr   
4199   2F 62 79 74 20 5B 31 20 32 20 33 5D 20 31 3B 00 DB   "/byt [1 2 3] 1;",0   
41A9   E1                     POP   HL   
41AA   E5                     PUSH   HL   
41AB   11 02 00               LD   DE,2   
41AE   B7                     OR   A   
41AF   ED 52                  SBC   HL,DE   
41B1   7D                     LD   A,L   
41B2   B4                     OR   H   
41B3   CA 1D 42               JP   Z,expectM_3042S119   
41B6   CD DB 0C               CALL   printStr   
41B9   43 6F 64 65 3A 20 2F 62 79 74 20 5B 31 20 32 20 33 5D 20 31 3B 00 .CSTR   "Code: ","/byt [1 2 3] 1;"   
41CF   CD DB 0C               CALL   printStr   
41D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41E1   21 02 00               LD   hl,2   
41E4   E5                     PUSH   hl   
41E5   E5                     PUSH   hl   
41E6   CD 12 0E               CALL   run   
41E9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
41F5   CD DB 0C               CALL   printStr   
41F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4205   E1                     POP   hl   
4206   E5                     PUSH   hl   
4207   E5                     PUSH   hl   
4208   CD 12 0E               CALL   run   
420B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
421C   76                     HALT      
421D                EXPECTM_3042S119:      
421D   E1                     POP   HL   
421E                          ;*Macro unroll:  test "/byt [_A _B _C] 1;", 66
421E   31 00 5B               LD   SP,STACK   
4221   CD 49 0D               CALL   coldInit   
4224   CD 00 59               CALL   execStr   
4227   2F 62 79 74 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 3B 00 DB   "/byt [_A _B _C] 1;",0   
423A   E1                     POP   HL   
423B   E5                     PUSH   HL   
423C   11 42 00               LD   DE,66   
423F   B7                     OR   A   
4240   ED 52                  SBC   HL,DE   
4242   7D                     LD   A,L   
4243   B4                     OR   H   
4244   CA B1 42               JP   Z,expectM_3043S120   
4247   CD DB 0C               CALL   printStr   
424A   43 6F 64 65 3A 20 2F 62 79 74 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 3B 00 .CSTR   "Code: ","/byt [_A _B _C] 1;"   
4263   CD DB 0C               CALL   printStr   
4266   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4275   21 42 00               LD   hl,66   
4278   E5                     PUSH   hl   
4279   E5                     PUSH   hl   
427A   CD 12 0E               CALL   run   
427D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4289   CD DB 0C               CALL   printStr   
428C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4299   E1                     POP   hl   
429A   E5                     PUSH   hl   
429B   E5                     PUSH   hl   
429C   CD 12 0E               CALL   run   
429F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
42B0   76                     HALT      
42B1                EXPECTM_3043S120:      
42B1   E1                     POP   HL   
42B2                          ;*Macro unroll:  test "[{10}{20}{30}] 0;^ ", 10
42B2   31 00 5B               LD   SP,STACK   
42B5   CD 49 0D               CALL   coldInit   
42B8   CD 00 59               CALL   execStr   
42BB   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 3B 5E 20 00 DB   "[{10}{20}{30}] 0;^ ",0   
42CF   E1                     POP   HL   
42D0   E5                     PUSH   HL   
42D1   11 0A 00               LD   DE,10   
42D4   B7                     OR   A   
42D5   ED 52                  SBC   HL,DE   
42D7   7D                     LD   A,L   
42D8   B4                     OR   H   
42D9   CA 47 43               JP   Z,expectM_3044S121   
42DC   CD DB 0C               CALL   printStr   
42DF   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 3B 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0;^ "   
42F9   CD DB 0C               CALL   printStr   
42FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
430B   21 0A 00               LD   hl,10   
430E   E5                     PUSH   hl   
430F   E5                     PUSH   hl   
4310   CD 12 0E               CALL   run   
4313   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
431F   CD DB 0C               CALL   printStr   
4322   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
432F   E1                     POP   hl   
4330   E5                     PUSH   hl   
4331   E5                     PUSH   hl   
4332   CD 12 0E               CALL   run   
4335   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4346   76                     HALT      
4347                EXPECTM_3044S121:      
4347   E1                     POP   HL   
4348                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0;^}^", 10
4348   31 00 5B               LD   SP,STACK   
434B   CD 49 0D               CALL   coldInit   
434E   CD 00 59               CALL   execStr   
4351   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 3B 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0;^}^",0   
436C   E1                     POP   HL   
436D   E5                     PUSH   HL   
436E   11 0A 00               LD   DE,10   
4371   B7                     OR   A   
4372   ED 52                  SBC   HL,DE   
4374   7D                     LD   A,L   
4375   B4                     OR   H   
4376   CA EB 43               JP   Z,expectM_3045S122   
4379   CD DB 0C               CALL   printStr   
437C   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 3B 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0;^}^"   
439D   CD DB 0C               CALL   printStr   
43A0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43AF   21 0A 00               LD   hl,10   
43B2   E5                     PUSH   hl   
43B3   E5                     PUSH   hl   
43B4   CD 12 0E               CALL   run   
43B7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
43C3   CD DB 0C               CALL   printStr   
43C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43D3   E1                     POP   hl   
43D4   E5                     PUSH   hl   
43D5   E5                     PUSH   hl   
43D6   CD 12 0E               CALL   run   
43D9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
43EA   76                     HALT      
43EB                EXPECTM_3045S122:      
43EB   E1                     POP   HL   
43EC                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i;^}^", 10
43EC   31 00 5B               LD   SP,STACK   
43EF   CD 49 0D               CALL   coldInit   
43F2   CD 00 59               CALL   execStr   
43F5   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i;^}^",0   
4414   E1                     POP   HL   
4415   E5                     PUSH   HL   
4416   11 0A 00               LD   DE,10   
4419   B7                     OR   A   
441A   ED 52                  SBC   HL,DE   
441C   7D                     LD   A,L   
441D   B4                     OR   H   
441E   CA 97 44               JP   Z,expectM_3046S123   
4421   CD DB 0C               CALL   printStr   
4424   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i;^}^"   
4449   CD DB 0C               CALL   printStr   
444C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
445B   21 0A 00               LD   hl,10   
445E   E5                     PUSH   hl   
445F   E5                     PUSH   hl   
4460   CD 12 0E               CALL   run   
4463   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
446F   CD DB 0C               CALL   printStr   
4472   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
447F   E1                     POP   hl   
4480   E5                     PUSH   hl   
4481   E5                     PUSH   hl   
4482   CD 12 0E               CALL   run   
4485   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4496   76                     HALT      
4497                EXPECTM_3046S123:      
4497   E1                     POP   HL   
4498                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i;^}^", 20
4498   31 00 5B               LD   SP,STACK   
449B   CD 49 0D               CALL   coldInit   
449E   CD 00 59               CALL   execStr   
44A1   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i;^}^",0   
44C0   E1                     POP   HL   
44C1   E5                     PUSH   HL   
44C2   11 14 00               LD   DE,20   
44C5   B7                     OR   A   
44C6   ED 52                  SBC   HL,DE   
44C8   7D                     LD   A,L   
44C9   B4                     OR   H   
44CA   CA 43 45               JP   Z,expectM_3047S124   
44CD   CD DB 0C               CALL   printStr   
44D0   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i;^}^"   
44F5   CD DB 0C               CALL   printStr   
44F8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4507   21 14 00               LD   hl,20   
450A   E5                     PUSH   hl   
450B   E5                     PUSH   hl   
450C   CD 12 0E               CALL   run   
450F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
451B   CD DB 0C               CALL   printStr   
451E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
452B   E1                     POP   hl   
452C   E5                     PUSH   hl   
452D   E5                     PUSH   hl   
452E   CD 12 0E               CALL   run   
4531   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4542   76                     HALT      
4543                EXPECTM_3047S124:      
4543   E1                     POP   HL   
4544                          ;*Macro unroll:  test "3i= ( i i-- i/whi )^ + +", 6
4544   31 00 5B               LD   SP,STACK   
4547   CD 49 0D               CALL   coldInit   
454A   CD 00 59               CALL   execStr   
454D   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/whi )^ + +",0   
4566   E1                     POP   HL   
4567   E5                     PUSH   HL   
4568   11 06 00               LD   DE,6   
456B   B7                     OR   A   
456C   ED 52                  SBC   HL,DE   
456E   7D                     LD   A,L   
456F   B4                     OR   H   
4570   CA E3 45               JP   Z,expectM_3048S125   
4573   CD DB 0C               CALL   printStr   
4576   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/whi )^ + +"   
4595   CD DB 0C               CALL   printStr   
4598   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45A7   21 06 00               LD   hl,6   
45AA   E5                     PUSH   hl   
45AB   E5                     PUSH   hl   
45AC   CD 12 0E               CALL   run   
45AF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
45BB   CD DB 0C               CALL   printStr   
45BE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45CB   E1                     POP   hl   
45CC   E5                     PUSH   hl   
45CD   E5                     PUSH   hl   
45CE   CD 12 0E               CALL   run   
45D1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
45E2   76                     HALT      
45E3                EXPECTM_3048S125:      
45E3   E1                     POP   HL   
45E4                          ;*Macro unroll:  test "3i= [ ( i i-- i/whi )^ ] 1;", 2
45E4   31 00 5B               LD   SP,STACK   
45E7   CD 49 0D               CALL   coldInit   
45EA   CD 00 59               CALL   execStr   
45ED   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 5D 20 31 3B 00 DB   "3i= [ ( i i-- i/whi )^ ] 1;",0   
4609   E1                     POP   HL   
460A   E5                     PUSH   HL   
460B   11 02 00               LD   DE,2   
460E   B7                     OR   A   
460F   ED 52                  SBC   HL,DE   
4611   7D                     LD   A,L   
4612   B4                     OR   H   
4613   CA 89 46               JP   Z,expectM_3049S126   
4616   CD DB 0C               CALL   printStr   
4619   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 5D 20 31 3B 00 .CSTR   "Code: ","3i= [ ( i i-- i/whi )^ ] 1;"   
463B   CD DB 0C               CALL   printStr   
463E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
464D   21 02 00               LD   hl,2   
4650   E5                     PUSH   hl   
4651   E5                     PUSH   hl   
4652   CD 12 0E               CALL   run   
4655   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4661   CD DB 0C               CALL   printStr   
4664   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4671   E1                     POP   hl   
4672   E5                     PUSH   hl   
4673   E5                     PUSH   hl   
4674   CD 12 0E               CALL   run   
4677   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4688   76                     HALT      
4689                EXPECTM_3049S126:      
4689   E1                     POP   HL   
468A                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/whi )^ j ", 10
468A   31 00 5B               LD   SP,STACK   
468D   CD 49 0D               CALL   coldInit   
4690   CD 00 59               CALL   execStr   
4693   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/whi )^ j ",0   
46BA   E1                     POP   HL   
46BB   E5                     PUSH   HL   
46BC   11 0A 00               LD   DE,10   
46BF   B7                     OR   A   
46C0   ED 52                  SBC   HL,DE   
46C2   7D                     LD   A,L   
46C3   B4                     OR   H   
46C4   CA 45 47               JP   Z,expectM_3050S127   
46C7   CD DB 0C               CALL   printStr   
46CA   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/whi )^ j "   
46F7   CD DB 0C               CALL   printStr   
46FA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4709   21 0A 00               LD   hl,10   
470C   E5                     PUSH   hl   
470D   E5                     PUSH   hl   
470E   CD 12 0E               CALL   run   
4711   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
471D   CD DB 0C               CALL   printStr   
4720   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
472D   E1                     POP   hl   
472E   E5                     PUSH   hl   
472F   E5                     PUSH   hl   
4730   CD 12 0E               CALL   run   
4733   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4744   76                     HALT      
4745                EXPECTM_3050S127:      
4745   E1                     POP   HL   
4746                          ;*Macro unroll:  test "0j= 0i= ( i j+= i++ i 5< /whi )^ j ", 10
4746   31 00 5B               LD   SP,STACK   
4749   CD 49 0D               CALL   coldInit   
474C   CD 00 59               CALL   execStr   
474F   30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 77 68 69 20 29 5E 20 6A 20 00 DB   "0j= 0i= ( i j+= i++ i 5< /whi )^ j ",0   
4773   E1                     POP   HL   
4774   E5                     PUSH   HL   
4775   11 0A 00               LD   DE,10   
4778   B7                     OR   A   
4779   ED 52                  SBC   HL,DE   
477B   7D                     LD   A,L   
477C   B4                     OR   H   
477D   CA FB 47               JP   Z,expectM_3051S128   
4780   CD DB 0C               CALL   printStr   
4783   43 6F 64 65 3A 20 30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 77 68 69 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0j= 0i= ( i j+= i++ i 5< /whi )^ j "   
47AD   CD DB 0C               CALL   printStr   
47B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47BF   21 0A 00               LD   hl,10   
47C2   E5                     PUSH   hl   
47C3   E5                     PUSH   hl   
47C4   CD 12 0E               CALL   run   
47C7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
47D3   CD DB 0C               CALL   printStr   
47D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47E3   E1                     POP   hl   
47E4   E5                     PUSH   hl   
47E5   E5                     PUSH   hl   
47E6   CD 12 0E               CALL   run   
47E9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
47FA   76                     HALT      
47FB                EXPECTM_3051S128:      
47FB   E1                     POP   HL   
47FC                          ;*Macro unroll:  test "0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t", 12
47FC   31 00 5B               LD   SP,STACK   
47FF   CD 49 0D               CALL   coldInit   
4802   CD 00 59               CALL   execStr   
4805   30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 77 68 69 29 5E 20 69 2D 2D 20 69 2F 77 68 69 29 5E 20 74 00 DB   "0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t",0   
4831   E1                     POP   HL   
4832   E5                     PUSH   HL   
4833   11 0C 00               LD   DE,12   
4836   B7                     OR   A   
4837   ED 52                  SBC   HL,DE   
4839   7D                     LD   A,L   
483A   B4                     OR   H   
483B   CA C1 48               JP   Z,expectM_3052S129   
483E   CD DB 0C               CALL   printStr   
4841   43 6F 64 65 3A 20 30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 77 68 69 29 5E 20 69 2D 2D 20 69 2F 77 68 69 29 5E 20 74 00 .CSTR   "Code: ","0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t"   
4873   CD DB 0C               CALL   printStr   
4876   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4885   21 0C 00               LD   hl,12   
4888   E5                     PUSH   hl   
4889   E5                     PUSH   hl   
488A   CD 12 0E               CALL   run   
488D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4899   CD DB 0C               CALL   printStr   
489C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48A9   E1                     POP   hl   
48AA   E5                     PUSH   hl   
48AB   E5                     PUSH   hl   
48AC   CD 12 0E               CALL   run   
48AF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
48C0   76                     HALT      
48C1                EXPECTM_3052S129:      
48C1   E1                     POP   HL   
48C2                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^", 6
48C2   31 00 5B               LD   SP,STACK   
48C5   CD 49 0D               CALL   coldInit   
48C8   CD 00 59               CALL   execStr   
48CB   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 77 68 69 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^",0   
48F7   E1                     POP   HL   
48F8   E5                     PUSH   HL   
48F9   11 06 00               LD   DE,6   
48FC   B7                     OR   A   
48FD   ED 52                  SBC   HL,DE   
48FF   7D                     LD   A,L   
4900   B4                     OR   H   
4901   CA 87 49               JP   Z,expectM_3053S130   
4904   CD DB 0C               CALL   printStr   
4907   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 77 68 69 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^"   
4939   CD DB 0C               CALL   printStr   
493C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
494B   21 06 00               LD   hl,6   
494E   E5                     PUSH   hl   
494F   E5                     PUSH   hl   
4950   CD 12 0E               CALL   run   
4953   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
495F   CD DB 0C               CALL   printStr   
4962   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
496F   E1                     POP   hl   
4970   E5                     PUSH   hl   
4971   E5                     PUSH   hl   
4972   CD 12 0E               CALL   run   
4975   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4986   76                     HALT      
4987                EXPECTM_3053S130:      
4987   E1                     POP   HL   
4988                          ;*Macro unroll:  test "/t \\f{1 %f/whi 2 +}^",3
4988   31 00 5B               LD   SP,STACK   
498B   CD 49 0D               CALL   coldInit   
498E   CD 00 59               CALL   execStr   
4991   2F 74 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/whi 2 +}^",0   
49A6   E1                     POP   HL   
49A7   E5                     PUSH   HL   
49A8   11 03 00               LD   DE,3   
49AB   B7                     OR   A   
49AC   ED 52                  SBC   HL,DE   
49AE   7D                     LD   A,L   
49AF   B4                     OR   H   
49B0   CA 1F 4A               JP   Z,expectM_3054S131   
49B3   CD DB 0C               CALL   printStr   
49B6   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/whi 2 +}^"   
49D1   CD DB 0C               CALL   printStr   
49D4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49E3   21 03 00               LD   hl,3   
49E6   E5                     PUSH   hl   
49E7   E5                     PUSH   hl   
49E8   CD 12 0E               CALL   run   
49EB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
49F7   CD DB 0C               CALL   printStr   
49FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A07   E1                     POP   hl   
4A08   E5                     PUSH   hl   
4A09   E5                     PUSH   hl   
4A0A   CD 12 0E               CALL   run   
4A0D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4A1E   76                     HALT      
4A1F                EXPECTM_3054S131:      
4A1F   E1                     POP   HL   
4A20                          ;*Macro unroll:  test "/f \\f{1 %f/whi 2 +}^",1
4A20   31 00 5B               LD   SP,STACK   
4A23   CD 49 0D               CALL   coldInit   
4A26   CD 00 59               CALL   execStr   
4A29   2F 66 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/whi 2 +}^",0   
4A3E   E1                     POP   HL   
4A3F   E5                     PUSH   HL   
4A40   11 01 00               LD   DE,1   
4A43   B7                     OR   A   
4A44   ED 52                  SBC   HL,DE   
4A46   7D                     LD   A,L   
4A47   B4                     OR   H   
4A48   CA B7 4A               JP   Z,expectM_3055S132   
4A4B   CD DB 0C               CALL   printStr   
4A4E   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/whi 2 +}^"   
4A69   CD DB 0C               CALL   printStr   
4A6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A7B   21 01 00               LD   hl,1   
4A7E   E5                     PUSH   hl   
4A7F   E5                     PUSH   hl   
4A80   CD 12 0E               CALL   run   
4A83   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4A8F   CD DB 0C               CALL   printStr   
4A92   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A9F   E1                     POP   hl   
4AA0   E5                     PUSH   hl   
4AA1   E5                     PUSH   hl   
4AA2   CD 12 0E               CALL   run   
4AA5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4AB6   76                     HALT      
4AB7                EXPECTM_3055S132:      
4AB7   E1                     POP   HL   
4AB8                          ;*Macro unroll:  test "_A 1 - /adr", NUL
4AB8   31 00 5B               LD   SP,STACK   
4ABB   CD 49 0D               CALL   coldInit   
4ABE   CD 00 59               CALL   execStr   
4AC1   5F 41 20 31 20 2D 20 2F 61 64 72 00 DB   "_A 1 - /adr",0   
4ACD   E1                     POP   HL   
4ACE   E5                     PUSH   HL   
4ACF   11 00 00               LD   DE,NUL   
4AD2   B7                     OR   A   
4AD3   ED 52                  SBC   HL,DE   
4AD5   7D                     LD   A,L   
4AD6   B4                     OR   H   
4AD7   CA 3D 4B               JP   Z,expectM_3056S133   
4ADA   CD DB 0C               CALL   printStr   
4ADD   43 6F 64 65 3A 20 5F 41 20 31 20 2D 20 2F 61 64 72 00 .CSTR   "Code: ","_A 1 - /adr"   
4AEF   CD DB 0C               CALL   printStr   
4AF2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B01   21 00 00               LD   hl,NUL   
4B04   E5                     PUSH   hl   
4B05   E5                     PUSH   hl   
4B06   CD 12 0E               CALL   run   
4B09   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4B15   CD DB 0C               CALL   printStr   
4B18   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B25   E1                     POP   hl   
4B26   E5                     PUSH   hl   
4B27   E5                     PUSH   hl   
4B28   CD 12 0E               CALL   run   
4B2B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4B3C   76                     HALT      
4B3D                EXPECTM_3056S133:      
4B3D   E1                     POP   HL   
4B3E                          ;*Macro unroll:  test "_Z 1 + /adr", NUL
4B3E   31 00 5B               LD   SP,STACK   
4B41   CD 49 0D               CALL   coldInit   
4B44   CD 00 59               CALL   execStr   
4B47   5F 5A 20 31 20 2B 20 2F 61 64 72 00 DB   "_Z 1 + /adr",0   
4B53   E1                     POP   HL   
4B54   E5                     PUSH   HL   
4B55   11 00 00               LD   DE,NUL   
4B58   B7                     OR   A   
4B59   ED 52                  SBC   HL,DE   
4B5B   7D                     LD   A,L   
4B5C   B4                     OR   H   
4B5D   CA C3 4B               JP   Z,expectM_3057S134   
4B60   CD DB 0C               CALL   printStr   
4B63   43 6F 64 65 3A 20 5F 5A 20 31 20 2B 20 2F 61 64 72 00 .CSTR   "Code: ","_Z 1 + /adr"   
4B75   CD DB 0C               CALL   printStr   
4B78   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B87   21 00 00               LD   hl,NUL   
4B8A   E5                     PUSH   hl   
4B8B   E5                     PUSH   hl   
4B8C   CD 12 0E               CALL   run   
4B8F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4B9B   CD DB 0C               CALL   printStr   
4B9E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BAB   E1                     POP   hl   
4BAC   E5                     PUSH   hl   
4BAD   E5                     PUSH   hl   
4BAE   CD 12 0E               CALL   run   
4BB1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4BC2   76                     HALT      
4BC3                EXPECTM_3057S134:      
4BC3   E1                     POP   HL   
4BC4                          ;*Macro unroll:  test "_a 1 - /adr", NUL
4BC4   31 00 5B               LD   SP,STACK   
4BC7   CD 49 0D               CALL   coldInit   
4BCA   CD 00 59               CALL   execStr   
4BCD   5F 61 20 31 20 2D 20 2F 61 64 72 00 DB   "_a 1 - /adr",0   
4BD9   E1                     POP   HL   
4BDA   E5                     PUSH   HL   
4BDB   11 00 00               LD   DE,NUL   
4BDE   B7                     OR   A   
4BDF   ED 52                  SBC   HL,DE   
4BE1   7D                     LD   A,L   
4BE2   B4                     OR   H   
4BE3   CA 49 4C               JP   Z,expectM_3058S135   
4BE6   CD DB 0C               CALL   printStr   
4BE9   43 6F 64 65 3A 20 5F 61 20 31 20 2D 20 2F 61 64 72 00 .CSTR   "Code: ","_a 1 - /adr"   
4BFB   CD DB 0C               CALL   printStr   
4BFE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C0D   21 00 00               LD   hl,NUL   
4C10   E5                     PUSH   hl   
4C11   E5                     PUSH   hl   
4C12   CD 12 0E               CALL   run   
4C15   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4C21   CD DB 0C               CALL   printStr   
4C24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C31   E1                     POP   hl   
4C32   E5                     PUSH   hl   
4C33   E5                     PUSH   hl   
4C34   CD 12 0E               CALL   run   
4C37   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4C48   76                     HALT      
4C49                EXPECTM_3058S135:      
4C49   E1                     POP   HL   
4C4A                          ;*Macro unroll:  test "_z 1 + /adr", NUL
4C4A   31 00 5B               LD   SP,STACK   
4C4D   CD 49 0D               CALL   coldInit   
4C50   CD 00 59               CALL   execStr   
4C53   5F 7A 20 31 20 2B 20 2F 61 64 72 00 DB   "_z 1 + /adr",0   
4C5F   E1                     POP   HL   
4C60   E5                     PUSH   HL   
4C61   11 00 00               LD   DE,NUL   
4C64   B7                     OR   A   
4C65   ED 52                  SBC   HL,DE   
4C67   7D                     LD   A,L   
4C68   B4                     OR   H   
4C69   CA CF 4C               JP   Z,expectM_3059S136   
4C6C   CD DB 0C               CALL   printStr   
4C6F   43 6F 64 65 3A 20 5F 7A 20 31 20 2B 20 2F 61 64 72 00 .CSTR   "Code: ","_z 1 + /adr"   
4C81   CD DB 0C               CALL   printStr   
4C84   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C93   21 00 00               LD   hl,NUL   
4C96   E5                     PUSH   hl   
4C97   E5                     PUSH   hl   
4C98   CD 12 0E               CALL   run   
4C9B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4CA7   CD DB 0C               CALL   printStr   
4CAA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CB7   E1                     POP   hl   
4CB8   E5                     PUSH   hl   
4CB9   E5                     PUSH   hl   
4CBA   CD 12 0E               CALL   run   
4CBD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4CCE   76                     HALT      
4CCF                EXPECTM_3059S136:      
4CCF   E1                     POP   HL   
4CD0                          ;*Macro unroll:  test "_z /adr", VARS + (("z"-"a")+("Z"-"A")+1)*2
4CD0   31 00 5B               LD   SP,STACK   
4CD3   CD 49 0D               CALL   coldInit   
4CD6   CD 00 59               CALL   execStr   
4CD9   5F 7A 20 2F 61 64 72 00 DB   "_z /adr",0   
4CE1   E1                     POP   HL   
4CE2   E5                     PUSH   HL   
4CE3   11 66 5F               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4CE6   B7                     OR   A   
4CE7   ED 52                  SBC   HL,DE   
4CE9   7D                     LD   A,L   
4CEA   B4                     OR   H   
4CEB   CA 4D 4D               JP   Z,expectM_3060S137   
4CEE   CD DB 0C               CALL   printStr   
4CF1   43 6F 64 65 3A 20 5F 7A 20 2F 61 64 72 00 .CSTR   "Code: ","_z /adr"   
4CFF   CD DB 0C               CALL   printStr   
4D02   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D11   21 66 5F               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4D14   E5                     PUSH   hl   
4D15   E5                     PUSH   hl   
4D16   CD 12 0E               CALL   run   
4D19   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4D25   CD DB 0C               CALL   printStr   
4D28   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D35   E1                     POP   hl   
4D36   E5                     PUSH   hl   
4D37   E5                     PUSH   hl   
4D38   CD 12 0E               CALL   run   
4D3B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4D4C   76                     HALT      
4D4D                EXPECTM_3060S137:      
4D4D   E1                     POP   HL   
4D4E                          ;*Macro unroll:  test "_a /adr", VARS + ("Z"-"A"+1)*2
4D4E   31 00 5B               LD   SP,STACK   
4D51   CD 49 0D               CALL   coldInit   
4D54   CD 00 59               CALL   execStr   
4D57   5F 61 20 2F 61 64 72 00 DB   "_a /adr",0   
4D5F   E1                     POP   HL   
4D60   E5                     PUSH   HL   
4D61   11 34 5F               LD   DE,VARS + ("Z"-"A"+1)*2   
4D64   B7                     OR   A   
4D65   ED 52                  SBC   HL,DE   
4D67   7D                     LD   A,L   
4D68   B4                     OR   H   
4D69   CA CB 4D               JP   Z,expectM_3061S138   
4D6C   CD DB 0C               CALL   printStr   
4D6F   43 6F 64 65 3A 20 5F 61 20 2F 61 64 72 00 .CSTR   "Code: ","_a /adr"   
4D7D   CD DB 0C               CALL   printStr   
4D80   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D8F   21 34 5F               LD   hl,VARS + ("Z"-"A"+1)*2   
4D92   E5                     PUSH   hl   
4D93   E5                     PUSH   hl   
4D94   CD 12 0E               CALL   run   
4D97   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4DA3   CD DB 0C               CALL   printStr   
4DA6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DB3   E1                     POP   hl   
4DB4   E5                     PUSH   hl   
4DB5   E5                     PUSH   hl   
4DB6   CD 12 0E               CALL   run   
4DB9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4DCA   76                     HALT      
4DCB                EXPECTM_3061S138:      
4DCB   E1                     POP   HL   
4DCC                          ;*Macro unroll:  test "_Z /adr", VARS + ("Z"-"A")*2
4DCC   31 00 5B               LD   SP,STACK   
4DCF   CD 49 0D               CALL   coldInit   
4DD2   CD 00 59               CALL   execStr   
4DD5   5F 5A 20 2F 61 64 72 00 DB   "_Z /adr",0   
4DDD   E1                     POP   HL   
4DDE   E5                     PUSH   HL   
4DDF   11 32 5F               LD   DE,VARS + ("Z"-"A")*2   
4DE2   B7                     OR   A   
4DE3   ED 52                  SBC   HL,DE   
4DE5   7D                     LD   A,L   
4DE6   B4                     OR   H   
4DE7   CA 49 4E               JP   Z,expectM_3062S139   
4DEA   CD DB 0C               CALL   printStr   
4DED   43 6F 64 65 3A 20 5F 5A 20 2F 61 64 72 00 .CSTR   "Code: ","_Z /adr"   
4DFB   CD DB 0C               CALL   printStr   
4DFE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E0D   21 32 5F               LD   hl,VARS + ("Z"-"A")*2   
4E10   E5                     PUSH   hl   
4E11   E5                     PUSH   hl   
4E12   CD 12 0E               CALL   run   
4E15   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4E21   CD DB 0C               CALL   printStr   
4E24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E31   E1                     POP   hl   
4E32   E5                     PUSH   hl   
4E33   E5                     PUSH   hl   
4E34   CD 12 0E               CALL   run   
4E37   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4E48   76                     HALT      
4E49                EXPECTM_3062S139:      
4E49   E1                     POP   HL   
4E4A                          ;*Macro unroll:  test "_A /adr", VARS
4E4A   31 00 5B               LD   SP,STACK   
4E4D   CD 49 0D               CALL   coldInit   
4E50   CD 00 59               CALL   execStr   
4E53   5F 41 20 2F 61 64 72 00 DB   "_A /adr",0   
4E5B   E1                     POP   HL   
4E5C   E5                     PUSH   HL   
4E5D   11 00 5F               LD   DE,VARS   
4E60   B7                     OR   A   
4E61   ED 52                  SBC   HL,DE   
4E63   7D                     LD   A,L   
4E64   B4                     OR   H   
4E65   CA C7 4E               JP   Z,expectM_3063S140   
4E68   CD DB 0C               CALL   printStr   
4E6B   43 6F 64 65 3A 20 5F 41 20 2F 61 64 72 00 .CSTR   "Code: ","_A /adr"   
4E79   CD DB 0C               CALL   printStr   
4E7C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E8B   21 00 5F               LD   hl,VARS   
4E8E   E5                     PUSH   hl   
4E8F   E5                     PUSH   hl   
4E90   CD 12 0E               CALL   run   
4E93   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4E9F   CD DB 0C               CALL   printStr   
4EA2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4EAF   E1                     POP   hl   
4EB0   E5                     PUSH   hl   
4EB1   E5                     PUSH   hl   
4EB2   CD 12 0E               CALL   run   
4EB5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4EC6   76                     HALT      
4EC7                EXPECTM_3063S140:      
4EC7   E1                     POP   HL   
4EC8                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
4EC8   31 00 5B               LD   SP,STACK   
4ECB   CD 49 0D               CALL   coldInit   
4ECE   CD 00 59               CALL   execStr   
4ED1   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
4EDE   E1                     POP   HL   
4EDF   E5                     PUSH   HL   
4EE0   11 01 00               LD   DE,1   
4EE3   B7                     OR   A   
4EE4   ED 52                  SBC   HL,DE   
4EE6   7D                     LD   A,L   
4EE7   B4                     OR   H   
4EE8   CA 4F 4F               JP   Z,expectM_3064S141   
4EEB   CD DB 0C               CALL   printStr   
4EEE   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
4F01   CD DB 0C               CALL   printStr   
4F04   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F13   21 01 00               LD   hl,1   
4F16   E5                     PUSH   hl   
4F17   E5                     PUSH   hl   
4F18   CD 12 0E               CALL   run   
4F1B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4F27   CD DB 0C               CALL   printStr   
4F2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F37   E1                     POP   hl   
4F38   E5                     PUSH   hl   
4F39   E5                     PUSH   hl   
4F3A   CD 12 0E               CALL   run   
4F3D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4F4E   76                     HALT      
4F4F                EXPECTM_3064S141:      
4F4F   E1                     POP   HL   
4F50                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
4F50   31 00 5B               LD   SP,STACK   
4F53   CD 49 0D               CALL   coldInit   
4F56   CD 00 59               CALL   execStr   
4F59   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
4F6D   E1                     POP   HL   
4F6E   E5                     PUSH   HL   
4F6F   11 03 00               LD   DE,3   
4F72   B7                     OR   A   
4F73   ED 52                  SBC   HL,DE   
4F75   7D                     LD   A,L   
4F76   B4                     OR   H   
4F77   CA E5 4F               JP   Z,expectM_3065S142   
4F7A   CD DB 0C               CALL   printStr   
4F7D   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
4F97   CD DB 0C               CALL   printStr   
4F9A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FA9   21 03 00               LD   hl,3   
4FAC   E5                     PUSH   hl   
4FAD   E5                     PUSH   hl   
4FAE   CD 12 0E               CALL   run   
4FB1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4FBD   CD DB 0C               CALL   printStr   
4FC0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FCD   E1                     POP   hl   
4FCE   E5                     PUSH   hl   
4FCF   E5                     PUSH   hl   
4FD0   CD 12 0E               CALL   run   
4FD3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4FE4   76                     HALT      
4FE5                EXPECTM_3065S142:      
4FE5   E1                     POP   HL   
4FE6                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
4FE6   31 00 5B               LD   SP,STACK   
4FE9   CD 49 0D               CALL   coldInit   
4FEC   CD 00 59               CALL   execStr   
4FEF   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
5006   E1                     POP   HL   
5007   E5                     PUSH   HL   
5008   11 02 00               LD   DE,2   
500B   B7                     OR   A   
500C   ED 52                  SBC   HL,DE   
500E   7D                     LD   A,L   
500F   B4                     OR   H   
5010   CA 81 50               JP   Z,expectM_3066S143   
5013   CD DB 0C               CALL   printStr   
5016   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
5033   CD DB 0C               CALL   printStr   
5036   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5045   21 02 00               LD   hl,2   
5048   E5                     PUSH   hl   
5049   E5                     PUSH   hl   
504A   CD 12 0E               CALL   run   
504D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5059   CD DB 0C               CALL   printStr   
505C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5069   E1                     POP   hl   
506A   E5                     PUSH   hl   
506B   E5                     PUSH   hl   
506C   CD 12 0E               CALL   run   
506F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5080   76                     HALT      
5081                EXPECTM_3066S143:      
5081   E1                     POP   HL   
5082                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
5082   31 00 5B               LD   SP,STACK   
5085   CD 49 0D               CALL   coldInit   
5088   CD 00 59               CALL   execStr   
508B   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
50AE   E1                     POP   HL   
50AF   E5                     PUSH   HL   
50B0   11 01 00               LD   DE,1   
50B3   B7                     OR   A   
50B4   ED 52                  SBC   HL,DE   
50B6   7D                     LD   A,L   
50B7   B4                     OR   H   
50B8   CA 35 51               JP   Z,expectM_3067S144   
50BB   CD DB 0C               CALL   printStr   
50BE   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
50E7   CD DB 0C               CALL   printStr   
50EA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50F9   21 01 00               LD   hl,1   
50FC   E5                     PUSH   hl   
50FD   E5                     PUSH   hl   
50FE   CD 12 0E               CALL   run   
5101   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
510D   CD DB 0C               CALL   printStr   
5110   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
511D   E1                     POP   hl   
511E   E5                     PUSH   hl   
511F   E5                     PUSH   hl   
5120   CD 12 0E               CALL   run   
5123   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5134   76                     HALT      
5135                EXPECTM_3067S144:      
5135   E1                     POP   HL   
5136                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
5136   31 00 5B               LD   SP,STACK   
5139   CD 49 0D               CALL   coldInit   
513C   CD 00 59               CALL   execStr   
513F   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
5162   E1                     POP   HL   
5163   E5                     PUSH   HL   
5164   11 01 00               LD   DE,1   
5167   B7                     OR   A   
5168   ED 52                  SBC   HL,DE   
516A   7D                     LD   A,L   
516B   B4                     OR   H   
516C   CA E9 51               JP   Z,expectM_3068S145   
516F   CD DB 0C               CALL   printStr   
5172   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
519B   CD DB 0C               CALL   printStr   
519E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
51AD   21 01 00               LD   hl,1   
51B0   E5                     PUSH   hl   
51B1   E5                     PUSH   hl   
51B2   CD 12 0E               CALL   run   
51B5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
51C1   CD DB 0C               CALL   printStr   
51C4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
51D1   E1                     POP   hl   
51D2   E5                     PUSH   hl   
51D3   E5                     PUSH   hl   
51D4   CD 12 0E               CALL   run   
51D7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
51E8   76                     HALT      
51E9                EXPECTM_3068S145:      
51E9   E1                     POP   HL   
51EA                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
51EA   31 00 5B               LD   SP,STACK   
51ED   CD 49 0D               CALL   coldInit   
51F0   CD 00 59               CALL   execStr   
51F3   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
5223   E1                     POP   HL   
5224   E5                     PUSH   HL   
5225   11 02 00               LD   DE,2   
5228   B7                     OR   A   
5229   ED 52                  SBC   HL,DE   
522B   7D                     LD   A,L   
522C   B4                     OR   H   
522D   CA B7 52               JP   Z,expectM_3069S146   
5230   CD DB 0C               CALL   printStr   
5233   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
5269   CD DB 0C               CALL   printStr   
526C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
527B   21 02 00               LD   hl,2   
527E   E5                     PUSH   hl   
527F   E5                     PUSH   hl   
5280   CD 12 0E               CALL   run   
5283   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
528F   CD DB 0C               CALL   printStr   
5292   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
529F   E1                     POP   hl   
52A0   E5                     PUSH   hl   
52A1   E5                     PUSH   hl   
52A2   CD 12 0E               CALL   run   
52A5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
52B6   76                     HALT      
52B7                EXPECTM_3069S146:      
52B7   E1                     POP   HL   
52B8                          ;*Macro unroll:  test "'hello'/sln",5
52B8   31 00 5B               LD   SP,STACK   
52BB   CD 49 0D               CALL   coldInit   
52BE   CD 00 59               CALL   execStr   
52C1   27 68 65 6C 6C 6F 27 2F 73 6C 6E 00 DB   "'hello'/sln",0   
52CD   E1                     POP   HL   
52CE   E5                     PUSH   HL   
52CF   11 05 00               LD   DE,5   
52D2   B7                     OR   A   
52D3   ED 52                  SBC   HL,DE   
52D5   7D                     LD   A,L   
52D6   B4                     OR   H   
52D7   CA 3D 53               JP   Z,expectM_3070S147   
52DA   CD DB 0C               CALL   printStr   
52DD   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 2F 73 6C 6E 00 .CSTR   "Code: ","'hello'/sln"   
52EF   CD DB 0C               CALL   printStr   
52F2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5301   21 05 00               LD   hl,5   
5304   E5                     PUSH   hl   
5305   E5                     PUSH   hl   
5306   CD 12 0E               CALL   run   
5309   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5315   CD DB 0C               CALL   printStr   
5318   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5325   E1                     POP   hl   
5326   E5                     PUSH   hl   
5327   E5                     PUSH   hl   
5328   CD 12 0E               CALL   run   
532B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
533C   76                     HALT      
533D                EXPECTM_3070S147:      
533D   E1                     POP   HL   
533E                          ;*Macro unroll:  test "'hello' 'hell' /scp", false
533E   31 00 5B               LD   SP,STACK   
5341   CD 49 0D               CALL   coldInit   
5344   CD 00 59               CALL   execStr   
5347   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 70 00 DB   "'hello' 'hell' /scp",0   
535B   E1                     POP   HL   
535C   E5                     PUSH   HL   
535D   11 00 00               LD   DE,false   
5360   B7                     OR   A   
5361   ED 52                  SBC   HL,DE   
5363   7D                     LD   A,L   
5364   B4                     OR   H   
5365   CA D3 53               JP   Z,expectM_3071S148   
5368   CD DB 0C               CALL   printStr   
536B   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 70 00 .CSTR   "Code: ","'hello' 'hell' /scp"   
5385   CD DB 0C               CALL   printStr   
5388   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5397   21 00 00               LD   hl,false   
539A   E5                     PUSH   hl   
539B   E5                     PUSH   hl   
539C   CD 12 0E               CALL   run   
539F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
53AB   CD DB 0C               CALL   printStr   
53AE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
53BB   E1                     POP   hl   
53BC   E5                     PUSH   hl   
53BD   E5                     PUSH   hl   
53BE   CD 12 0E               CALL   run   
53C1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
53D2   76                     HALT      
53D3                EXPECTM_3071S148:      
53D3   E1                     POP   HL   
53D4                          ;*Macro unroll:  test "'hello' 'hello' /scp", true
53D4   31 00 5B               LD   SP,STACK   
53D7   CD 49 0D               CALL   coldInit   
53DA   CD 00 59               CALL   execStr   
53DD   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 70 00 DB   "'hello' 'hello' /scp",0   
53F2   E1                     POP   HL   
53F3   E5                     PUSH   HL   
53F4   11 FF FF               LD   DE,true   
53F7   B7                     OR   A   
53F8   ED 52                  SBC   HL,DE   
53FA   7D                     LD   A,L   
53FB   B4                     OR   H   
53FC   CA 6B 54               JP   Z,expectM_3072S149   
53FF   CD DB 0C               CALL   printStr   
5402   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 70 00 .CSTR   "Code: ","'hello' 'hello' /scp"   
541D   CD DB 0C               CALL   printStr   
5420   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
542F   21 FF FF               LD   hl,true   
5432   E5                     PUSH   hl   
5433   E5                     PUSH   hl   
5434   CD 12 0E               CALL   run   
5437   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5443   CD DB 0C               CALL   printStr   
5446   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5453   E1                     POP   hl   
5454   E5                     PUSH   hl   
5455   E5                     PUSH   hl   
5456   CD 12 0E               CALL   run   
5459   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
546A   76                     HALT      
546B                EXPECTM_3072S149:      
546B   E1                     POP   HL   
546C                          ;*Macro unroll:  test "/sbb `=` 1. 2. 3. `=` /sbe '=1 2 3 =' /scp", TRUE
546C   31 00 5B               LD   SP,STACK   
546F   CD 49 0D               CALL   coldInit   
5472   CD 00 59               CALL   execStr   
5475   2F 73 62 62 20 60 3D 60 20 31 2E 20 32 2E 20 33 2E 20 60 3D 60 20 2F 73 62 65 20 27 3D 31 20 32 20 33 20 3D 27 20 2F 73 63 70 00 DB   "/sbb `=` 1. 2. 3. `=` /sbe '=1 2 3 =' /scp",0   
54A0   E1                     POP   HL   
54A1   E5                     PUSH   HL   
54A2   11 FF FF               LD   DE,TRUE   
54A5   B7                     OR   A   
54A6   ED 52                  SBC   HL,DE   
54A8   7D                     LD   A,L   
54A9   B4                     OR   H   
54AA   CA 2F 55               JP   Z,expectM_3073S150   
54AD   CD DB 0C               CALL   printStr   
54B0   43 6F 64 65 3A 20 2F 73 62 62 20 60 3D 60 20 31 2E 20 32 2E 20 33 2E 20 60 3D 60 20 2F 73 62 65 20 27 3D 31 20 32 20 33 20 3D 27 20 2F 73 63 70 00 .CSTR   "Code: ","/sbb `=` 1. 2. 3. `=` /sbe '=1 2 3 =' /scp"   
54E1   CD DB 0C               CALL   printStr   
54E4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
54F3   21 FF FF               LD   hl,TRUE   
54F6   E5                     PUSH   hl   
54F7   E5                     PUSH   hl   
54F8   CD 12 0E               CALL   run   
54FB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5507   CD DB 0C               CALL   printStr   
550A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5517   E1                     POP   hl   
5518   E5                     PUSH   hl   
5519   E5                     PUSH   hl   
551A   CD 12 0E               CALL   run   
551D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
552E   76                     HALT      
552F                EXPECTM_3073S150:      
552F   E1                     POP   HL   
5530                          ;*Macro unroll:  test "[1 2 3]** + +", 6
5530   31 00 5B               LD   SP,STACK   
5533   CD 49 0D               CALL   coldInit   
5536   CD 00 59               CALL   execStr   
5539   5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 DB   "[1 2 3]** + +",0   
5547   E1                     POP   HL   
5548   E5                     PUSH   HL   
5549   11 06 00               LD   DE,6   
554C   B7                     OR   A   
554D   ED 52                  SBC   HL,DE   
554F   7D                     LD   A,L   
5550   B4                     OR   H   
5551   CA B9 55               JP   Z,expectM_3074S151   
5554   CD DB 0C               CALL   printStr   
5557   43 6F 64 65 3A 20 5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 .CSTR   "Code: ","[1 2 3]** + +"   
556B   CD DB 0C               CALL   printStr   
556E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
557D   21 06 00               LD   hl,6   
5580   E5                     PUSH   hl   
5581   E5                     PUSH   hl   
5582   CD 12 0E               CALL   run   
5585   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5591   CD DB 0C               CALL   printStr   
5594   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
55A1   E1                     POP   hl   
55A2   E5                     PUSH   hl   
55A3   E5                     PUSH   hl   
55A4   CD 12 0E               CALL   run   
55A7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
55B8   76                     HALT      
55B9                EXPECTM_3074S151:      
55B9   E1                     POP   HL   
55BA                          ;*Macro unroll:  test "/byt[_a [_b _c]** _d]2;", $63
55BA   31 00 5B               LD   SP,STACK   
55BD   CD 49 0D               CALL   coldInit   
55C0   CD 00 59               CALL   execStr   
55C3   2F 62 79 74 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 3B 00 DB   "/byt[_a [_b _c]** _d]2;",0   
55DB   E1                     POP   HL   
55DC   E5                     PUSH   HL   
55DD   11 63 00               LD   DE,$63   
55E0   B7                     OR   A   
55E1   ED 52                  SBC   HL,DE   
55E3   7D                     LD   A,L   
55E4   B4                     OR   H   
55E5   CA 57 56               JP   Z,expectM_3075S152   
55E8   CD DB 0C               CALL   printStr   
55EB   43 6F 64 65 3A 20 2F 62 79 74 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 3B 00 .CSTR   "Code: ","/byt[_a [_b _c]** _d]2;"   
5609   CD DB 0C               CALL   printStr   
560C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
561B   21 63 00               LD   hl,$63   
561E   E5                     PUSH   hl   
561F   E5                     PUSH   hl   
5620   CD 12 0E               CALL   run   
5623   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
562F   CD DB 0C               CALL   printStr   
5632   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
563F   E1                     POP   hl   
5640   E5                     PUSH   hl   
5641   E5                     PUSH   hl   
5642   CD 12 0E               CALL   run   
5645   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5656   76                     HALT      
5657                EXPECTM_3075S152:      
5657   E1                     POP   HL   
5658                          ;*Macro unroll:  test "_B [_A {1} _B {2}] /sel", 2
5658   31 00 5B               LD   SP,STACK   
565B   CD 49 0D               CALL   coldInit   
565E   CD 00 59               CALL   execStr   
5661   5F 42 20 5B 5F 41 20 7B 31 7D 20 5F 42 20 7B 32 7D 5D 20 2F 73 65 6C 00 DB   "_B [_A {1} _B {2}] /sel",0   
5679   E1                     POP   HL   
567A   E5                     PUSH   HL   
567B   11 02 00               LD   DE,2   
567E   B7                     OR   A   
567F   ED 52                  SBC   HL,DE   
5681   7D                     LD   A,L   
5682   B4                     OR   H   
5683   CA F5 56               JP   Z,expectM_3076S153   
5686   CD DB 0C               CALL   printStr   
5689   43 6F 64 65 3A 20 5F 42 20 5B 5F 41 20 7B 31 7D 20 5F 42 20 7B 32 7D 5D 20 2F 73 65 6C 00 .CSTR   "Code: ","_B [_A {1} _B {2}] /sel"   
56A7   CD DB 0C               CALL   printStr   
56AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
56B9   21 02 00               LD   hl,2   
56BC   E5                     PUSH   hl   
56BD   E5                     PUSH   hl   
56BE   CD 12 0E               CALL   run   
56C1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
56CD   CD DB 0C               CALL   printStr   
56D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
56DD   E1                     POP   hl   
56DE   E5                     PUSH   hl   
56DF   E5                     PUSH   hl   
56E0   CD 12 0E               CALL   run   
56E3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
56F4   76                     HALT      
56F5                EXPECTM_3076S153:      
56F5   E1                     POP   HL   
56F6                          ;*Macro unroll:  test "1 2 /max", 2
56F6   31 00 5B               LD   SP,STACK   
56F9   CD 49 0D               CALL   coldInit   
56FC   CD 00 59               CALL   execStr   
56FF   31 20 32 20 2F 6D 61 78 00 DB   "1 2 /max",0   
5708   E1                     POP   HL   
5709   E5                     PUSH   HL   
570A   11 02 00               LD   DE,2   
570D   B7                     OR   A   
570E   ED 52                  SBC   HL,DE   
5710   7D                     LD   A,L   
5711   B4                     OR   H   
5712   CA 75 57               JP   Z,expectM_3077S154   
5715   CD DB 0C               CALL   printStr   
5718   43 6F 64 65 3A 20 31 20 32 20 2F 6D 61 78 00 .CSTR   "Code: ","1 2 /max"   
5727   CD DB 0C               CALL   printStr   
572A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5739   21 02 00               LD   hl,2   
573C   E5                     PUSH   hl   
573D   E5                     PUSH   hl   
573E   CD 12 0E               CALL   run   
5741   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
574D   CD DB 0C               CALL   printStr   
5750   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
575D   E1                     POP   hl   
575E   E5                     PUSH   hl   
575F   E5                     PUSH   hl   
5760   CD 12 0E               CALL   run   
5763   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5774   76                     HALT      
5775                EXPECTM_3077S154:      
5775   E1                     POP   HL   
5776                          ;*Macro unroll:  test "2 1 /max", 2
5776   31 00 5B               LD   SP,STACK   
5779   CD 49 0D               CALL   coldInit   
577C   CD 00 59               CALL   execStr   
577F   32 20 31 20 2F 6D 61 78 00 DB   "2 1 /max",0   
5788   E1                     POP   HL   
5789   E5                     PUSH   HL   
578A   11 02 00               LD   DE,2   
578D   B7                     OR   A   
578E   ED 52                  SBC   HL,DE   
5790   7D                     LD   A,L   
5791   B4                     OR   H   
5792   CA F5 57               JP   Z,expectM_3078S155   
5795   CD DB 0C               CALL   printStr   
5798   43 6F 64 65 3A 20 32 20 31 20 2F 6D 61 78 00 .CSTR   "Code: ","2 1 /max"   
57A7   CD DB 0C               CALL   printStr   
57AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
57B9   21 02 00               LD   hl,2   
57BC   E5                     PUSH   hl   
57BD   E5                     PUSH   hl   
57BE   CD 12 0E               CALL   run   
57C1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
57CD   CD DB 0C               CALL   printStr   
57D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
57DD   E1                     POP   hl   
57DE   E5                     PUSH   hl   
57DF   E5                     PUSH   hl   
57E0   CD 12 0E               CALL   run   
57E3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
57F4   76                     HALT      
57F5                EXPECTM_3078S155:      
57F5   E1                     POP   HL   
57F6                          ;*Macro unroll:  test "1 2 /min", 1
57F6   31 00 5B               LD   SP,STACK   
57F9   CD 49 0D               CALL   coldInit   
57FC   CD 00 59               CALL   execStr   
57FF   31 20 32 20 2F 6D 69 6E 00 DB   "1 2 /min",0   
5808   E1                     POP   HL   
5809   E5                     PUSH   HL   
580A   11 01 00               LD   DE,1   
580D   B7                     OR   A   
580E   ED 52                  SBC   HL,DE   
5810   7D                     LD   A,L   
5811   B4                     OR   H   
5812   CA 75 58               JP   Z,expectM_3079S156   
5815   CD DB 0C               CALL   printStr   
5818   43 6F 64 65 3A 20 31 20 32 20 2F 6D 69 6E 00 .CSTR   "Code: ","1 2 /min"   
5827   CD DB 0C               CALL   printStr   
582A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5839   21 01 00               LD   hl,1   
583C   E5                     PUSH   hl   
583D   E5                     PUSH   hl   
583E   CD 12 0E               CALL   run   
5841   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
584D   CD DB 0C               CALL   printStr   
5850   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
585D   E1                     POP   hl   
585E   E5                     PUSH   hl   
585F   E5                     PUSH   hl   
5860   CD 12 0E               CALL   run   
5863   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5874   76                     HALT      
5875                EXPECTM_3079S156:      
5875   E1                     POP   HL   
5876                          ;*Macro unroll:  test "2 1 /min", 1
5876   31 00 5B               LD   SP,STACK   
5879   CD 49 0D               CALL   coldInit   
587C   CD 00 59               CALL   execStr   
587F   32 20 31 20 2F 6D 69 6E 00 DB   "2 1 /min",0   
5888   E1                     POP   HL   
5889   E5                     PUSH   HL   
588A   11 01 00               LD   DE,1   
588D   B7                     OR   A   
588E   ED 52                  SBC   HL,DE   
5890   7D                     LD   A,L   
5891   B4                     OR   H   
5892   CA F5 58               JP   Z,expectM_3080S157   
5895   CD DB 0C               CALL   printStr   
5898   43 6F 64 65 3A 20 32 20 31 20 2F 6D 69 6E 00 .CSTR   "Code: ","2 1 /min"   
58A7   CD DB 0C               CALL   printStr   
58AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
58B9   21 01 00               LD   hl,1   
58BC   E5                     PUSH   hl   
58BD   E5                     PUSH   hl   
58BE   CD 12 0E               CALL   run   
58C1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
58CD   CD DB 0C               CALL   printStr   
58D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
58DD   E1                     POP   hl   
58DE   E5                     PUSH   hl   
58DF   E5                     PUSH   hl   
58E0   CD 12 0E               CALL   run   
58E3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
58F4   76                     HALT      
58F5                EXPECTM_3080S157:      
58F5   E1                     POP   HL   
58F6                             ; ; test "$1000 0 10 1 /rng \\a{%a 1 + 10 *} /map \\a{%a.} /for", $1000
58F6                             ; 
58F6   CD DB 0C               CALL   printStr   
58F9   44 6F 6E 65 21 00      .CSTR   "Done!"   
58FF   76                     HALT      
5900                             ; executes a null teminated string (null executes exit_)
5900                             ; the string should be immedaitely following the call
5900                EXECSTR:      ; create a root stack frame
5900   C1                     POP   bc   ; bc = code*
5901   0B                     DEC   bc   ; dec to prepare for next routine
5902   11 00 00               LD   de,0   
5905   D5                     PUSH   de   ; push fake IP
5906   D5                     PUSH   de   ; push null arg_list*
5907   D5                     PUSH   de   ; push null first_arg*
5908   D5                     PUSH   de   ; push fake BP
5909   DD E9                  JP   (ix)   
590B                DSTACK_SIZE:   EQU   $100   ; Data stack size
590B                RSTACK_SIZE:   EQU   $100   ; Return stack size
590B                NAMES_SIZE:   EQU   $100   ; Arg names size
590B                TIBSIZE:   EQU   $100   ; 256 bytes
590B                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
590B                          ALIGN   $100   
5A00                          DS   DSTACK_SIZE   
5B00                STACK:       
5B00                DSTACK:      
5B00                RSTACK:      
5B00                          DS   RSTACK_SIZE   
5C00                NAMES:       
5C00                          DS   NAMES_SIZE   
5D00                          ALIGN   $100   
5D00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5E00                          ALIGN   $100   
5E00                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5F00                          ALIGN   $100   
5F00                VARS:        
5F00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
5FD0                RESTARTS:      
5FD0                RST08:    DS   2   
5FD2                RST10:    DS   2   
5FD4                RST18:    DS   2   
5FD6                RST20:    DS   2   
5FD8                RST28:    DS   2   
5FDA                RST30:    DS   2   ; 
5FDC                BAUD:     DS   2   ; 
5FDE                INTVEC:   DS   2   ; 
5FE0                NMIVEC:   DS   2   ; 
5FE2                GETCVEC:   DS   2   ; 
5FE4                PUTCVEC:   DS   2   ; 
5FE6                SYSVARS:      
5FE6                             ; initialised sys variables (preserved)
5FE6                VTIBPTR:   DS   2   
5FE8                VBUFPTR:   DS   2   
5FEA                VHEAPPTR:   DS   2   
5FEC                VNAMESPTR:   DS   2   
5FEE                VRECURPTR:   DS   2   
5FF0                VDATAWIDTH:   DS   1   
5FF1                VNUMBASE:   DS   1   
5FF2                VHEXPREFIX:   DS   1   
5FF3                VECHO:    DS   1   
5FF4                VSTRMODE:   DS   1   
5FF5                          DS   1   
5FF6                          DS   1   
5FF7                          DS   1   
5FF8                          DS   1   
5FF9                          DS   1   
5FFA                             ; uninitialised sys variables (preserved)
5FFA                VPOINTER:   DS   2   ; 
5FFC                VREMAIN:   DS   2   ; 
5FFE                VSAVEDIP:   DS   2   ; 
6000                VSAVEDDSP:   DS   2   ; 
6002                VSAVEDRSP:   DS   2   ; 
6004                VSAVEDNEXT:   DS   2   ; 
6006                VSAVEDBP:   DS   2   ; 
6008                             ; uninitialised sys variables (unpreserved)
6008                VTEMP1:   DS   2   ; 
600A                VTEMP2:   DS   2   ; 
600C                VTEMP3:   DS   2   ; 
600E                          DS   2   ; 
6010                TBPTR:    DS   2   ; reserved for tests
6012                TITLEBUF:   DS   20   
6026                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 173 IN MAIN.asm
                    > USED AT LINE 3 IN ansi.asm
                    > USED AT LINE 9 IN ansi.asm
                    > USED AT LINE 70 IN ansi.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 2368 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 2090 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2474 IN MAIN.asm
                    > USED AT LINE 21 IN ansi.asm
                    > USED AT LINE 23 IN ansi.asm
                    > USED AT LINE 35 IN ansi.asm
                    > USED AT LINE 41 IN ansi.asm
                    > USED AT LINE 54 IN ansi.asm
                    > USED AT LINE 62 IN ansi.asm
                    > USED AT LINE 64 IN ansi.asm
                    > USED AT LINE 73 IN ansi.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 2258 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 163 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
                    > USED AT LINE 1628 IN MAIN.asm
                    > USED AT LINE 2255 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2371 IN MAIN.asm
                    > USED AT LINE 2439 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2376 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2378 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2309 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 172 IN MAIN.asm
                    > USED AT LINE 2284 IN MAIN.asm
                    > USED AT LINE 2303 IN MAIN.asm
COLON_:             0204 DEFINED AT LINE 177 IN MAIN.asm
HASH_:              0204 DEFINED AT LINE 178 IN MAIN.asm
COMMA_:             0206 DEFINED AT LINE 181 IN MAIN.asm
DOLLAR_:            0209 DEFINED AT LINE 184 IN MAIN.asm
DQUOTE_:            020C DEFINED AT LINE 187 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 188 IN MAIN.asm
DOT_:               020F DEFINED AT LINE 191 IN MAIN.asm
PERCENT_:           0212 DEFINED AT LINE 194 IN MAIN.asm
QUESTION_:          0215 DEFINED AT LINE 197 IN MAIN.asm
LPAREN_:            0218 DEFINED AT LINE 200 IN MAIN.asm
SLASH_:             021B DEFINED AT LINE 203 IN MAIN.asm
NUM_:               021E DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 209 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 210 IN MAIN.asm
NOT:                022C DEFINED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 222 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 223 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 236 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 237 IN MAIN.asm
LT_:                024C DEFINED AT LINE 245 IN MAIN.asm
LT:                 024C DEFINED AT LINE 246 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SEMICOLON_:         025E DEFINED AT LINE 261 IN MAIN.asm
SEMICOLON:          025E DEFINED AT LINE 262 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 269 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 271 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
RPAREN_:            026B DEFINED AT LINE 276 IN MAIN.asm
RPAREN:             026B DEFINED AT LINE 278 IN MAIN.asm
AMPER_:             0273 DEFINED AT LINE 286 IN MAIN.asm
AMPER:              0273 DEFINED AT LINE 287 IN MAIN.asm
AND:                0273 DEFINED AT LINE 288 IN MAIN.asm
MINUS_:             027D DEFINED AT LINE 306 IN MAIN.asm
MINUS:              027D DEFINED AT LINE 307 IN MAIN.asm
SUB:                0289 DEFINED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 312 IN MAIN.asm
SUB1:               0293 DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
SUB2:               029A DEFINED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
SUB3:               029D DEFINED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 1708 IN MAIN.asm
STAR_:              02A5 DEFINED AT LINE 337 IN MAIN.asm
STAR:               02A5 DEFINED AT LINE 338 IN MAIN.asm
MUL:                02AD DEFINED AT LINE 344 IN MAIN.asm
MUL2:               02AF DEFINED AT LINE 347 IN MAIN.asm
MUL3:               02B7 DEFINED AT LINE 352 IN MAIN.asm
                    > USED AT LINE 361 IN MAIN.asm
PLUS_:              02C9 DEFINED AT LINE 367 IN MAIN.asm
PLUS:               02C9 DEFINED AT LINE 368 IN MAIN.asm
ADD:                02C9 DEFINED AT LINE 369 IN MAIN.asm
ADD1:               02D4 DEFINED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
ADD3:               02D8 DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 570 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
ADD4:               02E2 DEFINED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
UPCASE_:            02E5 DEFINED AT LINE 394 IN MAIN.asm
UPCASE:             02E5 DEFINED AT LINE 395 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 404 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 405 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 409 IN MAIN.asm
                    > USED AT LINE 398 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 421 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 422 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 423 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 438 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 439 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 440 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 449 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 460 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 461 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 462 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 493 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 514 IN MAIN.asm
CARET:              039F DEFINED AT LINE 518 IN MAIN.asm
GO:                 039F DEFINED AT LINE 519 IN MAIN.asm
GO1:                03A0 DEFINED AT LINE 521 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 535 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 536 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 537 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 545 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 552 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 559 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 560 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 561 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 572 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 576 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 579 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 580 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 588 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 589 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 590 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 602 IN MAIN.asm
PRINTARRAY:         0411 DEFINED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
PRINTCHAR:          0414 DEFINED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
PRINTSTRING:        0423 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
PRINTSTRING0:       042A DEFINED AT LINE 634 IN MAIN.asm
                    > USED AT LINE 641 IN MAIN.asm
PRINTSTRING1:       042D DEFINED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
PRINTNUMBER:        0438 DEFINED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
PRINTDEC:           0443 DEFINED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
PRINTDEC1:          0451 DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
PRINTHEX:           0460 DEFINED AT LINE 675 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
PRINTHEX1:          046C DEFINED AT LINE 682 IN MAIN.asm
                    > USED AT LINE 679 IN MAIN.asm
PRINTHEX2:          0477 DEFINED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 686 IN MAIN.asm
PRINTHEX3:          0486 DEFINED AT LINE 698 IN MAIN.asm
                    > USED AT LINE 688 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
PRINTHEX4:          048F DEFINED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 704 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 722 IN MAIN.asm
ABS1:               060A DEFINED AT LINE 750 IN MAIN.asm
ABSOLUTE:           060A DEFINED AT LINE 751 IN MAIN.asm
ABSOLUTE1:          0615 DEFINED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
ALC:                0618 DEFINED AT LINE 767 IN MAIN.asm
MEMALLOCATE:        0618 DEFINED AT LINE 768 IN MAIN.asm
ALN:                061A DEFINED AT LINE 773 IN MAIN.asm
ARRAYLENGTH:        061A DEFINED AT LINE 774 IN MAIN.asm
ARRAYLENGTH1:       0620 DEFINED AT LINE 781 IN MAIN.asm
BYE:                0623 DEFINED AT LINE 786 IN MAIN.asm
CGO:                0626 DEFINED AT LINE 791 IN MAIN.asm
CURSORGO:           0626 DEFINED AT LINE 792 IN MAIN.asm
CLL:                062E DEFINED AT LINE 801 IN MAIN.asm
CLEARLINE:          062E DEFINED AT LINE 802 IN MAIN.asm
CLS:                0637 DEFINED AT LINE 811 IN MAIN.asm
CLEARSCREEN:        0637 DEFINED AT LINE 812 IN MAIN.asm
CMV:                063C DEFINED AT LINE 818 IN MAIN.asm
CURSORMOVE:         063C DEFINED AT LINE 819 IN MAIN.asm
CURSORMOVE1:        0648 DEFINED AT LINE 828 IN MAIN.asm
DEC:                064A DEFINED AT LINE 831 IN MAIN.asm
DECBASE:            064A DEFINED AT LINE 832 IN MAIN.asm
DECBASE1:           064C DEFINED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
DIV:                0651 DEFINED AT LINE 839 IN MAIN.asm
ECH:                0654 DEFINED AT LINE 844 IN MAIN.asm
ECHO:               0654 DEFINED AT LINE 845 IN MAIN.asm
F:                  065A DEFINED AT LINE 851 IN MAIN.asm
IN:                 065D DEFINED AT LINE 857 IN MAIN.asm
INPUT:              065D DEFINED AT LINE 858 IN MAIN.asm
OUT:                0668 DEFINED AT LINE 870 IN MAIN.asm
OUTPUT:             0668 DEFINED AT LINE 871 IN MAIN.asm
REC:                0671 DEFINED AT LINE 881 IN MAIN.asm
RECUR:              0671 DEFINED AT LINE 882 IN MAIN.asm
REM:                0677 DEFINED AT LINE 888 IN MAIN.asm
REMAIN:             0677 DEFINED AT LINE 889 IN MAIN.asm
RET:                067D DEFINED AT LINE 896 IN MAIN.asm
RETURN:             067D DEFINED AT LINE 897 IN MAIN.asm
RETURN1:            0684 DEFINED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
SBB:                0687 DEFINED AT LINE 907 IN MAIN.asm
STRINGBEGIN:        0687 DEFINED AT LINE 908 IN MAIN.asm
SBE:                068F DEFINED AT LINE 915 IN MAIN.asm
STRINGEND:          068F DEFINED AT LINE 916 IN MAIN.asm
STRINGEND1:         06B6 DEFINED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
SCP:                06BE DEFINED AT LINE 940 IN MAIN.asm
SEL:                06C6 DEFINED AT LINE 949 IN MAIN.asm
SELECT:             06C6 DEFINED AT LINE 950 IN MAIN.asm
SELECT1:            06D1 DEFINED AT LINE 961 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
SELECT1A:           06E2 DEFINED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
SELECT1B:           06E3 DEFINED AT LINE 977 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
SELECT2:            06E6 DEFINED AT LINE 981 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
SLN:                06ED DEFINED AT LINE 989 IN MAIN.asm
T:                  06F4 DEFINED AT LINE 996 IN MAIN.asm
VAR:                06F7 DEFINED AT LINE 1001 IN MAIN.asm
VARIABLES:          06F7 DEFINED AT LINE 1002 IN MAIN.asm
ADR:                0700 DEFINED AT LINE 1012 IN MAIN.asm
ADDROF:             0700 DEFINED AT LINE 1013 IN MAIN.asm
ADDROF2:            0706 DEFINED AT LINE 1018 IN MAIN.asm
WHI:                0708 DEFINED AT LINE 1024 IN MAIN.asm
WHILE:              0708 DEFINED AT LINE 1025 IN MAIN.asm
WHILE1:             070F DEFINED AT LINE 1031 IN MAIN.asm
                    > USED AT LINE 1029 IN MAIN.asm
BYT:                0722 DEFINED AT LINE 1043 IN MAIN.asm
BYTEMODE:           0722 DEFINED AT LINE 1044 IN MAIN.asm
BYTEMODE1:          0724 DEFINED AT LINE 1046 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
CMT:                0729 DEFINED AT LINE 1051 IN MAIN.asm
COMMENT:            0729 DEFINED AT LINE 1052 IN MAIN.asm
                    > USED AT LINE 1056 IN MAIN.asm
HEX:                0732 DEFINED AT LINE 1060 IN MAIN.asm
ERROR1:             0737 DEFINED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
FRE:                073D DEFINED AT LINE 1070 IN MAIN.asm
MEMFREE:            073D DEFINED AT LINE 1071 IN MAIN.asm
MEMFREE1:           073E DEFINED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
FRA:                0743 DEFINED AT LINE 1079 IN MAIN.asm
MEMFREEARRAY:       0743 DEFINED AT LINE 1080 IN MAIN.asm
MAX:                0748 DEFINED AT LINE 1088 IN MAIN.asm
MAXIMUM:            0748 DEFINED AT LINE 1089 IN MAIN.asm
MAXIMUM1:           0752 DEFINED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
MIN:                0754 DEFINED AT LINE 1103 IN MAIN.asm
MINIMUM:            0754 DEFINED AT LINE 1104 IN MAIN.asm
MINIMUM1:           075E DEFINED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
VOI:                0760 DEFINED AT LINE 1118 IN MAIN.asm
VOID:               0760 DEFINED AT LINE 1119 IN MAIN.asm
WRD:                0768 DEFINED AT LINE 1127 IN MAIN.asm
WORDMODE:           0768 DEFINED AT LINE 1128 IN MAIN.asm
XOR:                076D DEFINED AT LINE 1133 IN MAIN.asm
XOR1:               076E DEFINED AT LINE 1135 IN MAIN.asm
CUR:                0778 DEFINED AT LINE 1147 IN MAIN.asm
CURSORSHOW:         0778 DEFINED AT LINE 1148 IN MAIN.asm
CURSORSHOW1:        0782 DEFINED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 1154 IN MAIN.asm
DIV1:               0787 DEFINED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
DIV2:               0791 DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
COMMA:              07A2 DEFINED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
READCHAR:           07AF DEFINED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
READSTRING:         07B8 DEFINED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 44
READSTRING1:        07BD DEFINED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
READSTRING2:        07D1 DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1207 IN MAIN.asm
READNUMBER:         07DA DEFINED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
PERFORMM_1684S1224: 07E3 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER1:        0801 DEFINED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
PERFORMM_1701S1241: 0808 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER2:        080B DEFINED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
PERFORMM_1705S1245: 0812 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER3:        0813 DEFINED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
TILDE:              0819 DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 577 IN MAIN.asm
INVERT:             0819 DEFINED AT LINE 1255 IN MAIN.asm
DOLLAR:             0823 DEFINED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
HEXNUM:             0823 DEFINED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 44
HEXNUM1:            0826 DEFINED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
HEXNUM2:            082E DEFINED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
QUESTION:           0840 DEFINED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
IF:                 0840 DEFINED AT LINE 1291 IN MAIN.asm
QUOTE:              084D DEFINED AT LINE 1304 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
STRING:             084D DEFINED AT LINE 1305 IN MAIN.asm
STRING1:            0856 DEFINED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1320 IN MAIN.asm
STRING2:            0859 DEFINED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
STRING3:            085F DEFINED AT LINE 1321 IN MAIN.asm
                    > USED AT LINE 1319 IN MAIN.asm
PERCENT:            0867 DEFINED AT LINE 1331 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
ARG:                0867 DEFINED AT LINE 1332 IN MAIN.asm
ARG0:               0883 DEFINED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
ARG0A:              088C DEFINED AT LINE 1359 IN MAIN.asm
                    > USED AT LINE 1338 IN MAIN.asm
                    > USED AT LINE 1343 IN MAIN.asm
ARG1:               0891 DEFINED AT LINE 1362 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
ARG1A:              0899 DEFINED AT LINE 1369 IN MAIN.asm
                    > USED AT LINE 1361 IN MAIN.asm
NUM:                089C DEFINED AT LINE 1374 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
                    > USED AT LINE 44
NUM0:               08A5 DEFINED AT LINE 1380 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
NUM1:               08A6 DEFINED AT LINE 1382 IN MAIN.asm
                    > USED AT LINE 1399 IN MAIN.asm
NUM2:               08BE DEFINED AT LINE 1400 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1385 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
NUM3:               08C9 DEFINED AT LINE 1408 IN MAIN.asm
                    > USED AT LINE 1403 IN MAIN.asm
RBRACE:             08CC DEFINED AT LINE 1413 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
BLOCKEND:           08CC DEFINED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 1040 IN MAIN.asm
BLOCKEND1:          08FE DEFINED AT LINE 1436 IN MAIN.asm
                    > USED AT LINE 1429 IN MAIN.asm
BLOCKEND2:          090A DEFINED AT LINE 1443 IN MAIN.asm
                    > USED AT LINE 1435 IN MAIN.asm
BLOCKEND3:          091C DEFINED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
BLOCKEND4:          0930 DEFINED AT LINE 1467 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
GOBLOCK:            0939 DEFINED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 533 IN MAIN.asm
GOBLOCK2:           095E DEFINED AT LINE 1489 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
GOBLOCK3:           0968 DEFINED AT LINE 1495 IN MAIN.asm
GOFUNC:             096C DEFINED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
GOFUNC1:            0985 DEFINED AT LINE 1518 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
GOFUNC2:            098B DEFINED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
GOFUNC3:            0996 DEFINED AT LINE 1531 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
GOFUNC4:            09AE DEFINED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 1545 IN MAIN.asm
GOFUNC5:            09B1 DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1557 IN MAIN.asm
GOFUNC6:            09B4 DEFINED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 1550 IN MAIN.asm
GOFUNC7:            09B7 DEFINED AT LINE 1558 IN MAIN.asm
GOFUNC8:            09BB DEFINED AT LINE 1563 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
ASSIGN:             09C6 DEFINED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
ASSIGN0:            09C8 DEFINED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 391 IN MAIN.asm
ASSIGN1:            09CC DEFINED AT LINE 1580 IN MAIN.asm
ASSIGN2:            09D5 DEFINED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 1584 IN MAIN.asm
EQUALS:             09D7 DEFINED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
NOTEQUALS:          09DE DEFINED AT LINE 1598 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
LESSTHANEQ:         09E5 DEFINED AT LINE 1606 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           09EA DEFINED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          09EF DEFINED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
TRUE1:              09F2 DEFINED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
NULL1:              09F8 DEFINED AT LINE 1625 IN MAIN.asm
NIL:                09F8 DEFINED AT LINE 1626 IN MAIN.asm
FALSE1:             09F8 DEFINED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1619 IN MAIN.asm
SPREAD:             09FE DEFINED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
SPREAD1:            0A0B DEFINED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
SPREAD2:            0A16 DEFINED AT LINE 1651 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
SPREAD3:            0A18 DEFINED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
SHIFTLEFT:          0A22 DEFINED AT LINE 1664 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT2:         0A2C DEFINED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1670 IN MAIN.asm
SHIFTLEFT3:         0A34 DEFINED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 1681 IN MAIN.asm
SHIFTLEFT4:         0A35 DEFINED AT LINE 1680 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
SHIFTRIGHT:         0A3E DEFINED AT LINE 1688 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
SHIFTRIGHT2:        0A48 DEFINED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1694 IN MAIN.asm
SHIFTRIGHT3:        0A50 DEFINED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1706 IN MAIN.asm
SHIFTRIGHT4:        0A54 DEFINED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 1701 IN MAIN.asm
DIVIDE:             0A5D DEFINED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
DIVIDE1:            0A62 DEFINED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 1728 IN MAIN.asm
DIVIDE2:            0A6F DEFINED AT LINE 1724 IN MAIN.asm
                    > USED AT LINE 1721 IN MAIN.asm
DIVIDE3:            0A70 DEFINED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 1723 IN MAIN.asm
DOTNEXT:            0A76 DEFINED AT LINE 1732 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 696 IN MAIN.asm
DOTNEXT1:           0A7E DEFINED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 1735 IN MAIN.asm
PARSEARGS:          0A90 DEFINED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
PARSEARGS1:         0A9A DEFINED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
PARSEARGS1A:        0AA2 DEFINED AT LINE 1761 IN MAIN.asm
                    > USED AT LINE 1758 IN MAIN.asm
PARSEARGS2:         0AAA DEFINED AT LINE 1766 IN MAIN.asm
PARSEARGS3:         0AB2 DEFINED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1772 IN MAIN.asm
PARSEARGS4:         0AB5 DEFINED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
                    > USED AT LINE 1765 IN MAIN.asm
PARSEARGS5:         0ABB DEFINED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 1781 IN MAIN.asm
PARSEBLOCK:         0AC6 DEFINED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 554 IN MAIN.asm
PARSEBLOCK1:        0ACA DEFINED AT LINE 1800 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
PARSEBLOCK2:        0AE3 DEFINED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
                    > USED AT LINE 1810 IN MAIN.asm
PARSEBLOCK3:        0AE9 DEFINED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
PARSEBLOCK4:        0B03 DEFINED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
                    > USED AT LINE 1825 IN MAIN.asm
PARSEBLOCK5:        0B06 DEFINED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1831 IN MAIN.asm
PARSEBLOCK6:        0B31 DEFINED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
CREATEFUNC:         0B35 DEFINED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
CREATEFUNC0:        0B54 DEFINED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
CREATEFUNC1:        0B6C DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
CREATEFUNC2:        0B7F DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
CREATEFUNC2A:       0B9E DEFINED AT LINE 1937 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
CREATEFUNC3:        0BAD DEFINED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
CREATEFUNC4:        0BB8 DEFINED AT LINE 1960 IN MAIN.asm
CREATEFUNC5:        0BB9 DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
VARIABLE:           0BD7 DEFINED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
CONSTANT:           0BE6 DEFINED AT LINE 1999 IN MAIN.asm
                    > USED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
CHARTABLE:          0BE9 DEFINED AT LINE 2007 IN MAIN.asm
CHARTABLE1:         0BF3 DEFINED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
CHARTABLE2:         0BFD DEFINED AT LINE 2022 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
CHARTABLE3:         0BFF DEFINED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
IDENTHASH:          0C04 DEFINED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
IDENTHASH1:         0C06 DEFINED AT LINE 2035 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
IDENTHASH2:         0C0E DEFINED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
COMMANDTABLE:       0C19 DEFINED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
COMMANDTABLE2:      0C21 DEFINED AT LINE 2062 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
GETVARADDR:         0C29 DEFINED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 1016 IN MAIN.asm
GETVARADDR1:        0C3B DEFINED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2079 IN MAIN.asm
PUTSTR0:            0C40 DEFINED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 2095 IN MAIN.asm
PUTSTR:             0C44 DEFINED AT LINE 2092 IN MAIN.asm
                    > USED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 2223 IN MAIN.asm
                    > USED AT LINE 2239 IN MAIN.asm
                    > USED AT LINE 2335 IN MAIN.asm
FORMATDEC0:         0C49 DEFINED AT LINE 2101 IN MAIN.asm
                    > USED AT LINE 2231 IN MAIN.asm
FORMATDEC:          0C4C DEFINED AT LINE 2108 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
FORMATDEC2:         0C5C DEFINED AT LINE 2122 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
FORMATDEC4:         0C7C DEFINED AT LINE 2136 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
                    > USED AT LINE 2127 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 2131 IN MAIN.asm
                    > USED AT LINE 2134 IN MAIN.asm
FORMATDEC5:         0C7E DEFINED AT LINE 2138 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
FORMATDEC6:         0C8E DEFINED AT LINE 2150 IN MAIN.asm
                    > USED AT LINE 2145 IN MAIN.asm
FORMATDEC7:         0C8F DEFINED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
NESTING:            0C95 DEFINED AT LINE 2170 IN MAIN.asm
                    > USED AT LINE 2357 IN MAIN.asm
                    > USED AT LINE 2391 IN MAIN.asm
NESTING0:           0CA3 DEFINED AT LINE 2178 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
                    > USED AT LINE 2174 IN MAIN.asm
                    > USED AT LINE 2176 IN MAIN.asm
NESTING1A:          0CAA DEFINED AT LINE 2183 IN MAIN.asm
                    > USED AT LINE 2180 IN MAIN.asm
NESTING1:           0CAD DEFINED AT LINE 2186 IN MAIN.asm
                    > USED AT LINE 2177 IN MAIN.asm
NESTING2:           0CBC DEFINED AT LINE 2195 IN MAIN.asm
                    > USED AT LINE 2190 IN MAIN.asm
                    > USED AT LINE 2192 IN MAIN.asm
NESTING3:           0CBE DEFINED AT LINE 2198 IN MAIN.asm
                    > USED AT LINE 2194 IN MAIN.asm
NESTING4:           0CC9 DEFINED AT LINE 2205 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
                    > USED AT LINE 2202 IN MAIN.asm
PROMPT:             0CCB DEFINED AT LINE 2209 IN MAIN.asm
                    > USED AT LINE 2339 IN MAIN.asm
CRLF:               0CD4 DEFINED AT LINE 2214 IN MAIN.asm
                    > USED AT LINE 2404 IN MAIN.asm
PRINTSTR:           0CDB DEFINED AT LINE 2221 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
                    > USED AT LINE 2215 IN MAIN.asm
                    > USED AT LINE 2464 IN MAIN.asm
                    > USED AT LINE 2469 IN MAIN.asm
                    > USED AT LINE 2 IN ansi.asm
                    > USED AT LINE 8 IN ansi.asm
                    > USED AT LINE 69 IN ansi.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 17
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 163
PRINTNUM:           0CE2 DEFINED AT LINE 2229 IN MAIN.asm
                    > USED AT LINE 33 IN ansi.asm
                    > USED AT LINE 39 IN ansi.asm
                    > USED AT LINE 52 IN ansi.asm
STRINGCOMPARE:      0CFB DEFINED AT LINE 2244 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
STRINGCOMPARE1:     0CFB DEFINED AT LINE 2245 IN MAIN.asm
                    > USED AT LINE 2253 IN MAIN.asm
STRINGCOMPARE2:     0D06 DEFINED AT LINE 2254 IN MAIN.asm
                    > USED AT LINE 2248 IN MAIN.asm
STRINGCOMPARE3:     0D0B DEFINED AT LINE 2257 IN MAIN.asm
                    > USED AT LINE 2250 IN MAIN.asm
STRINGCOMPARE4:     0D0E DEFINED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 2256 IN MAIN.asm
STRINGLENGTH:       0D10 DEFINED AT LINE 2266 IN MAIN.asm
                    > USED AT LINE 991 IN MAIN.asm
STRINGLENGTH1:      0D15 DEFINED AT LINE 2269 IN MAIN.asm
                    > USED AT LINE 2275 IN MAIN.asm
STRINGLENGTH2:      0D17 DEFINED AT LINE 2272 IN MAIN.asm
                    > USED AT LINE 2268 IN MAIN.asm
STRINGLENGTH3:      0D1B DEFINED AT LINE 2276 IN MAIN.asm
INIT:               0D1C DEFINED AT LINE 2283 IN MAIN.asm
                    > USED AT LINE 2332 IN MAIN.asm
INIT1:              0D24 DEFINED AT LINE 2287 IN MAIN.asm
                    > USED AT LINE 2293 IN MAIN.asm
WARMINIT:           0D2C DEFINED AT LINE 2295 IN MAIN.asm
COLDBOOT0:          0D3F DEFINED AT LINE 2302 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 2290 IN MAIN.asm
                    > USED AT LINE 2328 IN MAIN.asm
COLDINIT:           0D49 DEFINED AT LINE 2308 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0D5A DEFINED AT LINE 2317 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
COLDSTART:          0D67 DEFINED AT LINE 2326 IN MAIN.asm
START:              0D70 DEFINED AT LINE 2330 IN MAIN.asm
START1:             0D76 DEFINED AT LINE 2333 IN MAIN.asm
                    > USED AT LINE 2300 IN MAIN.asm
                    > USED AT LINE 2329 IN MAIN.asm
INTERPRET:          0D7C DEFINED AT LINE 2337 IN MAIN.asm
                    > USED AT LINE 2441 IN MAIN.asm
                    > USED AT LINE 2457 IN MAIN.asm
INTERPRET2:         0D88 DEFINED AT LINE 2345 IN MAIN.asm
                    > USED AT LINE 2382 IN MAIN.asm
                    > USED AT LINE 2462 IN MAIN.asm
                    > USED AT LINE 2466 IN MAIN.asm
                    > USED AT LINE 2484 IN MAIN.asm
INTERPRET3:         0D90 DEFINED AT LINE 2353 IN MAIN.asm
                    > USED AT LINE 2363 IN MAIN.asm
INTERPRET4:         0D96 DEFINED AT LINE 2359 IN MAIN.asm
                    > USED AT LINE 2351 IN MAIN.asm
INTERPRET5:         0D9B DEFINED AT LINE 2366 IN MAIN.asm
                    > USED AT LINE 2392 IN MAIN.asm
                    > USED AT LINE 2407 IN MAIN.asm
INTERPRET5A:        0DB4 DEFINED AT LINE 2381 IN MAIN.asm
INTERPRET6:         0DB6 DEFINED AT LINE 2384 IN MAIN.asm
                    > USED AT LINE 2370 IN MAIN.asm
INTERPRET7:         0DC4 DEFINED AT LINE 2394 IN MAIN.asm
                    > USED AT LINE 2374 IN MAIN.asm
INTERPRET8:         0DD7 DEFINED AT LINE 2409 IN MAIN.asm
                    > USED AT LINE 2372 IN MAIN.asm
NEXT:               0DF2 DEFINED AT LINE 2422 IN MAIN.asm
                    > USED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 2426 IN MAIN.asm
NEXT0:              0E06 DEFINED AT LINE 2436 IN MAIN.asm
                    > USED AT LINE 2434 IN MAIN.asm
NEXT1:              0E07 DEFINED AT LINE 2438 IN MAIN.asm
                    > USED AT LINE 2427 IN MAIN.asm
EXIT:               0E0E DEFINED AT LINE 2443 IN MAIN.asm
                    > USED AT LINE 2440 IN MAIN.asm
RUN:                0E12 DEFINED AT LINE 2448 IN MAIN.asm
                    > USED AT LINE 2455 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              0E16 DEFINED AT LINE 2453 IN MAIN.asm
                    > USED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
BACKSPACE_:         0E28 DEFINED AT LINE 2459 IN MAIN.asm
                    > USED AT LINE 2377 IN MAIN.asm
REEDIT_:            0E38 DEFINED AT LINE 2468 IN MAIN.asm
                    > USED AT LINE 2379 IN MAIN.asm
REEDIT0:            0E44 DEFINED AT LINE 2473 IN MAIN.asm
                    > USED AT LINE 2479 IN MAIN.asm
REEDIT1:            0E48 DEFINED AT LINE 2476 IN MAIN.asm
                    > USED AT LINE 2472 IN MAIN.asm
ANSIPRINTSEQ:       0E58 DEFINED AT LINE 1 IN ansi.asm
                    > USED AT LINE 19 IN ansi.asm
                    > USED AT LINE 28 IN ansi.asm
                    > USED AT LINE 47 IN ansi.asm
                    > USED AT LINE 60 IN ansi.asm
ANSICLEARSCREEN:    0E5F DEFINED AT LINE 7 IN ansi.asm
                    > USED AT LINE 813 IN MAIN.asm
ANSICLEARLINE:      0E68 DEFINED AT LINE 16 IN ansi.asm
                    > USED AT LINE 806 IN MAIN.asm
ANSIGOTO:           0E77 DEFINED AT LINE 26 IN ansi.asm
                    > USED AT LINE 796 IN MAIN.asm
ANSIMOVE:           0E94 DEFINED AT LINE 45 IN ansi.asm
                    > USED AT LINE 827 IN MAIN.asm
ANSITEXTSTYLE:      0EA4 DEFINED AT LINE 57 IN ansi.asm
ANSICURSORSHOW:     0EB3 DEFINED AT LINE 67 IN ansi.asm
                    > USED AT LINE 1157 IN MAIN.asm
TESTSSTART:         0F00 DEFINED AT LINE 14
                    > USED AT LINE 8
EXPECTM_2940S16:    0F73 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2944S21:    0FF1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2945S22:    1065 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2946S23:    10D7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2947S24:    1149 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2948S25:    11BB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2949S26:    122D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2950S27:    12A1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2951S28:    1317 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2952S29:    138B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2953S30:    1407 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2954S31:    147B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2955S32:    14EF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2956S33:    1565 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2957S34:    15DB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2958S35:    1657 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2959S36:    16D3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2960S37:    174D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2961S38:    17CB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2962S39:    184D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2963S40:    18CD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2964S41:    1947 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2965S42:    19C9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2966S43:    1A47 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2967S44:    1AC1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2968S45:    1B3B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2969S46:    1BBD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2970S47:    1C37 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2971S48:    1CB1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2972S49:    1D31 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2973S50:    1DC1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2974S51:    1E37 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2975S52:    1EAD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2976S53:    1F25 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2977S54:    1F9D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2978S55:    2017 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2979S56:    2099 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2980S57:    2113 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2981S58:    219B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2982S59:    2223 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2983S60:    22AB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2984S61:    2335 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2985S62:    23C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2986S63:    2451 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2987S64:    24DF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2988S65:    256D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2989S66:    25F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2990S67:    2685 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2991S68:    2719 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2992S69:    2795 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2993S70:    281F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2994S71:    28A9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2995S72:    2935 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2996S73:    29B9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2997S74:    2A33 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2998S75:    2AAF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2999S76:    2B2B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3000S77:    2BA5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3001S78:    2C1F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3002S79:    2C99 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3003S80:    2D13 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3004S81:    2D8D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3005S82:    2E07 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3006S83:    2E81 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3007S84:    2EFB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3008S85:    2F77 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3009S86:    2FF3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3010S87:    306F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3011S88:    30ED DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3012S89:    316B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3013S90:    31E3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3014S91:    325B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3015S92:    32D9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3016S93:    335D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3017S94:    33ED DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3018S95:    347D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3019S96:    34F7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3020S97:    3573 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3021S98:    35F5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3022S99:    367B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3023S100:   36FD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3024S101:   3789 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3025S102:   3817 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3026S103:   38AB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3027S104:   3943 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3028S105:   39CD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3029S106:   3A5D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3030S107:   3AEF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3031S108:   3B83 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3032S109:   3C15 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3033S110:   3CB5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3034S111:   3D43 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3035S112:   3DDF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3036S113:   3E7D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3037S114:   3F1D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3038S115:   3FC7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3039S116:   4071 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3040S117:   40FB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3041S118:   418F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3042S119:   421D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3043S120:   42B1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3044S121:   4347 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3045S122:   43EB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3046S123:   4497 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3047S124:   4543 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3048S125:   45E3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3049S126:   4689 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3050S127:   4745 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3051S128:   47FB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3052S129:   48C1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3053S130:   4987 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3054S131:   4A1F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3055S132:   4AB7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3056S133:   4B3D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3057S134:   4BC3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3058S135:   4C49 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3059S136:   4CCF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3060S137:   4D4D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3061S138:   4DCB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3062S139:   4E49 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3063S140:   4EC7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3064S141:   4F4F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3065S142:   4FE5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3066S143:   5081 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3067S144:   5135 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3068S145:   51E9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3069S146:   52B7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3070S147:   533D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3071S148:   53D3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3072S149:   546B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3073S150:   552F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3074S151:   55B9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3075S152:   5657 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3076S153:   56F5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3077S154:   5775 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3078S155:   57F5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3079S156:   5875 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3080S157:   58F5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            5900 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
DSTACK_SIZE:        0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 8 IN ram.asm
RSTACK_SIZE:        0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
NAMES_SIZE:         0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 15 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 18 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 21 IN ram.asm
STACK:              5B00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 2323 IN MAIN.asm
                    > USED AT LINE 2327 IN MAIN.asm
                    > USED AT LINE 2331 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
DSTACK:             5B00 DEFINED AT LINE 10 IN ram.asm
RSTACK:             5B00 DEFINED AT LINE 12 IN ram.asm
NAMES:              5C00 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
TIB:                5D00 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 2342 IN MAIN.asm
                    > USED AT LINE 2350 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
                    > USED AT LINE 2396 IN MAIN.asm
                    > USED AT LINE 2411 IN MAIN.asm
                    > USED AT LINE 2414 IN MAIN.asm
                    > USED AT LINE 2471 IN MAIN.asm
                    > USED AT LINE 2480 IN MAIN.asm
BUFFER:             5E00 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 2237 IN MAIN.asm
VARS:               5F00 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 2314 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           5FD0 DEFINED AT LINE 26 IN ram.asm
RST08:              5FD0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              5FD2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              5FD4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              5FD6 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              5FD8 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              5FDA DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               5FDC DEFINED AT LINE 34 IN ram.asm
INTVEC:             5FDE DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             5FE0 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            5FE2 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            5FE4 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            5FE6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2310 IN MAIN.asm
VTIBPTR:            5FE6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 2343 IN MAIN.asm
                    > USED AT LINE 2413 IN MAIN.asm
VBUFPTR:            5FE8 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
                    > USED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 936 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
                    > USED AT LINE 2230 IN MAIN.asm
                    > USED AT LINE 2236 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
VHEAPPTR:           5FEA DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1325 IN MAIN.asm
                    > USED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
VNAMESPTR:          5FEC DEFINED AT LINE 47 IN ram.asm
VRECURPTR:          5FEE DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 1462 IN MAIN.asm
                    > USED AT LINE 1469 IN MAIN.asm
VDATAWIDTH:         5FF0 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 659 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 1047 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1645 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
VNUMBASE:           5FF1 DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
VHEXPREFIX:         5FF2 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 677 IN MAIN.asm
VECHO:              5FF3 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 1210 IN MAIN.asm
VSTRMODE:           5FF4 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
VPOINTER:           5FFA DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 413 IN MAIN.asm
                    > USED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 1365 IN MAIN.asm
                    > USED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
VREMAIN:            5FFC DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 1179 IN MAIN.asm
VSAVEDIP:           5FFE DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 2416 IN MAIN.asm
VSAVEDDSP:          6000 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 2297 IN MAIN.asm
                    > USED AT LINE 2417 IN MAIN.asm
VSAVEDRSP:          6002 DEFINED AT LINE 67 IN ram.asm
                    > USED AT LINE 2298 IN MAIN.asm
                    > USED AT LINE 2418 IN MAIN.asm
VSAVEDNEXT:         6004 DEFINED AT LINE 68 IN ram.asm
                    > USED AT LINE 2299 IN MAIN.asm
                    > USED AT LINE 2419 IN MAIN.asm
VSAVEDBP:           6006 DEFINED AT LINE 69 IN ram.asm
VTEMP1:             6008 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 465 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 1417 IN MAIN.asm
                    > USED AT LINE 1461 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1508 IN MAIN.asm
                    > USED AT LINE 1529 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1542 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
                    > USED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1847 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
VTEMP2:             600A DEFINED AT LINE 74 IN ram.asm
                    > USED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
VTEMP3:             600C DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 1981 IN MAIN.asm
TBPTR:              6010 DEFINED AT LINE 77 IN ram.asm
TITLEBUF:           6012 DEFINED AT LINE 79 IN ram.asm
                    > USED AT LINE 2285 IN MAIN.asm
                    > USED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 2334 IN MAIN.asm
HEAP:               6026 DEFINED AT LINE 81 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1840 IN MAIN.asm
