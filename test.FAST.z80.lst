0000                             ; .engine mycomputer
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hex./dec"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hex./dec `\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 5D               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 5D               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 5D               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 5D               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 5D               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 5D               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 5D               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 5D               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 5D               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 5D               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 5B               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 5D               LD   (RST08),HL   
0094   22 D2 5D               LD   (RST10),HL   
0097   22 D4 5D               LD   (RST18),HL   
009A   22 D6 5D               LD   (RST20),HL   
009D   22 D8 5D               LD   (RST28),HL   
00A0   22 DA 5D               LD   (RST30),HL   
00A3   22 DE 5D               LD   (INTVEC),HL   
00A6   22 E0 5D               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 5D               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 5D               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0F               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  MINTY programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of MINTY code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put MINTY code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   0C                     DB   lsb(dquote_)   ; "     2
0182   04                     DB   lsb(hash_)   ; #     1
0183   09                     DB   lsb(dollar_)   ; $     1
0184   12                     DB   lsb(percent_)   ; %     1
0185   73                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   18                     DB   lsb(lparen_)   ; (     1
0188   6B                     DB   lsb(rparen_)   ; )     1
0189   A5                     DB   lsb(star_)   ; *     1
018A   C9                     DB   lsb(plus_)   ; +     1
018B   06                     DB   lsb(comma_)   ; ,     2
018C   7D                     DB   lsb(minus_)   ; -     1
018D   0F                     DB   lsb(dot_)   ; .     2
018E   1B                     DB   lsb(slash_)   ; /	    1
018F   1E                     DB   lsb(num_)   ; 0     1
0190   1E                     DB   lsb(num_)   ; 1
0191   1E                     DB   lsb(num_)   ; 2
0192   1E                     DB   lsb(num_)   ; 3
0193   1E                     DB   lsb(num_)   ; 4
0194   1E                     DB   lsb(num_)   ; 5
0195   1E                     DB   lsb(num_)   ; 6
0196   1E                     DB   lsb(num_)   ; 7
0197   1E                     DB   lsb(num_)   ; 8
0198   1E                     DB   lsb(num_)   ; 9
0199   04                     DB   lsb(colon_)   ; :     2
019A   5E                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   15                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   E5                     DB   lsb(upcase_)   ; A     1
01A1   E5                     DB   lsb(upcase_)   ; B
01A2   E5                     DB   lsb(upcase_)   ; C
01A3   E5                     DB   lsb(upcase_)   ; D
01A4   E5                     DB   lsb(upcase_)   ; E
01A5   E5                     DB   lsb(upcase_)   ; F
01A6   E5                     DB   lsb(upcase_)   ; G
01A7   E5                     DB   lsb(upcase_)   ; h
01A8   E5                     DB   lsb(upcase_)   ; I
01A9   E5                     DB   lsb(upcase_)   ; J
01AA   E5                     DB   lsb(upcase_)   ; K
01AB   E5                     DB   lsb(upcase_)   ; L
01AC   E5                     DB   lsb(upcase_)   ; M
01AD   E5                     DB   lsb(upcase_)   ; N
01AE   E5                     DB   lsb(upcase_)   ; O
01AF   E5                     DB   lsb(upcase_)   ; p
01B0   E5                     DB   lsb(upcase_)   ; Q
01B1   E5                     DB   lsb(upcase_)   ; R
01B2   E5                     DB   lsb(upcase_)   ; S
01B3   E5                     DB   lsb(upcase_)   ; T
01B4   E5                     DB   lsb(upcase_)   ; U
01B5   E5                     DB   lsb(upcase_)   ; V
01B6   E5                     DB   lsb(upcase_)   ; W
01B7   E5                     DB   lsb(upcase_)   ; X
01B8   E5                     DB   lsb(upcase_)   ; Y
01B9   E5                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 5B                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 5C                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   22 5E                  DW   HEAP   ; vHeapPtr \h start of the free mem
01E4   00 00                  DW   NUL   ; vRecurPtr
01E6   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E7   0A                     DB   10   ; vNumBase = 10
01E8   24                     DB   "$"   ; vHexPrefix
01E9   FF                     DB   TRUE   ; vEcho
01EA   00                     DB   FALSE   ; vStrMode
01EB   00                     DB   0   
01EC   00                     DB   0   
01ED   00                     DB   0   
01EE   00                     DB   0   
01EF   00                     DB   0   
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 49 4E 54 59 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMINTY V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                COLON_:      
0204                HASH_:       
0204   DD E9                  JP   (ix)   
0206                COMMA_:      
0206   C3 A2 07               JP   comma   
0209                DOLLAR_:      
0209   C3 23 08               JP   dollar   
020C                DQUOTE_:      
020C                QUOTE_:      
020C   C3 4D 08               JP   quote   
020F                DOT_:        
020F   C3 00 04               JP   dot   
0212                PERCENT_:      
0212   C3 67 08               JP   percent   
0215                QUESTION_:      
0215   C3 40 08               JP   question   
0218                LPAREN_:      
0218   C3 CB 03               JP   lbrace   
021B                SLASH_:      
021B   C3 00 05               JP   slash   
021E                NUM_:        
021E   C3 9C 08               JP   num   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 DE 09               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 C6 09               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 D7 09               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA 3E 0A               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA 22 0A               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA E5 09               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 EA 09               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                SEMICOLON_:      
025E                SEMICOLON:      
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A EE 5D               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   C3 D7 0B               JP   variable   
026B                             ;                               4
026B                RPAREN_:      
026B                             ; jp rparen
026B                RPAREN:      
026B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
026E   FD 46 09               LD   b,(iy+9)   
0271   DD E9                  JP   (ix)   
0273                             ; & and                          14
0273                             ; a b -- c
0273                AMPER_:      
0273                AMPER:       
0273                AND:         
0273   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0274   E1                     POP   hl   
0275   7B                     LD   a,e   
0276   A5                     AND   l   
0277   6F                     LD   l,a   
0278   7A                     LD   a,d   
0279   A4                     AND   h   
027A   67                     LD   h,a   
027B   18 5B                  JR   add3   
027D                             ; - sub
027D                             ; a b -- c
027D                             ; -- sub
027D                             ; b1 -- b2
027D                             ; -= sub
027D                             ; a b1 -- b2
027D                MINUS_:      
027D                MINUS:       
027D   03                     INC   bc   ; check if sign of a number
027E   0A                     LD   a,(bc)   
027F   0B                     DEC   bc   
0280   FE 30                  CP   "0"   
0282   38 05                  JR   c,sub   
0284   FE 3A                  CP   "9"+1   
0286   DA 9C 08               JP   c,num   
0289                SUB:         ; Subtract the value 2nd on stack from top of stack
0289   E1                     POP   hl   ; hl = arg_b
028A   03                     INC   bc   
028B   FE 2D                  CP   "-"   
028D   20 04                  JR   nz,sub1   
028F   2B                     DEC   hl   ; --
0290   C3 C8 09               JP   assign0   
0293                SUB1:        
0293   D1                     POP   de   ; de = arg_a
0294   FE 3D                  CP   "="   
0296   28 02                  JR   z,sub2   
0298   0B                     DEC   bc   ; -
0299   EB                     EX   de,hl   
029A                SUB2:        
029A   B7                     OR   a   ; -=
029B   ED 52                  SBC   hl,de   
029D                SUB3:        
029D   FE 3D                  CP   "="   
029F   CA C8 09               JP   z,assign0   
02A2   E5                     PUSH   hl   
02A3   DD E9                  JP   (ix)   
02A5                STAR_:       ; 21
02A5                STAR:        
02A5   03                     INC   bc   ; check for ** spread
02A6   0A                     LD   a,(bc)   
02A7   FE 2A                  CP   "*"   
02A9   CA FE 09               JP   z,spread   
02AC   0B                     DEC   bc   
02AD                MUL:         
02AD   D1                     POP   de   ; get first value
02AE   E1                     POP   hl   
02AF                MUL2:        
02AF   C5                     PUSH   bc   ; Preserve the IP
02B0   44 4D                  LD   bc,hl   ; bc = 2nd value
02B2   21 00 00               LD   hl,0   
02B5   3E 10                  LD   a,16   
02B7                MUL3:        
02B7   29                     ADD   hl,hl   
02B8   CB 13                  RL   e   
02BA   CB 12                  RL   d   
02BC   30 04                  JR   nc,$+6   
02BE   09                     ADD   hl,bc   
02BF   30 01                  JR   nc,$+3   
02C1   13                     INC   de   
02C2   3D                     DEC   a   
02C3   20 F2                  JR   nz,mul3   
02C5   C1                     POP   bc   ; Restore the IP
02C6   C3 D8 02               JP   add3   
02C9                             ; + add                         25
02C9                             ; a b -- c
02C9                PLUS_:       
02C9                PLUS:        
02C9                ADD:         
02C9   03                     INC   bc   
02CA   0A                     LD   a,(bc)   
02CB   FE 2B                  CP   "+"   ; ++ increment variable
02CD   20 05                  JR   nz,add1   
02CF   E1                     POP   hl   
02D0   23                     INC   hl   
02D1   C3 C8 09               JP   assign0   
02D4                ADD1:        
02D4   0B                     DEC   bc   
02D5   D1                     POP   de   ; second term
02D6   E1                     POP   hl   ; first term
02D7   19                     ADD   hl,de   
02D8                ADD3:        
02D8   03                     INC   bc   
02D9   0A                     LD   a,(bc)   
02DA   FE 3D                  CP   "="   
02DC   28 04                  JR   z,add4   
02DE   0B                     DEC   bc   
02DF   E5                     PUSH   hl   
02E0   DD E9                  JP   (ix)   
02E2                ADD4:        
02E2   C3 C8 09               JP   assign0   
02E5                             ;                               18
02E5                UPCASE_:      
02E5                UPCASE:      
02E5   0A                     LD   a,(bc)   ; a = identifier char
02E6   D6 41                  SUB   "A"   ; "A" = 0
02E8   18 1B                  JR   ident1   
02EA                             ;********************** PAGE 2 END *********************************************
02EA                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 5D                  LD   h,msb(VARS)   
0309   22 F8 5D               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 90 0A               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 19 0E               JP   error   
0343                LAMBDA2:      
0343   CD C6 0A               CALL   parseBlock   
0346   CD 35 0B               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 04 5E            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EA 5D               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A EE 5D               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EA 5D            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EA 5D               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 04 5E            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA 39 09               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 6C 09               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA 39 09               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 5D            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 5D            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 76 0A               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD C6 0A               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 D8 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 CC 08               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 19 08               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F8 5D            LD   de,(vPointer)   
03ED   21 F8 5D               LD   hl,vPointer   
03F0   C3 D7 0B               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   03                     INC   bc   
0401   0A                     LD   a,(bc)   
0402   FE 61                  CP   "a"   ; .a print array
0404   28 0B                  JR   z,printArray   
0406   FE 63                  CP   "c"   ; .c print char
0408   28 0A                  JR   z,printChar   
040A   FE 73                  CP   "s"   ; .s print string
040C   28 15                  JR   z,printString   
040E   0B                     DEC   bc   
040F   18 27                  JR   printNumber   ; .  print number, fall through
0411                PRINTARRAY:      ; TODO
0411   C3 76 0A               JP   dotNext   
0414                             ; .c print char
0414                             ; char --
0414                PRINTCHAR:      
0414   E1                     POP   hl   ; a = char
0415   7D                     LD   a,l   
0416   ED 5B E8 5D            LD   de,(vBufPtr)   ; de = buffer*
041A   12                     LD   (de),a   
041B   13                     INC   de   
041C   ED 53 E8 5D            LD   (vBufPtr),de   ; save buffer*'
0420   C3 76 0A               JP   dotNext   
0423                             ; .s print string
0423                             ; string* --
0423                PRINTSTRING:      
0423   E1                     POP   hl   ; hl = string*
0424   ED 5B E8 5D            LD   de,(vBufPtr)   ; de = buffer*
0428   18 03                  JR   printString1   
042A                PRINTSTRING0:      
042A   12                     LD   (de),a   ; a -> buffer*
042B   13                     INC   de   ; string*++,
042C   23                     INC   hl   
042D                PRINTSTRING1:      
042D   7E                     LD   a,(hl)   ; a <- string*
042E   B7                     OR   a   ; if NUL exit loop
042F   20 F9                  JR   nz,printString0   
0431   ED 53 E8 5D            LD   (vBufPtr),de   ; save buffer*' in pointer
0435   C3 76 0A               JP   dotNext   
0438                             ; . print decimal
0438                             ; value --
0438                PRINTNUMBER:      
0438   3A EF 5D               LD   a,(vNumBase)   
043B   FE 10                  CP   16   
043D   CA 60 04               JP   z,printHex   ; else falls through
0440   C3 43 04               JP   printDec   
0443                             ; print decimal                 ; 70
0443                             ; value --
0443                PRINTDEC:      
0443   ED 5B E8 5D            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0447   D9                     EXX      
0448   E1                     POP   hl   ; hl = value
0449   3A EE 5D               LD   a,(vDataWidth)   
044C   3D                     DEC   a   
044D   20 02                  JR   nz,printDec1   
044F   26 00                  LD   h,0   
0451                PRINTDEC1:      
0451   CD 4F 0C               CALL   formatDec   
0454   D9                     EXX      ; de = buffer*' bc = IP
0455   3E 20                  LD   a," "   ; append space to buffer
0457   12                     LD   (de),a   
0458   13                     INC   de   ; string*++,
0459   ED 53 E8 5D            LD   (vBufPtr),de   ; update buffer* with buffer*'
045D   C3 76 0A               JP   dotNext   
0460                             ; buffer hex                    37
0460                             ; value --
0460                PRINTHEX:      
0460   ED 5B E8 5D            LD   de,(vBufPtr)   
0464   3A F0 5D               LD   a,(vHexPrefix)   ; "$"
0467   B7                     OR   a   ; skip if null
0468   28 02                  JR   z,printHex1   
046A   12                     LD   (de),a   
046B   13                     INC   de   ; string*++,
046C                PRINTHEX1:      
046C   E1                     POP   hl   ; hl = value
046D   3A EE 5D               LD   a,(vDataWidth)   
0470   3D                     DEC   a   
0471   28 04                  JR   z,printHex2   
0473   7C                     LD   a,h   
0474   CD 86 04               CALL   printHex3   
0477                PRINTHEX2:      
0477   7D                     LD   a,l   
0478   CD 86 04               CALL   printHex3   
047B   3E 20                  LD   a," "   ; append space to buffer
047D   12                     LD   (de),a   
047E   13                     INC   de   ; string*++,
047F   ED 53 E8 5D            LD   (vBufPtr),de   
0483   C3 76 0A               JP   dotNext   
0486                PRINTHEX3:      
0486   F5                     PUSH   af   
0487   1F                     RRA      
0488   1F                     RRA      
0489   1F                     RRA      
048A   1F                     RRA      
048B   CD 8F 04               CALL   printHex4   
048E   F1                     POP   af   
048F                PRINTHEX4:      
048F   E6 0F                  AND   0x0F   
0491   C6 90                  ADD   a,0x90   
0493   27                     DAA      
0494   CE 40                  ADC   a,0x40   
0496   27                     DAA      
0497   12                     LD   (de),a   
0498   13                     INC   de   ; string*++,
0499   C9                     RET      
049A                             ;********************** PAGE 4 END *********************************************
049A                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   CD 04 0C               CALL   identHash   
0504   21 37 07               LD   hl,error1   
0507   CD 16 0C               CALL   commandTable   
050A   51 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   lsb(div),0,0,0,0,0,0,0,0,0,0,0,0,0,0,0   
051A   00 00 00 00 00 00 0A 00 00 00 00 00 00 00 00 00 DB   0,0,0,0,0,0,lsb(abs1),0,0,0,0,0,0,0,0,0   
052A   00 00 71 00 00 87 00 00 8F 00 00 00 77 5D 18 00 DB   0,0,lsb(rec),0,0,lsb(sbb),0,0,lsb(sbe),0,0,0,lsb(rem),lsb(in),lsb(alc),0   
053A   00 00 00 7D 00 00 00 BE 00 1A 00 C6 00 00 00 00 DB   0,0,0,lsb(ret),0,0,0,lsb(scp),0,lsb(aln),0,lsb(sel),0,0,0,0   
054A   00 00 4A 68 00 00 26 00 00 00 00 00 00 00 00 54 DB   0,0,lsb(dec),lsb(out),0,0,lsb(cgo),0,0,0,0,0,0,0,0,lsb(ech)   
055A   00 00 00 00 00 00 00 2E 00 ED 00 5A 00 00 37 00 DB   0,0,0,0,0,0,0,lsb(cll),0,lsb(sln),0,lsb(fal),0,0,lsb(cls),0   
056A   00 F7 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 DB   0,lsb(var),0,0,0,lsb(cmv),0,0,0,0,0,0,0,0,0,0   
057A   00 00 00 00 23 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,0,0,lsb(bye),0,0,0,0,0,0,0,0,0,0,0   
058A   00 78 00 22 08 00 00 00 F4 00 00 00 00 00 00 00 DB   0,lsb(cur),0,lsb(byt),lsb(whi),0,0,0,lsb(tru),0,0,0,0,0,0,0   
059A   60 00 00 00 43 00 00 32 3D 00 00 00 00 00 00 00 DB   lsb(voi),0,0,0,lsb(fra),0,0,lsb(hex),lsb(fre),0,0,0,0,0,0,0   
05AA   00 00 00 00 00 00 00 68 00 00 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,lsb(wrd),0,0,0,0,0,0,0,0   
05BA   00 00 00 00 00 00 00 00 00 6D 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,0,0,lsb(xor),0,0,0,0,0,0   
05CA   00 00 00 00 00 00 00 00 00 00 00 00 00 00 29 00 DB   0,0,0,0,0,0,0,0,0,0,0,0,0,0,lsb(cmt),0   
05DA   00 00 00 00 00 00 00 48 00 00 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,lsb(max),0,0,0,0,0,0,0,0   
05EA   00 00 00 00 00 00 00 00 00 00 00 00 00 54 00 00 DB   0,0,0,0,0,0,0,0,0,0,0,0,0,lsb(min),0,0   
05FA   00 00 00 00 00 00 00 00 00 00 00 F8 00 00 00 00 DB   0,0,0,0,0,0,0,0,0,0,0,lsb(nil),0,0,0,0   
060A                             ;********************** PAGE 5 END *********************************************
060A                             ;********************** PAGE 6 BEGIN *********************************************
060A                             ; /abs absolute
060A                             ; num -- num
060A                ABS1:        
060A                ABSOLUTE:      
060A   E1                     POP   hl   
060B   CB 7C                  BIT   7,h   
060D   28 06                  JR   z,absolute1   
060F   AF                     XOR   a   
0610   95                     SUB   l   
0611   6F                     LD   l,a   
0612   9F                     SBC   a,a   
0613   94                     SUB   h   
0614   67                     LD   h,a   
0615                ABSOLUTE1:      
0615   E5                     PUSH   hl   
0616   DD E9                  JP   (ix)   
0618                             ; /alc
0618                             ; size -- adr
0618                ALC:         
0618                MEMALLOCATE:      
0618   DD E9                  JP   (ix)   
061A                             ; /aln length of an array, num elements
061A                             ; array* -- num
061A                ALN:         
061A                ARRAYLENGTH:      
061A   E1                     POP   hl   
061B   2B                     DEC   hl   ; msb size
061C   56                     LD   d,(hl)   
061D   2B                     DEC   hl   ; lsb size
061E   5E                     LD   e,(hl)   
061F   EB                     EX   de,hl   
0620                ARRAYLENGTH1:      
0620   E5                     PUSH   hl   
0621   DD E9                  JP   (ix)   
0623                             ; /bye
0623                BYE:         
0623   C3 42 0D               JP   coldBoot0   
0626                             ; /cgo cursorGo
0626                             ; row column --
0626                CGO:         
0626                CURSORGO:      
0626   D1                     POP   de   
0627   E1                     POP   hl   
0628   62                     LD   h,d   
0629   CD 7A 0E               CALL   ansiGoto   
062C   DD E9                  JP   (ix)   
062E                             ; /cll clear line
062E                             ; num --
062E                CLL:         
062E                CLEARLINE:      
062E   E1                     POP   hl   
062F   7D                     LD   a,l   
0630   E6 03                  AND   $03   
0632   CD 6B 0E               CALL   ansiClearLine   
0635   DD E9                  JP   (ix)   
0637                             ; /cls clear screen
0637                             ; --
0637                CLS:         
0637                CLEARSCREEN:      
0637   CD 62 0E               CALL   ansiClearScreen   
063A   DD E9                  JP   (ix)   
063C                             ; /cmv cursor move
063C                             ; x dir --
063C                CMV:         
063C                CURSORMOVE:      
063C   E1                     POP   hl   
063D   7D                     LD   a,l   
063E   E6 03                  AND   $03   
0640   C6 41                  ADD   a,"A"   
0642   67                     LD   h,a   
0643   D1                     POP   de   
0644   6B                     LD   l,e   
0645   CD 97 0E               CALL   ansiMove   
0648                CURSORMOVE1:      
0648   DD E9                  JP   (ix)   
064A                DEC:         
064A                DECBASE:      
064A   3E 0A                  LD   a,10   
064C                DECBASE1:      
064C   32 EF 5D               LD   (vNumBase),a   
064F   DD E9                  JP   (ix)   
0651                             ; /div
0651                DIV:         
0651   C3 87 07               JP   div1   
0654                             ; /ech
0654                             ; bool --
0654                ECH:         
0654                ECHO:        
0654   E1                     POP   hl   
0655   22 F1 5D               LD   (vEcho),hl   
0658   DD E9                  JP   (ix)   
065A                             ; /fal
065A                FAL:         
065A   C3 F8 09               JP   false1   
065D                             ; Z80 port input
065D                             ; /in
065D                             ; port -- value
065D                IN:          
065D                INPUT:       
065D   E1                     POP   hl   
065E   59                     LD   e,c   ; save IP
065F   4D                     LD   c,l   
0660   ED 68                  IN   l,(c)   
0662   26 00                  LD   h,0   
0664   4B                     LD   c,e   ; restore IP
0665   E5                     PUSH   hl   
0666   DD E9                  JP   (ix)   
0668                             ; /o Z80 port output
0668                             ; value port --
0668                OUT:         
0668                OUTPUT:      
0668   E1                     POP   hl   
0669   59                     LD   e,c   ; save IP
066A   4D                     LD   c,l   
066B   E1                     POP   hl   
066C   ED 69                  OUT   (c),l   
066E   4B                     LD   c,e   ; restore IP
066F   DD E9                  JP   (ix)   
0671                             ; /rec
0671                REC:         
0671                RECUR:       
0671   E1                     POP   hl   
0672   22 EC 5D               LD   (vRecurPtr),hl   
0675   DD E9                  JP   (ix)   
0677                             ; rem
0677                REM:         
0677                REMAIN:      
0677   2A FA 5D               LD   hl,(vRemain)   
067A   E5                     PUSH   hl   
067B   DD E9                  JP   (ix)   
067D                             ; /ret
067D                             ; --
067D                RET:         
067D                RETURN:      
067D   E1                     POP   hl   ; hl = condition, exit if true
067E   7D                     LD   a,l   
067F   B4                     OR   h   
0680   20 02                  JR   nz,return1   
0682   DD E9                  JP   (ix)   
0684                RETURN1:      
0684   C3 CC 08               JP   blockEnd   
0687                             ; /sbb
0687                SBB:         
0687                STRINGBEGIN:      
0687   21 FF FF               LD   hl,TRUE   ; string mode = true
068A   22 F2 5D               LD   (vStrMode),hl   
068D   18 27                  JR   stringEnd1   ; save hl in vBufPtr
068F                             ; /sbe
068F                             ; -- str*
068F                SBE:         
068F                STRINGEND:      
068F   21 00 00               LD   hl,FALSE   ; string mode = false
0692   22 F2 5D               LD   (vStrMode),hl   
0695   2A E8 5D               LD   hl,(vBufPtr)   ; append NUL to string
0698   AF                     XOR   a   
0699   77                     LD   (hl),a   
069A   23                     INC   hl   ; hl = string_end*
069B   ED 43 04 5E            LD   (vTemp1),bc   ; save IP
069F   11 00 5C               LD   de,BUFFER   ; de = string*
06A2   B7                     OR   a   ; bc = size
06A3   ED 52                  SBC   hl,de   
06A5   44 4D                  LD   bc,hl   
06A7   2A EA 5D               LD   hl,(vHeapPtr)   ; hl = hstring*
06AA   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06AB   D5                     PUSH   de   ; return hstring*
06AC   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06AE   ED 53 EA 5D            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06B2   ED 4B 04 5E            LD   bc,(vTemp1)   ; restore IP
06B6                STRINGEND1:      
06B6   21 00 5C               LD   hl,BUFFER   ; reset vBufPtr
06B9   22 E8 5D               LD   (vBufPtr),hl   
06BC   DD E9                  JP   (ix)   
06BE                             ; /scp string compare
06BE                SCP:         
06BE   D1                     POP   de   
06BF   E1                     POP   hl   
06C0   CD FE 0C               CALL   stringCompare   
06C3   E5                     PUSH   hl   
06C4   DD E9                  JP   (ix)   
06C6                             ; select case from an associative array of cases
06C6                             ; bool cases* --
06C6                SEL:         
06C6                SELECT:      
06C6   E1                     POP   hl   ; hl = case associative array [ key1 value1 ... ]
06C7   D1                     POP   de   ; de = select key
06C8   C5                     PUSH   bc   ; save IP
06C9   2B                     DEC   hl   ; bc = array length
06CA   46                     LD   b,(hl)   
06CB   2B                     DEC   hl   
06CC   4E                     LD   c,(hl)   
06CD   23                     INC   hl   
06CE   23                     INC   hl   
06CF   18 15                  JR   select2   
06D1                SELECT1:      
06D1   7E                     LD   a,(hl)   ; compare lsb case key with lsb select key, hl++
06D2   BB                     CP   e   
06D3   23                     INC   hl   ; hl++, flags are unaltered
06D4   20 0C                  JR   nz,select1a   
06D6   7E                     LD   a,(hl)   ; compare msb case key with msb select key, hl++
06D7   BA                     CP   d   
06D8   23                     INC   hl   ; hl++, flags are unaltered
06D9   20 08                  JR   nz,select1b   
06DB   5E                     LD   e,(hl)   
06DC   23                     INC   hl   
06DD   56                     LD   d,(hl)   
06DE   C1                     POP   bc   
06DF   C3 A0 03               JP   go1   
06E2                SELECT1A:      
06E2   23                     INC   hl   
06E3                SELECT1B:      
06E3   23                     INC   hl   
06E4   23                     INC   hl   
06E5   0B                     DEC   bc   
06E6                SELECT2:      
06E6   79                     LD   a,c   
06E7   B0                     OR   b   
06E8   20 E7                  JR   nz,select1   
06EA   C1                     POP   bc   
06EB   DD E9                  JP   (ix)   
06ED                             ; /sln
06ED                SLN:         
06ED   D1                     POP   de   
06EE   CD 13 0D               CALL   stringLength   
06F1   E5                     PUSH   hl   
06F2   DD E9                  JP   (ix)   
06F4                             ; /tru
06F4                TRU:         
06F4   C3 F2 09               JP   true1   
06F7                             ; /var
06F7                             ; --
06F7                VAR:         
06F7                VARIABLES:      
06F7   21 00 5D               LD   hl,VARS   
06FA   C3 E6 0B               JP   constant   
06FD                             ;********************** PAGE 6 END *********************************************
06FD                          ALIGN   $100   
0700                             ;********************** PAGE 7 BEGIN *********************************************
0700                             ; /adr addrOf
0700                             ; char -- addr
0700                ADR:         
0700                ADDROF:      
0700   E1                     POP   hl   ; a = char
0701   7D                     LD   a,l   
0702   CD 2C 0C               CALL   getVarAddr   
0705   E5                     PUSH   hl   
0706                ADDROF2:      
0706   DD E9                  JP   (ix)   
0708                             ; 13
0708                             ; /whi while true else break from loop
0708                             ; --
0708                WHI:         
0708                WHILE:       
0708   E1                     POP   hl   ; hl = condition, break if false
0709   7D                     LD   a,l   
070A   B4                     OR   h   
070B   28 02                  JR   z,while1   
070D   DD E9                  JP   (ix)   
070F                WHILE1:      
070F   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0711   FD 54                  LD   d,iyh   
0713   21 08 00               LD   hl,8   
0716   19                     ADD   hl,de   
0717   23                     INC   hl   
0718   23                     INC   hl   
0719   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
071C   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
071F   C3 CC 08               JP   blockEnd   
0722                             ; /byt
0722                BYT:         
0722                BYTEMODE:      
0722   3E 01                  LD   a,1   
0724                BYTEMODE1:      
0724   32 EE 5D               LD   (vDataWidth),a   
0727   DD E9                  JP   (ix)   
0729                             ; //
0729                CMT:         
0729                COMMENT:      
0729   03                     INC   bc   ; point to next char
072A   0A                     LD   a,(bc)   
072B   FE 20                  CP   " "   ; terminate on any char less than SP
072D   30 FA                  JR   nc,comment   
072F   0B                     DEC   bc   
0730   DD E9                  JP   (ix)   
0732                HEX:         
0732   3E 10                  LD   a,16   
0734   C3 4C 06               JP   decBase1   
0737                ERROR1:      
0737   21 01 00               LD   hl,1   ; error 1: unknown command
073A   C3 19 0E               JP   error   
073D                             ; /fre
073D                             ; adr --
073D                FRE:         
073D                MEMFREE:      
073D   E1                     POP   hl   
073E                MEMFREE1:      
073E   22 EA 5D               LD   (vHeapPtr),hl   
0741   DD E9                  JP   (ix)   
0743                             ; /fra
0743                             ; adr --
0743                FRA:         
0743                MEMFREEARRAY:      
0743   E1                     POP   hl   
0744   2B                     DEC   hl   
0745   2B                     DEC   hl   
0746   18 F6                  JR   memFree1   
0748                             ; /max maximum
0748                             ; a b -- c
0748                MAX:         
0748                MAXIMUM:      
0748   E1                     POP   hl   
0749   D1                     POP   de   
074A   E5                     PUSH   hl   
074B   B3                     OR   e   
074C   ED 52                  SBC   hl,de   
074E   30 02                  JR   nc,maximum1   
0750   E1                     POP   hl   
0751   D5                     PUSH   de   
0752                MAXIMUM1:      
0752   DD E9                  JP   (ix)   
0754                             ; /min minimum
0754                             ; a b -- c
0754                MIN:         
0754                MINIMUM:      
0754   E1                     POP   hl   
0755   D1                     POP   de   
0756   E5                     PUSH   hl   
0757   B3                     OR   e   
0758   ED 52                  SBC   hl,de   
075A   38 02                  JR   c,minimum1   
075C   E1                     POP   hl   
075D   D5                     PUSH   de   
075E                MINIMUM1:      
075E   DD E9                  JP   (ix)   
0760                             ; /voi clear out returned values
0760                             ; ?? --
0760                VOI:         
0760                VOID:        
0760   FD 5D                  LD   e,iyl   
0762   FD 54                  LD   d,iyh   
0764   EB                     EX   de,hl   
0765   F9                     LD   sp,hl   
0766   DD E9                  JP   (ix)   
0768                             ; /wrd
0768                WRD:         
0768                WORDMODE:      
0768   3E 02                  LD   a,2   
076A   C3 24 07               JP   byteMode1   
076D                             ; /xor
076D                XOR:         
076D   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
076E                XOR1:        
076E   E1                     POP   hl   
076F   7B                     LD   a,e   
0770   AD                     XOR   l   
0771   6F                     LD   l,a   
0772   7A                     LD   a,d   
0773   AC                     XOR   h   
0774   67                     LD   h,a   
0775   C3 D8 02               JP   add3   
0778                             ; /cur cursor hide / show
0778                             ; bool --
0778                CUR:         
0778                CURSORSHOW:      
0778   E1                     POP   hl   
0779   23                     INC   hl   
077A   7D                     LD   a,l   
077B   B4                     OR   h   
077C   3E 68                  LD   a,"h"   
077E   28 02                  JR   z,cursorShow1   
0780   3E 6C                  LD   a,"l"   
0782                CURSORSHOW1:      
0782   CD B6 0E               CALL   ansiCursorShow   
0785   DD E9                  JP   (ix)   
0787                             ;*******************************************************************
0787                             ; implementations continued
0787                             ;*******************************************************************
0787                DIV1:        
0787   E1                     POP   hl   ; hl = arg_b
0788   D1                     POP   de   ; de = arg_a
0789   03                     INC   bc   
078A   0A                     LD   a,(bc)   
078B   FE 3D                  CP   "="   
078D   28 02                  JR   z,div2   
078F   0B                     DEC   bc   ; /
0790   EB                     EX   de,hl   
0791                DIV2:        
0791   F5                     PUSH   af   ; preserve af, bc
0792   C5                     PUSH   bc   
0793   44 4D                  LD   bc,hl   
0795   CD 5D 0A               CALL   divide   
0798   EB                     EX   de,hl   
0799   ED 53 FA 5D            LD   (vRemain),de   
079D   C1                     POP   bc   ; restore
079E   F1                     POP   af   
079F   C3 9D 02               JP   sub3   
07A2                COMMA:       
07A2   03                     INC   bc   
07A3   0A                     LD   a,(bc)   
07A4   FE 63                  CP   "c"   ; .c print char
07A6   28 07                  JR   z,readChar   
07A8   FE 73                  CP   "s"   ; .s print string
07AA   28 0C                  JR   z,readString   
07AC   0B                     DEC   bc   
07AD   18 2B                  JR   readNumber   ; .  print number, fall through
07AF                READCHAR:      
07AF   CD 81 00               CALL   getchar   
07B2   26 00                  LD   h,0   
07B4   6F                     LD   l,a   
07B5   E5                     PUSH   hl   
07B6   DD E9                  JP   (ix)   
07B8                READSTRING:      
07B8   ED 5B EA 5D            LD   de,(vHeapPtr)   
07BC   D5                     PUSH   de   ; return start of string
07BD                READSTRING1:      
07BD   CD 81 00               CALL   getchar   
07C0   FE 0D                  CP   "\r"   
07C2   28 0D                  JR   z,readString2   
07C4   12                     LD   (de),a   
07C5   13                     INC   de   
07C6   3A F1 5D               LD   a,(vEcho)   
07C9   3C                     INC   a   
07CA   20 F1                  JR   nz,readString1   
07CC   CD 85 00               CALL   putchar   
07CF   18 EC                  JR   readString1   
07D1                READSTRING2:      
07D1   AF                     XOR   a   
07D2   12                     LD   (de),a   
07D3   13                     INC   de   
07D4   ED 53 EA 5D            LD   (vHeapPtr),de   
07D8   DD E9                  JP   (ix)   
07DA                READNUMBER:      
07DA   DD E5                  PUSH   ix   
07DC                          ;*Macro unroll:  PERFORM readString
07DC   DD 21 E3 07            LD   ix,performM_1685S1225   
07E0   C3 B8 07               JP   readString   
07E3                PERFORMM_1685S1225:      
07E3   60 69                  LD   hl,bc   ; save bc, hl = string*
07E5   E3                     EX   (sp),hl   
07E6   22 EA 5D               LD   (vHeapPtr),hl   ; restore heap* to before string
07E9   44 4D                  LD   bc,hl   
07EB   0A                     LD   a,(bc)   
07EC   FE 2D                  CP   "-"   
07EE   28 11                  JR   z,readNumber1   
07F0   FE 24                  CP   "$"   
07F2   28 17                  JR   z,readNumber2   
07F4   FE 30                  CP   "0"   
07F6   30 09                  JR   nc,readNumber1   
07F8   FE 3A                  CP   "9"+1   
07FA   38 05                  JR   c,readNumber1   
07FC   21 00 00               LD   hl,0   
07FF   18 12                  JR   readNumber3   
0801                READNUMBER1:      
0801                          ;*Macro unroll:  PERFORM num
0801   DD 21 08 08            LD   ix,performM_1702S1242   
0805   C3 9C 08               JP   num   
0808                PERFORMM_1702S1242:      
0808   E1                     POP   hl   
0809   18 08                  JR   readNumber3   
080B                READNUMBER2:      
080B                          ;*Macro unroll:  PERFORM hexNum
080B   DD 21 12 08            LD   ix,performM_1706S1246   
080F   C3 23 08               JP   hexNum   
0812                PERFORMM_1706S1246:      
0812   E1                     POP   hl   
0813                READNUMBER3:      
0813   C1                     POP   bc   
0814   DD E1                  POP   ix   
0816   E5                     PUSH   hl   
0817   DD E9                  JP   (ix)   
0819                             ; ~ bitwise invert
0819                TILDE:       
0819                INVERT:      
0819   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
081A   7D                     LD   a,l   
081B   2F                     CPL      
081C   6F                     LD   l,a   
081D   7C                     LD   a,h   
081E   2F                     CPL      
081F   67                     LD   h,a   
0820   C3 D8 02               JP   add3   
0823                             ; $ hex                         ; 22
0823                DOLLAR:      
0823                HEXNUM:      
0823   21 00 00               LD   hl,0   ; Clear hl to accept the number
0826                HEXNUM1:      
0826   03                     INC   bc   
0827   0A                     LD   a,(bc)   ; Get the character which is a numeral
0828   CB 77                  BIT   6,a   ; is it uppercase alpha?
082A   28 02                  JR   z,hexnum2   ; no a decimal
082C   D6 07                  SUB   7   ; sub 7  to make $a - $F
082E                HEXNUM2:      
082E   D6 30                  SUB   $30   ; form decimal digit
0830   DA BE 08               JP   c,num2   
0833   FE 10                  CP   $0F+1   
0835   D2 BE 08               JP   nc,num2   
0838   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0839   29                     ADD   hl,hl   ; 4X
083A   29                     ADD   hl,hl   ; 8X
083B   29                     ADD   hl,hl   ; 16X
083C   85                     ADD   a,l   ; add into bottom of hl
083D   6F                     LD   l,a   
083E   18 E6                  JR   hexnum1   
0840                             ; ? if                            23
0840                             ; condition then else -- value
0840                QUESTION:      
0840                IF:          
0840   D1                     POP   de   ; de = else
0841   E1                     POP   hl   ; hl = then
0842   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0843   7C                     LD   a,h   
0844   B5                     OR   l   
0845   E1                     POP   hl   ; hl = then
0846   CA A0 03               JP   z,go1   ; if z de = else
0849   EB                     EX   de,hl   ; condition = false, de = then
084A   C3 A0 03               JP   go1   
084D                             ; string                        ;38
084D                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
084D                QUOTE:       
084D                STRING:      
084D   2A EA 5D               LD   hl,(vHeapPtr)   ; hl = heap*
0850   E5                     PUSH   hl   ; save start of string
0851   0A                     LD   a,(bc)   
0852   5F                     LD   e,a   ; e = matching terminator
0853   03                     INC   bc   ; point to next char
0854   18 03                  JR   string2   
0856                STRING1:      
0856   77                     LD   (hl),a   
0857   23                     INC   hl   ; increase count
0858   03                     INC   bc   ; point to next char
0859                STRING2:      
0859   0A                     LD   a,(bc)   
085A   BB                     CP   e   ; is it the string terminator
085B   28 02                  JR   z,string3   
085D   18 F7                  JR   string1   
085F                STRING3:      
085F   AF                     XOR   a   ; write NUL to terminate string
0860   77                     LD   (hl),a   ; hl = end of string
0861   23                     INC   hl   
0862   22 EA 5D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0865   DD E9                  JP   (ix)   
0867                             ; %a .. %z                      43
0867                             ; -- value
0867                             ; returns value of arg
0867                PERCENT:      
0867                ARG:         
0867   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
086A   FD 56 05               LD   d,(iy+5)   
086D   EB                     EX   de,hl   
086E   7D                     LD   a,l   ; arg_list* == null, skip
086F   B4                     OR   h   
0870   28 1A                  JR   z,arg0a   
0872   23                     INC   hl   ; a = num_args, hl = arg_list*
0873   7E                     LD   a,(hl)   
0874   23                     INC   hl   
0875   B7                     OR   a   
0876   28 14                  JR   z,arg0a   ; num_args == 0, skip
0878   5F                     LD   e,a   ; e = a = num_args
0879   03                     INC   bc   ; a = next char = dollar_name
087A   0A                     LD   a,(bc)   
087B   C5                     PUSH   bc   ; save IP
087C   43                     LD   b,e   ; b = e = num_args
087D   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0880   FD 56 03               LD   d,(iy+3)   
0883                ARG0:        
0883   1B                     DEC   de   ; a = dollar_name, de = next arg*
0884   1B                     DEC   de   
0885   BE                     CP   (hl)   
0886   28 09                  JR   z,arg1   
0888   23                     INC   hl   ; hl = next arg_list*
0889   10 F8                  DJNZ   arg0   
088B   C1                     POP   bc   ; no match, restore IP
088C                ARG0A:       
088C   11 00 00               LD   de,0   ; return 0
088F   18 08                  JR   arg1a   
0891                ARG1:        
0891   C1                     POP   bc   ; restore IP
0892   EB                     EX   de,hl   ; hl = arg*
0893   22 F8 5D               LD   (vPointer),hl   ; store arg* in setter
0896   5E                     LD   e,(hl)   
0897   23                     INC   hl   
0898   56                     LD   d,(hl)   ; de = arg
0899                ARG1A:       
0899   D5                     PUSH   de   ; push arg
089A   DD E9                  JP   (ix)   
089C                             ; 0..9 number                   37
089C                NUM:         
089C   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
089F   0A                     LD   a,(bc)   ; Get numeral or -
08A0   FE 2D                  CP   "-"   
08A2   20 01                  JR   nz,num0   
08A4   03                     INC   bc   ; move to next char, no flags affected
08A5                NUM0:        
08A5   08                     EX   af,af'   ; save zero flag = 0 for later
08A6                NUM1:        
08A6   0A                     LD   a,(bc)   ; read digit
08A7   D6 30                  SUB   "0"   ; less than 0?
08A9   38 13                  JR   c,num2   ; not a digit, exit loop
08AB   FE 0A                  CP   10   ; greater that 9?
08AD   30 0F                  JR   nc,num2   ; not a digit, exit loop
08AF   03                     INC   bc   ; inc IP
08B0   54 5D                  LD   de,hl   ; multiply hl * 10
08B2   29                     ADD   hl,hl   
08B3   29                     ADD   hl,hl   
08B4   19                     ADD   hl,de   
08B5   29                     ADD   hl,hl   
08B6   85                     ADD   a,l   ; add digit in a to hl
08B7   6F                     LD   l,a   
08B8   3E 00                  LD   a,0   
08BA   8C                     ADC   a,h   
08BB   67                     LD   h,a   
08BC   18 E8                  JR   num1   
08BE                NUM2:        
08BE   0B                     DEC   bc   
08BF   08                     EX   af,af'   ; restore zero flag
08C0   20 07                  JR   nz,num3   
08C2   EB                     EX   de,hl   ; negate the value of hl
08C3   21 00 00               LD   hl,0   
08C6   B7                     OR   a   ; jump to sub2
08C7   ED 52                  SBC   hl,de   
08C9                NUM3:        
08C9   E5                     PUSH   hl   ; Put the number on the stack
08CA   DD E9                  JP   (ix)   ; and process the next character
08CC                             ; }                               58
08CC                RBRACE:      
08CC                BLOCKEND:      
08CC   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
08CF   FD 56 01               LD   d,(iy+1)   
08D2   ED 53 04 5E            LD   (vTemp1),de   
08D6   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
08D9   FD 56 07               LD   d,(iy+7)   
08DC   ED 53 06 5E            LD   (vTemp2),de   
08E0   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
08E3   FD 56 03               LD   d,(iy+3)   
08E6   EB                     EX   de,hl   
08E7   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
08EA   FD 56 01               LD   d,(iy+1)   
08ED   13                     INC   de   ; for carry flag <=
08EE   B7                     OR   a   
08EF   ED 52                  SBC   hl,de   
08F1   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
08F3   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
08F5   FD 5D                  LD   e,iyl   
08F7   21 08 00               LD   hl,8   
08FA   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
08FB   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
08FC   18 0C                  JR   blockEnd2   
08FE                BLOCKEND1:      ; same scope
08FE   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0901   FD 56 03               LD   d,(iy+3)   
0904   EB                     EX   de,hl   
0905   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0907   FD 5D                  LD   e,iyl   
0909   EB                     EX   de,hl   
090A                BLOCKEND2:      
090A   44 4D                  LD   bc,hl   ; bc = hl = BP
090C   B7                     OR   a   ; hl = BP - SP = count
090D   ED 72                  SBC   hl,sp   
090F   7D                     LD   a,l   
0910   B4                     OR   h   
0911   28 09                  JR   z,blockEnd3   
0913   C5                     PUSH   bc   ; bc = count, hl = BP
0914   44 4D                  LD   bc,hl   
0916   E1                     POP   hl   
0917   2B                     DEC   hl   ; hl = BP-1
0918   1B                     DEC   de   ; de = args*-1
0919   ED B8                  LDDR      
091B   13                     INC   de   
091C                BLOCKEND3:      
091C   EB                     EX   de,hl   ; sp = de = new tos*
091D   F9                     LD   sp,hl   
091E   ED 4B 06 5E            LD   bc,(vTemp2)   
0922   FD 2A 04 5E            LD   iy,(vTemp1)   
0926   ED 5B EC 5D            LD   de,(vRecurPtr)   ; de = recur vector
092A   7B                     LD   a,e   ; check for NUL
092B   B2                     OR   d   
092C   20 02                  JR   nz,blockEnd4   
092E   DD E9                  JP   (ix)   
0930                BLOCKEND4:      
0930   21 00 00               LD   hl,0   ; clear recur vector
0933   22 EC 5D               LD   (vRecurPtr),hl   
0936   C3 A0 03               JP   go1   ; execute de
0939                GOBLOCK:      
0939   ED 53 04 5E            LD   (vTemp1),de   ; save de
093D   21 00 5B               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0940   FD 54                  LD   d,iyh   
0942   FD 5D                  LD   e,iyl   
0944   B7                     OR   a   ; if stack* == BP then this is the root_scope
0945   ED 52                  SBC   hl,de   
0947   ED 5B 04 5E            LD   de,(vTemp1)   ; restore de
094B   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
094C   B4                     OR   h   
094D   3E 00                  LD   a,0   
094F   28 6A                  JR   z,goFunc8   
0951   C5                     PUSH   bc   ; push IP
0952   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0955   FD 46 05               LD   b,(iy+5)   
0958   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
095B   FD 66 03               LD   h,(iy+3)   
095E                GOBLOCK2:      
095E   C5                     PUSH   bc   ; arg_list*
095F   E5                     PUSH   hl   ; first_arg*
0960   FD E5                  PUSH   iy   ; push BP
0962   FD 21 00 00            LD   iy,0   ; BP = SP
0966   FD 39                  ADD   iy,sp   
0968                GOBLOCK3:      
0968   42 4B                  LD   bc,de   ; bc = de = block*-1
096A   DD E9                  JP   (ix)   
096C                GOFUNC:      ; execute func
096C   EB                     EX   de,hl   ; hl = func*
096D   5E                     LD   e,(hl)   ; de = partial_array*
096E   23                     INC   hl   
096F   56                     LD   d,(hl)   
0970   23                     INC   hl   
0971   7B                     LD   a,e   ; if partial_array* == null skip
0972   B2                     OR   d   
0973   28 21                  JR   z,goFunc3   
0975   ED 43 04 5E            LD   (vTemp1),bc   
0979   22 06 5E               LD   (vTemp2),hl   ; save bc,hl
097C   EB                     EX   de,hl   ; hl = partial_array*
097D   2B                     DEC   hl   ; bc = count
097E   46                     LD   b,(hl)   
097F   2B                     DEC   hl   
0980   4E                     LD   c,(hl)   
0981   23                     INC   hl   ; hl = array data*
0982   23                     INC   hl   
0983   18 06                  JR   goFunc2   ; push each item on stack
0985                GOFUNC1:      
0985   5E                     LD   e,(hl)   ; de = partial item
0986   23                     INC   hl   
0987   56                     LD   d,(hl)   
0988   23                     INC   hl   
0989   D5                     PUSH   de   ; push on stack
098A   0B                     DEC   bc   
098B                GOFUNC2:      
098B   79                     LD   a,c   ; if count != 0 then loop
098C   B0                     OR   b   
098D   20 F6                  JR   nz,goFunc1   
098F   ED 4B 04 5E            LD   bc,(vTemp1)   ; restore bc
0993   2A 06 5E               LD   hl,(vTemp2)   ; restore hl
0996                GOFUNC3:      
0996   5E                     LD   e,(hl)   ; de = block*
0997   23                     INC   hl   
0998   56                     LD   d,(hl)   
0999   23                     INC   hl   
099A   ED 53 04 5E            LD   (vTemp1),de   ; save block*
099E   5E                     LD   e,(hl)   ; de = arg_list*
099F   23                     INC   hl   
09A0   56                     LD   d,(hl)   
09A1   23                     INC   hl   
09A2   EB                     EX   de,hl   ; hl = arg_list*
09A3   ED 5B 04 5E            LD   de,(vTemp1)   ; restore de = block*
09A7   7D                     LD   a,l   ; if arg_list* == null a = 0
09A8   B4                     OR   h   
09A9   20 03                  JR   nz,goFunc4   
09AB   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
09AC   18 0D                  JR   goFunc8   
09AE                GOFUNC4:      ; allocate locals
09AE   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
09AF   18 03                  JR   goFunc6   
09B1                GOFUNC5:      ; loop
09B1   3B                     DEC   sp   
09B2   3B                     DEC   sp   
09B3   3D                     DEC   a   
09B4                GOFUNC6:      
09B4   B7                     OR   a   
09B5   20 FA                  JR   nz,goFunc5   ; end loop
09B7                GOFUNC7:      
09B7   23                     INC   hl   ; a = num_args* x 2
09B8   7E                     LD   a,(hl)   
09B9   2B                     DEC   hl   
09BA   87                     ADD   a,a   ; a *= 2
09BB                GOFUNC8:      
09BB   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
09BC   44 4D                  LD   bc,hl   
09BE   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
09C1   85                     ADD   a,l   
09C2   6F                     LD   l,a   
09C3   39                     ADD   hl,sp   
09C4   18 98                  JR   goBlock2   
09C6                             ; =                              21
09C6                             ; value _oldValue --            ; uses address in vPointer 15
09C6                ASSIGN:      
09C6   E1                     POP   hl   ; discard last accessed value
09C7   E1                     POP   hl   ; hl = new value
09C8                ASSIGN0:      
09C8   EB                     EX   de,hl   ; de = new value
09C9   2A F8 5D               LD   hl,(vPointer)   
09CC                ASSIGN1:      ; entry point from defineEnd
09CC   73                     LD   (hl),e   
09CD   3A EE 5D               LD   a,(vDataWidth)   
09D0   3D                     DEC   a   ; is it byte?
09D1   28 02                  JR   z,assign2   
09D3   23                     INC   hl   
09D4   72                     LD   (hl),d   
09D5                ASSIGN2:      
09D5   DD E9                  JP   (ix)   
09D7                             ; hl = value1, de = value2
09D7                             ; hl = result
09D7                EQUALS:      
09D7   B7                     OR   a   ; reset the carry flag
09D8   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
09DA   28 16                  JR   z,true1   
09DC   18 1A                  JR   false1   
09DE                NOTEQUALS:      
09DE   B7                     OR   a   ; reset the carry flag
09DF   ED 52                  SBC   hl,de   
09E1   20 0F                  JR   nz,true1   
09E3   18 13                  JR   false1   
09E5                             ; hl = value1 de = value2
09E5                             ; hl = result
09E5                LESSTHANEQ:      
09E5   B7                     OR   a   
09E6   ED 52                  SBC   hl,de   
09E8   18 05                  JR   lessthan1   
09EA                             ; hl = value1 de = value2
09EA                             ; hl = result
09EA                LESSTHAN:      
09EA   B7                     OR   a   
09EB   ED 52                  SBC   hl,de   
09ED   28 09                  JR   z,false1   
09EF                LESSTHAN1:      
09EF   FA F8 09               JP   m,false1   
09F2                TRUE1:       
09F2   21 FF FF               LD   hl,TRUE   
09F5   E5                     PUSH   hl   
09F6   DD E9                  JP   (ix)   
09F8                NULL1:       
09F8                NIL:         
09F8                FALSE1:      
09F8   21 00 00               LD   hl,FALSE   
09FB   E5                     PUSH   hl   
09FC   DD E9                  JP   (ix)   
09FE                SPREAD:      
09FE   E1                     POP   hl   ; hl = array*
09FF   ED 43 04 5E            LD   (vTemp1),bc   ; save bc
0A03   2B                     DEC   hl   ; bc = length
0A04   46                     LD   b,(hl)   
0A05   2B                     DEC   hl   
0A06   4E                     LD   c,(hl)   
0A07   23                     INC   hl   ; move back to array 0
0A08   23                     INC   hl   
0A09   18 0D                  JR   spread3   
0A0B                SPREAD1:      
0A0B   5E                     LD   e,(hl)   ; e = lsb data at hl
0A0C   23                     INC   hl   
0A0D   3A EE 5D               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0A10   57                     LD   d,a   
0A11   15                     DEC   d   
0A12   28 02                  JR   z,spread2   
0A14   56                     LD   d,(hl)   ; d = msb data at hl
0A15   23                     INC   hl   
0A16                SPREAD2:      
0A16   D5                     PUSH   de   ; return de
0A17   0B                     DEC   bc   ; count--
0A18                SPREAD3:      
0A18   79                     LD   a,c   ; exit loop if bc == 0
0A19   B0                     OR   b   
0A1A   20 EF                  JR   nz,spread1   
0A1C   ED 4B 04 5E            LD   bc,(vTemp1)   ; restore bc
0A20   DD E9                  JP   (ix)   
0A22                             ; shiftLeft
0A22                             ; value count <<
0A22                             ; count variable <<=
0A22                SHIFTLEFT:      
0A22   E1                     POP   hl   ; de = arg_a, hl = arg_b
0A23   D1                     POP   de   
0A24   03                     INC   bc   
0A25   0A                     LD   a,(bc)   
0A26   FE 3D                  CP   "="   
0A28   28 02                  JR   z,shiftLeft2   
0A2A   0B                     DEC   bc   
0A2B   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0A2C                SHIFTLEFT2:      
0A2C   ED 43 04 5E            LD   (vTemp1),bc   ; save IP
0A30   43                     LD   b,e   ; b = loop counter
0A31   04                     INC   b   ; test for counter=0 case
0A32   18 01                  JR   shiftLeft4   
0A34                SHIFTLEFT3:      
0A34   29                     ADD   hl,hl   ; left shift hl
0A35                SHIFTLEFT4:      
0A35   10 FD                  DJNZ   shiftLeft3   
0A37   ED 4B 04 5E            LD   bc,(vTemp1)   ; restore IP
0A3B   C3 9D 02               JP   sub3   
0A3E                             ; shiftRight
0A3E                             ; value count >>
0A3E                             ; count variable >>=
0A3E                SHIFTRIGHT:      
0A3E   E1                     POP   hl   ; de = arg_a, hl = arg_b
0A3F   D1                     POP   de   
0A40   03                     INC   bc   
0A41   0A                     LD   a,(bc)   
0A42   FE 3D                  CP   "="   
0A44   28 02                  JR   z,shiftRight2   
0A46   0B                     DEC   bc   
0A47   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0A48                SHIFTRIGHT2:      
0A48   ED 43 04 5E            LD   (vTemp1),bc   ; save IP
0A4C   43                     LD   b,e   ; b = loop counter
0A4D   04                     INC   b   ; test for counter=0 case
0A4E   18 04                  JR   shiftRight4   
0A50                SHIFTRIGHT3:      
0A50   CB 3C                  SRL   h   ; right shift hl
0A52   CB 1D                  RR   l   
0A54                SHIFTRIGHT4:      
0A54   10 FA                  DJNZ   shiftRight3   
0A56   ED 4B 04 5E            LD   bc,(vTemp1)   ; restore IP
0A5A   C3 9D 02               JP   sub3   
0A5D                             ; division subroutine.
0A5D                             ; bc: divisor, de: dividend, hl: remainder
0A5D                DIVIDE:      
0A5D   21 00 00               LD   hl,0   ; zero the remainder
0A60   3E 10                  LD   a,16   ; loop counter
0A62                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0A62   CB 21                  SLA   c   
0A64   CB 10                  RL   b   
0A66   ED 6A                  ADC   hl,hl   
0A68   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0A6A   38 03                  JR   c,divide2   
0A6C   0C                     INC   c   
0A6D   18 01                  JR   divide3   
0A6F                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0A6F   19                     ADD   hl,de   
0A70                DIVIDE3:      
0A70   3D                     DEC   a   
0A71   20 EF                  JR   nz,divide1   
0A73   50 59                  LD   de,bc   ; result from bc to de
0A75   C9                     RET      
0A76                DOTNEXT:      
0A76   3A F2 5D               LD   a,(vStrMode)   ; if string mode then exit
0A79   3C                     INC   a   
0A7A   20 02                  JR   nz,dotNext1   
0A7C   DD E9                  JP   (ix)   
0A7E                DOTNEXT1:      
0A7E   11 00 5C               LD   de,BUFFER   
0A81   2A E8 5D               LD   hl,(vBufPtr)   
0A84   36 00                  LD   (hl),0   ; store NUL at end of string
0A86   ED 53 E8 5D            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0A8A   EB                     EX   de,hl   ; hl = BUFFER
0A8B   CD 47 0C               CALL   putstr   
0A8E   DD E9                  JP   (ix)   
0A90                             ; arg_list - parses arg_list e.g. ab:c
0A90                             ; -- arg_list*
0A90                PARSEARGS:      
0A90   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0A93   2A EA 5D               LD   hl,(vHeapPtr)   ; hl = heap*
0A96   E5                     PUSH   hl   ; save start of arg_list
0A97   23                     INC   hl   ; skip length fields to start of string
0A98   23                     INC   hl   
0A99   03                     INC   bc   ; point to next char
0A9A                PARSEARGS1:      
0A9A   0A                     LD   a,(bc)   
0A9B   FE 3A                  CP   ":"   ; ":" switches from args to locals
0A9D   20 03                  JR   nz,parseArgs1a   
0A9F   14                     INC   d   ; non zero value local count acts as flag
0AA0   18 10                  JR   parseArgs3   
0AA2                PARSEARGS1A:      
0AA2   FE 61                  CP   "a"   ; < "a" terminates arg_list
0AA4   38 0F                  JR   c,parseArgs4   
0AA6   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0AA8   30 0B                  JR   nc,parseArgs4   
0AAA                PARSEARGS2:      
0AAA   77                     LD   (hl),a   
0AAB   23                     INC   hl   
0AAC   1C                     INC   e   ; increase arg count
0AAD   AF                     XOR   a   
0AAE   B2                     OR   d   
0AAF   28 01                  JR   z,parseArgs3   
0AB1   14                     INC   d   ; if d > 0 increase local count
0AB2                PARSEARGS3:      
0AB2   03                     INC   bc   ; point to next char
0AB3   18 E5                  JR   parseArgs1   
0AB5                PARSEARGS4:      
0AB5   0B                     DEC   bc   
0AB6   AF                     XOR   a   
0AB7   B2                     OR   d   
0AB8   28 01                  JR   z,parseArgs5   
0ABA   15                     DEC   d   ; remove initial inc
0ABB                PARSEARGS5:      
0ABB   23                     INC   hl   
0ABC   22 EA 5D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0ABF   E1                     POP   hl   ; hl = start of arg_list
0AC0   72                     LD   (hl),d   ; write number of locals at start - 1
0AC1   23                     INC   hl   
0AC2   73                     LD   (hl),e   ; write number of args + locals at start - 2
0AC3   2B                     DEC   hl   
0AC4   E3                     EX   (sp),hl   
0AC5   E9                     JP   (hl)   
0AC6                             ; create block: parses block e.g. 00bbIC4uLi4g
0AC6                             ; -- block*
0AC6                PARSEBLOCK:      
0AC6   C5                     PUSH   bc   ; return pointer to first { of block
0AC7   03                     INC   bc   
0AC8   16 01                  LD   d,1   ; nesting: count first parenthesis
0ACA                PARSEBLOCK1:      ; Skip to end of definition
0ACA   0A                     LD   a,(bc)   ; Get the next character
0ACB   03                     INC   bc   ; Point to next character
0ACC   FE 21                  CP   " " + 1   ; ignore whitespace
0ACE   38 FA                  JR   c,parseBlock1   
0AD0   FE 27                  CP   "'"   ; quote char
0AD2   28 0F                  JR   z,parseBlock2   
0AD4   FE 22                  CP   DQ   ; double quote char
0AD6   28 0B                  JR   z,parseBlock2   
0AD8   FE 60                  CP   "`"   ; grave char
0ADA   28 07                  JR   z,parseBlock2   
0ADC   CB 7A                  BIT   7,d   
0ADE   20 EA                  JR   nz,parseBlock1   
0AE0   C3 E9 0A               JP   parseBlock3   
0AE3                PARSEBLOCK2:      
0AE3   3E 80                  LD   a,$80   
0AE5   AA                     XOR   d   
0AE6   57                     LD   d,a   
0AE7   18 E1                  JR   parseBlock1   
0AE9                PARSEBLOCK3:      
0AE9   FE 28                  CP   "("   
0AEB   28 16                  JR   z,parseBlock4   
0AED   FE 7B                  CP   "{"   
0AEF   28 12                  JR   z,parseBlock4   
0AF1   FE 5B                  CP   "["   
0AF3   28 0E                  JR   z,parseBlock4   
0AF5   FE 29                  CP   ")"   
0AF7   28 0D                  JR   z,parseBlock5   
0AF9   FE 7D                  CP   "}"   
0AFB   28 09                  JR   z,parseBlock5   
0AFD   FE 5D                  CP   "]"   
0AFF   28 05                  JR   z,parseBlock5   
0B01   18 C7                  JR   parseBlock1   
0B03                PARSEBLOCK4:      
0B03   14                     INC   d   
0B04   18 C4                  JR   parseBlock1   
0B06                PARSEBLOCK5:      
0B06   15                     DEC   d   
0B07   20 C1                  JR   nz,parseBlock1   ; get the next element
0B09   60 69                  LD   hl,bc   ; hl = IP
0B0B   11 22 5E               LD   de,HEAP   ; is IP pointing to object in heap
0B0E   B7                     OR   a   ; IP - HEAP
0B0F   ED 52                  SBC   hl,de   
0B11   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0B13   28 1C                  JR   z,parseBlock6   
0B15   60 69                  LD   hl,bc   ; hl = IP
0B17   D1                     POP   de   ; de = block*
0B18   ED 43 04 5E            LD   (vTemp1),bc   ; save IP
0B1C   B7                     OR   a   ; bc = size
0B1D   ED 52                  SBC   hl,de   
0B1F   44 4D                  LD   bc,hl   
0B21   EB                     EX   de,hl   ; hl = block* de = heap*
0B22   ED 5B EA 5D            LD   de,(vHeapPtr)   
0B26   D5                     PUSH   de   ; return hblock*
0B27   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0B29   ED 53 EA 5D            LD   (vHeapPtr),de   ; heap* += size
0B2D   ED 4B 04 5E            LD   bc,(vTemp1)   ; restore IP
0B31                PARSEBLOCK6:      
0B31   0B                     DEC   bc   ; balanced, exit
0B32   E1                     POP   hl   ; hl = block*
0B33   E3                     EX   (sp),hl   ; return to caller
0B34   E9                     JP   (hl)   
0B35                             ; create function
0B35                             ; arg_list* block* -- func*
0B35                CREATEFUNC:      
0B35   E1                     POP   hl   ; save retrn address
0B36   22 08 5E               LD   (vTemp3),hl   
0B39   ED 43 04 5E            LD   (vTemp1),bc   ; save IP
0B3D   E1                     POP   hl   ; hl = block*
0B3E   22 06 5E               LD   (vTemp2),hl   ; save block*
0B41   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0B44   FD 56 05               LD   d,(iy+5)   
0B47   7B                     LD   a,e   ; if arg_list == null then make a func
0B48   B2                     OR   d   
0B49   20 09                  JR   nz,createFunc0   
0B4B   21 00 00               LD   hl,0   ; partial_array = null
0B4E   ED 5B EA 5D            LD   de,(vHeapPtr)   ; de = compile*
0B52   18 65                  JR   createFunc5   
0B54                CREATEFUNC0:      
0B54   E1                     POP   hl   ; hl = inner_arg_list*
0B55   E5                     PUSH   hl   ; save inner_arg_list
0B56   ED 5B EA 5D            LD   de,(vHeapPtr)   ; de = compile*
0B5A   7E                     LD   a,(hl)   ; compile inner_num_locals
0B5B   4F                     LD   c,a   ; b = inner_num_locals
0B5C   12                     LD   (de),a   
0B5D   23                     INC   hl   
0B5E   13                     INC   de   
0B5F   7E                     LD   a,(hl)   ; compile inner_length
0B60   12                     LD   (de),a   
0B61   91                     SUB   c   ; a = inner_num args
0B62   23                     INC   hl   
0B63   13                     INC   de   
0B64   B7                     OR   a   ; compile args if inner_length > 0
0B65   28 05                  JR   z,createFunc1   
0B67   4F                     LD   c,a   ; bc = a
0B68   06 00                  LD   b,0   
0B6A   ED B0                  LDIR      
0B6C                CREATEFUNC1:      
0B6C   EB                     EX   de,hl   ; hl = outer_arg_list
0B6D   FD 5E 04               LD   e,(iy+4)   
0B70   FD 56 05               LD   d,(iy+5)   
0B73   EB                     EX   de,hl   
0B74   23                     INC   hl   ; a = outer_length
0B75   7E                     LD   a,(hl)   
0B76   23                     INC   hl   
0B77   B7                     OR   a   
0B78   28 05                  JR   z,createFunc2   
0B7A   4F                     LD   c,a   
0B7B   06 00                  LD   b,0   
0B7D   ED B0                  LDIR      ; append outer_args
0B7F                CREATEFUNC2:      ; a = outer_length
0B7F   47                     LD   b,a   ; b = a = outer_length
0B80   2A EA 5D               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0B83   23                     INC   hl   
0B84   7E                     LD   a,(hl)   ; add outer_length to new length
0B85   80                     ADD   a,b   
0B86   77                     LD   (hl),a   
0B87   2B                     DEC   hl   
0B88   78                     LD   a,b   ; save outer_length in a'
0B89   08                     EX   af,af'   
0B8A   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0B8B   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0B8C   B7                     OR   a   
0B8D   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0B8F   4F                     LD   c,a   ; c = inner_num_locals
0B90   06 00                  LD   b,0   ; bc = inner_num_locals
0B92   23                     INC   hl   ; a = inner_length
0B93   7E                     LD   a,(hl)   
0B94   91                     SUB   c   ; a = inner_num_args
0B95   23                     INC   hl   ; hl = inner_arg_chars
0B96   85                     ADD   a,l   ; hl += a
0B97   6F                     LD   l,a   
0B98   3E 00                  LD   a,0   
0B9A   84                     ADD   a,h   
0B9B   67                     LD   h,a   
0B9C   ED B0                  LDIR      ; append inner_locals
0B9E                CREATEFUNC2A:      
0B9E   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0B9F   12                     LD   (de),a   ; compile partial_array length field
0BA0   13                     INC   de   
0BA1   AF                     XOR   a   
0BA2   12                     LD   (de),a   
0BA3   13                     INC   de   
0BA4   D5                     PUSH   de   ; push partial_array*
0BA5   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0BA6   FD 5E 02               LD   e,(iy+2)   
0BA9   FD 56 03               LD   d,(iy+3)   
0BAC   EB                     EX   de,hl   
0BAD                CREATEFUNC3:      
0BAD   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0BAE   4E                     LD   c,(hl)   
0BAF   2B                     DEC   hl   
0BB0   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0BB1   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0BB2   13                     INC   de   
0BB3   79                     LD   a,c   
0BB4   12                     LD   (de),a   
0BB5   13                     INC   de   
0BB6   10 F5                  DJNZ   createFunc3   ; b = outer_length
0BB8                CREATEFUNC4:      
0BB8   E1                     POP   hl   ; hl = partial_array*
0BB9                CREATEFUNC5:      
0BB9   C1                     POP   bc   ; bc = new_arg_list*
0BBA   D5                     PUSH   de   ; return new func*
0BBB   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0BBC   73                     LD   (hl),e   ; compile partial_array* to func
0BBD   23                     INC   hl   
0BBE   72                     LD   (hl),d   
0BBF   23                     INC   hl   
0BC0   ED 5B 06 5E            LD   de,(vTemp2)   ; de = block*
0BC4   73                     LD   (hl),e   ; compile block* to func
0BC5   23                     INC   hl   
0BC6   72                     LD   (hl),d   
0BC7   23                     INC   hl   
0BC8   71                     LD   (hl),c   ; compile new_arg_list* to func
0BC9   23                     INC   hl   
0BCA   70                     LD   (hl),b   
0BCB   23                     INC   hl   
0BCC   22 EA 5D               LD   (vHeapPtr),hl   ; bump heap ptr
0BCF   ED 4B 04 5E            LD   bc,(vTemp1)   ; restore IP
0BD3   2A 08 5E               LD   hl,(vTemp3)   ; jump to return address
0BD6   E9                     JP   (hl)   
0BD7                             ;*******************************************************************
0BD7                             ; general routines
0BD7                             ;*******************************************************************
0BD7                             ; hl = address
0BD7                VARIABLE:      
0BD7   22 F8 5D               LD   (vPointer),hl   
0BDA   5E                     LD   e,(hl)   
0BDB   3A EE 5D               LD   a,(vDataWidth)   
0BDE   3D                     DEC   a   
0BDF   16 00                  LD   d,0   
0BE1   28 03                  JR   z,constant   
0BE3   23                     INC   hl   
0BE4   56                     LD   d,(hl)   
0BE5   2B                     DEC   hl   
0BE6                CONSTANT:      
0BE6   D5                     PUSH   de   
0BE7   DD E9                  JP   (ix)   
0BE9                             ; followed by a table
0BE9                             ; indexed on the 0-25 lowercase letter
0BE9                             ; db lsb(addr)
0BE9                             ; the final item index 26 matches any other char
0BE9                CHARTABLE:      
0BE9   03                     INC   bc   
0BEA   0A                     LD   a,(bc)   
0BEB   FE 7B                  CP   "z"+1   
0BED   30 10                  JR   nc,charTable3   
0BEF   D6 61                  SUB   "a"   
0BF1   38 0C                  JR   c,charTable3   
0BF3                CHARTABLE1:      
0BF3   E1                     POP   hl   
0BF4   85                     ADD   a,l   
0BF5   6F                     LD   l,a   
0BF6   7E                     LD   a,(hl)   ; must have the same msb as the table
0BF7   B7                     OR   a   ; a = 0, nop
0BF8   20 03                  JR   nz,charTable2   
0BFA   C3 37 07               JP   error1   
0BFD                CHARTABLE2:      
0BFD   6F                     LD   l,a   
0BFE   E9                     JP   (hl)   
0BFF                CHARTABLE3:      
0BFF   3E 1A                  LD   a,26   
0C01   0B                     DEC   bc   
0C02   18 EF                  JR   charTable1   
0C04                             ; 8-bit hash string
0C04                             ; bc = str
0C04                             ; a = hash
0C04                IDENTHASH:      
0C04   16 00                  LD   d,0   
0C06                IDENTHASH1:      
0C06   0A                     LD   a,(bc)   ; e = a = char
0C07   5F                     LD   e,a   
0C08   03                     INC   bc   ; ip++
0C09   FE 21                  CP   " "+1   ; is a = white space
0C0B   30 02                  JR   nc,identHash2   
0C0D   7A                     LD   a,d   
0C0E   C9                     RET      
0C0F                IDENTHASH2:      ; not white space
0C0F   7A                     LD   a,d   ; a = d = hash
0C10   87                     ADD   a,a   ; a *= 4
0C11   87                     ADD   a,a   
0C12   83                     ADD   a,e   ; a += char
0C13   57                     LD   d,a   ; d = a
0C14   18 F0                  JR   identHash1   
0C16                             ; a = index
0C16                             ; hl = default
0C16                COMMANDTABLE:      
0C16   E3                     EX   (sp),hl   
0C17   56                     LD   d,(hl)   
0C18   23                     INC   hl   
0C19   5E                     LD   e,(hl)   
0C1A   62                     LD   h,d   
0C1B   24                     INC   h   
0C1C   FE 80                  CP   $80   
0C1E   38 01                  JR   c,commandTable2   
0C20   24                     INC   h   
0C21                COMMANDTABLE2:      
0C21   83                     ADD   a,e   
0C22   1A                     LD   a,(de)   
0C23   B7                     OR   a   
0C24   D1                     POP   de   
0C25   C2 2A 0C               JP   nz,commandTable3   
0C28   EB                     EX   de,hl   
0C29   E9                     JP   (hl)   
0C2A                COMMANDTABLE3:      
0C2A   6F                     LD   l,a   
0C2B   E9                     JP   (hl)   
0C2C                GETVARADDR:      
0C2C   21 00 00               LD   hl,0   
0C2F   FE 7B                  CP   "z"+1   ; if a > z then exit
0C31   D0                     RET   nc   
0C32   D6 41                  SUB   "A"   ; a - 65
0C34   D8                     RET   c   ; if < A then exit
0C35   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0C37   38 05                  JR   c,getVarAddr1   
0C39   D6 06                  SUB   "a"-("Z"+1)   
0C3B   FE 1A                  CP   "Z"-"A"+1   
0C3D   D8                     RET   c   ; if < a then exit
0C3E                GETVARADDR1:      
0C3E   87                     ADD   a,a   ; double a
0C3F   6F                     LD   l,a   
0C40   26 5D                  LD   h,msb(VARS)   
0C42   C9                     RET      
0C43                PUTSTR0:      
0C43   CD 85 00               CALL   putchar   
0C46   23                     INC   hl   
0C47                PUTSTR:      
0C47   7E                     LD   a,(hl)   
0C48   B7                     OR   a   
0C49   20 F8                  JR   nz,putstr0   
0C4B   C9                     RET      
0C4C                             ; hl = value
0C4C                             ; de = buffer*
0C4C                             ; a, bc, de, hl destroyed
0C4C                FORMATDEC0:      
0C4C   E5                     PUSH   hl   
0C4D   D9                     EXX      
0C4E   E1                     POP   hl   
0C4F                             ; hl = value
0C4F                             ; de' = buffer*
0C4F                             ; a, bc, de, hl destroyed
0C4F                FORMATDEC:      
0C4F   CB 7C                  BIT   7,h   
0C51   28 0C                  JR   z,formatDec2   
0C53   D9                     EXX      
0C54   3E 2D                  LD   a,"-"   
0C56   12                     LD   (de),a   
0C57   13                     INC   de   
0C58   D9                     EXX      
0C59   AF                     XOR   a   
0C5A   95                     SUB   l   
0C5B   6F                     LD   l,a   
0C5C   9F                     SBC   a,a   
0C5D   94                     SUB   h   
0C5E   67                     LD   h,a   
0C5F                FORMATDEC2:      
0C5F   0E 00                  LD   c,0   ; leading zeros flag = false
0C61   11 F0 D8               LD   de,-10000   
0C64   CD 7F 0C               CALL   formatDec4   
0C67   11 18 FC               LD   de,-1000   
0C6A   CD 7F 0C               CALL   formatDec4   
0C6D   11 9C FF               LD   de,-100   
0C70   CD 7F 0C               CALL   formatDec4   
0C73   1E F6                  LD   e,-10   
0C75   CD 7F 0C               CALL   formatDec4   
0C78   0C                     INC   c   ; flag = true for at least digit
0C79   1E FF                  LD   e,-1   
0C7B   CD 7F 0C               CALL   formatDec4   
0C7E   C9                     RET      
0C7F                FORMATDEC4:      
0C7F   06 2F                  LD   b,"0"-1   
0C81                FORMATDEC5:      
0C81   04                     INC   b   
0C82   19                     ADD   hl,de   
0C83   38 FC                  JR   c,formatDec5   
0C85   ED 52                  SBC   hl,de   
0C87   3E 30                  LD   a,"0"   
0C89   B8                     CP   b   
0C8A   20 05                  JR   nz,formatDec6   
0C8C   AF                     XOR   a   
0C8D   B1                     OR   c   
0C8E   C8                     RET   z   
0C8F   18 01                  JR   formatDec7   
0C91                FORMATDEC6:      
0C91   0C                     INC   c   
0C92                FORMATDEC7:      
0C92   78                     LD   a,b   
0C93   D9                     EXX      
0C94   12                     LD   (de),a   
0C95   13                     INC   de   
0C96   D9                     EXX      
0C97   C9                     RET      
0C98                             ; **************************************************************************
0C98                             ; calculate nesting value
0C98                             ; a is char to be tested,
0C98                             ; e is the nesting value (initially 0)
0C98                             ; e is increased by ( and [
0C98                             ; e is decreased by ) and ]
0C98                             ; e has its bit 7 toggled by `
0C98                             ; limited to 127 levels
0C98                             ; **************************************************************************
0C98                NESTING:      
0C98   FE 27                  CP   "'"   ; quote char
0C9A   28 0A                  JR   z,nesting0   
0C9C   FE 22                  CP   DQ   ; double quote char
0C9E   28 06                  JR   z,nesting0   
0CA0   FE 60                  CP   "`"   ; grave char
0CA2   28 02                  JR   z,nesting0   
0CA4   18 0A                  JR   nesting1   
0CA6                NESTING0:      
0CA6   CB 7B                  BIT   7,e   
0CA8   28 03                  JR   z,nesting1a   
0CAA   CB BB                  RES   7,e   
0CAC   C9                     RET      
0CAD                NESTING1A:      
0CAD   CB FB                  SET   7,e   
0CAF   C9                     RET      
0CB0                NESTING1:      
0CB0   CB 7B                  BIT   7,e   
0CB2   C0                     RET   nz   
0CB3   FE 7B                  CP   "{"   
0CB5   28 08                  JR   z,nesting2   
0CB7   FE 5B                  CP   "["   
0CB9   28 04                  JR   z,nesting2   
0CBB   FE 28                  CP   "("   
0CBD   20 02                  JR   nz,nesting3   
0CBF                NESTING2:      
0CBF   1C                     INC   e   
0CC0   C9                     RET      
0CC1                NESTING3:      
0CC1   FE 7D                  CP   "}"   
0CC3   28 07                  JR   z,nesting4   
0CC5   FE 5D                  CP   "]"   
0CC7   28 03                  JR   z,nesting4   
0CC9   FE 29                  CP   ")"   
0CCB   C0                     RET   nz   
0CCC                NESTING4:      
0CCC   1D                     DEC   e   
0CCD   C9                     RET      
0CCE                PROMPT:      
0CCE   CD DE 0C               CALL   printStr   
0CD1   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0CD6   C9                     RET      
0CD7                CRLF:        
0CD7   CD DE 0C               CALL   printStr   
0CDA   0D 0A 00               .CSTR   "\r\n"   
0CDD   C9                     RET      
0CDE                             ; prints a null teminated string
0CDE                             ; the string should be immediately following the call
0CDE                PRINTSTR:      
0CDE   E3                     EX   (sp),hl   ; swap			
0CDF   CD 47 0C               CALL   putstr   
0CE2   23                     INC   hl   ; inc past NUL
0CE3   E3                     EX   (sp),hl   ; put it back	
0CE4   C9                     RET      
0CE5                             ; hl = number to print in decimal
0CE5                PRINTNUM:      
0CE5   ED 5B E8 5D            LD   de,(vBufPtr)   ; de' = buffer*
0CE9   CD 4C 0C               CALL   formatDec0   
0CEC   D9                     EXX      ; restore de = buffer*
0CED   3E 00                  LD   a,0   ; append NUL to buffer
0CEF   12                     LD   (de),a   
0CF0   13                     INC   de   ; string*++,
0CF1   ED 53 E8 5D            LD   (vBufPtr),de   ; update buffer* with buffer*'
0CF5   21 00 5C               LD   hl,BUFFER   
0CF8   22 E8 5D               LD   (vBufPtr),hl   ; reset vBufPtr to vHeapPtr
0CFB   C3 47 0C               JP   putstr   
0CFE                             ; Compares two null terminated strings.
0CFE                             ; de = string1* hl = string2* -- bool
0CFE                             ; returns: hl = bool
0CFE                STRINGCOMPARE:      
0CFE                STRINGCOMPARE1:      
0CFE   1A                     LD   a,(de)   
0CFF   BE                     CP   (hl)   
0D00   20 07                  JR   nz,stringCompare2   
0D02   B7                     OR   a   
0D03   28 09                  JR   z,stringCompare3   
0D05   13                     INC   de   
0D06   23                     INC   hl   
0D07   18 F5                  JR   stringCompare1   
0D09                STRINGCOMPARE2:      
0D09   21 00 00               LD   hl,FALSE   
0D0C   18 03                  JR   stringCompare4   
0D0E                STRINGCOMPARE3:      
0D0E   21 FF FF               LD   hl,TRUE   
0D11                STRINGCOMPARE4:      
0D11   E5                     PUSH   hl   
0D12   C9                     RET      
0D13                             ; string length
0D13                             ; de = string*
0D13                             ; returns: hl = length
0D13                STRINGLENGTH:      
0D13   21 00 00               LD   hl,0   
0D16   18 02                  JR   stringLength2   
0D18                STRINGLENGTH1:      
0D18   13                     INC   de   
0D19   23                     INC   hl   
0D1A                STRINGLENGTH2:      
0D1A   1A                     LD   a,(de)   
0D1B   B7                     OR   a   
0D1C   20 FA                  JR   nz,stringLength1   
0D1E                STRINGLENGTH3:      
0D1E   C9                     RET      
0D1F                             ; 
0D1F                             ; MINTY interpreter
0D1F                             ; 
0D1F                INIT:        
0D1F   21 F0 01               LD   hl,titleStr   
0D22   11 0E 5E               LD   de,titleBuf   
0D25   06 14                  LD   b,20   
0D27                INIT1:       
0D27   1A                     LD   a,(de)   
0D28   BE                     CP   (hl)   
0D29   20 17                  JR   nz,coldBoot0   
0D2B   13                     INC   de   
0D2C   23                     INC   hl   
0D2D   10 F8                  DJNZ   init1   
0D2F                WARMINIT:      
0D2F   ED 4B FC 5D            LD   bc,(vSavedIP)   ; restore IP
0D33   ED 7B FE 5D            LD   sp,(vSavedSP)   ; restore SP
0D37   DD 2A 00 5E            LD   ix,(vSavedNext)   ; restore Next
0D3B   FD 2A 02 5E            LD   iy,(vSavedBP)   ; restore BP
0D3F   C3 79 0D               JP   start1   
0D42                COLDBOOT0:      
0D42   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0D45   11 0E 5E               LD   de,titleBuf   
0D48   06 14                  LD   b,20   
0D4A   ED B0                  LDIR      
0D4C                COLDINIT:      
0D4C   21 DE 01               LD   hl,isysVars   
0D4F   11 E6 5D               LD   de,sysVars   
0D52   01 12 00               LD   bc,4 * 2 + 10   
0D55   ED B0                  LDIR      
0D57   21 00 5D               LD   hl,vars   ; 52 vars LO HI
0D5A   06 34                  LD   b,26*2   
0D5C   AF                     XOR   a   
0D5D                COLDBOOT1:      
0D5D   77                     LD   (hl),a   
0D5E   23                     INC   hl   
0D5F   10 FC                  DJNZ   coldBoot1   
0D61   DD 21 F5 0D            LD   ix,NEXT   
0D65   FD 21 00 5B            LD   iy,STACK   
0D69   C9                     RET      
0D6A                COLDSTART:      
0D6A   31 00 5B               LD   sp,STACK   
0D6D   CD 42 0D               CALL   coldBoot0   
0D70   C3 79 0D               JP   start1   
0D73                START:       
0D73   31 00 5B               LD   sp,STACK   ; start MINTY
0D76   CD 1F 0D               CALL   init   ; setups
0D79                START1:      
0D79   21 0E 5E               LD   hl,titleBuf   
0D7C   CD 47 0C               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
0D7F                INTERPRET:      
0D7F   CD CE 0C               CALL   prompt   
0D82   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0D85   21 00 5B               LD   hl,TIB   
0D88   22 E6 5D               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0D8B                INTERPRET2:      ; calculate nesting
0D8B   1E 00                  LD   e,0   ; initilize nesting value
0D8D   C5                     PUSH   bc   ; save offset into TIB,
0D8E                             ; bc is also the count of chars in TIB
0D8E   21 00 5B               LD   hl,TIB   ; hl is start of TIB
0D91   18 06                  JR   interpret4   
0D93                INTERPRET3:      
0D93   7E                     LD   a,(hl)   ; a = char in TIB
0D94   23                     INC   hl   ; inc pointer into TIB
0D95   0B                     DEC   bc   ; dec count of chars in TIB
0D96   CD 98 0C               CALL   nesting   ; update nesting value
0D99                INTERPRET4:      
0D99   79                     LD   a,c   ; is count zero?
0D9A   B0                     OR   b   
0D9B   20 F6                  JR   nz,interpret3   ; if not loop
0D9D   C1                     POP   bc   ; restore offset into TIB
0D9E                INTERPRET5:      
0D9E   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0DA1   FE 20                  CP   $20   ; compare to space
0DA3   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0DA5   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0DA7   28 31                  JR   z,interpret8   
0DA9   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0DAB   28 1A                  JR   z,interpret7   ; if anything else its macro/control
0DAD   FE 08                  CP   CTRL_H   
0DAF   CA 2B 0E               JP   z,backSpace_   
0DB2   FE 0A                  CP   CTRL_J   
0DB4   CA 3B 0E               JP   z,reEdit_   
0DB7                INTERPRET5A:      
0DB7   18 D2                  JR   interpret2   
0DB9                INTERPRET6:      
0DB9   21 00 5B               LD   hl,TIB   
0DBC   09                     ADD   hl,bc   
0DBD   77                     LD   (hl),a   ; store the character in textbuf
0DBE   03                     INC   bc   
0DBF   CD 85 00               CALL   putchar   ; echo character to screen
0DC2   CD 98 0C               CALL   nesting   
0DC5   18 D7                  JR   interpret5   ; wait for next character
0DC7                INTERPRET7:      
0DC7   21 00 5B               LD   hl,TIB   
0DCA   09                     ADD   hl,bc   
0DCB   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0DCD   23                     INC   hl   
0DCE   36 0A                  LD   (hl),"\n"   
0DD0   23                     INC   hl   
0DD1   03                     INC   bc   
0DD2   03                     INC   bc   
0DD3   CD D7 0C               CALL   crlf   ; echo character to screen
0DD6   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0DD7   B7                     OR   a   
0DD8   20 C4                  JR   nz,interpret5   
0DDA                INTERPRET8:      
0DDA   21 00 5B               LD   hl,TIB   
0DDD   09                     ADD   hl,bc   
0DDE   22 E6 5D               LD   (vTIBPtr),hl   
0DE1   01 00 5B               LD   bc,TIB   
0DE4   ED 43 FC 5D            LD   (vSavedIP),bc   ; save IP
0DE8   ED 73 FE 5D            LD   (vSavedSP),sp   ; save SP
0DEC   DD 22 00 5E            LD   (vSavedNext),ix   ; save Next
0DF0   FD 22 02 5E            LD   (vSavedBP),iy   ; save BP
0DF4   0B                     DEC   bc   
0DF5                NEXT:        
0DF5   03                     INC   bc   ; Increment the IP
0DF6   0A                     LD   a,(bc)   ; Get the next character and dispatch
0DF7   FE 20                  CP   " "   ; whitespace?
0DF9   28 FA                  JR   z,next   ; space? ignore
0DFB   38 0D                  JR   c,next1   
0DFD   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0DFF   6F                     LD   l,a   ; index into table
0E00   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0E02   6E                     LD   l,(hl)   ; get low jump address
0E03   24                     INC   h   ; page 2
0E04   FE BA                  CP   "Z" - "!" + 1 + $80   
0E06   38 01                  JR   c,next0   
0E08   24                     INC   h   ; page 3
0E09                NEXT0:       
0E09   E9                     JP   (hl)   ; Jump to routine
0E0A                NEXT1:       
0E0A   FE 00                  CP   NUL   ; end of input string?
0E0C   28 03                  JR   z,exit   
0E0E   C3 7F 0D               JP   interpret   ; no, other whitespace, macros?
0E11                EXIT:        
0E11   03                     INC   bc   
0E12   60 69                  LD   hl,bc   
0E14   E9                     JP   (hl)   
0E15                RUN:         
0E15   C1                     POP   bc   
0E16   0B                     DEC   bc   
0E17   DD E9                  JP   (ix)   
0E19                ERROR:       
0E19   E5                     PUSH   hl   
0E1A   CD 15 0E               CALL   run   
0E1D   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
0E28   C3 7F 0D               JP   interpret   
0E2B                BACKSPACE_:      
0E2B   79                     LD   a,c   
0E2C   B0                     OR   b   
0E2D   CA 8B 0D               JP   z,interpret2   
0E30   0B                     DEC   bc   
0E31   CD DE 0C               CALL   printStr   
0E34   08 20 08 00            .CSTR   "\b \b"   
0E38   C3 8B 0D               JP   interpret2   
0E3B                REEDIT_:      
0E3B   CD DE 0C               CALL   printStr   
0E3E   0D 3E 20 00            .CSTR   "\r> "   
0E42   21 00 5B               LD   hl,TIB   
0E45   18 04                  JR   reEdit1   
0E47                REEDIT0:      
0E47   CD 85 00               CALL   putchar   
0E4A   23                     INC   hl   
0E4B                REEDIT1:      
0E4B   7E                     LD   a,(hl)   
0E4C   FE 0D                  CP   "\r"   
0E4E   20 F7                  JR   nz,reEdit0   
0E50   11 00 5B               LD   de,TIB   
0E53   B7                     OR   a   
0E54   ED 52                  SBC   hl,de   
0E56   44 4D                  LD   bc,hl   
0E58   C3 8B 0D               JP   interpret2   
0E5B                ANSIPRINTSEQ:      
0E5B   CD DE 0C               CALL   printStr   
0E5E   1B 5B 00               DB   ESC,"[",0   
0E61   C9                     RET      
0E62                             ; clears screen and sets cursor to 0,0
0E62                ANSICLEARSCREEN:      
0E62   CD DE 0C               CALL   printStr   
0E65   1B 5B                  DB   ESC,"["   
0E67   32 4A 00               DB   "2J",0   ; falls through
0E6A                             ; call ansiPrintStr
0E6A                             ; .cstr "H"
0E6A   C9                     RET      
0E6B                             ; a = 0:toEnd 1:toStart 2:entireLine
0E6B                ANSICLEARLINE:      
0E6B   C6 30                  ADD   a,"0"   ; ascii
0E6D   08                     EX   af,af'   ; save a
0E6E   CD 5B 0E               CALL   ansiPrintSeq   
0E71   08                     EX   af,af'   ; restore
0E72   CD 85 00               CALL   putChar   
0E75   3E 4B                  LD   a,"K"   
0E77   C3 85 00               JP   putChar   
0E7A                             ; h = column, l = row
0E7A                ANSIGOTO:      
0E7A   D9                     EXX      ; save hl
0E7B   CD 5B 0E               CALL   ansiPrintSeq   
0E7E   D9                     EXX      ; restore hl
0E7F   7C                     LD   a,h   ; save column
0E80   08                     EX   af,af'   
0E81   26 00                  LD   h,0   ; print row
0E83   CD E5 0C               CALL   printNum   
0E86   3E 3B                  LD   a,";"   
0E88   CD 85 00               CALL   putChar   
0E8B   08                     EX   af,af'   ; restore column
0E8C   6C                     LD   l,h   ; print column
0E8D   26 00                  LD   h,0   
0E8F   CD E5 0C               CALL   printNum   
0E92   3E 48                  LD   a,"H"   
0E94   C3 85 00               JP   putChar   
0E97                             ; h = "A":Up "B":Down "C":Forward "D":Back
0E97                             ; l = amount
0E97                ANSIMOVE:      
0E97   D9                     EXX      ; save hl
0E98   CD 5B 0E               CALL   ansiPrintSeq   
0E9B   D9                     EXX      ; restore hl
0E9C   7C                     LD   a,h   
0E9D   08                     EX   af,af'   ; save a
0E9E   26 00                  LD   h,0   ; print amount
0EA0   CD E5 0C               CALL   printNum   
0EA3   08                     EX   af,af'   ; restore a
0EA4   C3 85 00               JP   putChar   ; print direction code
0EA7                             ; a = 0:normal 1:bold 2:low 4:underline 5:blink 7:reverse
0EA7                ANSITEXTSTYLE:      
0EA7   C6 30                  ADD   a,"0"   ; ascii
0EA9   08                     EX   af,af'   ; save a
0EAA   CD 5B 0E               CALL   ansiPrintSeq   
0EAD   08                     EX   af,af'   ; restore
0EAE   CD 85 00               CALL   putChar   
0EB1   3E 6D                  LD   a,"m"   
0EB3   C3 85 00               JP   putChar   
0EB6                             ; a = "h":show "l":hide
0EB6                ANSICURSORSHOW:      
0EB6   08                     EX   af,af'   ; save a
0EB7   CD DE 0C               CALL   printStr   
0EBA   1B 5B                  DB   ESC,"["   
0EBC   3F 32 35 6C 00         DB   "?25l",0   
0EC1   08                     EX   af,af'   ; restore
0EC2   C3 85 00               JP   putChar   
0EC5                          ;*Macro unroll: FUNC f1, 0, ""
0EC5                F1:          
0EC5   CD 9F 03               CALL   go   
0EC8   00 00                  DW   NUL   
0ECA   D0 0E                  DW   f1M_2942S13   
0ECC   CE 0E                  DW   $+2   
0ECE   00                     DB   0   
0ECF   00                     .PSTR   ""   
0ED0                F1M_2942S13:      
0ED0   00                     DB   0   
0ED1                          ;*Macro unroll: FUNC f2, 0, ""
0ED1                F2:          
0ED1   CD 9F 03               CALL   go   
0ED4   00 00                  DW   NUL   
0ED6   DC 0E                  DW   f2M_2944S16   
0ED8   DA 0E                  DW   $+2   
0EDA   00                     DB   0   
0EDB   00                     .PSTR   ""   
0EDC                F2M_2944S16:      
0EDC   00                     DB   0   
0EDD                          ;*Macro unroll: FUNC f3, 0, ""
0EDD                F3:          
0EDD   CD 9F 03               CALL   go   
0EE0   00 00                  DW   NUL   
0EE2   E8 0E                  DW   f3M_2946S19   
0EE4   E6 0E                  DW   $+2   
0EE6   00                     DB   0   
0EE7   00                     .PSTR   ""   
0EE8                F3M_2946S19:      
0EE8   00                     DB   0   
0EE9                          ;*Macro unroll: FUNC f4, 0, ""
0EE9                F4:          
0EE9   CD 9F 03               CALL   go   
0EEC   00 00                  DW   NUL   
0EEE   F4 0E                  DW   f4M_2948S22   
0EF0   F2 0E                  DW   $+2   
0EF2   00                     DB   0   
0EF3   00                     .PSTR   ""   
0EF4                F4M_2948S22:      
0EF4   00                     DB   0   
0EF5                          ALIGN   $100   
0F00                TESTSSTART:      
0F00                          ;*Macro unroll:  test "/fal", false
0F00   31 00 5B               LD   SP,STACK   
0F03   CD 4C 0D               CALL   coldInit   
0F06   CD 20 59               CALL   execStr   
0F09   2F 66 61 6C 00         DB   "/fal",0   
0F0E   E1                     POP   HL   
0F0F   E5                     PUSH   HL   
0F10   11 00 00               LD   DE,false   
0F13   B7                     OR   A   
0F14   ED 52                  SBC   HL,DE   
0F16   7D                     LD   A,L   
0F17   B4                     OR   H   
0F18   CA 77 0F               JP   Z,expectM_2952S28   
0F1B   CD DE 0C               CALL   printStr   
0F1E   43 6F 64 65 3A 20 2F 66 61 6C 00 .CSTR   "Code: ","/fal"   
0F29   CD DE 0C               CALL   printStr   
0F2C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F3B   21 00 00               LD   hl,false   
0F3E   E5                     PUSH   hl   
0F3F   E5                     PUSH   hl   
0F40   CD 15 0E               CALL   run   
0F43   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
0F4F   CD DE 0C               CALL   printStr   
0F52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F5F   E1                     POP   hl   
0F60   E5                     PUSH   hl   
0F61   E5                     PUSH   hl   
0F62   CD 15 0E               CALL   run   
0F65   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
0F76   76                     HALT      
0F77                EXPECTM_2952S28:      
0F77   E1                     POP   HL   
0F78   CD DE 0C               CALL   printStr   
0F7B   44 6F 6E 65 21 00      .CSTR   "Done!"   
0F81   76                     HALT      
0F82                          ;*Macro unroll:  test "/fal", false
0F82   31 00 5B               LD   SP,STACK   
0F85   CD 4C 0D               CALL   coldInit   
0F88   CD 20 59               CALL   execStr   
0F8B   2F 66 61 6C 00         DB   "/fal",0   
0F90   E1                     POP   HL   
0F91   E5                     PUSH   HL   
0F92   11 00 00               LD   DE,false   
0F95   B7                     OR   A   
0F96   ED 52                  SBC   HL,DE   
0F98   7D                     LD   A,L   
0F99   B4                     OR   H   
0F9A   CA F9 0F               JP   Z,expectM_2956S33   
0F9D   CD DE 0C               CALL   printStr   
0FA0   43 6F 64 65 3A 20 2F 66 61 6C 00 .CSTR   "Code: ","/fal"   
0FAB   CD DE 0C               CALL   printStr   
0FAE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FBD   21 00 00               LD   hl,false   
0FC0   E5                     PUSH   hl   
0FC1   E5                     PUSH   hl   
0FC2   CD 15 0E               CALL   run   
0FC5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
0FD1   CD DE 0C               CALL   printStr   
0FD4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FE1   E1                     POP   hl   
0FE2   E5                     PUSH   hl   
0FE3   E5                     PUSH   hl   
0FE4   CD 15 0E               CALL   run   
0FE7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
0FF8   76                     HALT      
0FF9                EXPECTM_2956S33:      
0FF9   E1                     POP   HL   
0FFA                          ;*Macro unroll:  test "/tru", true
0FFA   31 00 5B               LD   SP,STACK   
0FFD   CD 4C 0D               CALL   coldInit   
1000   CD 20 59               CALL   execStr   
1003   2F 74 72 75 00         DB   "/tru",0   
1008   E1                     POP   HL   
1009   E5                     PUSH   HL   
100A   11 FF FF               LD   DE,true   
100D   B7                     OR   A   
100E   ED 52                  SBC   HL,DE   
1010   7D                     LD   A,L   
1011   B4                     OR   H   
1012   CA 71 10               JP   Z,expectM_2957S34   
1015   CD DE 0C               CALL   printStr   
1018   43 6F 64 65 3A 20 2F 74 72 75 00 .CSTR   "Code: ","/tru"   
1023   CD DE 0C               CALL   printStr   
1026   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1035   21 FF FF               LD   hl,true   
1038   E5                     PUSH   hl   
1039   E5                     PUSH   hl   
103A   CD 15 0E               CALL   run   
103D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1049   CD DE 0C               CALL   printStr   
104C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1059   E1                     POP   hl   
105A   E5                     PUSH   hl   
105B   E5                     PUSH   hl   
105C   CD 15 0E               CALL   run   
105F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1070   76                     HALT      
1071                EXPECTM_2957S34:      
1071   E1                     POP   HL   
1072                          ;*Macro unroll:  test "1", 1
1072   31 00 5B               LD   SP,STACK   
1075   CD 4C 0D               CALL   coldInit   
1078   CD 20 59               CALL   execStr   
107B   31 00                  DB   "1",0   
107D   E1                     POP   HL   
107E   E5                     PUSH   HL   
107F   11 01 00               LD   DE,1   
1082   B7                     OR   A   
1083   ED 52                  SBC   HL,DE   
1085   7D                     LD   A,L   
1086   B4                     OR   H   
1087   CA E3 10               JP   Z,expectM_2958S35   
108A   CD DE 0C               CALL   printStr   
108D   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
1095   CD DE 0C               CALL   printStr   
1098   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10A7   21 01 00               LD   hl,1   
10AA   E5                     PUSH   hl   
10AB   E5                     PUSH   hl   
10AC   CD 15 0E               CALL   run   
10AF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
10BB   CD DE 0C               CALL   printStr   
10BE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10CB   E1                     POP   hl   
10CC   E5                     PUSH   hl   
10CD   E5                     PUSH   hl   
10CE   CD 15 0E               CALL   run   
10D1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
10E2   76                     HALT      
10E3                EXPECTM_2958S35:      
10E3   E1                     POP   HL   
10E4                          ;*Macro unroll:  test "2", 2
10E4   31 00 5B               LD   SP,STACK   
10E7   CD 4C 0D               CALL   coldInit   
10EA   CD 20 59               CALL   execStr   
10ED   32 00                  DB   "2",0   
10EF   E1                     POP   HL   
10F0   E5                     PUSH   HL   
10F1   11 02 00               LD   DE,2   
10F4   B7                     OR   A   
10F5   ED 52                  SBC   HL,DE   
10F7   7D                     LD   A,L   
10F8   B4                     OR   H   
10F9   CA 55 11               JP   Z,expectM_2959S36   
10FC   CD DE 0C               CALL   printStr   
10FF   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1107   CD DE 0C               CALL   printStr   
110A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1119   21 02 00               LD   hl,2   
111C   E5                     PUSH   hl   
111D   E5                     PUSH   hl   
111E   CD 15 0E               CALL   run   
1121   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
112D   CD DE 0C               CALL   printStr   
1130   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
113D   E1                     POP   hl   
113E   E5                     PUSH   hl   
113F   E5                     PUSH   hl   
1140   CD 15 0E               CALL   run   
1143   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1154   76                     HALT      
1155                EXPECTM_2959S36:      
1155   E1                     POP   HL   
1156                          ;*Macro unroll:  test "1", 1
1156   31 00 5B               LD   SP,STACK   
1159   CD 4C 0D               CALL   coldInit   
115C   CD 20 59               CALL   execStr   
115F   31 00                  DB   "1",0   
1161   E1                     POP   HL   
1162   E5                     PUSH   HL   
1163   11 01 00               LD   DE,1   
1166   B7                     OR   A   
1167   ED 52                  SBC   HL,DE   
1169   7D                     LD   A,L   
116A   B4                     OR   H   
116B   CA C7 11               JP   Z,expectM_2960S37   
116E   CD DE 0C               CALL   printStr   
1171   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
1179   CD DE 0C               CALL   printStr   
117C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
118B   21 01 00               LD   hl,1   
118E   E5                     PUSH   hl   
118F   E5                     PUSH   hl   
1190   CD 15 0E               CALL   run   
1193   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
119F   CD DE 0C               CALL   printStr   
11A2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11AF   E1                     POP   hl   
11B0   E5                     PUSH   hl   
11B1   E5                     PUSH   hl   
11B2   CD 15 0E               CALL   run   
11B5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
11C6   76                     HALT      
11C7                EXPECTM_2960S37:      
11C7   E1                     POP   HL   
11C8                          ;*Macro unroll:  test "0", 0
11C8   31 00 5B               LD   SP,STACK   
11CB   CD 4C 0D               CALL   coldInit   
11CE   CD 20 59               CALL   execStr   
11D1   30 00                  DB   "0",0   
11D3   E1                     POP   HL   
11D4   E5                     PUSH   HL   
11D5   11 00 00               LD   DE,0   
11D8   B7                     OR   A   
11D9   ED 52                  SBC   HL,DE   
11DB   7D                     LD   A,L   
11DC   B4                     OR   H   
11DD   CA 39 12               JP   Z,expectM_2961S38   
11E0   CD DE 0C               CALL   printStr   
11E3   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
11EB   CD DE 0C               CALL   printStr   
11EE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11FD   21 00 00               LD   hl,0   
1200   E5                     PUSH   hl   
1201   E5                     PUSH   hl   
1202   CD 15 0E               CALL   run   
1205   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1211   CD DE 0C               CALL   printStr   
1214   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1221   E1                     POP   hl   
1222   E5                     PUSH   hl   
1223   E5                     PUSH   hl   
1224   CD 15 0E               CALL   run   
1227   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1238   76                     HALT      
1239                EXPECTM_2961S38:      
1239   E1                     POP   HL   
123A                          ;*Macro unroll:  test "10", 10
123A   31 00 5B               LD   SP,STACK   
123D   CD 4C 0D               CALL   coldInit   
1240   CD 20 59               CALL   execStr   
1243   31 30 00               DB   "10",0   
1246   E1                     POP   HL   
1247   E5                     PUSH   HL   
1248   11 0A 00               LD   DE,10   
124B   B7                     OR   A   
124C   ED 52                  SBC   HL,DE   
124E   7D                     LD   A,L   
124F   B4                     OR   H   
1250   CA AD 12               JP   Z,expectM_2962S39   
1253   CD DE 0C               CALL   printStr   
1256   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
125F   CD DE 0C               CALL   printStr   
1262   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1271   21 0A 00               LD   hl,10   
1274   E5                     PUSH   hl   
1275   E5                     PUSH   hl   
1276   CD 15 0E               CALL   run   
1279   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1285   CD DE 0C               CALL   printStr   
1288   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1295   E1                     POP   hl   
1296   E5                     PUSH   hl   
1297   E5                     PUSH   hl   
1298   CD 15 0E               CALL   run   
129B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
12AC   76                     HALT      
12AD                EXPECTM_2962S39:      
12AD   E1                     POP   HL   
12AE                          ;*Macro unroll:  test "123", 123
12AE   31 00 5B               LD   SP,STACK   
12B1   CD 4C 0D               CALL   coldInit   
12B4   CD 20 59               CALL   execStr   
12B7   31 32 33 00            DB   "123",0   
12BB   E1                     POP   HL   
12BC   E5                     PUSH   HL   
12BD   11 7B 00               LD   DE,123   
12C0   B7                     OR   A   
12C1   ED 52                  SBC   HL,DE   
12C3   7D                     LD   A,L   
12C4   B4                     OR   H   
12C5   CA 23 13               JP   Z,expectM_2963S40   
12C8   CD DE 0C               CALL   printStr   
12CB   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
12D5   CD DE 0C               CALL   printStr   
12D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12E7   21 7B 00               LD   hl,123   
12EA   E5                     PUSH   hl   
12EB   E5                     PUSH   hl   
12EC   CD 15 0E               CALL   run   
12EF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
12FB   CD DE 0C               CALL   printStr   
12FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
130B   E1                     POP   hl   
130C   E5                     PUSH   hl   
130D   E5                     PUSH   hl   
130E   CD 15 0E               CALL   run   
1311   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1322   76                     HALT      
1323                EXPECTM_2963S40:      
1323   E1                     POP   HL   
1324                          ;*Macro unroll:  test "-1",-1
1324   31 00 5B               LD   SP,STACK   
1327   CD 4C 0D               CALL   coldInit   
132A   CD 20 59               CALL   execStr   
132D   2D 31 00               DB   "-1",0   
1330   E1                     POP   HL   
1331   E5                     PUSH   HL   
1332   11 FF FF               LD   DE,-1   
1335   B7                     OR   A   
1336   ED 52                  SBC   HL,DE   
1338   7D                     LD   A,L   
1339   B4                     OR   H   
133A   CA 97 13               JP   Z,expectM_2964S41   
133D   CD DE 0C               CALL   printStr   
1340   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1349   CD DE 0C               CALL   printStr   
134C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
135B   21 FF FF               LD   hl,-1   
135E   E5                     PUSH   hl   
135F   E5                     PUSH   hl   
1360   CD 15 0E               CALL   run   
1363   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
136F   CD DE 0C               CALL   printStr   
1372   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
137F   E1                     POP   hl   
1380   E5                     PUSH   hl   
1381   E5                     PUSH   hl   
1382   CD 15 0E               CALL   run   
1385   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1396   76                     HALT      
1397                EXPECTM_2964S41:      
1397   E1                     POP   HL   
1398                          ;*Macro unroll:  test "-1/abs",1
1398   31 00 5B               LD   SP,STACK   
139B   CD 4C 0D               CALL   coldInit   
139E   CD 20 59               CALL   execStr   
13A1   2D 31 2F 61 62 73 00   DB   "-1/abs",0   
13A8   E1                     POP   HL   
13A9   E5                     PUSH   HL   
13AA   11 01 00               LD   DE,1   
13AD   B7                     OR   A   
13AE   ED 52                  SBC   HL,DE   
13B0   7D                     LD   A,L   
13B1   B4                     OR   H   
13B2   CA 13 14               JP   Z,expectM_2965S42   
13B5   CD DE 0C               CALL   printStr   
13B8   43 6F 64 65 3A 20 2D 31 2F 61 62 73 00 .CSTR   "Code: ","-1/abs"   
13C5   CD DE 0C               CALL   printStr   
13C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13D7   21 01 00               LD   hl,1   
13DA   E5                     PUSH   hl   
13DB   E5                     PUSH   hl   
13DC   CD 15 0E               CALL   run   
13DF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
13EB   CD DE 0C               CALL   printStr   
13EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13FB   E1                     POP   hl   
13FC   E5                     PUSH   hl   
13FD   E5                     PUSH   hl   
13FE   CD 15 0E               CALL   run   
1401   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1412   76                     HALT      
1413                EXPECTM_2965S42:      
1413   E1                     POP   HL   
1414                          ;*Macro unroll:  test "_a", $61
1414   31 00 5B               LD   SP,STACK   
1417   CD 4C 0D               CALL   coldInit   
141A   CD 20 59               CALL   execStr   
141D   5F 61 00               DB   "_a",0   
1420   E1                     POP   HL   
1421   E5                     PUSH   HL   
1422   11 61 00               LD   DE,$61   
1425   B7                     OR   A   
1426   ED 52                  SBC   HL,DE   
1428   7D                     LD   A,L   
1429   B4                     OR   H   
142A   CA 87 14               JP   Z,expectM_2966S43   
142D   CD DE 0C               CALL   printStr   
1430   43 6F 64 65 3A 20 5F 61 00 .CSTR   "Code: ","_a"   
1439   CD DE 0C               CALL   printStr   
143C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
144B   21 61 00               LD   hl,$61   
144E   E5                     PUSH   hl   
144F   E5                     PUSH   hl   
1450   CD 15 0E               CALL   run   
1453   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
145F   CD DE 0C               CALL   printStr   
1462   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
146F   E1                     POP   hl   
1470   E5                     PUSH   hl   
1471   E5                     PUSH   hl   
1472   CD 15 0E               CALL   run   
1475   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1486   76                     HALT      
1487                EXPECTM_2966S43:      
1487   E1                     POP   HL   
1488                          ;*Macro unroll:  test "__", $5F
1488   31 00 5B               LD   SP,STACK   
148B   CD 4C 0D               CALL   coldInit   
148E   CD 20 59               CALL   execStr   
1491   5F 5F 00               DB   "__",0   
1494   E1                     POP   HL   
1495   E5                     PUSH   HL   
1496   11 5F 00               LD   DE,$5F   
1499   B7                     OR   A   
149A   ED 52                  SBC   HL,DE   
149C   7D                     LD   A,L   
149D   B4                     OR   H   
149E   CA FB 14               JP   Z,expectM_2967S44   
14A1   CD DE 0C               CALL   printStr   
14A4   43 6F 64 65 3A 20 5F 5F 00 .CSTR   "Code: ","__"   
14AD   CD DE 0C               CALL   printStr   
14B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14BF   21 5F 00               LD   hl,$5F   
14C2   E5                     PUSH   hl   
14C3   E5                     PUSH   hl   
14C4   CD 15 0E               CALL   run   
14C7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
14D3   CD DE 0C               CALL   printStr   
14D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14E3   E1                     POP   hl   
14E4   E5                     PUSH   hl   
14E5   E5                     PUSH   hl   
14E6   CD 15 0E               CALL   run   
14E9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
14FA   76                     HALT      
14FB                EXPECTM_2967S44:      
14FB   E1                     POP   HL   
14FC                          ;*Macro unroll:  test "$10", $10
14FC   31 00 5B               LD   SP,STACK   
14FF   CD 4C 0D               CALL   coldInit   
1502   CD 20 59               CALL   execStr   
1505   24 31 30 00            DB   "$10",0   
1509   E1                     POP   HL   
150A   E5                     PUSH   HL   
150B   11 10 00               LD   DE,$10   
150E   B7                     OR   A   
150F   ED 52                  SBC   HL,DE   
1511   7D                     LD   A,L   
1512   B4                     OR   H   
1513   CA 71 15               JP   Z,expectM_2968S45   
1516   CD DE 0C               CALL   printStr   
1519   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
1523   CD DE 0C               CALL   printStr   
1526   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1535   21 10 00               LD   hl,$10   
1538   E5                     PUSH   hl   
1539   E5                     PUSH   hl   
153A   CD 15 0E               CALL   run   
153D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1549   CD DE 0C               CALL   printStr   
154C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1559   E1                     POP   hl   
155A   E5                     PUSH   hl   
155B   E5                     PUSH   hl   
155C   CD 15 0E               CALL   run   
155F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1570   76                     HALT      
1571                EXPECTM_2968S45:      
1571   E1                     POP   HL   
1572                          ;*Macro unroll:  test "$FF", $FF
1572   31 00 5B               LD   SP,STACK   
1575   CD 4C 0D               CALL   coldInit   
1578   CD 20 59               CALL   execStr   
157B   24 46 46 00            DB   "$FF",0   
157F   E1                     POP   HL   
1580   E5                     PUSH   HL   
1581   11 FF 00               LD   DE,$FF   
1584   B7                     OR   A   
1585   ED 52                  SBC   HL,DE   
1587   7D                     LD   A,L   
1588   B4                     OR   H   
1589   CA E7 15               JP   Z,expectM_2969S46   
158C   CD DE 0C               CALL   printStr   
158F   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
1599   CD DE 0C               CALL   printStr   
159C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15AB   21 FF 00               LD   hl,$FF   
15AE   E5                     PUSH   hl   
15AF   E5                     PUSH   hl   
15B0   CD 15 0E               CALL   run   
15B3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
15BF   CD DE 0C               CALL   printStr   
15C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15CF   E1                     POP   hl   
15D0   E5                     PUSH   hl   
15D1   E5                     PUSH   hl   
15D2   CD 15 0E               CALL   run   
15D5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
15E6   76                     HALT      
15E7                EXPECTM_2969S46:      
15E7   E1                     POP   HL   
15E8                          ;*Macro unroll:  test "-1 2 +",1
15E8   31 00 5B               LD   SP,STACK   
15EB   CD 4C 0D               CALL   coldInit   
15EE   CD 20 59               CALL   execStr   
15F1   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
15F8   E1                     POP   HL   
15F9   E5                     PUSH   HL   
15FA   11 01 00               LD   DE,1   
15FD   B7                     OR   A   
15FE   ED 52                  SBC   HL,DE   
1600   7D                     LD   A,L   
1601   B4                     OR   H   
1602   CA 63 16               JP   Z,expectM_2970S47   
1605   CD DE 0C               CALL   printStr   
1608   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1615   CD DE 0C               CALL   printStr   
1618   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1627   21 01 00               LD   hl,1   
162A   E5                     PUSH   hl   
162B   E5                     PUSH   hl   
162C   CD 15 0E               CALL   run   
162F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
163B   CD DE 0C               CALL   printStr   
163E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
164B   E1                     POP   hl   
164C   E5                     PUSH   hl   
164D   E5                     PUSH   hl   
164E   CD 15 0E               CALL   run   
1651   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1662   76                     HALT      
1663                EXPECTM_2970S47:      
1663   E1                     POP   HL   
1664                          ;*Macro unroll:  test "-1 1 +",0
1664   31 00 5B               LD   SP,STACK   
1667   CD 4C 0D               CALL   coldInit   
166A   CD 20 59               CALL   execStr   
166D   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
1674   E1                     POP   HL   
1675   E5                     PUSH   HL   
1676   11 00 00               LD   DE,0   
1679   B7                     OR   A   
167A   ED 52                  SBC   HL,DE   
167C   7D                     LD   A,L   
167D   B4                     OR   H   
167E   CA DF 16               JP   Z,expectM_2971S48   
1681   CD DE 0C               CALL   printStr   
1684   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1691   CD DE 0C               CALL   printStr   
1694   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16A3   21 00 00               LD   hl,0   
16A6   E5                     PUSH   hl   
16A7   E5                     PUSH   hl   
16A8   CD 15 0E               CALL   run   
16AB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
16B7   CD DE 0C               CALL   printStr   
16BA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16C7   E1                     POP   hl   
16C8   E5                     PUSH   hl   
16C9   E5                     PUSH   hl   
16CA   CD 15 0E               CALL   run   
16CD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
16DE   76                     HALT      
16DF                EXPECTM_2971S48:      
16DF   E1                     POP   HL   
16E0                          ;*Macro unroll:  test "1 2 +", 3
16E0   31 00 5B               LD   SP,STACK   
16E3   CD 4C 0D               CALL   coldInit   
16E6   CD 20 59               CALL   execStr   
16E9   31 20 32 20 2B 00      DB   "1 2 +",0   
16EF   E1                     POP   HL   
16F0   E5                     PUSH   HL   
16F1   11 03 00               LD   DE,3   
16F4   B7                     OR   A   
16F5   ED 52                  SBC   HL,DE   
16F7   7D                     LD   A,L   
16F8   B4                     OR   H   
16F9   CA 59 17               JP   Z,expectM_2972S49   
16FC   CD DE 0C               CALL   printStr   
16FF   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
170B   CD DE 0C               CALL   printStr   
170E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
171D   21 03 00               LD   hl,3   
1720   E5                     PUSH   hl   
1721   E5                     PUSH   hl   
1722   CD 15 0E               CALL   run   
1725   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1731   CD DE 0C               CALL   printStr   
1734   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1741   E1                     POP   hl   
1742   E5                     PUSH   hl   
1743   E5                     PUSH   hl   
1744   CD 15 0E               CALL   run   
1747   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1758   76                     HALT      
1759                EXPECTM_2972S49:      
1759   E1                     POP   HL   
175A                          ;*Macro unroll:  test "4 1 2 +", 3
175A   31 00 5B               LD   SP,STACK   
175D   CD 4C 0D               CALL   coldInit   
1760   CD 20 59               CALL   execStr   
1763   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
176B   E1                     POP   HL   
176C   E5                     PUSH   HL   
176D   11 03 00               LD   DE,3   
1770   B7                     OR   A   
1771   ED 52                  SBC   HL,DE   
1773   7D                     LD   A,L   
1774   B4                     OR   H   
1775   CA D7 17               JP   Z,expectM_2973S50   
1778   CD DE 0C               CALL   printStr   
177B   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1789   CD DE 0C               CALL   printStr   
178C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
179B   21 03 00               LD   hl,3   
179E   E5                     PUSH   hl   
179F   E5                     PUSH   hl   
17A0   CD 15 0E               CALL   run   
17A3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
17AF   CD DE 0C               CALL   printStr   
17B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17BF   E1                     POP   hl   
17C0   E5                     PUSH   hl   
17C1   E5                     PUSH   hl   
17C2   CD 15 0E               CALL   run   
17C5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
17D6   76                     HALT      
17D7                EXPECTM_2973S50:      
17D7   E1                     POP   HL   
17D8                          ;*Macro unroll:  test "123 456 +", 123+456
17D8   31 00 5B               LD   SP,STACK   
17DB   CD 4C 0D               CALL   coldInit   
17DE   CD 20 59               CALL   execStr   
17E1   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
17EB   E1                     POP   HL   
17EC   E5                     PUSH   HL   
17ED   11 43 02               LD   DE,123+456   
17F0   B7                     OR   A   
17F1   ED 52                  SBC   HL,DE   
17F3   7D                     LD   A,L   
17F4   B4                     OR   H   
17F5   CA 59 18               JP   Z,expectM_2974S51   
17F8   CD DE 0C               CALL   printStr   
17FB   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
180B   CD DE 0C               CALL   printStr   
180E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
181D   21 43 02               LD   hl,123+456   
1820   E5                     PUSH   hl   
1821   E5                     PUSH   hl   
1822   CD 15 0E               CALL   run   
1825   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1831   CD DE 0C               CALL   printStr   
1834   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1841   E1                     POP   hl   
1842   E5                     PUSH   hl   
1843   E5                     PUSH   hl   
1844   CD 15 0E               CALL   run   
1847   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1858   76                     HALT      
1859                EXPECTM_2974S51:      
1859   E1                     POP   HL   
185A                          ;*Macro unroll:  test "64 128 +", 64+128
185A   31 00 5B               LD   SP,STACK   
185D   CD 4C 0D               CALL   coldInit   
1860   CD 20 59               CALL   execStr   
1863   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
186C   E1                     POP   HL   
186D   E5                     PUSH   HL   
186E   11 C0 00               LD   DE,64+128   
1871   B7                     OR   A   
1872   ED 52                  SBC   HL,DE   
1874   7D                     LD   A,L   
1875   B4                     OR   H   
1876   CA D9 18               JP   Z,expectM_2975S52   
1879   CD DE 0C               CALL   printStr   
187C   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
188B   CD DE 0C               CALL   printStr   
188E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
189D   21 C0 00               LD   hl,64+128   
18A0   E5                     PUSH   hl   
18A1   E5                     PUSH   hl   
18A2   CD 15 0E               CALL   run   
18A5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
18B1   CD DE 0C               CALL   printStr   
18B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18C1   E1                     POP   hl   
18C2   E5                     PUSH   hl   
18C3   E5                     PUSH   hl   
18C4   CD 15 0E               CALL   run   
18C7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
18D8   76                     HALT      
18D9                EXPECTM_2975S52:      
18D9   E1                     POP   HL   
18DA                          ;*Macro unroll:  test "1 2 +", 3
18DA   31 00 5B               LD   SP,STACK   
18DD   CD 4C 0D               CALL   coldInit   
18E0   CD 20 59               CALL   execStr   
18E3   31 20 32 20 2B 00      DB   "1 2 +",0   
18E9   E1                     POP   HL   
18EA   E5                     PUSH   HL   
18EB   11 03 00               LD   DE,3   
18EE   B7                     OR   A   
18EF   ED 52                  SBC   HL,DE   
18F1   7D                     LD   A,L   
18F2   B4                     OR   H   
18F3   CA 53 19               JP   Z,expectM_2976S53   
18F6   CD DE 0C               CALL   printStr   
18F9   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1905   CD DE 0C               CALL   printStr   
1908   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1917   21 03 00               LD   hl,3   
191A   E5                     PUSH   hl   
191B   E5                     PUSH   hl   
191C   CD 15 0E               CALL   run   
191F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
192B   CD DE 0C               CALL   printStr   
192E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
193B   E1                     POP   hl   
193C   E5                     PUSH   hl   
193D   E5                     PUSH   hl   
193E   CD 15 0E               CALL   run   
1941   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1952   76                     HALT      
1953                EXPECTM_2976S53:      
1953   E1                     POP   HL   
1954                          ;*Macro unroll:  test "1a= a++ a",2
1954   31 00 5B               LD   SP,STACK   
1957   CD 4C 0D               CALL   coldInit   
195A   CD 20 59               CALL   execStr   
195D   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1967   E1                     POP   HL   
1968   E5                     PUSH   HL   
1969   11 02 00               LD   DE,2   
196C   B7                     OR   A   
196D   ED 52                  SBC   HL,DE   
196F   7D                     LD   A,L   
1970   B4                     OR   H   
1971   CA D5 19               JP   Z,expectM_2977S54   
1974   CD DE 0C               CALL   printStr   
1977   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1987   CD DE 0C               CALL   printStr   
198A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1999   21 02 00               LD   hl,2   
199C   E5                     PUSH   hl   
199D   E5                     PUSH   hl   
199E   CD 15 0E               CALL   run   
19A1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
19AD   CD DE 0C               CALL   printStr   
19B0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19BD   E1                     POP   hl   
19BE   E5                     PUSH   hl   
19BF   E5                     PUSH   hl   
19C0   CD 15 0E               CALL   run   
19C3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
19D4   76                     HALT      
19D5                EXPECTM_2977S54:      
19D5   E1                     POP   HL   
19D6                          ;*Macro unroll:  test "-1 -1 -",0
19D6   31 00 5B               LD   SP,STACK   
19D9   CD 4C 0D               CALL   coldInit   
19DC   CD 20 59               CALL   execStr   
19DF   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
19E7   E1                     POP   HL   
19E8   E5                     PUSH   HL   
19E9   11 00 00               LD   DE,0   
19EC   B7                     OR   A   
19ED   ED 52                  SBC   HL,DE   
19EF   7D                     LD   A,L   
19F0   B4                     OR   H   
19F1   CA 53 1A               JP   Z,expectM_2978S55   
19F4   CD DE 0C               CALL   printStr   
19F7   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1A05   CD DE 0C               CALL   printStr   
1A08   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A17   21 00 00               LD   hl,0   
1A1A   E5                     PUSH   hl   
1A1B   E5                     PUSH   hl   
1A1C   CD 15 0E               CALL   run   
1A1F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1A2B   CD DE 0C               CALL   printStr   
1A2E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A3B   E1                     POP   hl   
1A3C   E5                     PUSH   hl   
1A3D   E5                     PUSH   hl   
1A3E   CD 15 0E               CALL   run   
1A41   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1A52   76                     HALT      
1A53                EXPECTM_2978S55:      
1A53   E1                     POP   HL   
1A54                          ;*Macro unroll:  test "5 3 -", 2
1A54   31 00 5B               LD   SP,STACK   
1A57   CD 4C 0D               CALL   coldInit   
1A5A   CD 20 59               CALL   execStr   
1A5D   35 20 33 20 2D 00      DB   "5 3 -",0   
1A63   E1                     POP   HL   
1A64   E5                     PUSH   HL   
1A65   11 02 00               LD   DE,2   
1A68   B7                     OR   A   
1A69   ED 52                  SBC   HL,DE   
1A6B   7D                     LD   A,L   
1A6C   B4                     OR   H   
1A6D   CA CD 1A               JP   Z,expectM_2979S56   
1A70   CD DE 0C               CALL   printStr   
1A73   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1A7F   CD DE 0C               CALL   printStr   
1A82   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A91   21 02 00               LD   hl,2   
1A94   E5                     PUSH   hl   
1A95   E5                     PUSH   hl   
1A96   CD 15 0E               CALL   run   
1A99   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1AA5   CD DE 0C               CALL   printStr   
1AA8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AB5   E1                     POP   hl   
1AB6   E5                     PUSH   hl   
1AB7   E5                     PUSH   hl   
1AB8   CD 15 0E               CALL   run   
1ABB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1ACC   76                     HALT      
1ACD                EXPECTM_2979S56:      
1ACD   E1                     POP   HL   
1ACE                          ;*Macro unroll:  test "2 1 -",1
1ACE   31 00 5B               LD   SP,STACK   
1AD1   CD 4C 0D               CALL   coldInit   
1AD4   CD 20 59               CALL   execStr   
1AD7   32 20 31 20 2D 00      DB   "2 1 -",0   
1ADD   E1                     POP   HL   
1ADE   E5                     PUSH   HL   
1ADF   11 01 00               LD   DE,1   
1AE2   B7                     OR   A   
1AE3   ED 52                  SBC   HL,DE   
1AE5   7D                     LD   A,L   
1AE6   B4                     OR   H   
1AE7   CA 47 1B               JP   Z,expectM_2980S57   
1AEA   CD DE 0C               CALL   printStr   
1AED   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1AF9   CD DE 0C               CALL   printStr   
1AFC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B0B   21 01 00               LD   hl,1   
1B0E   E5                     PUSH   hl   
1B0F   E5                     PUSH   hl   
1B10   CD 15 0E               CALL   run   
1B13   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1B1F   CD DE 0C               CALL   printStr   
1B22   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B2F   E1                     POP   hl   
1B30   E5                     PUSH   hl   
1B31   E5                     PUSH   hl   
1B32   CD 15 0E               CALL   run   
1B35   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1B46   76                     HALT      
1B47                EXPECTM_2980S57:      
1B47   E1                     POP   HL   
1B48                          ;*Macro unroll:  test "3a= a-- a",2
1B48   31 00 5B               LD   SP,STACK   
1B4B   CD 4C 0D               CALL   coldInit   
1B4E   CD 20 59               CALL   execStr   
1B51   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1B5B   E1                     POP   HL   
1B5C   E5                     PUSH   HL   
1B5D   11 02 00               LD   DE,2   
1B60   B7                     OR   A   
1B61   ED 52                  SBC   HL,DE   
1B63   7D                     LD   A,L   
1B64   B4                     OR   H   
1B65   CA C9 1B               JP   Z,expectM_2981S58   
1B68   CD DE 0C               CALL   printStr   
1B6B   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1B7B   CD DE 0C               CALL   printStr   
1B7E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B8D   21 02 00               LD   hl,2   
1B90   E5                     PUSH   hl   
1B91   E5                     PUSH   hl   
1B92   CD 15 0E               CALL   run   
1B95   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1BA1   CD DE 0C               CALL   printStr   
1BA4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BB1   E1                     POP   hl   
1BB2   E5                     PUSH   hl   
1BB3   E5                     PUSH   hl   
1BB4   CD 15 0E               CALL   run   
1BB7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1BC8   76                     HALT      
1BC9                EXPECTM_2981S58:      
1BC9   E1                     POP   HL   
1BCA                          ;*Macro unroll:  test "3 5 &", 1
1BCA   31 00 5B               LD   SP,STACK   
1BCD   CD 4C 0D               CALL   coldInit   
1BD0   CD 20 59               CALL   execStr   
1BD3   33 20 35 20 26 00      DB   "3 5 &",0   
1BD9   E1                     POP   HL   
1BDA   E5                     PUSH   HL   
1BDB   11 01 00               LD   DE,1   
1BDE   B7                     OR   A   
1BDF   ED 52                  SBC   HL,DE   
1BE1   7D                     LD   A,L   
1BE2   B4                     OR   H   
1BE3   CA 43 1C               JP   Z,expectM_2982S59   
1BE6   CD DE 0C               CALL   printStr   
1BE9   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1BF5   CD DE 0C               CALL   printStr   
1BF8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C07   21 01 00               LD   hl,1   
1C0A   E5                     PUSH   hl   
1C0B   E5                     PUSH   hl   
1C0C   CD 15 0E               CALL   run   
1C0F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1C1B   CD DE 0C               CALL   printStr   
1C1E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C2B   E1                     POP   hl   
1C2C   E5                     PUSH   hl   
1C2D   E5                     PUSH   hl   
1C2E   CD 15 0E               CALL   run   
1C31   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1C42   76                     HALT      
1C43                EXPECTM_2982S59:      
1C43   E1                     POP   HL   
1C44                          ;*Macro unroll:  test "3 5 |", 7
1C44   31 00 5B               LD   SP,STACK   
1C47   CD 4C 0D               CALL   coldInit   
1C4A   CD 20 59               CALL   execStr   
1C4D   33 20 35 20 7C 00      DB   "3 5 |",0   
1C53   E1                     POP   HL   
1C54   E5                     PUSH   HL   
1C55   11 07 00               LD   DE,7   
1C58   B7                     OR   A   
1C59   ED 52                  SBC   HL,DE   
1C5B   7D                     LD   A,L   
1C5C   B4                     OR   H   
1C5D   CA BD 1C               JP   Z,expectM_2983S60   
1C60   CD DE 0C               CALL   printStr   
1C63   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1C6F   CD DE 0C               CALL   printStr   
1C72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C81   21 07 00               LD   hl,7   
1C84   E5                     PUSH   hl   
1C85   E5                     PUSH   hl   
1C86   CD 15 0E               CALL   run   
1C89   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1C95   CD DE 0C               CALL   printStr   
1C98   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CA5   E1                     POP   hl   
1CA6   E5                     PUSH   hl   
1CA7   E5                     PUSH   hl   
1CA8   CD 15 0E               CALL   run   
1CAB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1CBC   76                     HALT      
1CBD                EXPECTM_2983S60:      
1CBD   E1                     POP   HL   
1CBE                          ;*Macro unroll:  test "3 5 /xor", 6
1CBE   31 00 5B               LD   SP,STACK   
1CC1   CD 4C 0D               CALL   coldInit   
1CC4   CD 20 59               CALL   execStr   
1CC7   33 20 35 20 2F 78 6F 72 00 DB   "3 5 /xor",0   
1CD0   E1                     POP   HL   
1CD1   E5                     PUSH   HL   
1CD2   11 06 00               LD   DE,6   
1CD5   B7                     OR   A   
1CD6   ED 52                  SBC   HL,DE   
1CD8   7D                     LD   A,L   
1CD9   B4                     OR   H   
1CDA   CA 3D 1D               JP   Z,expectM_2984S61   
1CDD   CD DE 0C               CALL   printStr   
1CE0   43 6F 64 65 3A 20 33 20 35 20 2F 78 6F 72 00 .CSTR   "Code: ","3 5 /xor"   
1CEF   CD DE 0C               CALL   printStr   
1CF2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D01   21 06 00               LD   hl,6   
1D04   E5                     PUSH   hl   
1D05   E5                     PUSH   hl   
1D06   CD 15 0E               CALL   run   
1D09   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1D15   CD DE 0C               CALL   printStr   
1D18   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D25   E1                     POP   hl   
1D26   E5                     PUSH   hl   
1D27   E5                     PUSH   hl   
1D28   CD 15 0E               CALL   run   
1D2B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1D3C   76                     HALT      
1D3D                EXPECTM_2984S61:      
1D3D   E1                     POP   HL   
1D3E                          ;*Macro unroll:  test "3a= 5 a/xor a= a",6
1D3E   31 00 5B               LD   SP,STACK   
1D41   CD 4C 0D               CALL   coldInit   
1D44   CD 20 59               CALL   execStr   
1D47   33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 DB   "3a= 5 a/xor a= a",0   
1D58   E1                     POP   HL   
1D59   E5                     PUSH   HL   
1D5A   11 06 00               LD   DE,6   
1D5D   B7                     OR   A   
1D5E   ED 52                  SBC   HL,DE   
1D60   7D                     LD   A,L   
1D61   B4                     OR   H   
1D62   CA CD 1D               JP   Z,expectM_2985S62   
1D65   CD DE 0C               CALL   printStr   
1D68   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/xor a= a"   
1D7F   CD DE 0C               CALL   printStr   
1D82   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D91   21 06 00               LD   hl,6   
1D94   E5                     PUSH   hl   
1D95   E5                     PUSH   hl   
1D96   CD 15 0E               CALL   run   
1D99   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1DA5   CD DE 0C               CALL   printStr   
1DA8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DB5   E1                     POP   hl   
1DB6   E5                     PUSH   hl   
1DB7   E5                     PUSH   hl   
1DB8   CD 15 0E               CALL   run   
1DBB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1DCC   76                     HALT      
1DCD                EXPECTM_2985S62:      
1DCD   E1                     POP   HL   
1DCE                          ;*Macro unroll:  test "0 !", true
1DCE   31 00 5B               LD   SP,STACK   
1DD1   CD 4C 0D               CALL   coldInit   
1DD4   CD 20 59               CALL   execStr   
1DD7   30 20 21 00            DB   "0 !",0   
1DDB   E1                     POP   HL   
1DDC   E5                     PUSH   HL   
1DDD   11 FF FF               LD   DE,true   
1DE0   B7                     OR   A   
1DE1   ED 52                  SBC   HL,DE   
1DE3   7D                     LD   A,L   
1DE4   B4                     OR   H   
1DE5   CA 43 1E               JP   Z,expectM_2986S63   
1DE8   CD DE 0C               CALL   printStr   
1DEB   43 6F 64 65 3A 20 30 20 21 00 .CSTR   "Code: ","0 !"   
1DF5   CD DE 0C               CALL   printStr   
1DF8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E07   21 FF FF               LD   hl,true   
1E0A   E5                     PUSH   hl   
1E0B   E5                     PUSH   hl   
1E0C   CD 15 0E               CALL   run   
1E0F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1E1B   CD DE 0C               CALL   printStr   
1E1E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E2B   E1                     POP   hl   
1E2C   E5                     PUSH   hl   
1E2D   E5                     PUSH   hl   
1E2E   CD 15 0E               CALL   run   
1E31   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1E42   76                     HALT      
1E43                EXPECTM_2986S63:      
1E43   E1                     POP   HL   
1E44                          ;*Macro unroll:  test "2 !", false
1E44   31 00 5B               LD   SP,STACK   
1E47   CD 4C 0D               CALL   coldInit   
1E4A   CD 20 59               CALL   execStr   
1E4D   32 20 21 00            DB   "2 !",0   
1E51   E1                     POP   HL   
1E52   E5                     PUSH   HL   
1E53   11 00 00               LD   DE,false   
1E56   B7                     OR   A   
1E57   ED 52                  SBC   HL,DE   
1E59   7D                     LD   A,L   
1E5A   B4                     OR   H   
1E5B   CA B9 1E               JP   Z,expectM_2987S64   
1E5E   CD DE 0C               CALL   printStr   
1E61   43 6F 64 65 3A 20 32 20 21 00 .CSTR   "Code: ","2 !"   
1E6B   CD DE 0C               CALL   printStr   
1E6E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E7D   21 00 00               LD   hl,false   
1E80   E5                     PUSH   hl   
1E81   E5                     PUSH   hl   
1E82   CD 15 0E               CALL   run   
1E85   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1E91   CD DE 0C               CALL   printStr   
1E94   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EA1   E1                     POP   hl   
1EA2   E5                     PUSH   hl   
1EA3   E5                     PUSH   hl   
1EA4   CD 15 0E               CALL   run   
1EA7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1EB8   76                     HALT      
1EB9                EXPECTM_2987S64:      
1EB9   E1                     POP   HL   
1EBA                          ;*Macro unroll:  test "0 !!", false
1EBA   31 00 5B               LD   SP,STACK   
1EBD   CD 4C 0D               CALL   coldInit   
1EC0   CD 20 59               CALL   execStr   
1EC3   30 20 21 21 00         DB   "0 !!",0   
1EC8   E1                     POP   HL   
1EC9   E5                     PUSH   HL   
1ECA   11 00 00               LD   DE,false   
1ECD   B7                     OR   A   
1ECE   ED 52                  SBC   HL,DE   
1ED0   7D                     LD   A,L   
1ED1   B4                     OR   H   
1ED2   CA 31 1F               JP   Z,expectM_2988S65   
1ED5   CD DE 0C               CALL   printStr   
1ED8   43 6F 64 65 3A 20 30 20 21 21 00 .CSTR   "Code: ","0 !!"   
1EE3   CD DE 0C               CALL   printStr   
1EE6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EF5   21 00 00               LD   hl,false   
1EF8   E5                     PUSH   hl   
1EF9   E5                     PUSH   hl   
1EFA   CD 15 0E               CALL   run   
1EFD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1F09   CD DE 0C               CALL   printStr   
1F0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F19   E1                     POP   hl   
1F1A   E5                     PUSH   hl   
1F1B   E5                     PUSH   hl   
1F1C   CD 15 0E               CALL   run   
1F1F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1F30   76                     HALT      
1F31                EXPECTM_2988S65:      
1F31   E1                     POP   HL   
1F32                          ;*Macro unroll:  test "2 !!", true
1F32   31 00 5B               LD   SP,STACK   
1F35   CD 4C 0D               CALL   coldInit   
1F38   CD 20 59               CALL   execStr   
1F3B   32 20 21 21 00         DB   "2 !!",0   
1F40   E1                     POP   HL   
1F41   E5                     PUSH   HL   
1F42   11 FF FF               LD   DE,true   
1F45   B7                     OR   A   
1F46   ED 52                  SBC   HL,DE   
1F48   7D                     LD   A,L   
1F49   B4                     OR   H   
1F4A   CA A9 1F               JP   Z,expectM_2989S66   
1F4D   CD DE 0C               CALL   printStr   
1F50   43 6F 64 65 3A 20 32 20 21 21 00 .CSTR   "Code: ","2 !!"   
1F5B   CD DE 0C               CALL   printStr   
1F5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F6D   21 FF FF               LD   hl,true   
1F70   E5                     PUSH   hl   
1F71   E5                     PUSH   hl   
1F72   CD 15 0E               CALL   run   
1F75   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1F81   CD DE 0C               CALL   printStr   
1F84   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F91   E1                     POP   hl   
1F92   E5                     PUSH   hl   
1F93   E5                     PUSH   hl   
1F94   CD 15 0E               CALL   run   
1F97   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1FA8   76                     HALT      
1FA9                EXPECTM_2989S66:      
1FA9   E1                     POP   HL   
1FAA                          ;*Macro unroll:  test "2 3 *", 6
1FAA   31 00 5B               LD   SP,STACK   
1FAD   CD 4C 0D               CALL   coldInit   
1FB0   CD 20 59               CALL   execStr   
1FB3   32 20 33 20 2A 00      DB   "2 3 *",0   
1FB9   E1                     POP   HL   
1FBA   E5                     PUSH   HL   
1FBB   11 06 00               LD   DE,6   
1FBE   B7                     OR   A   
1FBF   ED 52                  SBC   HL,DE   
1FC1   7D                     LD   A,L   
1FC2   B4                     OR   H   
1FC3   CA 23 20               JP   Z,expectM_2990S67   
1FC6   CD DE 0C               CALL   printStr   
1FC9   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1FD5   CD DE 0C               CALL   printStr   
1FD8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FE7   21 06 00               LD   hl,6   
1FEA   E5                     PUSH   hl   
1FEB   E5                     PUSH   hl   
1FEC   CD 15 0E               CALL   run   
1FEF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1FFB   CD DE 0C               CALL   printStr   
1FFE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
200B   E1                     POP   hl   
200C   E5                     PUSH   hl   
200D   E5                     PUSH   hl   
200E   CD 15 0E               CALL   run   
2011   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2022   76                     HALT      
2023                EXPECTM_2990S67:      
2023   E1                     POP   HL   
2024                          ;*Macro unroll:  test "1 2 3 + *", 5
2024   31 00 5B               LD   SP,STACK   
2027   CD 4C 0D               CALL   coldInit   
202A   CD 20 59               CALL   execStr   
202D   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
2037   E1                     POP   HL   
2038   E5                     PUSH   HL   
2039   11 05 00               LD   DE,5   
203C   B7                     OR   A   
203D   ED 52                  SBC   HL,DE   
203F   7D                     LD   A,L   
2040   B4                     OR   H   
2041   CA A5 20               JP   Z,expectM_2991S68   
2044   CD DE 0C               CALL   printStr   
2047   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
2057   CD DE 0C               CALL   printStr   
205A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2069   21 05 00               LD   hl,5   
206C   E5                     PUSH   hl   
206D   E5                     PUSH   hl   
206E   CD 15 0E               CALL   run   
2071   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
207D   CD DE 0C               CALL   printStr   
2080   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
208D   E1                     POP   hl   
208E   E5                     PUSH   hl   
208F   E5                     PUSH   hl   
2090   CD 15 0E               CALL   run   
2093   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
20A4   76                     HALT      
20A5                EXPECTM_2991S68:      
20A5   E1                     POP   HL   
20A6                          ;*Macro unroll:  test "7 3 /", 2
20A6   31 00 5B               LD   SP,STACK   
20A9   CD 4C 0D               CALL   coldInit   
20AC   CD 20 59               CALL   execStr   
20AF   37 20 33 20 2F 00      DB   "7 3 /",0   
20B5   E1                     POP   HL   
20B6   E5                     PUSH   HL   
20B7   11 02 00               LD   DE,2   
20BA   B7                     OR   A   
20BB   ED 52                  SBC   HL,DE   
20BD   7D                     LD   A,L   
20BE   B4                     OR   H   
20BF   CA 1F 21               JP   Z,expectM_2992S69   
20C2   CD DE 0C               CALL   printStr   
20C5   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
20D1   CD DE 0C               CALL   printStr   
20D4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20E3   21 02 00               LD   hl,2   
20E6   E5                     PUSH   hl   
20E7   E5                     PUSH   hl   
20E8   CD 15 0E               CALL   run   
20EB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
20F7   CD DE 0C               CALL   printStr   
20FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2107   E1                     POP   hl   
2108   E5                     PUSH   hl   
2109   E5                     PUSH   hl   
210A   CD 15 0E               CALL   run   
210D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
211E   76                     HALT      
211F                EXPECTM_2992S69:      
211F   E1                     POP   HL   
2120                          ;*Macro unroll:  test "100a= 1a+= a", 101
2120   31 00 5B               LD   SP,STACK   
2123   CD 4C 0D               CALL   coldInit   
2126   CD 20 59               CALL   execStr   
2129   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
2136   E1                     POP   HL   
2137   E5                     PUSH   HL   
2138   11 65 00               LD   DE,101   
213B   B7                     OR   A   
213C   ED 52                  SBC   HL,DE   
213E   7D                     LD   A,L   
213F   B4                     OR   H   
2140   CA A7 21               JP   Z,expectM_2993S70   
2143   CD DE 0C               CALL   printStr   
2146   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
2159   CD DE 0C               CALL   printStr   
215C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
216B   21 65 00               LD   hl,101   
216E   E5                     PUSH   hl   
216F   E5                     PUSH   hl   
2170   CD 15 0E               CALL   run   
2173   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
217F   CD DE 0C               CALL   printStr   
2182   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
218F   E1                     POP   hl   
2190   E5                     PUSH   hl   
2191   E5                     PUSH   hl   
2192   CD 15 0E               CALL   run   
2195   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
21A6   76                     HALT      
21A7                EXPECTM_2993S70:      
21A7   E1                     POP   HL   
21A8                          ;*Macro unroll:  test "100a= 1a-= a", 99
21A8   31 00 5B               LD   SP,STACK   
21AB   CD 4C 0D               CALL   coldInit   
21AE   CD 20 59               CALL   execStr   
21B1   31 30 30 61 3D 20 31 61 2D 3D 20 61 00 DB   "100a= 1a-= a",0   
21BE   E1                     POP   HL   
21BF   E5                     PUSH   HL   
21C0   11 63 00               LD   DE,99   
21C3   B7                     OR   A   
21C4   ED 52                  SBC   HL,DE   
21C6   7D                     LD   A,L   
21C7   B4                     OR   H   
21C8   CA 2F 22               JP   Z,expectM_2994S71   
21CB   CD DE 0C               CALL   printStr   
21CE   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2D 3D 20 61 00 .CSTR   "Code: ","100a= 1a-= a"   
21E1   CD DE 0C               CALL   printStr   
21E4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21F3   21 63 00               LD   hl,99   
21F6   E5                     PUSH   hl   
21F7   E5                     PUSH   hl   
21F8   CD 15 0E               CALL   run   
21FB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2207   CD DE 0C               CALL   printStr   
220A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2217   E1                     POP   hl   
2218   E5                     PUSH   hl   
2219   E5                     PUSH   hl   
221A   CD 15 0E               CALL   run   
221D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
222E   76                     HALT      
222F                EXPECTM_2994S71:      
222F   E1                     POP   HL   
2230                          ;*Macro unroll:  test "100a= 2a*= a", 200
2230   31 00 5B               LD   SP,STACK   
2233   CD 4C 0D               CALL   coldInit   
2236   CD 20 59               CALL   execStr   
2239   31 30 30 61 3D 20 32 61 2A 3D 20 61 00 DB   "100a= 2a*= a",0   
2246   E1                     POP   HL   
2247   E5                     PUSH   HL   
2248   11 C8 00               LD   DE,200   
224B   B7                     OR   A   
224C   ED 52                  SBC   HL,DE   
224E   7D                     LD   A,L   
224F   B4                     OR   H   
2250   CA B7 22               JP   Z,expectM_2995S72   
2253   CD DE 0C               CALL   printStr   
2256   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 61 2A 3D 20 61 00 .CSTR   "Code: ","100a= 2a*= a"   
2269   CD DE 0C               CALL   printStr   
226C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
227B   21 C8 00               LD   hl,200   
227E   E5                     PUSH   hl   
227F   E5                     PUSH   hl   
2280   CD 15 0E               CALL   run   
2283   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
228F   CD DE 0C               CALL   printStr   
2292   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
229F   E1                     POP   hl   
22A0   E5                     PUSH   hl   
22A1   E5                     PUSH   hl   
22A2   CD 15 0E               CALL   run   
22A5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
22B6   76                     HALT      
22B7                EXPECTM_2995S72:      
22B7   E1                     POP   HL   
22B8                          ;*Macro unroll:  test "100a= 2 a/= a", 50
22B8   31 00 5B               LD   SP,STACK   
22BB   CD 4C 0D               CALL   coldInit   
22BE   CD 20 59               CALL   execStr   
22C1   31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 DB   "100a= 2 a/= a",0   
22CF   E1                     POP   HL   
22D0   E5                     PUSH   HL   
22D1   11 32 00               LD   DE,50   
22D4   B7                     OR   A   
22D5   ED 52                  SBC   HL,DE   
22D7   7D                     LD   A,L   
22D8   B4                     OR   H   
22D9   CA 41 23               JP   Z,expectM_2996S73   
22DC   CD DE 0C               CALL   printStr   
22DF   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 .CSTR   "Code: ","100a= 2 a/= a"   
22F3   CD DE 0C               CALL   printStr   
22F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2305   21 32 00               LD   hl,50   
2308   E5                     PUSH   hl   
2309   E5                     PUSH   hl   
230A   CD 15 0E               CALL   run   
230D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2319   CD DE 0C               CALL   printStr   
231C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2329   E1                     POP   hl   
232A   E5                     PUSH   hl   
232B   E5                     PUSH   hl   
232C   CD 15 0E               CALL   run   
232F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2340   76                     HALT      
2341                EXPECTM_2996S73:      
2341   E1                     POP   HL   
2342                          ;*Macro unroll:  test "2a= 3b= a b+= b", 5
2342   31 00 5B               LD   SP,STACK   
2345   CD 4C 0D               CALL   coldInit   
2348   CD 20 59               CALL   execStr   
234B   32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 DB   "2a= 3b= a b+= b",0   
235B   E1                     POP   HL   
235C   E5                     PUSH   HL   
235D   11 05 00               LD   DE,5   
2360   B7                     OR   A   
2361   ED 52                  SBC   HL,DE   
2363   7D                     LD   A,L   
2364   B4                     OR   H   
2365   CA CF 23               JP   Z,expectM_2997S74   
2368   CD DE 0C               CALL   printStr   
236B   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b+= b"   
2381   CD DE 0C               CALL   printStr   
2384   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2393   21 05 00               LD   hl,5   
2396   E5                     PUSH   hl   
2397   E5                     PUSH   hl   
2398   CD 15 0E               CALL   run   
239B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
23A7   CD DE 0C               CALL   printStr   
23AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23B7   E1                     POP   hl   
23B8   E5                     PUSH   hl   
23B9   E5                     PUSH   hl   
23BA   CD 15 0E               CALL   run   
23BD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
23CE   76                     HALT      
23CF                EXPECTM_2997S74:      
23CF   E1                     POP   HL   
23D0                          ;*Macro unroll:  test "2a= 3b= a b-= b", 1
23D0   31 00 5B               LD   SP,STACK   
23D3   CD 4C 0D               CALL   coldInit   
23D6   CD 20 59               CALL   execStr   
23D9   32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 DB   "2a= 3b= a b-= b",0   
23E9   E1                     POP   HL   
23EA   E5                     PUSH   HL   
23EB   11 01 00               LD   DE,1   
23EE   B7                     OR   A   
23EF   ED 52                  SBC   HL,DE   
23F1   7D                     LD   A,L   
23F2   B4                     OR   H   
23F3   CA 5D 24               JP   Z,expectM_2998S75   
23F6   CD DE 0C               CALL   printStr   
23F9   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b-= b"   
240F   CD DE 0C               CALL   printStr   
2412   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2421   21 01 00               LD   hl,1   
2424   E5                     PUSH   hl   
2425   E5                     PUSH   hl   
2426   CD 15 0E               CALL   run   
2429   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2435   CD DE 0C               CALL   printStr   
2438   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2445   E1                     POP   hl   
2446   E5                     PUSH   hl   
2447   E5                     PUSH   hl   
2448   CD 15 0E               CALL   run   
244B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
245C   76                     HALT      
245D                EXPECTM_2998S75:      
245D   E1                     POP   HL   
245E                          ;*Macro unroll:  test "2a= 3b= a b*= b", 6
245E   31 00 5B               LD   SP,STACK   
2461   CD 4C 0D               CALL   coldInit   
2464   CD 20 59               CALL   execStr   
2467   32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 DB   "2a= 3b= a b*= b",0   
2477   E1                     POP   HL   
2478   E5                     PUSH   HL   
2479   11 06 00               LD   DE,6   
247C   B7                     OR   A   
247D   ED 52                  SBC   HL,DE   
247F   7D                     LD   A,L   
2480   B4                     OR   H   
2481   CA EB 24               JP   Z,expectM_2999S76   
2484   CD DE 0C               CALL   printStr   
2487   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b*= b"   
249D   CD DE 0C               CALL   printStr   
24A0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24AF   21 06 00               LD   hl,6   
24B2   E5                     PUSH   hl   
24B3   E5                     PUSH   hl   
24B4   CD 15 0E               CALL   run   
24B7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
24C3   CD DE 0C               CALL   printStr   
24C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24D3   E1                     POP   hl   
24D4   E5                     PUSH   hl   
24D5   E5                     PUSH   hl   
24D6   CD 15 0E               CALL   run   
24D9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
24EA   76                     HALT      
24EB                EXPECTM_2999S76:      
24EB   E1                     POP   HL   
24EC                          ;*Macro unroll:  test "2a= 6b= a b/= b", 3
24EC   31 00 5B               LD   SP,STACK   
24EF   CD 4C 0D               CALL   coldInit   
24F2   CD 20 59               CALL   execStr   
24F5   32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 DB   "2a= 6b= a b/= b",0   
2505   E1                     POP   HL   
2506   E5                     PUSH   HL   
2507   11 03 00               LD   DE,3   
250A   B7                     OR   A   
250B   ED 52                  SBC   HL,DE   
250D   7D                     LD   A,L   
250E   B4                     OR   H   
250F   CA 79 25               JP   Z,expectM_3000S77   
2512   CD DE 0C               CALL   printStr   
2515   43 6F 64 65 3A 20 32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 .CSTR   "Code: ","2a= 6b= a b/= b"   
252B   CD DE 0C               CALL   printStr   
252E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
253D   21 03 00               LD   hl,3   
2540   E5                     PUSH   hl   
2541   E5                     PUSH   hl   
2542   CD 15 0E               CALL   run   
2545   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2551   CD DE 0C               CALL   printStr   
2554   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2561   E1                     POP   hl   
2562   E5                     PUSH   hl   
2563   E5                     PUSH   hl   
2564   CD 15 0E               CALL   run   
2567   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2578   76                     HALT      
2579                EXPECTM_3000S77:      
2579   E1                     POP   HL   
257A                          ;*Macro unroll:  test "$55a= $AAa&= a",0
257A   31 00 5B               LD   SP,STACK   
257D   CD 4C 0D               CALL   coldInit   
2580   CD 20 59               CALL   execStr   
2583   24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 DB   "$55a= $AAa&= a",0   
2592   E1                     POP   HL   
2593   E5                     PUSH   HL   
2594   11 00 00               LD   DE,0   
2597   B7                     OR   A   
2598   ED 52                  SBC   HL,DE   
259A   7D                     LD   A,L   
259B   B4                     OR   H   
259C   CA 05 26               JP   Z,expectM_3001S78   
259F   CD DE 0C               CALL   printStr   
25A2   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa&= a"   
25B7   CD DE 0C               CALL   printStr   
25BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25C9   21 00 00               LD   hl,0   
25CC   E5                     PUSH   hl   
25CD   E5                     PUSH   hl   
25CE   CD 15 0E               CALL   run   
25D1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
25DD   CD DE 0C               CALL   printStr   
25E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25ED   E1                     POP   hl   
25EE   E5                     PUSH   hl   
25EF   E5                     PUSH   hl   
25F0   CD 15 0E               CALL   run   
25F3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2604   76                     HALT      
2605                EXPECTM_3001S78:      
2605   E1                     POP   HL   
2606                          ;*Macro unroll:  test "$55a= $AAa|= a",$FF
2606   31 00 5B               LD   SP,STACK   
2609   CD 4C 0D               CALL   coldInit   
260C   CD 20 59               CALL   execStr   
260F   24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 DB   "$55a= $AAa|= a",0   
261E   E1                     POP   HL   
261F   E5                     PUSH   HL   
2620   11 FF 00               LD   DE,$FF   
2623   B7                     OR   A   
2624   ED 52                  SBC   HL,DE   
2626   7D                     LD   A,L   
2627   B4                     OR   H   
2628   CA 91 26               JP   Z,expectM_3002S79   
262B   CD DE 0C               CALL   printStr   
262E   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa|= a"   
2643   CD DE 0C               CALL   printStr   
2646   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2655   21 FF 00               LD   hl,$FF   
2658   E5                     PUSH   hl   
2659   E5                     PUSH   hl   
265A   CD 15 0E               CALL   run   
265D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2669   CD DE 0C               CALL   printStr   
266C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2679   E1                     POP   hl   
267A   E5                     PUSH   hl   
267B   E5                     PUSH   hl   
267C   CD 15 0E               CALL   run   
267F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2690   76                     HALT      
2691                EXPECTM_3002S79:      
2691   E1                     POP   HL   
2692                          ;*Macro unroll:  test "$A5a= $AAa /xor= a",$0F
2692   31 00 5B               LD   SP,STACK   
2695   CD 4C 0D               CALL   coldInit   
2698   CD 20 59               CALL   execStr   
269B   24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 DB   "$A5a= $AAa /xor= a",0   
26AE   E1                     POP   HL   
26AF   E5                     PUSH   HL   
26B0   11 0F 00               LD   DE,$0F   
26B3   B7                     OR   A   
26B4   ED 52                  SBC   HL,DE   
26B6   7D                     LD   A,L   
26B7   B4                     OR   H   
26B8   CA 25 27               JP   Z,expectM_3003S80   
26BB   CD DE 0C               CALL   printStr   
26BE   43 6F 64 65 3A 20 24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 .CSTR   "Code: ","$A5a= $AAa /xor= a"   
26D7   CD DE 0C               CALL   printStr   
26DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26E9   21 0F 00               LD   hl,$0F   
26EC   E5                     PUSH   hl   
26ED   E5                     PUSH   hl   
26EE   CD 15 0E               CALL   run   
26F1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
26FD   CD DE 0C               CALL   printStr   
2700   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
270D   E1                     POP   hl   
270E   E5                     PUSH   hl   
270F   E5                     PUSH   hl   
2710   CD 15 0E               CALL   run   
2713   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2724   76                     HALT      
2725                EXPECTM_3003S80:      
2725   E1                     POP   HL   
2726                          ;*Macro unroll:  test "$00AA~",$FF55
2726   31 00 5B               LD   SP,STACK   
2729   CD 4C 0D               CALL   coldInit   
272C   CD 20 59               CALL   execStr   
272F   24 30 30 41 41 7E 00   DB   "$00AA~",0   
2736   E1                     POP   HL   
2737   E5                     PUSH   HL   
2738   11 55 FF               LD   DE,$FF55   
273B   B7                     OR   A   
273C   ED 52                  SBC   HL,DE   
273E   7D                     LD   A,L   
273F   B4                     OR   H   
2740   CA A1 27               JP   Z,expectM_3004S81   
2743   CD DE 0C               CALL   printStr   
2746   43 6F 64 65 3A 20 24 30 30 41 41 7E 00 .CSTR   "Code: ","$00AA~"   
2753   CD DE 0C               CALL   printStr   
2756   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2765   21 55 FF               LD   hl,$FF55   
2768   E5                     PUSH   hl   
2769   E5                     PUSH   hl   
276A   CD 15 0E               CALL   run   
276D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2779   CD DE 0C               CALL   printStr   
277C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2789   E1                     POP   hl   
278A   E5                     PUSH   hl   
278B   E5                     PUSH   hl   
278C   CD 15 0E               CALL   run   
278F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
27A0   76                     HALT      
27A1                EXPECTM_3004S81:      
27A1   E1                     POP   HL   
27A2                          ;*Macro unroll:  test "$AAAAa= a~= a",$5555
27A2   31 00 5B               LD   SP,STACK   
27A5   CD 4C 0D               CALL   coldInit   
27A8   CD 20 59               CALL   execStr   
27AB   24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 DB   "$AAAAa= a~= a",0   
27B9   E1                     POP   HL   
27BA   E5                     PUSH   HL   
27BB   11 55 55               LD   DE,$5555   
27BE   B7                     OR   A   
27BF   ED 52                  SBC   HL,DE   
27C1   7D                     LD   A,L   
27C2   B4                     OR   H   
27C3   CA 2B 28               JP   Z,expectM_3005S82   
27C6   CD DE 0C               CALL   printStr   
27C9   43 6F 64 65 3A 20 24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 .CSTR   "Code: ","$AAAAa= a~= a"   
27DD   CD DE 0C               CALL   printStr   
27E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27EF   21 55 55               LD   hl,$5555   
27F2   E5                     PUSH   hl   
27F3   E5                     PUSH   hl   
27F4   CD 15 0E               CALL   run   
27F7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2803   CD DE 0C               CALL   printStr   
2806   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2813   E1                     POP   hl   
2814   E5                     PUSH   hl   
2815   E5                     PUSH   hl   
2816   CD 15 0E               CALL   run   
2819   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
282A   76                     HALT      
282B                EXPECTM_3005S82:      
282B   E1                     POP   HL   
282C                          ;*Macro unroll:  test "3x= 1 x <<= x", 6
282C   31 00 5B               LD   SP,STACK   
282F   CD 4C 0D               CALL   coldInit   
2832   CD 20 59               CALL   execStr   
2835   33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 DB   "3x= 1 x <<= x",0   
2843   E1                     POP   HL   
2844   E5                     PUSH   HL   
2845   11 06 00               LD   DE,6   
2848   B7                     OR   A   
2849   ED 52                  SBC   HL,DE   
284B   7D                     LD   A,L   
284C   B4                     OR   H   
284D   CA B5 28               JP   Z,expectM_3006S83   
2850   CD DE 0C               CALL   printStr   
2853   43 6F 64 65 3A 20 33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 .CSTR   "Code: ","3x= 1 x <<= x"   
2867   CD DE 0C               CALL   printStr   
286A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2879   21 06 00               LD   hl,6   
287C   E5                     PUSH   hl   
287D   E5                     PUSH   hl   
287E   CD 15 0E               CALL   run   
2881   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
288D   CD DE 0C               CALL   printStr   
2890   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
289D   E1                     POP   hl   
289E   E5                     PUSH   hl   
289F   E5                     PUSH   hl   
28A0   CD 15 0E               CALL   run   
28A3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
28B4   76                     HALT      
28B5                EXPECTM_3006S83:      
28B5   E1                     POP   HL   
28B6                          ;*Macro unroll:  test "10x= 1 x >>= x", 5
28B6   31 00 5B               LD   SP,STACK   
28B9   CD 4C 0D               CALL   coldInit   
28BC   CD 20 59               CALL   execStr   
28BF   31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 DB   "10x= 1 x >>= x",0   
28CE   E1                     POP   HL   
28CF   E5                     PUSH   HL   
28D0   11 05 00               LD   DE,5   
28D3   B7                     OR   A   
28D4   ED 52                  SBC   HL,DE   
28D6   7D                     LD   A,L   
28D7   B4                     OR   H   
28D8   CA 41 29               JP   Z,expectM_3007S84   
28DB   CD DE 0C               CALL   printStr   
28DE   43 6F 64 65 3A 20 31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 .CSTR   "Code: ","10x= 1 x >>= x"   
28F3   CD DE 0C               CALL   printStr   
28F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2905   21 05 00               LD   hl,5   
2908   E5                     PUSH   hl   
2909   E5                     PUSH   hl   
290A   CD 15 0E               CALL   run   
290D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2919   CD DE 0C               CALL   printStr   
291C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2929   E1                     POP   hl   
292A   E5                     PUSH   hl   
292B   E5                     PUSH   hl   
292C   CD 15 0E               CALL   run   
292F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2940   76                     HALT      
2941                EXPECTM_3007S84:      
2941   E1                     POP   HL   
2942                          ;*Macro unroll:  test "7 3 / /rem", 1
2942   31 00 5B               LD   SP,STACK   
2945   CD 4C 0D               CALL   coldInit   
2948   CD 20 59               CALL   execStr   
294B   37 20 33 20 2F 20 2F 72 65 6D 00 DB   "7 3 / /rem",0   
2956   E1                     POP   HL   
2957   E5                     PUSH   HL   
2958   11 01 00               LD   DE,1   
295B   B7                     OR   A   
295C   ED 52                  SBC   HL,DE   
295E   7D                     LD   A,L   
295F   B4                     OR   H   
2960   CA C5 29               JP   Z,expectM_3008S85   
2963   CD DE 0C               CALL   printStr   
2966   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 6D 00 .CSTR   "Code: ","7 3 / /rem"   
2977   CD DE 0C               CALL   printStr   
297A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2989   21 01 00               LD   hl,1   
298C   E5                     PUSH   hl   
298D   E5                     PUSH   hl   
298E   CD 15 0E               CALL   run   
2991   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
299D   CD DE 0C               CALL   printStr   
29A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29AD   E1                     POP   hl   
29AE   E5                     PUSH   hl   
29AF   E5                     PUSH   hl   
29B0   CD 15 0E               CALL   run   
29B3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
29C4   76                     HALT      
29C5                EXPECTM_3008S85:      
29C5   E1                     POP   HL   
29C6                          ;*Macro unroll:  test "7 3 /", 2
29C6   31 00 5B               LD   SP,STACK   
29C9   CD 4C 0D               CALL   coldInit   
29CC   CD 20 59               CALL   execStr   
29CF   37 20 33 20 2F 00      DB   "7 3 /",0   
29D5   E1                     POP   HL   
29D6   E5                     PUSH   HL   
29D7   11 02 00               LD   DE,2   
29DA   B7                     OR   A   
29DB   ED 52                  SBC   HL,DE   
29DD   7D                     LD   A,L   
29DE   B4                     OR   H   
29DF   CA 3F 2A               JP   Z,expectM_3009S86   
29E2   CD DE 0C               CALL   printStr   
29E5   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
29F1   CD DE 0C               CALL   printStr   
29F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A03   21 02 00               LD   hl,2   
2A06   E5                     PUSH   hl   
2A07   E5                     PUSH   hl   
2A08   CD 15 0E               CALL   run   
2A0B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2A17   CD DE 0C               CALL   printStr   
2A1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A27   E1                     POP   hl   
2A28   E5                     PUSH   hl   
2A29   E5                     PUSH   hl   
2A2A   CD 15 0E               CALL   run   
2A2D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2A3E   76                     HALT      
2A3F                EXPECTM_3009S86:      
2A3F   E1                     POP   HL   
2A40                          ;*Macro unroll:  test "2 3 ==", FALSE
2A40   31 00 5B               LD   SP,STACK   
2A43   CD 4C 0D               CALL   coldInit   
2A46   CD 20 59               CALL   execStr   
2A49   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2A50   E1                     POP   HL   
2A51   E5                     PUSH   HL   
2A52   11 00 00               LD   DE,FALSE   
2A55   B7                     OR   A   
2A56   ED 52                  SBC   HL,DE   
2A58   7D                     LD   A,L   
2A59   B4                     OR   H   
2A5A   CA BB 2A               JP   Z,expectM_3010S87   
2A5D   CD DE 0C               CALL   printStr   
2A60   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2A6D   CD DE 0C               CALL   printStr   
2A70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A7F   21 00 00               LD   hl,FALSE   
2A82   E5                     PUSH   hl   
2A83   E5                     PUSH   hl   
2A84   CD 15 0E               CALL   run   
2A87   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2A93   CD DE 0C               CALL   printStr   
2A96   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AA3   E1                     POP   hl   
2AA4   E5                     PUSH   hl   
2AA5   E5                     PUSH   hl   
2AA6   CD 15 0E               CALL   run   
2AA9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2ABA   76                     HALT      
2ABB                EXPECTM_3010S87:      
2ABB   E1                     POP   HL   
2ABC                          ;*Macro unroll:  test "3 3 ==", TRUE
2ABC   31 00 5B               LD   SP,STACK   
2ABF   CD 4C 0D               CALL   coldInit   
2AC2   CD 20 59               CALL   execStr   
2AC5   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
2ACC   E1                     POP   HL   
2ACD   E5                     PUSH   HL   
2ACE   11 FF FF               LD   DE,TRUE   
2AD1   B7                     OR   A   
2AD2   ED 52                  SBC   HL,DE   
2AD4   7D                     LD   A,L   
2AD5   B4                     OR   H   
2AD6   CA 37 2B               JP   Z,expectM_3011S88   
2AD9   CD DE 0C               CALL   printStr   
2ADC   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2AE9   CD DE 0C               CALL   printStr   
2AEC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AFB   21 FF FF               LD   hl,TRUE   
2AFE   E5                     PUSH   hl   
2AFF   E5                     PUSH   hl   
2B00   CD 15 0E               CALL   run   
2B03   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2B0F   CD DE 0C               CALL   printStr   
2B12   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B1F   E1                     POP   hl   
2B20   E5                     PUSH   hl   
2B21   E5                     PUSH   hl   
2B22   CD 15 0E               CALL   run   
2B25   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2B36   76                     HALT      
2B37                EXPECTM_3011S88:      
2B37   E1                     POP   HL   
2B38                          ;*Macro unroll:  test "1 2 <", TRUE
2B38   31 00 5B               LD   SP,STACK   
2B3B   CD 4C 0D               CALL   coldInit   
2B3E   CD 20 59               CALL   execStr   
2B41   31 20 32 20 3C 00      DB   "1 2 <",0   
2B47   E1                     POP   HL   
2B48   E5                     PUSH   HL   
2B49   11 FF FF               LD   DE,TRUE   
2B4C   B7                     OR   A   
2B4D   ED 52                  SBC   HL,DE   
2B4F   7D                     LD   A,L   
2B50   B4                     OR   H   
2B51   CA B1 2B               JP   Z,expectM_3012S89   
2B54   CD DE 0C               CALL   printStr   
2B57   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2B63   CD DE 0C               CALL   printStr   
2B66   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B75   21 FF FF               LD   hl,TRUE   
2B78   E5                     PUSH   hl   
2B79   E5                     PUSH   hl   
2B7A   CD 15 0E               CALL   run   
2B7D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2B89   CD DE 0C               CALL   printStr   
2B8C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B99   E1                     POP   hl   
2B9A   E5                     PUSH   hl   
2B9B   E5                     PUSH   hl   
2B9C   CD 15 0E               CALL   run   
2B9F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2BB0   76                     HALT      
2BB1                EXPECTM_3012S89:      
2BB1   E1                     POP   HL   
2BB2                          ;*Macro unroll:  test "2 1 <", FALSE
2BB2   31 00 5B               LD   SP,STACK   
2BB5   CD 4C 0D               CALL   coldInit   
2BB8   CD 20 59               CALL   execStr   
2BBB   32 20 31 20 3C 00      DB   "2 1 <",0   
2BC1   E1                     POP   HL   
2BC2   E5                     PUSH   HL   
2BC3   11 00 00               LD   DE,FALSE   
2BC6   B7                     OR   A   
2BC7   ED 52                  SBC   HL,DE   
2BC9   7D                     LD   A,L   
2BCA   B4                     OR   H   
2BCB   CA 2B 2C               JP   Z,expectM_3013S90   
2BCE   CD DE 0C               CALL   printStr   
2BD1   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2BDD   CD DE 0C               CALL   printStr   
2BE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BEF   21 00 00               LD   hl,FALSE   
2BF2   E5                     PUSH   hl   
2BF3   E5                     PUSH   hl   
2BF4   CD 15 0E               CALL   run   
2BF7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2C03   CD DE 0C               CALL   printStr   
2C06   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C13   E1                     POP   hl   
2C14   E5                     PUSH   hl   
2C15   E5                     PUSH   hl   
2C16   CD 15 0E               CALL   run   
2C19   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2C2A   76                     HALT      
2C2B                EXPECTM_3013S90:      
2C2B   E1                     POP   HL   
2C2C                          ;*Macro unroll:  test "2 3 <", TRUE
2C2C   31 00 5B               LD   SP,STACK   
2C2F   CD 4C 0D               CALL   coldInit   
2C32   CD 20 59               CALL   execStr   
2C35   32 20 33 20 3C 00      DB   "2 3 <",0   
2C3B   E1                     POP   HL   
2C3C   E5                     PUSH   HL   
2C3D   11 FF FF               LD   DE,TRUE   
2C40   B7                     OR   A   
2C41   ED 52                  SBC   HL,DE   
2C43   7D                     LD   A,L   
2C44   B4                     OR   H   
2C45   CA A5 2C               JP   Z,expectM_3014S91   
2C48   CD DE 0C               CALL   printStr   
2C4B   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2C57   CD DE 0C               CALL   printStr   
2C5A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C69   21 FF FF               LD   hl,TRUE   
2C6C   E5                     PUSH   hl   
2C6D   E5                     PUSH   hl   
2C6E   CD 15 0E               CALL   run   
2C71   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2C7D   CD DE 0C               CALL   printStr   
2C80   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C8D   E1                     POP   hl   
2C8E   E5                     PUSH   hl   
2C8F   E5                     PUSH   hl   
2C90   CD 15 0E               CALL   run   
2C93   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2CA4   76                     HALT      
2CA5                EXPECTM_3014S91:      
2CA5   E1                     POP   HL   
2CA6                          ;*Macro unroll:  test "3 3 <", FALSE
2CA6   31 00 5B               LD   SP,STACK   
2CA9   CD 4C 0D               CALL   coldInit   
2CAC   CD 20 59               CALL   execStr   
2CAF   33 20 33 20 3C 00      DB   "3 3 <",0   
2CB5   E1                     POP   HL   
2CB6   E5                     PUSH   HL   
2CB7   11 00 00               LD   DE,FALSE   
2CBA   B7                     OR   A   
2CBB   ED 52                  SBC   HL,DE   
2CBD   7D                     LD   A,L   
2CBE   B4                     OR   H   
2CBF   CA 1F 2D               JP   Z,expectM_3015S92   
2CC2   CD DE 0C               CALL   printStr   
2CC5   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2CD1   CD DE 0C               CALL   printStr   
2CD4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CE3   21 00 00               LD   hl,FALSE   
2CE6   E5                     PUSH   hl   
2CE7   E5                     PUSH   hl   
2CE8   CD 15 0E               CALL   run   
2CEB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2CF7   CD DE 0C               CALL   printStr   
2CFA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D07   E1                     POP   hl   
2D08   E5                     PUSH   hl   
2D09   E5                     PUSH   hl   
2D0A   CD 15 0E               CALL   run   
2D0D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2D1E   76                     HALT      
2D1F                EXPECTM_3015S92:      
2D1F   E1                     POP   HL   
2D20                          ;*Macro unroll:  test "1 2 >", FALSE
2D20   31 00 5B               LD   SP,STACK   
2D23   CD 4C 0D               CALL   coldInit   
2D26   CD 20 59               CALL   execStr   
2D29   31 20 32 20 3E 00      DB   "1 2 >",0   
2D2F   E1                     POP   HL   
2D30   E5                     PUSH   HL   
2D31   11 00 00               LD   DE,FALSE   
2D34   B7                     OR   A   
2D35   ED 52                  SBC   HL,DE   
2D37   7D                     LD   A,L   
2D38   B4                     OR   H   
2D39   CA 99 2D               JP   Z,expectM_3016S93   
2D3C   CD DE 0C               CALL   printStr   
2D3F   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2D4B   CD DE 0C               CALL   printStr   
2D4E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D5D   21 00 00               LD   hl,FALSE   
2D60   E5                     PUSH   hl   
2D61   E5                     PUSH   hl   
2D62   CD 15 0E               CALL   run   
2D65   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2D71   CD DE 0C               CALL   printStr   
2D74   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D81   E1                     POP   hl   
2D82   E5                     PUSH   hl   
2D83   E5                     PUSH   hl   
2D84   CD 15 0E               CALL   run   
2D87   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2D98   76                     HALT      
2D99                EXPECTM_3016S93:      
2D99   E1                     POP   HL   
2D9A                          ;*Macro unroll:  test "2 1 >", TRUE
2D9A   31 00 5B               LD   SP,STACK   
2D9D   CD 4C 0D               CALL   coldInit   
2DA0   CD 20 59               CALL   execStr   
2DA3   32 20 31 20 3E 00      DB   "2 1 >",0   
2DA9   E1                     POP   HL   
2DAA   E5                     PUSH   HL   
2DAB   11 FF FF               LD   DE,TRUE   
2DAE   B7                     OR   A   
2DAF   ED 52                  SBC   HL,DE   
2DB1   7D                     LD   A,L   
2DB2   B4                     OR   H   
2DB3   CA 13 2E               JP   Z,expectM_3017S94   
2DB6   CD DE 0C               CALL   printStr   
2DB9   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2DC5   CD DE 0C               CALL   printStr   
2DC8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DD7   21 FF FF               LD   hl,TRUE   
2DDA   E5                     PUSH   hl   
2DDB   E5                     PUSH   hl   
2DDC   CD 15 0E               CALL   run   
2DDF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2DEB   CD DE 0C               CALL   printStr   
2DEE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DFB   E1                     POP   hl   
2DFC   E5                     PUSH   hl   
2DFD   E5                     PUSH   hl   
2DFE   CD 15 0E               CALL   run   
2E01   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2E12   76                     HALT      
2E13                EXPECTM_3017S94:      
2E13   E1                     POP   HL   
2E14                          ;*Macro unroll:  test "3 3 >", FALSE
2E14   31 00 5B               LD   SP,STACK   
2E17   CD 4C 0D               CALL   coldInit   
2E1A   CD 20 59               CALL   execStr   
2E1D   33 20 33 20 3E 00      DB   "3 3 >",0   
2E23   E1                     POP   HL   
2E24   E5                     PUSH   HL   
2E25   11 00 00               LD   DE,FALSE   
2E28   B7                     OR   A   
2E29   ED 52                  SBC   HL,DE   
2E2B   7D                     LD   A,L   
2E2C   B4                     OR   H   
2E2D   CA 8D 2E               JP   Z,expectM_3018S95   
2E30   CD DE 0C               CALL   printStr   
2E33   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2E3F   CD DE 0C               CALL   printStr   
2E42   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E51   21 00 00               LD   hl,FALSE   
2E54   E5                     PUSH   hl   
2E55   E5                     PUSH   hl   
2E56   CD 15 0E               CALL   run   
2E59   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2E65   CD DE 0C               CALL   printStr   
2E68   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E75   E1                     POP   hl   
2E76   E5                     PUSH   hl   
2E77   E5                     PUSH   hl   
2E78   CD 15 0E               CALL   run   
2E7B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2E8C   76                     HALT      
2E8D                EXPECTM_3018S95:      
2E8D   E1                     POP   HL   
2E8E                          ;*Macro unroll:  test "4 3 >", TRUE
2E8E   31 00 5B               LD   SP,STACK   
2E91   CD 4C 0D               CALL   coldInit   
2E94   CD 20 59               CALL   execStr   
2E97   34 20 33 20 3E 00      DB   "4 3 >",0   
2E9D   E1                     POP   HL   
2E9E   E5                     PUSH   HL   
2E9F   11 FF FF               LD   DE,TRUE   
2EA2   B7                     OR   A   
2EA3   ED 52                  SBC   HL,DE   
2EA5   7D                     LD   A,L   
2EA6   B4                     OR   H   
2EA7   CA 07 2F               JP   Z,expectM_3019S96   
2EAA   CD DE 0C               CALL   printStr   
2EAD   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2EB9   CD DE 0C               CALL   printStr   
2EBC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2ECB   21 FF FF               LD   hl,TRUE   
2ECE   E5                     PUSH   hl   
2ECF   E5                     PUSH   hl   
2ED0   CD 15 0E               CALL   run   
2ED3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2EDF   CD DE 0C               CALL   printStr   
2EE2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EEF   E1                     POP   hl   
2EF0   E5                     PUSH   hl   
2EF1   E5                     PUSH   hl   
2EF2   CD 15 0E               CALL   run   
2EF5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2F06   76                     HALT      
2F07                EXPECTM_3019S96:      
2F07   E1                     POP   HL   
2F08                          ;*Macro unroll:  test "2 2 <=", TRUE
2F08   31 00 5B               LD   SP,STACK   
2F0B   CD 4C 0D               CALL   coldInit   
2F0E   CD 20 59               CALL   execStr   
2F11   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2F18   E1                     POP   HL   
2F19   E5                     PUSH   HL   
2F1A   11 FF FF               LD   DE,TRUE   
2F1D   B7                     OR   A   
2F1E   ED 52                  SBC   HL,DE   
2F20   7D                     LD   A,L   
2F21   B4                     OR   H   
2F22   CA 83 2F               JP   Z,expectM_3020S97   
2F25   CD DE 0C               CALL   printStr   
2F28   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2F35   CD DE 0C               CALL   printStr   
2F38   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F47   21 FF FF               LD   hl,TRUE   
2F4A   E5                     PUSH   hl   
2F4B   E5                     PUSH   hl   
2F4C   CD 15 0E               CALL   run   
2F4F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2F5B   CD DE 0C               CALL   printStr   
2F5E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F6B   E1                     POP   hl   
2F6C   E5                     PUSH   hl   
2F6D   E5                     PUSH   hl   
2F6E   CD 15 0E               CALL   run   
2F71   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2F82   76                     HALT      
2F83                EXPECTM_3020S97:      
2F83   E1                     POP   HL   
2F84                          ;*Macro unroll:  test "2 2 >=", TRUE
2F84   31 00 5B               LD   SP,STACK   
2F87   CD 4C 0D               CALL   coldInit   
2F8A   CD 20 59               CALL   execStr   
2F8D   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2F94   E1                     POP   HL   
2F95   E5                     PUSH   HL   
2F96   11 FF FF               LD   DE,TRUE   
2F99   B7                     OR   A   
2F9A   ED 52                  SBC   HL,DE   
2F9C   7D                     LD   A,L   
2F9D   B4                     OR   H   
2F9E   CA FF 2F               JP   Z,expectM_3021S98   
2FA1   CD DE 0C               CALL   printStr   
2FA4   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2FB1   CD DE 0C               CALL   printStr   
2FB4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FC3   21 FF FF               LD   hl,TRUE   
2FC6   E5                     PUSH   hl   
2FC7   E5                     PUSH   hl   
2FC8   CD 15 0E               CALL   run   
2FCB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2FD7   CD DE 0C               CALL   printStr   
2FDA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FE7   E1                     POP   hl   
2FE8   E5                     PUSH   hl   
2FE9   E5                     PUSH   hl   
2FEA   CD 15 0E               CALL   run   
2FED   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2FFE   76                     HALT      
2FFF                EXPECTM_3021S98:      
2FFF   E1                     POP   HL   
3000                          ;*Macro unroll:  test "3 1 <<", 6
3000   31 00 5B               LD   SP,STACK   
3003   CD 4C 0D               CALL   coldInit   
3006   CD 20 59               CALL   execStr   
3009   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
3010   E1                     POP   HL   
3011   E5                     PUSH   HL   
3012   11 06 00               LD   DE,6   
3015   B7                     OR   A   
3016   ED 52                  SBC   HL,DE   
3018   7D                     LD   A,L   
3019   B4                     OR   H   
301A   CA 7B 30               JP   Z,expectM_3022S99   
301D   CD DE 0C               CALL   printStr   
3020   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
302D   CD DE 0C               CALL   printStr   
3030   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
303F   21 06 00               LD   hl,6   
3042   E5                     PUSH   hl   
3043   E5                     PUSH   hl   
3044   CD 15 0E               CALL   run   
3047   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3053   CD DE 0C               CALL   printStr   
3056   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3063   E1                     POP   hl   
3064   E5                     PUSH   hl   
3065   E5                     PUSH   hl   
3066   CD 15 0E               CALL   run   
3069   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
307A   76                     HALT      
307B                EXPECTM_3022S99:      
307B   E1                     POP   HL   
307C                          ;*Macro unroll:  test "10 1 >>", 5
307C   31 00 5B               LD   SP,STACK   
307F   CD 4C 0D               CALL   coldInit   
3082   CD 20 59               CALL   execStr   
3085   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
308D   E1                     POP   HL   
308E   E5                     PUSH   HL   
308F   11 05 00               LD   DE,5   
3092   B7                     OR   A   
3093   ED 52                  SBC   HL,DE   
3095   7D                     LD   A,L   
3096   B4                     OR   H   
3097   CA F9 30               JP   Z,expectM_3023S100   
309A   CD DE 0C               CALL   printStr   
309D   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
30AB   CD DE 0C               CALL   printStr   
30AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30BD   21 05 00               LD   hl,5   
30C0   E5                     PUSH   hl   
30C1   E5                     PUSH   hl   
30C2   CD 15 0E               CALL   run   
30C5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
30D1   CD DE 0C               CALL   printStr   
30D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30E1   E1                     POP   hl   
30E2   E5                     PUSH   hl   
30E3   E5                     PUSH   hl   
30E4   CD 15 0E               CALL   run   
30E7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
30F8   76                     HALT      
30F9                EXPECTM_3023S100:      
30F9   E1                     POP   HL   
30FA                          ;*Macro unroll:  test "1 x = x", 1
30FA   31 00 5B               LD   SP,STACK   
30FD   CD 4C 0D               CALL   coldInit   
3100   CD 20 59               CALL   execStr   
3103   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
310B   E1                     POP   HL   
310C   E5                     PUSH   HL   
310D   11 01 00               LD   DE,1   
3110   B7                     OR   A   
3111   ED 52                  SBC   HL,DE   
3113   7D                     LD   A,L   
3114   B4                     OR   H   
3115   CA 77 31               JP   Z,expectM_3024S101   
3118   CD DE 0C               CALL   printStr   
311B   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
3129   CD DE 0C               CALL   printStr   
312C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
313B   21 01 00               LD   hl,1   
313E   E5                     PUSH   hl   
313F   E5                     PUSH   hl   
3140   CD 15 0E               CALL   run   
3143   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
314F   CD DE 0C               CALL   printStr   
3152   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
315F   E1                     POP   hl   
3160   E5                     PUSH   hl   
3161   E5                     PUSH   hl   
3162   CD 15 0E               CALL   run   
3165   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3176   76                     HALT      
3177                EXPECTM_3024S101:      
3177   E1                     POP   HL   
3178                          ;*Macro unroll:  test "1{}^", 1
3178   31 00 5B               LD   SP,STACK   
317B   CD 4C 0D               CALL   coldInit   
317E   CD 20 59               CALL   execStr   
3181   31 7B 7D 5E 00         DB   "1{}^",0   
3186   E1                     POP   HL   
3187   E5                     PUSH   HL   
3188   11 01 00               LD   DE,1   
318B   B7                     OR   A   
318C   ED 52                  SBC   HL,DE   
318E   7D                     LD   A,L   
318F   B4                     OR   H   
3190   CA EF 31               JP   Z,expectM_3025S102   
3193   CD DE 0C               CALL   printStr   
3196   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
31A1   CD DE 0C               CALL   printStr   
31A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31B3   21 01 00               LD   hl,1   
31B6   E5                     PUSH   hl   
31B7   E5                     PUSH   hl   
31B8   CD 15 0E               CALL   run   
31BB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
31C7   CD DE 0C               CALL   printStr   
31CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31D7   E1                     POP   hl   
31D8   E5                     PUSH   hl   
31D9   E5                     PUSH   hl   
31DA   CD 15 0E               CALL   run   
31DD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
31EE   76                     HALT      
31EF                EXPECTM_3025S102:      
31EF   E1                     POP   HL   
31F0                          ;*Macro unroll:  test "{1}^", 1
31F0   31 00 5B               LD   SP,STACK   
31F3   CD 4C 0D               CALL   coldInit   
31F6   CD 20 59               CALL   execStr   
31F9   7B 31 7D 5E 00         DB   "{1}^",0   
31FE   E1                     POP   HL   
31FF   E5                     PUSH   HL   
3200   11 01 00               LD   DE,1   
3203   B7                     OR   A   
3204   ED 52                  SBC   HL,DE   
3206   7D                     LD   A,L   
3207   B4                     OR   H   
3208   CA 67 32               JP   Z,expectM_3026S103   
320B   CD DE 0C               CALL   printStr   
320E   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
3219   CD DE 0C               CALL   printStr   
321C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
322B   21 01 00               LD   hl,1   
322E   E5                     PUSH   hl   
322F   E5                     PUSH   hl   
3230   CD 15 0E               CALL   run   
3233   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
323F   CD DE 0C               CALL   printStr   
3242   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
324F   E1                     POP   hl   
3250   E5                     PUSH   hl   
3251   E5                     PUSH   hl   
3252   CD 15 0E               CALL   run   
3255   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3266   76                     HALT      
3267                EXPECTM_3026S103:      
3267   E1                     POP   HL   
3268                          ;*Macro unroll:  test "{{1}^}^", 1
3268   31 00 5B               LD   SP,STACK   
326B   CD 4C 0D               CALL   coldInit   
326E   CD 20 59               CALL   execStr   
3271   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
3279   E1                     POP   HL   
327A   E5                     PUSH   HL   
327B   11 01 00               LD   DE,1   
327E   B7                     OR   A   
327F   ED 52                  SBC   HL,DE   
3281   7D                     LD   A,L   
3282   B4                     OR   H   
3283   CA E5 32               JP   Z,expectM_3027S104   
3286   CD DE 0C               CALL   printStr   
3289   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
3297   CD DE 0C               CALL   printStr   
329A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32A9   21 01 00               LD   hl,1   
32AC   E5                     PUSH   hl   
32AD   E5                     PUSH   hl   
32AE   CD 15 0E               CALL   run   
32B1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
32BD   CD DE 0C               CALL   printStr   
32C0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32CD   E1                     POP   hl   
32CE   E5                     PUSH   hl   
32CF   E5                     PUSH   hl   
32D0   CD 15 0E               CALL   run   
32D3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
32E4   76                     HALT      
32E5                EXPECTM_3027S104:      
32E5   E1                     POP   HL   
32E6                          ;*Macro unroll:  test "{{{1}^}^}^", 1
32E6   31 00 5B               LD   SP,STACK   
32E9   CD 4C 0D               CALL   coldInit   
32EC   CD 20 59               CALL   execStr   
32EF   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
32FA   E1                     POP   HL   
32FB   E5                     PUSH   HL   
32FC   11 01 00               LD   DE,1   
32FF   B7                     OR   A   
3300   ED 52                  SBC   HL,DE   
3302   7D                     LD   A,L   
3303   B4                     OR   H   
3304   CA 69 33               JP   Z,expectM_3028S105   
3307   CD DE 0C               CALL   printStr   
330A   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
331B   CD DE 0C               CALL   printStr   
331E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
332D   21 01 00               LD   hl,1   
3330   E5                     PUSH   hl   
3331   E5                     PUSH   hl   
3332   CD 15 0E               CALL   run   
3335   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3341   CD DE 0C               CALL   printStr   
3344   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3351   E1                     POP   hl   
3352   E5                     PUSH   hl   
3353   E5                     PUSH   hl   
3354   CD 15 0E               CALL   run   
3357   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3368   76                     HALT      
3369                EXPECTM_3028S105:      
3369   E1                     POP   HL   
336A                          ;*Macro unroll:  test "1 /fal{10}{20} ? +", 21
336A   31 00 5B               LD   SP,STACK   
336D   CD 4C 0D               CALL   coldInit   
3370   CD 20 59               CALL   execStr   
3373   31 20 2F 66 61 6C 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /fal{10}{20} ? +",0   
3386   E1                     POP   HL   
3387   E5                     PUSH   HL   
3388   11 15 00               LD   DE,21   
338B   B7                     OR   A   
338C   ED 52                  SBC   HL,DE   
338E   7D                     LD   A,L   
338F   B4                     OR   H   
3390   CA FD 33               JP   Z,expectM_3029S106   
3393   CD DE 0C               CALL   printStr   
3396   43 6F 64 65 3A 20 31 20 2F 66 61 6C 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /fal{10}{20} ? +"   
33AF   CD DE 0C               CALL   printStr   
33B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33C1   21 15 00               LD   hl,21   
33C4   E5                     PUSH   hl   
33C5   E5                     PUSH   hl   
33C6   CD 15 0E               CALL   run   
33C9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
33D5   CD DE 0C               CALL   printStr   
33D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33E5   E1                     POP   hl   
33E6   E5                     PUSH   hl   
33E7   E5                     PUSH   hl   
33E8   CD 15 0E               CALL   run   
33EB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
33FC   76                     HALT      
33FD                EXPECTM_3029S106:      
33FD   E1                     POP   HL   
33FE                          ;*Macro unroll:  test "1 /tru{10}{20} ? +", 11
33FE   31 00 5B               LD   SP,STACK   
3401   CD 4C 0D               CALL   coldInit   
3404   CD 20 59               CALL   execStr   
3407   31 20 2F 74 72 75 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /tru{10}{20} ? +",0   
341A   E1                     POP   HL   
341B   E5                     PUSH   HL   
341C   11 0B 00               LD   DE,11   
341F   B7                     OR   A   
3420   ED 52                  SBC   HL,DE   
3422   7D                     LD   A,L   
3423   B4                     OR   H   
3424   CA 91 34               JP   Z,expectM_3030S107   
3427   CD DE 0C               CALL   printStr   
342A   43 6F 64 65 3A 20 31 20 2F 74 72 75 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /tru{10}{20} ? +"   
3443   CD DE 0C               CALL   printStr   
3446   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3455   21 0B 00               LD   hl,11   
3458   E5                     PUSH   hl   
3459   E5                     PUSH   hl   
345A   CD 15 0E               CALL   run   
345D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3469   CD DE 0C               CALL   printStr   
346C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3479   E1                     POP   hl   
347A   E5                     PUSH   hl   
347B   E5                     PUSH   hl   
347C   CD 15 0E               CALL   run   
347F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3490   76                     HALT      
3491                EXPECTM_3030S107:      
3491   E1                     POP   HL   
3492                          ;*Macro unroll:  test "\\{2}^", 2
3492   31 00 5B               LD   SP,STACK   
3495   CD 4C 0D               CALL   coldInit   
3498   CD 20 59               CALL   execStr   
349B   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
34A1   E1                     POP   HL   
34A2   E5                     PUSH   HL   
34A3   11 02 00               LD   DE,2   
34A6   B7                     OR   A   
34A7   ED 52                  SBC   HL,DE   
34A9   7D                     LD   A,L   
34AA   B4                     OR   H   
34AB   CA 0B 35               JP   Z,expectM_3031S108   
34AE   CD DE 0C               CALL   printStr   
34B1   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
34BD   CD DE 0C               CALL   printStr   
34C0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34CF   21 02 00               LD   hl,2   
34D2   E5                     PUSH   hl   
34D3   E5                     PUSH   hl   
34D4   CD 15 0E               CALL   run   
34D7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
34E3   CD DE 0C               CALL   printStr   
34E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34F3   E1                     POP   hl   
34F4   E5                     PUSH   hl   
34F5   E5                     PUSH   hl   
34F6   CD 15 0E               CALL   run   
34F9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
350A   76                     HALT      
350B                EXPECTM_3031S108:      
350B   E1                     POP   HL   
350C                          ;*Macro unroll:  test "\\a{2}^", 2
350C   31 00 5B               LD   SP,STACK   
350F   CD 4C 0D               CALL   coldInit   
3512   CD 20 59               CALL   execStr   
3515   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
351C   E1                     POP   HL   
351D   E5                     PUSH   HL   
351E   11 02 00               LD   DE,2   
3521   B7                     OR   A   
3522   ED 52                  SBC   HL,DE   
3524   7D                     LD   A,L   
3525   B4                     OR   H   
3526   CA 87 35               JP   Z,expectM_3032S109   
3529   CD DE 0C               CALL   printStr   
352C   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
3539   CD DE 0C               CALL   printStr   
353C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
354B   21 02 00               LD   hl,2   
354E   E5                     PUSH   hl   
354F   E5                     PUSH   hl   
3550   CD 15 0E               CALL   run   
3553   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
355F   CD DE 0C               CALL   printStr   
3562   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
356F   E1                     POP   hl   
3570   E5                     PUSH   hl   
3571   E5                     PUSH   hl   
3572   CD 15 0E               CALL   run   
3575   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3586   76                     HALT      
3587                EXPECTM_3032S109:      
3587   E1                     POP   HL   
3588                          ;*Macro unroll:  test "5 \\a{%a}^", 5
3588   31 00 5B               LD   SP,STACK   
358B   CD 4C 0D               CALL   coldInit   
358E   CD 20 59               CALL   execStr   
3591   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
359B   E1                     POP   HL   
359C   E5                     PUSH   HL   
359D   11 05 00               LD   DE,5   
35A0   B7                     OR   A   
35A1   ED 52                  SBC   HL,DE   
35A3   7D                     LD   A,L   
35A4   B4                     OR   H   
35A5   CA 09 36               JP   Z,expectM_3033S110   
35A8   CD DE 0C               CALL   printStr   
35AB   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
35BB   CD DE 0C               CALL   printStr   
35BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35CD   21 05 00               LD   hl,5   
35D0   E5                     PUSH   hl   
35D1   E5                     PUSH   hl   
35D2   CD 15 0E               CALL   run   
35D5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
35E1   CD DE 0C               CALL   printStr   
35E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35F1   E1                     POP   hl   
35F2   E5                     PUSH   hl   
35F3   E5                     PUSH   hl   
35F4   CD 15 0E               CALL   run   
35F7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3608   76                     HALT      
3609                EXPECTM_3033S110:      
3609   E1                     POP   HL   
360A                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
360A   31 00 5B               LD   SP,STACK   
360D   CD 4C 0D               CALL   coldInit   
3610   CD 20 59               CALL   execStr   
3613   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
361F   E1                     POP   HL   
3620   E5                     PUSH   HL   
3621   11 05 00               LD   DE,5   
3624   B7                     OR   A   
3625   ED 52                  SBC   HL,DE   
3627   7D                     LD   A,L   
3628   B4                     OR   H   
3629   CA 8F 36               JP   Z,expectM_3034S111   
362C   CD DE 0C               CALL   printStr   
362F   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
3641   CD DE 0C               CALL   printStr   
3644   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3653   21 05 00               LD   hl,5   
3656   E5                     PUSH   hl   
3657   E5                     PUSH   hl   
3658   CD 15 0E               CALL   run   
365B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3667   CD DE 0C               CALL   printStr   
366A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3677   E1                     POP   hl   
3678   E5                     PUSH   hl   
3679   E5                     PUSH   hl   
367A   CD 15 0E               CALL   run   
367D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
368E   76                     HALT      
368F                EXPECTM_3034S111:      
368F   E1                     POP   HL   
3690                          ;*Macro unroll:  test "\\a{{2}^}^", 2
3690   31 00 5B               LD   SP,STACK   
3693   CD 4C 0D               CALL   coldInit   
3696   CD 20 59               CALL   execStr   
3699   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
36A3   E1                     POP   HL   
36A4   E5                     PUSH   HL   
36A5   11 02 00               LD   DE,2   
36A8   B7                     OR   A   
36A9   ED 52                  SBC   HL,DE   
36AB   7D                     LD   A,L   
36AC   B4                     OR   H   
36AD   CA 11 37               JP   Z,expectM_3035S112   
36B0   CD DE 0C               CALL   printStr   
36B3   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
36C3   CD DE 0C               CALL   printStr   
36C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36D5   21 02 00               LD   hl,2   
36D8   E5                     PUSH   hl   
36D9   E5                     PUSH   hl   
36DA   CD 15 0E               CALL   run   
36DD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
36E9   CD DE 0C               CALL   printStr   
36EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36F9   E1                     POP   hl   
36FA   E5                     PUSH   hl   
36FB   E5                     PUSH   hl   
36FC   CD 15 0E               CALL   run   
36FF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3710   76                     HALT      
3711                EXPECTM_3035S112:      
3711   E1                     POP   HL   
3712                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
3712   31 00 5B               LD   SP,STACK   
3715   CD 4C 0D               CALL   coldInit   
3718   CD 20 59               CALL   execStr   
371B   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
372A   E1                     POP   HL   
372B   E5                     PUSH   HL   
372C   11 05 00               LD   DE,5   
372F   B7                     OR   A   
3730   ED 52                  SBC   HL,DE   
3732   7D                     LD   A,L   
3733   B4                     OR   H   
3734   CA 9D 37               JP   Z,expectM_3036S113   
3737   CD DE 0C               CALL   printStr   
373A   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
374F   CD DE 0C               CALL   printStr   
3752   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3761   21 05 00               LD   hl,5   
3764   E5                     PUSH   hl   
3765   E5                     PUSH   hl   
3766   CD 15 0E               CALL   run   
3769   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3775   CD DE 0C               CALL   printStr   
3778   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3785   E1                     POP   hl   
3786   E5                     PUSH   hl   
3787   E5                     PUSH   hl   
3788   CD 15 0E               CALL   run   
378B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
379C   76                     HALT      
379D                EXPECTM_3036S113:      
379D   E1                     POP   HL   
379E                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
379E   31 00 5B               LD   SP,STACK   
37A1   CD 4C 0D               CALL   coldInit   
37A4   CD 20 59               CALL   execStr   
37A7   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
37B7   E1                     POP   HL   
37B8   E5                     PUSH   HL   
37B9   11 01 00               LD   DE,1   
37BC   B7                     OR   A   
37BD   ED 52                  SBC   HL,DE   
37BF   7D                     LD   A,L   
37C0   B4                     OR   H   
37C1   CA 2B 38               JP   Z,expectM_3037S114   
37C4   CD DE 0C               CALL   printStr   
37C7   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
37DD   CD DE 0C               CALL   printStr   
37E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37EF   21 01 00               LD   hl,1   
37F2   E5                     PUSH   hl   
37F3   E5                     PUSH   hl   
37F4   CD 15 0E               CALL   run   
37F7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3803   CD DE 0C               CALL   printStr   
3806   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3813   E1                     POP   hl   
3814   E5                     PUSH   hl   
3815   E5                     PUSH   hl   
3816   CD 15 0E               CALL   run   
3819   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
382A   76                     HALT      
382B                EXPECTM_3037S114:      
382B   E1                     POP   HL   
382C                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
382C   31 00 5B               LD   SP,STACK   
382F   CD 4C 0D               CALL   coldInit   
3832   CD 20 59               CALL   execStr   
3835   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
3848   E1                     POP   HL   
3849   E5                     PUSH   HL   
384A   11 07 00               LD   DE,7   
384D   B7                     OR   A   
384E   ED 52                  SBC   HL,DE   
3850   7D                     LD   A,L   
3851   B4                     OR   H   
3852   CA BF 38               JP   Z,expectM_3038S115   
3855   CD DE 0C               CALL   printStr   
3858   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
3871   CD DE 0C               CALL   printStr   
3874   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3883   21 07 00               LD   hl,7   
3886   E5                     PUSH   hl   
3887   E5                     PUSH   hl   
3888   CD 15 0E               CALL   run   
388B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3897   CD DE 0C               CALL   printStr   
389A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38A7   E1                     POP   hl   
38A8   E5                     PUSH   hl   
38A9   E5                     PUSH   hl   
38AA   CD 15 0E               CALL   run   
38AD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
38BE   76                     HALT      
38BF                EXPECTM_3038S115:      
38BF   E1                     POP   HL   
38C0                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
38C0   31 00 5B               LD   SP,STACK   
38C3   CD 4C 0D               CALL   coldInit   
38C6   CD 20 59               CALL   execStr   
38C9   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
38DE   E1                     POP   HL   
38DF   E5                     PUSH   HL   
38E0   11 06 00               LD   DE,6   
38E3   B7                     OR   A   
38E4   ED 52                  SBC   HL,DE   
38E6   7D                     LD   A,L   
38E7   B4                     OR   H   
38E8   CA 57 39               JP   Z,expectM_3039S116   
38EB   CD DE 0C               CALL   printStr   
38EE   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
3909   CD DE 0C               CALL   printStr   
390C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
391B   21 06 00               LD   hl,6   
391E   E5                     PUSH   hl   
391F   E5                     PUSH   hl   
3920   CD 15 0E               CALL   run   
3923   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
392F   CD DE 0C               CALL   printStr   
3932   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
393F   E1                     POP   hl   
3940   E5                     PUSH   hl   
3941   E5                     PUSH   hl   
3942   CD 15 0E               CALL   run   
3945   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3956   76                     HALT      
3957                EXPECTM_3039S116:      
3957   E1                     POP   HL   
3958                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
3958   31 00 5B               LD   SP,STACK   
395B   CD 4C 0D               CALL   coldInit   
395E   CD 20 59               CALL   execStr   
3961   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
396F   E1                     POP   HL   
3970   E5                     PUSH   HL   
3971   11 02 00               LD   DE,2   
3974   B7                     OR   A   
3975   ED 52                  SBC   HL,DE   
3977   7D                     LD   A,L   
3978   B4                     OR   H   
3979   CA E1 39               JP   Z,expectM_3040S117   
397C   CD DE 0C               CALL   printStr   
397F   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
3993   CD DE 0C               CALL   printStr   
3996   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39A5   21 02 00               LD   hl,2   
39A8   E5                     PUSH   hl   
39A9   E5                     PUSH   hl   
39AA   CD 15 0E               CALL   run   
39AD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
39B9   CD DE 0C               CALL   printStr   
39BC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39C9   E1                     POP   hl   
39CA   E5                     PUSH   hl   
39CB   E5                     PUSH   hl   
39CC   CD 15 0E               CALL   run   
39CF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
39E0   76                     HALT      
39E1                EXPECTM_3040S117:      
39E1   E1                     POP   HL   
39E2                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
39E2   31 00 5B               LD   SP,STACK   
39E5   CD 4C 0D               CALL   coldInit   
39E8   CD 20 59               CALL   execStr   
39EB   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
39FC   E1                     POP   HL   
39FD   E5                     PUSH   HL   
39FE   11 01 00               LD   DE,1   
3A01   B7                     OR   A   
3A02   ED 52                  SBC   HL,DE   
3A04   7D                     LD   A,L   
3A05   B4                     OR   H   
3A06   CA 71 3A               JP   Z,expectM_3041S118   
3A09   CD DE 0C               CALL   printStr   
3A0C   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3A23   CD DE 0C               CALL   printStr   
3A26   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A35   21 01 00               LD   hl,1   
3A38   E5                     PUSH   hl   
3A39   E5                     PUSH   hl   
3A3A   CD 15 0E               CALL   run   
3A3D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3A49   CD DE 0C               CALL   printStr   
3A4C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A59   E1                     POP   hl   
3A5A   E5                     PUSH   hl   
3A5B   E5                     PUSH   hl   
3A5C   CD 15 0E               CALL   run   
3A5F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3A70   76                     HALT      
3A71                EXPECTM_3041S118:      
3A71   E1                     POP   HL   
3A72                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3A72   31 00 5B               LD   SP,STACK   
3A75   CD 4C 0D               CALL   coldInit   
3A78   CD 20 59               CALL   execStr   
3A7B   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3A8D   E1                     POP   HL   
3A8E   E5                     PUSH   HL   
3A8F   11 02 00               LD   DE,2   
3A92   B7                     OR   A   
3A93   ED 52                  SBC   HL,DE   
3A95   7D                     LD   A,L   
3A96   B4                     OR   H   
3A97   CA 03 3B               JP   Z,expectM_3042S119   
3A9A   CD DE 0C               CALL   printStr   
3A9D   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3AB5   CD DE 0C               CALL   printStr   
3AB8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AC7   21 02 00               LD   hl,2   
3ACA   E5                     PUSH   hl   
3ACB   E5                     PUSH   hl   
3ACC   CD 15 0E               CALL   run   
3ACF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3ADB   CD DE 0C               CALL   printStr   
3ADE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AEB   E1                     POP   hl   
3AEC   E5                     PUSH   hl   
3AED   E5                     PUSH   hl   
3AEE   CD 15 0E               CALL   run   
3AF1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3B02   76                     HALT      
3B03                EXPECTM_3042S119:      
3B03   E1                     POP   HL   
3B04                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
3B04   31 00 5B               LD   SP,STACK   
3B07   CD 4C 0D               CALL   coldInit   
3B0A   CD 20 59               CALL   execStr   
3B0D   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
3B20   E1                     POP   HL   
3B21   E5                     PUSH   HL   
3B22   11 02 00               LD   DE,2   
3B25   B7                     OR   A   
3B26   ED 52                  SBC   HL,DE   
3B28   7D                     LD   A,L   
3B29   B4                     OR   H   
3B2A   CA 97 3B               JP   Z,expectM_3043S120   
3B2D   CD DE 0C               CALL   printStr   
3B30   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
3B49   CD DE 0C               CALL   printStr   
3B4C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B5B   21 02 00               LD   hl,2   
3B5E   E5                     PUSH   hl   
3B5F   E5                     PUSH   hl   
3B60   CD 15 0E               CALL   run   
3B63   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3B6F   CD DE 0C               CALL   printStr   
3B72   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B7F   E1                     POP   hl   
3B80   E5                     PUSH   hl   
3B81   E5                     PUSH   hl   
3B82   CD 15 0E               CALL   run   
3B85   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3B96   76                     HALT      
3B97                EXPECTM_3043S120:      
3B97   E1                     POP   HL   
3B98                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3B98   31 00 5B               LD   SP,STACK   
3B9B   CD 4C 0D               CALL   coldInit   
3B9E   CD 20 59               CALL   execStr   
3BA1   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3BB3   E1                     POP   HL   
3BB4   E5                     PUSH   HL   
3BB5   11 02 00               LD   DE,2   
3BB8   B7                     OR   A   
3BB9   ED 52                  SBC   HL,DE   
3BBB   7D                     LD   A,L   
3BBC   B4                     OR   H   
3BBD   CA 29 3C               JP   Z,expectM_3044S121   
3BC0   CD DE 0C               CALL   printStr   
3BC3   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3BDB   CD DE 0C               CALL   printStr   
3BDE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BED   21 02 00               LD   hl,2   
3BF0   E5                     PUSH   hl   
3BF1   E5                     PUSH   hl   
3BF2   CD 15 0E               CALL   run   
3BF5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3C01   CD DE 0C               CALL   printStr   
3C04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C11   E1                     POP   hl   
3C12   E5                     PUSH   hl   
3C13   E5                     PUSH   hl   
3C14   CD 15 0E               CALL   run   
3C17   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3C28   76                     HALT      
3C29                EXPECTM_3044S121:      
3C29   E1                     POP   HL   
3C2A                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3C2A   31 00 5B               LD   SP,STACK   
3C2D   CD 4C 0D               CALL   coldInit   
3C30   CD 20 59               CALL   execStr   
3C33   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
3C4C   E1                     POP   HL   
3C4D   E5                     PUSH   HL   
3C4E   11 05 00               LD   DE,5   
3C51   B7                     OR   A   
3C52   ED 52                  SBC   HL,DE   
3C54   7D                     LD   A,L   
3C55   B4                     OR   H   
3C56   CA C9 3C               JP   Z,expectM_3045S122   
3C59   CD DE 0C               CALL   printStr   
3C5C   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
3C7B   CD DE 0C               CALL   printStr   
3C7E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C8D   21 05 00               LD   hl,5   
3C90   E5                     PUSH   hl   
3C91   E5                     PUSH   hl   
3C92   CD 15 0E               CALL   run   
3C95   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3CA1   CD DE 0C               CALL   printStr   
3CA4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CB1   E1                     POP   hl   
3CB2   E5                     PUSH   hl   
3CB3   E5                     PUSH   hl   
3CB4   CD 15 0E               CALL   run   
3CB7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3CC8   76                     HALT      
3CC9                EXPECTM_3045S122:      
3CC9   E1                     POP   HL   
3CCA                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
3CCA   31 00 5B               LD   SP,STACK   
3CCD   CD 4C 0D               CALL   coldInit   
3CD0   CD 20 59               CALL   execStr   
3CD3   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
3CE3   E1                     POP   HL   
3CE4   E5                     PUSH   HL   
3CE5   11 02 00               LD   DE,2   
3CE8   B7                     OR   A   
3CE9   ED 52                  SBC   HL,DE   
3CEB   7D                     LD   A,L   
3CEC   B4                     OR   H   
3CED   CA 57 3D               JP   Z,expectM_3046S123   
3CF0   CD DE 0C               CALL   printStr   
3CF3   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
3D09   CD DE 0C               CALL   printStr   
3D0C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D1B   21 02 00               LD   hl,2   
3D1E   E5                     PUSH   hl   
3D1F   E5                     PUSH   hl   
3D20   CD 15 0E               CALL   run   
3D23   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3D2F   CD DE 0C               CALL   printStr   
3D32   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D3F   E1                     POP   hl   
3D40   E5                     PUSH   hl   
3D41   E5                     PUSH   hl   
3D42   CD 15 0E               CALL   run   
3D45   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3D56   76                     HALT      
3D57                EXPECTM_3046S123:      
3D57   E1                     POP   HL   
3D58                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
3D58   31 00 5B               LD   SP,STACK   
3D5B   CD 4C 0D               CALL   coldInit   
3D5E   CD 20 59               CALL   execStr   
3D61   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
3D78   E1                     POP   HL   
3D79   E5                     PUSH   HL   
3D7A   11 64 00               LD   DE,100   
3D7D   B7                     OR   A   
3D7E   ED 52                  SBC   HL,DE   
3D80   7D                     LD   A,L   
3D81   B4                     OR   H   
3D82   CA F3 3D               JP   Z,expectM_3047S124   
3D85   CD DE 0C               CALL   printStr   
3D88   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
3DA5   CD DE 0C               CALL   printStr   
3DA8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DB7   21 64 00               LD   hl,100   
3DBA   E5                     PUSH   hl   
3DBB   E5                     PUSH   hl   
3DBC   CD 15 0E               CALL   run   
3DBF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3DCB   CD DE 0C               CALL   printStr   
3DCE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DDB   E1                     POP   hl   
3DDC   E5                     PUSH   hl   
3DDD   E5                     PUSH   hl   
3DDE   CD 15 0E               CALL   run   
3DE1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3DF2   76                     HALT      
3DF3                EXPECTM_3047S124:      
3DF3   E1                     POP   HL   
3DF4                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
3DF4   31 00 5B               LD   SP,STACK   
3DF7   CD 4C 0D               CALL   coldInit   
3DFA   CD 20 59               CALL   execStr   
3DFD   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
3E15   E1                     POP   HL   
3E16   E5                     PUSH   HL   
3E17   11 01 00               LD   DE,1   
3E1A   B7                     OR   A   
3E1B   ED 52                  SBC   HL,DE   
3E1D   7D                     LD   A,L   
3E1E   B4                     OR   H   
3E1F   CA 91 3E               JP   Z,expectM_3048S125   
3E22   CD DE 0C               CALL   printStr   
3E25   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
3E43   CD DE 0C               CALL   printStr   
3E46   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E55   21 01 00               LD   hl,1   
3E58   E5                     PUSH   hl   
3E59   E5                     PUSH   hl   
3E5A   CD 15 0E               CALL   run   
3E5D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3E69   CD DE 0C               CALL   printStr   
3E6C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E79   E1                     POP   hl   
3E7A   E5                     PUSH   hl   
3E7B   E5                     PUSH   hl   
3E7C   CD 15 0E               CALL   run   
3E7F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3E90   76                     HALT      
3E91                EXPECTM_3048S125:      
3E91   E1                     POP   HL   
3E92                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
3E92   31 00 5B               LD   SP,STACK   
3E95   CD 4C 0D               CALL   coldInit   
3E98   CD 20 59               CALL   execStr   
3E9B   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
3EB4   E1                     POP   HL   
3EB5   E5                     PUSH   HL   
3EB6   11 02 00               LD   DE,2   
3EB9   B7                     OR   A   
3EBA   ED 52                  SBC   HL,DE   
3EBC   7D                     LD   A,L   
3EBD   B4                     OR   H   
3EBE   CA 31 3F               JP   Z,expectM_3049S126   
3EC1   CD DE 0C               CALL   printStr   
3EC4   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
3EE3   CD DE 0C               CALL   printStr   
3EE6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EF5   21 02 00               LD   hl,2   
3EF8   E5                     PUSH   hl   
3EF9   E5                     PUSH   hl   
3EFA   CD 15 0E               CALL   run   
3EFD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3F09   CD DE 0C               CALL   printStr   
3F0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F19   E1                     POP   hl   
3F1A   E5                     PUSH   hl   
3F1B   E5                     PUSH   hl   
3F1C   CD 15 0E               CALL   run   
3F1F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3F30   76                     HALT      
3F31                EXPECTM_3049S126:      
3F31   E1                     POP   HL   
3F32                          ;*Macro unroll:  test "1 10 20 \\ab{/tru{%a}{%b} ?}^ +", 11
3F32   31 00 5B               LD   SP,STACK   
3F35   CD 4C 0D               CALL   coldInit   
3F38   CD 20 59               CALL   execStr   
3F3B   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 72 75 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/tru{%a}{%b} ?}^ +",0   
3F5A   E1                     POP   HL   
3F5B   E5                     PUSH   HL   
3F5C   11 0B 00               LD   DE,11   
3F5F   B7                     OR   A   
3F60   ED 52                  SBC   HL,DE   
3F62   7D                     LD   A,L   
3F63   B4                     OR   H   
3F64   CA DD 3F               JP   Z,expectM_3050S127   
3F67   CD DE 0C               CALL   printStr   
3F6A   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 72 75 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/tru{%a}{%b} ?}^ +"   
3F8F   CD DE 0C               CALL   printStr   
3F92   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FA1   21 0B 00               LD   hl,11   
3FA4   E5                     PUSH   hl   
3FA5   E5                     PUSH   hl   
3FA6   CD 15 0E               CALL   run   
3FA9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3FB5   CD DE 0C               CALL   printStr   
3FB8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FC5   E1                     POP   hl   
3FC6   E5                     PUSH   hl   
3FC7   E5                     PUSH   hl   
3FC8   CD 15 0E               CALL   run   
3FCB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3FDC   76                     HALT      
3FDD                EXPECTM_3050S127:      
3FDD   E1                     POP   HL   
3FDE                          ;*Macro unroll:  test "1 10 20 \\ab{/fal{%a}{%b} ?}^ +", 21
3FDE   31 00 5B               LD   SP,STACK   
3FE1   CD 4C 0D               CALL   coldInit   
3FE4   CD 20 59               CALL   execStr   
3FE7   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 61 6C 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/fal{%a}{%b} ?}^ +",0   
4006   E1                     POP   HL   
4007   E5                     PUSH   HL   
4008   11 15 00               LD   DE,21   
400B   B7                     OR   A   
400C   ED 52                  SBC   HL,DE   
400E   7D                     LD   A,L   
400F   B4                     OR   H   
4010   CA 89 40               JP   Z,expectM_3051S128   
4013   CD DE 0C               CALL   printStr   
4016   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 61 6C 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/fal{%a}{%b} ?}^ +"   
403B   CD DE 0C               CALL   printStr   
403E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
404D   21 15 00               LD   hl,21   
4050   E5                     PUSH   hl   
4051   E5                     PUSH   hl   
4052   CD 15 0E               CALL   run   
4055   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4061   CD DE 0C               CALL   printStr   
4064   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4071   E1                     POP   hl   
4072   E5                     PUSH   hl   
4073   E5                     PUSH   hl   
4074   CD 15 0E               CALL   run   
4077   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4088   76                     HALT      
4089                EXPECTM_3051S128:      
4089   E1                     POP   HL   
408A                          ;*Macro unroll:  test "[10 20 30] 1;", 20
408A   31 00 5B               LD   SP,STACK   
408D   CD 4C 0D               CALL   coldInit   
4090   CD 20 59               CALL   execStr   
4093   5B 31 30 20 32 30 20 33 30 5D 20 31 3B 00 DB   "[10 20 30] 1;",0   
40A1   E1                     POP   HL   
40A2   E5                     PUSH   HL   
40A3   11 14 00               LD   DE,20   
40A6   B7                     OR   A   
40A7   ED 52                  SBC   HL,DE   
40A9   7D                     LD   A,L   
40AA   B4                     OR   H   
40AB   CA 13 41               JP   Z,expectM_3052S129   
40AE   CD DE 0C               CALL   printStr   
40B1   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 3B 00 .CSTR   "Code: ","[10 20 30] 1;"   
40C5   CD DE 0C               CALL   printStr   
40C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40D7   21 14 00               LD   hl,20   
40DA   E5                     PUSH   hl   
40DB   E5                     PUSH   hl   
40DC   CD 15 0E               CALL   run   
40DF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
40EB   CD DE 0C               CALL   printStr   
40EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40FB   E1                     POP   hl   
40FC   E5                     PUSH   hl   
40FD   E5                     PUSH   hl   
40FE   CD 15 0E               CALL   run   
4101   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4112   76                     HALT      
4113                EXPECTM_3052S129:      
4113   E1                     POP   HL   
4114                          ;*Macro unroll:  test "[10 20 30 40] /aln", 4
4114   31 00 5B               LD   SP,STACK   
4117   CD 4C 0D               CALL   coldInit   
411A   CD 20 59               CALL   execStr   
411D   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 6E 00 DB   "[10 20 30 40] /aln",0   
4130   E1                     POP   HL   
4131   E5                     PUSH   HL   
4132   11 04 00               LD   DE,4   
4135   B7                     OR   A   
4136   ED 52                  SBC   HL,DE   
4138   7D                     LD   A,L   
4139   B4                     OR   H   
413A   CA A7 41               JP   Z,expectM_3053S130   
413D   CD DE 0C               CALL   printStr   
4140   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 6E 00 .CSTR   "Code: ","[10 20 30 40] /aln"   
4159   CD DE 0C               CALL   printStr   
415C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
416B   21 04 00               LD   hl,4   
416E   E5                     PUSH   hl   
416F   E5                     PUSH   hl   
4170   CD 15 0E               CALL   run   
4173   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
417F   CD DE 0C               CALL   printStr   
4182   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
418F   E1                     POP   hl   
4190   E5                     PUSH   hl   
4191   E5                     PUSH   hl   
4192   CD 15 0E               CALL   run   
4195   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
41A6   76                     HALT      
41A7                EXPECTM_3053S130:      
41A7   E1                     POP   HL   
41A8                          ;*Macro unroll:  test "/byt [1 2 3] 1;", 2
41A8   31 00 5B               LD   SP,STACK   
41AB   CD 4C 0D               CALL   coldInit   
41AE   CD 20 59               CALL   execStr   
41B1   2F 62 79 74 20 5B 31 20 32 20 33 5D 20 31 3B 00 DB   "/byt [1 2 3] 1;",0   
41C1   E1                     POP   HL   
41C2   E5                     PUSH   HL   
41C3   11 02 00               LD   DE,2   
41C6   B7                     OR   A   
41C7   ED 52                  SBC   HL,DE   
41C9   7D                     LD   A,L   
41CA   B4                     OR   H   
41CB   CA 35 42               JP   Z,expectM_3054S131   
41CE   CD DE 0C               CALL   printStr   
41D1   43 6F 64 65 3A 20 2F 62 79 74 20 5B 31 20 32 20 33 5D 20 31 3B 00 .CSTR   "Code: ","/byt [1 2 3] 1;"   
41E7   CD DE 0C               CALL   printStr   
41EA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41F9   21 02 00               LD   hl,2   
41FC   E5                     PUSH   hl   
41FD   E5                     PUSH   hl   
41FE   CD 15 0E               CALL   run   
4201   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
420D   CD DE 0C               CALL   printStr   
4210   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
421D   E1                     POP   hl   
421E   E5                     PUSH   hl   
421F   E5                     PUSH   hl   
4220   CD 15 0E               CALL   run   
4223   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4234   76                     HALT      
4235                EXPECTM_3054S131:      
4235   E1                     POP   HL   
4236                          ;*Macro unroll:  test "/byt [_A _B _C] 1;", 66
4236   31 00 5B               LD   SP,STACK   
4239   CD 4C 0D               CALL   coldInit   
423C   CD 20 59               CALL   execStr   
423F   2F 62 79 74 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 3B 00 DB   "/byt [_A _B _C] 1;",0   
4252   E1                     POP   HL   
4253   E5                     PUSH   HL   
4254   11 42 00               LD   DE,66   
4257   B7                     OR   A   
4258   ED 52                  SBC   HL,DE   
425A   7D                     LD   A,L   
425B   B4                     OR   H   
425C   CA C9 42               JP   Z,expectM_3055S132   
425F   CD DE 0C               CALL   printStr   
4262   43 6F 64 65 3A 20 2F 62 79 74 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 3B 00 .CSTR   "Code: ","/byt [_A _B _C] 1;"   
427B   CD DE 0C               CALL   printStr   
427E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
428D   21 42 00               LD   hl,66   
4290   E5                     PUSH   hl   
4291   E5                     PUSH   hl   
4292   CD 15 0E               CALL   run   
4295   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
42A1   CD DE 0C               CALL   printStr   
42A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42B1   E1                     POP   hl   
42B2   E5                     PUSH   hl   
42B3   E5                     PUSH   hl   
42B4   CD 15 0E               CALL   run   
42B7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
42C8   76                     HALT      
42C9                EXPECTM_3055S132:      
42C9   E1                     POP   HL   
42CA                          ;*Macro unroll:  test "[{10}{20}{30}] 0;^ ", 10
42CA   31 00 5B               LD   SP,STACK   
42CD   CD 4C 0D               CALL   coldInit   
42D0   CD 20 59               CALL   execStr   
42D3   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 3B 5E 20 00 DB   "[{10}{20}{30}] 0;^ ",0   
42E7   E1                     POP   HL   
42E8   E5                     PUSH   HL   
42E9   11 0A 00               LD   DE,10   
42EC   B7                     OR   A   
42ED   ED 52                  SBC   HL,DE   
42EF   7D                     LD   A,L   
42F0   B4                     OR   H   
42F1   CA 5F 43               JP   Z,expectM_3056S133   
42F4   CD DE 0C               CALL   printStr   
42F7   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 3B 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0;^ "   
4311   CD DE 0C               CALL   printStr   
4314   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4323   21 0A 00               LD   hl,10   
4326   E5                     PUSH   hl   
4327   E5                     PUSH   hl   
4328   CD 15 0E               CALL   run   
432B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4337   CD DE 0C               CALL   printStr   
433A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4347   E1                     POP   hl   
4348   E5                     PUSH   hl   
4349   E5                     PUSH   hl   
434A   CD 15 0E               CALL   run   
434D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
435E   76                     HALT      
435F                EXPECTM_3056S133:      
435F   E1                     POP   HL   
4360                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0;^}^", 10
4360   31 00 5B               LD   SP,STACK   
4363   CD 4C 0D               CALL   coldInit   
4366   CD 20 59               CALL   execStr   
4369   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 3B 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0;^}^",0   
4384   E1                     POP   HL   
4385   E5                     PUSH   HL   
4386   11 0A 00               LD   DE,10   
4389   B7                     OR   A   
438A   ED 52                  SBC   HL,DE   
438C   7D                     LD   A,L   
438D   B4                     OR   H   
438E   CA 03 44               JP   Z,expectM_3057S134   
4391   CD DE 0C               CALL   printStr   
4394   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 3B 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0;^}^"   
43B5   CD DE 0C               CALL   printStr   
43B8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43C7   21 0A 00               LD   hl,10   
43CA   E5                     PUSH   hl   
43CB   E5                     PUSH   hl   
43CC   CD 15 0E               CALL   run   
43CF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
43DB   CD DE 0C               CALL   printStr   
43DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43EB   E1                     POP   hl   
43EC   E5                     PUSH   hl   
43ED   E5                     PUSH   hl   
43EE   CD 15 0E               CALL   run   
43F1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4402   76                     HALT      
4403                EXPECTM_3057S134:      
4403   E1                     POP   HL   
4404                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i;^}^", 10
4404   31 00 5B               LD   SP,STACK   
4407   CD 4C 0D               CALL   coldInit   
440A   CD 20 59               CALL   execStr   
440D   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i;^}^",0   
442C   E1                     POP   HL   
442D   E5                     PUSH   HL   
442E   11 0A 00               LD   DE,10   
4431   B7                     OR   A   
4432   ED 52                  SBC   HL,DE   
4434   7D                     LD   A,L   
4435   B4                     OR   H   
4436   CA AF 44               JP   Z,expectM_3058S135   
4439   CD DE 0C               CALL   printStr   
443C   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i;^}^"   
4461   CD DE 0C               CALL   printStr   
4464   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4473   21 0A 00               LD   hl,10   
4476   E5                     PUSH   hl   
4477   E5                     PUSH   hl   
4478   CD 15 0E               CALL   run   
447B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4487   CD DE 0C               CALL   printStr   
448A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4497   E1                     POP   hl   
4498   E5                     PUSH   hl   
4499   E5                     PUSH   hl   
449A   CD 15 0E               CALL   run   
449D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
44AE   76                     HALT      
44AF                EXPECTM_3058S135:      
44AF   E1                     POP   HL   
44B0                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i;^}^", 20
44B0   31 00 5B               LD   SP,STACK   
44B3   CD 4C 0D               CALL   coldInit   
44B6   CD 20 59               CALL   execStr   
44B9   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i;^}^",0   
44D8   E1                     POP   HL   
44D9   E5                     PUSH   HL   
44DA   11 14 00               LD   DE,20   
44DD   B7                     OR   A   
44DE   ED 52                  SBC   HL,DE   
44E0   7D                     LD   A,L   
44E1   B4                     OR   H   
44E2   CA 5B 45               JP   Z,expectM_3059S136   
44E5   CD DE 0C               CALL   printStr   
44E8   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i;^}^"   
450D   CD DE 0C               CALL   printStr   
4510   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
451F   21 14 00               LD   hl,20   
4522   E5                     PUSH   hl   
4523   E5                     PUSH   hl   
4524   CD 15 0E               CALL   run   
4527   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4533   CD DE 0C               CALL   printStr   
4536   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4543   E1                     POP   hl   
4544   E5                     PUSH   hl   
4545   E5                     PUSH   hl   
4546   CD 15 0E               CALL   run   
4549   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
455A   76                     HALT      
455B                EXPECTM_3059S136:      
455B   E1                     POP   HL   
455C                          ;*Macro unroll:  test "3i= ( i i-- i/whi )^ + +", 6
455C   31 00 5B               LD   SP,STACK   
455F   CD 4C 0D               CALL   coldInit   
4562   CD 20 59               CALL   execStr   
4565   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/whi )^ + +",0   
457E   E1                     POP   HL   
457F   E5                     PUSH   HL   
4580   11 06 00               LD   DE,6   
4583   B7                     OR   A   
4584   ED 52                  SBC   HL,DE   
4586   7D                     LD   A,L   
4587   B4                     OR   H   
4588   CA FB 45               JP   Z,expectM_3060S137   
458B   CD DE 0C               CALL   printStr   
458E   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/whi )^ + +"   
45AD   CD DE 0C               CALL   printStr   
45B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45BF   21 06 00               LD   hl,6   
45C2   E5                     PUSH   hl   
45C3   E5                     PUSH   hl   
45C4   CD 15 0E               CALL   run   
45C7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
45D3   CD DE 0C               CALL   printStr   
45D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45E3   E1                     POP   hl   
45E4   E5                     PUSH   hl   
45E5   E5                     PUSH   hl   
45E6   CD 15 0E               CALL   run   
45E9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
45FA   76                     HALT      
45FB                EXPECTM_3060S137:      
45FB   E1                     POP   HL   
45FC                          ;*Macro unroll:  test "3i= [ ( i i-- i/whi )^ ] 1;", 2
45FC   31 00 5B               LD   SP,STACK   
45FF   CD 4C 0D               CALL   coldInit   
4602   CD 20 59               CALL   execStr   
4605   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 5D 20 31 3B 00 DB   "3i= [ ( i i-- i/whi )^ ] 1;",0   
4621   E1                     POP   HL   
4622   E5                     PUSH   HL   
4623   11 02 00               LD   DE,2   
4626   B7                     OR   A   
4627   ED 52                  SBC   HL,DE   
4629   7D                     LD   A,L   
462A   B4                     OR   H   
462B   CA A1 46               JP   Z,expectM_3061S138   
462E   CD DE 0C               CALL   printStr   
4631   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 5D 20 31 3B 00 .CSTR   "Code: ","3i= [ ( i i-- i/whi )^ ] 1;"   
4653   CD DE 0C               CALL   printStr   
4656   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4665   21 02 00               LD   hl,2   
4668   E5                     PUSH   hl   
4669   E5                     PUSH   hl   
466A   CD 15 0E               CALL   run   
466D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4679   CD DE 0C               CALL   printStr   
467C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4689   E1                     POP   hl   
468A   E5                     PUSH   hl   
468B   E5                     PUSH   hl   
468C   CD 15 0E               CALL   run   
468F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
46A0   76                     HALT      
46A1                EXPECTM_3061S138:      
46A1   E1                     POP   HL   
46A2                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/whi )^ j ", 10
46A2   31 00 5B               LD   SP,STACK   
46A5   CD 4C 0D               CALL   coldInit   
46A8   CD 20 59               CALL   execStr   
46AB   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/whi )^ j ",0   
46D2   E1                     POP   HL   
46D3   E5                     PUSH   HL   
46D4   11 0A 00               LD   DE,10   
46D7   B7                     OR   A   
46D8   ED 52                  SBC   HL,DE   
46DA   7D                     LD   A,L   
46DB   B4                     OR   H   
46DC   CA 5D 47               JP   Z,expectM_3062S139   
46DF   CD DE 0C               CALL   printStr   
46E2   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/whi )^ j "   
470F   CD DE 0C               CALL   printStr   
4712   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4721   21 0A 00               LD   hl,10   
4724   E5                     PUSH   hl   
4725   E5                     PUSH   hl   
4726   CD 15 0E               CALL   run   
4729   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4735   CD DE 0C               CALL   printStr   
4738   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4745   E1                     POP   hl   
4746   E5                     PUSH   hl   
4747   E5                     PUSH   hl   
4748   CD 15 0E               CALL   run   
474B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
475C   76                     HALT      
475D                EXPECTM_3062S139:      
475D   E1                     POP   HL   
475E                          ;*Macro unroll:  test "0j= 0i= ( i j+= i++ i 5< /whi )^ j ", 10
475E   31 00 5B               LD   SP,STACK   
4761   CD 4C 0D               CALL   coldInit   
4764   CD 20 59               CALL   execStr   
4767   30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 77 68 69 20 29 5E 20 6A 20 00 DB   "0j= 0i= ( i j+= i++ i 5< /whi )^ j ",0   
478B   E1                     POP   HL   
478C   E5                     PUSH   HL   
478D   11 0A 00               LD   DE,10   
4790   B7                     OR   A   
4791   ED 52                  SBC   HL,DE   
4793   7D                     LD   A,L   
4794   B4                     OR   H   
4795   CA 13 48               JP   Z,expectM_3063S140   
4798   CD DE 0C               CALL   printStr   
479B   43 6F 64 65 3A 20 30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 77 68 69 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0j= 0i= ( i j+= i++ i 5< /whi )^ j "   
47C5   CD DE 0C               CALL   printStr   
47C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47D7   21 0A 00               LD   hl,10   
47DA   E5                     PUSH   hl   
47DB   E5                     PUSH   hl   
47DC   CD 15 0E               CALL   run   
47DF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
47EB   CD DE 0C               CALL   printStr   
47EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47FB   E1                     POP   hl   
47FC   E5                     PUSH   hl   
47FD   E5                     PUSH   hl   
47FE   CD 15 0E               CALL   run   
4801   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4812   76                     HALT      
4813                EXPECTM_3063S140:      
4813   E1                     POP   HL   
4814                          ;*Macro unroll:  test "0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t", 12
4814   31 00 5B               LD   SP,STACK   
4817   CD 4C 0D               CALL   coldInit   
481A   CD 20 59               CALL   execStr   
481D   30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 77 68 69 29 5E 20 69 2D 2D 20 69 2F 77 68 69 29 5E 20 74 00 DB   "0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t",0   
4849   E1                     POP   HL   
484A   E5                     PUSH   HL   
484B   11 0C 00               LD   DE,12   
484E   B7                     OR   A   
484F   ED 52                  SBC   HL,DE   
4851   7D                     LD   A,L   
4852   B4                     OR   H   
4853   CA D9 48               JP   Z,expectM_3064S141   
4856   CD DE 0C               CALL   printStr   
4859   43 6F 64 65 3A 20 30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 77 68 69 29 5E 20 69 2D 2D 20 69 2F 77 68 69 29 5E 20 74 00 .CSTR   "Code: ","0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t"   
488B   CD DE 0C               CALL   printStr   
488E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
489D   21 0C 00               LD   hl,12   
48A0   E5                     PUSH   hl   
48A1   E5                     PUSH   hl   
48A2   CD 15 0E               CALL   run   
48A5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
48B1   CD DE 0C               CALL   printStr   
48B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48C1   E1                     POP   hl   
48C2   E5                     PUSH   hl   
48C3   E5                     PUSH   hl   
48C4   CD 15 0E               CALL   run   
48C7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
48D8   76                     HALT      
48D9                EXPECTM_3064S141:      
48D9   E1                     POP   HL   
48DA                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^", 6
48DA   31 00 5B               LD   SP,STACK   
48DD   CD 4C 0D               CALL   coldInit   
48E0   CD 20 59               CALL   execStr   
48E3   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 77 68 69 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^",0   
490F   E1                     POP   HL   
4910   E5                     PUSH   HL   
4911   11 06 00               LD   DE,6   
4914   B7                     OR   A   
4915   ED 52                  SBC   HL,DE   
4917   7D                     LD   A,L   
4918   B4                     OR   H   
4919   CA 9F 49               JP   Z,expectM_3065S142   
491C   CD DE 0C               CALL   printStr   
491F   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 77 68 69 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^"   
4951   CD DE 0C               CALL   printStr   
4954   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4963   21 06 00               LD   hl,6   
4966   E5                     PUSH   hl   
4967   E5                     PUSH   hl   
4968   CD 15 0E               CALL   run   
496B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4977   CD DE 0C               CALL   printStr   
497A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4987   E1                     POP   hl   
4988   E5                     PUSH   hl   
4989   E5                     PUSH   hl   
498A   CD 15 0E               CALL   run   
498D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
499E   76                     HALT      
499F                EXPECTM_3065S142:      
499F   E1                     POP   HL   
49A0                          ;*Macro unroll:  test "/tru \\f{1 %f/whi 2 +}^",3
49A0   31 00 5B               LD   SP,STACK   
49A3   CD 4C 0D               CALL   coldInit   
49A6   CD 20 59               CALL   execStr   
49A9   2F 74 72 75 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 DB   "/tru \\f{1 %f/whi 2 +}^",0   
49C0   E1                     POP   HL   
49C1   E5                     PUSH   HL   
49C2   11 03 00               LD   DE,3   
49C5   B7                     OR   A   
49C6   ED 52                  SBC   HL,DE   
49C8   7D                     LD   A,L   
49C9   B4                     OR   H   
49CA   CA 3B 4A               JP   Z,expectM_3066S143   
49CD   CD DE 0C               CALL   printStr   
49D0   43 6F 64 65 3A 20 2F 74 72 75 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/tru \\f{1 %f/whi 2 +}^"   
49ED   CD DE 0C               CALL   printStr   
49F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49FF   21 03 00               LD   hl,3   
4A02   E5                     PUSH   hl   
4A03   E5                     PUSH   hl   
4A04   CD 15 0E               CALL   run   
4A07   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4A13   CD DE 0C               CALL   printStr   
4A16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A23   E1                     POP   hl   
4A24   E5                     PUSH   hl   
4A25   E5                     PUSH   hl   
4A26   CD 15 0E               CALL   run   
4A29   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4A3A   76                     HALT      
4A3B                EXPECTM_3066S143:      
4A3B   E1                     POP   HL   
4A3C                          ;*Macro unroll:  test "/fal \\f{1 %f/whi 2 +}^",1
4A3C   31 00 5B               LD   SP,STACK   
4A3F   CD 4C 0D               CALL   coldInit   
4A42   CD 20 59               CALL   execStr   
4A45   2F 66 61 6C 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 DB   "/fal \\f{1 %f/whi 2 +}^",0   
4A5C   E1                     POP   HL   
4A5D   E5                     PUSH   HL   
4A5E   11 01 00               LD   DE,1   
4A61   B7                     OR   A   
4A62   ED 52                  SBC   HL,DE   
4A64   7D                     LD   A,L   
4A65   B4                     OR   H   
4A66   CA D7 4A               JP   Z,expectM_3067S144   
4A69   CD DE 0C               CALL   printStr   
4A6C   43 6F 64 65 3A 20 2F 66 61 6C 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/fal \\f{1 %f/whi 2 +}^"   
4A89   CD DE 0C               CALL   printStr   
4A8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A9B   21 01 00               LD   hl,1   
4A9E   E5                     PUSH   hl   
4A9F   E5                     PUSH   hl   
4AA0   CD 15 0E               CALL   run   
4AA3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4AAF   CD DE 0C               CALL   printStr   
4AB2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4ABF   E1                     POP   hl   
4AC0   E5                     PUSH   hl   
4AC1   E5                     PUSH   hl   
4AC2   CD 15 0E               CALL   run   
4AC5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4AD6   76                     HALT      
4AD7                EXPECTM_3067S144:      
4AD7   E1                     POP   HL   
4AD8                          ;*Macro unroll:  test "_A 1 - /adr", NUL
4AD8   31 00 5B               LD   SP,STACK   
4ADB   CD 4C 0D               CALL   coldInit   
4ADE   CD 20 59               CALL   execStr   
4AE1   5F 41 20 31 20 2D 20 2F 61 64 72 00 DB   "_A 1 - /adr",0   
4AED   E1                     POP   HL   
4AEE   E5                     PUSH   HL   
4AEF   11 00 00               LD   DE,NUL   
4AF2   B7                     OR   A   
4AF3   ED 52                  SBC   HL,DE   
4AF5   7D                     LD   A,L   
4AF6   B4                     OR   H   
4AF7   CA 5D 4B               JP   Z,expectM_3068S145   
4AFA   CD DE 0C               CALL   printStr   
4AFD   43 6F 64 65 3A 20 5F 41 20 31 20 2D 20 2F 61 64 72 00 .CSTR   "Code: ","_A 1 - /adr"   
4B0F   CD DE 0C               CALL   printStr   
4B12   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B21   21 00 00               LD   hl,NUL   
4B24   E5                     PUSH   hl   
4B25   E5                     PUSH   hl   
4B26   CD 15 0E               CALL   run   
4B29   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4B35   CD DE 0C               CALL   printStr   
4B38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B45   E1                     POP   hl   
4B46   E5                     PUSH   hl   
4B47   E5                     PUSH   hl   
4B48   CD 15 0E               CALL   run   
4B4B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4B5C   76                     HALT      
4B5D                EXPECTM_3068S145:      
4B5D   E1                     POP   HL   
4B5E                          ;*Macro unroll:  test "_Z 1 + /adr", NUL
4B5E   31 00 5B               LD   SP,STACK   
4B61   CD 4C 0D               CALL   coldInit   
4B64   CD 20 59               CALL   execStr   
4B67   5F 5A 20 31 20 2B 20 2F 61 64 72 00 DB   "_Z 1 + /adr",0   
4B73   E1                     POP   HL   
4B74   E5                     PUSH   HL   
4B75   11 00 00               LD   DE,NUL   
4B78   B7                     OR   A   
4B79   ED 52                  SBC   HL,DE   
4B7B   7D                     LD   A,L   
4B7C   B4                     OR   H   
4B7D   CA E3 4B               JP   Z,expectM_3069S146   
4B80   CD DE 0C               CALL   printStr   
4B83   43 6F 64 65 3A 20 5F 5A 20 31 20 2B 20 2F 61 64 72 00 .CSTR   "Code: ","_Z 1 + /adr"   
4B95   CD DE 0C               CALL   printStr   
4B98   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BA7   21 00 00               LD   hl,NUL   
4BAA   E5                     PUSH   hl   
4BAB   E5                     PUSH   hl   
4BAC   CD 15 0E               CALL   run   
4BAF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4BBB   CD DE 0C               CALL   printStr   
4BBE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BCB   E1                     POP   hl   
4BCC   E5                     PUSH   hl   
4BCD   E5                     PUSH   hl   
4BCE   CD 15 0E               CALL   run   
4BD1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4BE2   76                     HALT      
4BE3                EXPECTM_3069S146:      
4BE3   E1                     POP   HL   
4BE4                          ;*Macro unroll:  test "_a 1 - /adr", NUL
4BE4   31 00 5B               LD   SP,STACK   
4BE7   CD 4C 0D               CALL   coldInit   
4BEA   CD 20 59               CALL   execStr   
4BED   5F 61 20 31 20 2D 20 2F 61 64 72 00 DB   "_a 1 - /adr",0   
4BF9   E1                     POP   HL   
4BFA   E5                     PUSH   HL   
4BFB   11 00 00               LD   DE,NUL   
4BFE   B7                     OR   A   
4BFF   ED 52                  SBC   HL,DE   
4C01   7D                     LD   A,L   
4C02   B4                     OR   H   
4C03   CA 69 4C               JP   Z,expectM_3070S147   
4C06   CD DE 0C               CALL   printStr   
4C09   43 6F 64 65 3A 20 5F 61 20 31 20 2D 20 2F 61 64 72 00 .CSTR   "Code: ","_a 1 - /adr"   
4C1B   CD DE 0C               CALL   printStr   
4C1E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C2D   21 00 00               LD   hl,NUL   
4C30   E5                     PUSH   hl   
4C31   E5                     PUSH   hl   
4C32   CD 15 0E               CALL   run   
4C35   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4C41   CD DE 0C               CALL   printStr   
4C44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C51   E1                     POP   hl   
4C52   E5                     PUSH   hl   
4C53   E5                     PUSH   hl   
4C54   CD 15 0E               CALL   run   
4C57   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4C68   76                     HALT      
4C69                EXPECTM_3070S147:      
4C69   E1                     POP   HL   
4C6A                          ;*Macro unroll:  test "_z 1 + /adr", NUL
4C6A   31 00 5B               LD   SP,STACK   
4C6D   CD 4C 0D               CALL   coldInit   
4C70   CD 20 59               CALL   execStr   
4C73   5F 7A 20 31 20 2B 20 2F 61 64 72 00 DB   "_z 1 + /adr",0   
4C7F   E1                     POP   HL   
4C80   E5                     PUSH   HL   
4C81   11 00 00               LD   DE,NUL   
4C84   B7                     OR   A   
4C85   ED 52                  SBC   HL,DE   
4C87   7D                     LD   A,L   
4C88   B4                     OR   H   
4C89   CA EF 4C               JP   Z,expectM_3071S148   
4C8C   CD DE 0C               CALL   printStr   
4C8F   43 6F 64 65 3A 20 5F 7A 20 31 20 2B 20 2F 61 64 72 00 .CSTR   "Code: ","_z 1 + /adr"   
4CA1   CD DE 0C               CALL   printStr   
4CA4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CB3   21 00 00               LD   hl,NUL   
4CB6   E5                     PUSH   hl   
4CB7   E5                     PUSH   hl   
4CB8   CD 15 0E               CALL   run   
4CBB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4CC7   CD DE 0C               CALL   printStr   
4CCA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CD7   E1                     POP   hl   
4CD8   E5                     PUSH   hl   
4CD9   E5                     PUSH   hl   
4CDA   CD 15 0E               CALL   run   
4CDD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4CEE   76                     HALT      
4CEF                EXPECTM_3071S148:      
4CEF   E1                     POP   HL   
4CF0                          ;*Macro unroll:  test "_z /adr", VARS + (("z"-"a")+("Z"-"A")+1)*2
4CF0   31 00 5B               LD   SP,STACK   
4CF3   CD 4C 0D               CALL   coldInit   
4CF6   CD 20 59               CALL   execStr   
4CF9   5F 7A 20 2F 61 64 72 00 DB   "_z /adr",0   
4D01   E1                     POP   HL   
4D02   E5                     PUSH   HL   
4D03   11 66 5D               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4D06   B7                     OR   A   
4D07   ED 52                  SBC   HL,DE   
4D09   7D                     LD   A,L   
4D0A   B4                     OR   H   
4D0B   CA 6D 4D               JP   Z,expectM_3072S149   
4D0E   CD DE 0C               CALL   printStr   
4D11   43 6F 64 65 3A 20 5F 7A 20 2F 61 64 72 00 .CSTR   "Code: ","_z /adr"   
4D1F   CD DE 0C               CALL   printStr   
4D22   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D31   21 66 5D               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4D34   E5                     PUSH   hl   
4D35   E5                     PUSH   hl   
4D36   CD 15 0E               CALL   run   
4D39   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4D45   CD DE 0C               CALL   printStr   
4D48   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D55   E1                     POP   hl   
4D56   E5                     PUSH   hl   
4D57   E5                     PUSH   hl   
4D58   CD 15 0E               CALL   run   
4D5B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4D6C   76                     HALT      
4D6D                EXPECTM_3072S149:      
4D6D   E1                     POP   HL   
4D6E                          ;*Macro unroll:  test "_a /adr", VARS + ("Z"-"A"+1)*2
4D6E   31 00 5B               LD   SP,STACK   
4D71   CD 4C 0D               CALL   coldInit   
4D74   CD 20 59               CALL   execStr   
4D77   5F 61 20 2F 61 64 72 00 DB   "_a /adr",0   
4D7F   E1                     POP   HL   
4D80   E5                     PUSH   HL   
4D81   11 34 5D               LD   DE,VARS + ("Z"-"A"+1)*2   
4D84   B7                     OR   A   
4D85   ED 52                  SBC   HL,DE   
4D87   7D                     LD   A,L   
4D88   B4                     OR   H   
4D89   CA EB 4D               JP   Z,expectM_3073S150   
4D8C   CD DE 0C               CALL   printStr   
4D8F   43 6F 64 65 3A 20 5F 61 20 2F 61 64 72 00 .CSTR   "Code: ","_a /adr"   
4D9D   CD DE 0C               CALL   printStr   
4DA0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4DAF   21 34 5D               LD   hl,VARS + ("Z"-"A"+1)*2   
4DB2   E5                     PUSH   hl   
4DB3   E5                     PUSH   hl   
4DB4   CD 15 0E               CALL   run   
4DB7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4DC3   CD DE 0C               CALL   printStr   
4DC6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DD3   E1                     POP   hl   
4DD4   E5                     PUSH   hl   
4DD5   E5                     PUSH   hl   
4DD6   CD 15 0E               CALL   run   
4DD9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4DEA   76                     HALT      
4DEB                EXPECTM_3073S150:      
4DEB   E1                     POP   HL   
4DEC                          ;*Macro unroll:  test "_Z /adr", VARS + ("Z"-"A")*2
4DEC   31 00 5B               LD   SP,STACK   
4DEF   CD 4C 0D               CALL   coldInit   
4DF2   CD 20 59               CALL   execStr   
4DF5   5F 5A 20 2F 61 64 72 00 DB   "_Z /adr",0   
4DFD   E1                     POP   HL   
4DFE   E5                     PUSH   HL   
4DFF   11 32 5D               LD   DE,VARS + ("Z"-"A")*2   
4E02   B7                     OR   A   
4E03   ED 52                  SBC   HL,DE   
4E05   7D                     LD   A,L   
4E06   B4                     OR   H   
4E07   CA 69 4E               JP   Z,expectM_3074S151   
4E0A   CD DE 0C               CALL   printStr   
4E0D   43 6F 64 65 3A 20 5F 5A 20 2F 61 64 72 00 .CSTR   "Code: ","_Z /adr"   
4E1B   CD DE 0C               CALL   printStr   
4E1E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E2D   21 32 5D               LD   hl,VARS + ("Z"-"A")*2   
4E30   E5                     PUSH   hl   
4E31   E5                     PUSH   hl   
4E32   CD 15 0E               CALL   run   
4E35   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4E41   CD DE 0C               CALL   printStr   
4E44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E51   E1                     POP   hl   
4E52   E5                     PUSH   hl   
4E53   E5                     PUSH   hl   
4E54   CD 15 0E               CALL   run   
4E57   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4E68   76                     HALT      
4E69                EXPECTM_3074S151:      
4E69   E1                     POP   HL   
4E6A                          ;*Macro unroll:  test "_A /adr", VARS
4E6A   31 00 5B               LD   SP,STACK   
4E6D   CD 4C 0D               CALL   coldInit   
4E70   CD 20 59               CALL   execStr   
4E73   5F 41 20 2F 61 64 72 00 DB   "_A /adr",0   
4E7B   E1                     POP   HL   
4E7C   E5                     PUSH   HL   
4E7D   11 00 5D               LD   DE,VARS   
4E80   B7                     OR   A   
4E81   ED 52                  SBC   HL,DE   
4E83   7D                     LD   A,L   
4E84   B4                     OR   H   
4E85   CA E7 4E               JP   Z,expectM_3075S152   
4E88   CD DE 0C               CALL   printStr   
4E8B   43 6F 64 65 3A 20 5F 41 20 2F 61 64 72 00 .CSTR   "Code: ","_A /adr"   
4E99   CD DE 0C               CALL   printStr   
4E9C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EAB   21 00 5D               LD   hl,VARS   
4EAE   E5                     PUSH   hl   
4EAF   E5                     PUSH   hl   
4EB0   CD 15 0E               CALL   run   
4EB3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4EBF   CD DE 0C               CALL   printStr   
4EC2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4ECF   E1                     POP   hl   
4ED0   E5                     PUSH   hl   
4ED1   E5                     PUSH   hl   
4ED2   CD 15 0E               CALL   run   
4ED5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4EE6   76                     HALT      
4EE7                EXPECTM_3075S152:      
4EE7   E1                     POP   HL   
4EE8                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
4EE8   31 00 5B               LD   SP,STACK   
4EEB   CD 4C 0D               CALL   coldInit   
4EEE   CD 20 59               CALL   execStr   
4EF1   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
4EFE   E1                     POP   HL   
4EFF   E5                     PUSH   HL   
4F00   11 01 00               LD   DE,1   
4F03   B7                     OR   A   
4F04   ED 52                  SBC   HL,DE   
4F06   7D                     LD   A,L   
4F07   B4                     OR   H   
4F08   CA 6F 4F               JP   Z,expectM_3076S153   
4F0B   CD DE 0C               CALL   printStr   
4F0E   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
4F21   CD DE 0C               CALL   printStr   
4F24   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F33   21 01 00               LD   hl,1   
4F36   E5                     PUSH   hl   
4F37   E5                     PUSH   hl   
4F38   CD 15 0E               CALL   run   
4F3B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4F47   CD DE 0C               CALL   printStr   
4F4A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F57   E1                     POP   hl   
4F58   E5                     PUSH   hl   
4F59   E5                     PUSH   hl   
4F5A   CD 15 0E               CALL   run   
4F5D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4F6E   76                     HALT      
4F6F                EXPECTM_3076S153:      
4F6F   E1                     POP   HL   
4F70                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
4F70   31 00 5B               LD   SP,STACK   
4F73   CD 4C 0D               CALL   coldInit   
4F76   CD 20 59               CALL   execStr   
4F79   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
4F8D   E1                     POP   HL   
4F8E   E5                     PUSH   HL   
4F8F   11 03 00               LD   DE,3   
4F92   B7                     OR   A   
4F93   ED 52                  SBC   HL,DE   
4F95   7D                     LD   A,L   
4F96   B4                     OR   H   
4F97   CA 05 50               JP   Z,expectM_3077S154   
4F9A   CD DE 0C               CALL   printStr   
4F9D   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
4FB7   CD DE 0C               CALL   printStr   
4FBA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FC9   21 03 00               LD   hl,3   
4FCC   E5                     PUSH   hl   
4FCD   E5                     PUSH   hl   
4FCE   CD 15 0E               CALL   run   
4FD1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4FDD   CD DE 0C               CALL   printStr   
4FE0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FED   E1                     POP   hl   
4FEE   E5                     PUSH   hl   
4FEF   E5                     PUSH   hl   
4FF0   CD 15 0E               CALL   run   
4FF3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5004   76                     HALT      
5005                EXPECTM_3077S154:      
5005   E1                     POP   HL   
5006                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
5006   31 00 5B               LD   SP,STACK   
5009   CD 4C 0D               CALL   coldInit   
500C   CD 20 59               CALL   execStr   
500F   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
5026   E1                     POP   HL   
5027   E5                     PUSH   HL   
5028   11 02 00               LD   DE,2   
502B   B7                     OR   A   
502C   ED 52                  SBC   HL,DE   
502E   7D                     LD   A,L   
502F   B4                     OR   H   
5030   CA A1 50               JP   Z,expectM_3078S155   
5033   CD DE 0C               CALL   printStr   
5036   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
5053   CD DE 0C               CALL   printStr   
5056   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5065   21 02 00               LD   hl,2   
5068   E5                     PUSH   hl   
5069   E5                     PUSH   hl   
506A   CD 15 0E               CALL   run   
506D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5079   CD DE 0C               CALL   printStr   
507C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5089   E1                     POP   hl   
508A   E5                     PUSH   hl   
508B   E5                     PUSH   hl   
508C   CD 15 0E               CALL   run   
508F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
50A0   76                     HALT      
50A1                EXPECTM_3078S155:      
50A1   E1                     POP   HL   
50A2                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
50A2   31 00 5B               LD   SP,STACK   
50A5   CD 4C 0D               CALL   coldInit   
50A8   CD 20 59               CALL   execStr   
50AB   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
50CE   E1                     POP   HL   
50CF   E5                     PUSH   HL   
50D0   11 01 00               LD   DE,1   
50D3   B7                     OR   A   
50D4   ED 52                  SBC   HL,DE   
50D6   7D                     LD   A,L   
50D7   B4                     OR   H   
50D8   CA 55 51               JP   Z,expectM_3079S156   
50DB   CD DE 0C               CALL   printStr   
50DE   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
5107   CD DE 0C               CALL   printStr   
510A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5119   21 01 00               LD   hl,1   
511C   E5                     PUSH   hl   
511D   E5                     PUSH   hl   
511E   CD 15 0E               CALL   run   
5121   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
512D   CD DE 0C               CALL   printStr   
5130   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
513D   E1                     POP   hl   
513E   E5                     PUSH   hl   
513F   E5                     PUSH   hl   
5140   CD 15 0E               CALL   run   
5143   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5154   76                     HALT      
5155                EXPECTM_3079S156:      
5155   E1                     POP   HL   
5156                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
5156   31 00 5B               LD   SP,STACK   
5159   CD 4C 0D               CALL   coldInit   
515C   CD 20 59               CALL   execStr   
515F   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
5182   E1                     POP   HL   
5183   E5                     PUSH   HL   
5184   11 01 00               LD   DE,1   
5187   B7                     OR   A   
5188   ED 52                  SBC   HL,DE   
518A   7D                     LD   A,L   
518B   B4                     OR   H   
518C   CA 09 52               JP   Z,expectM_3080S157   
518F   CD DE 0C               CALL   printStr   
5192   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
51BB   CD DE 0C               CALL   printStr   
51BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
51CD   21 01 00               LD   hl,1   
51D0   E5                     PUSH   hl   
51D1   E5                     PUSH   hl   
51D2   CD 15 0E               CALL   run   
51D5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
51E1   CD DE 0C               CALL   printStr   
51E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
51F1   E1                     POP   hl   
51F2   E5                     PUSH   hl   
51F3   E5                     PUSH   hl   
51F4   CD 15 0E               CALL   run   
51F7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5208   76                     HALT      
5209                EXPECTM_3080S157:      
5209   E1                     POP   HL   
520A                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
520A   31 00 5B               LD   SP,STACK   
520D   CD 4C 0D               CALL   coldInit   
5210   CD 20 59               CALL   execStr   
5213   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
5243   E1                     POP   HL   
5244   E5                     PUSH   HL   
5245   11 02 00               LD   DE,2   
5248   B7                     OR   A   
5249   ED 52                  SBC   HL,DE   
524B   7D                     LD   A,L   
524C   B4                     OR   H   
524D   CA D7 52               JP   Z,expectM_3081S158   
5250   CD DE 0C               CALL   printStr   
5253   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
5289   CD DE 0C               CALL   printStr   
528C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
529B   21 02 00               LD   hl,2   
529E   E5                     PUSH   hl   
529F   E5                     PUSH   hl   
52A0   CD 15 0E               CALL   run   
52A3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
52AF   CD DE 0C               CALL   printStr   
52B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
52BF   E1                     POP   hl   
52C0   E5                     PUSH   hl   
52C1   E5                     PUSH   hl   
52C2   CD 15 0E               CALL   run   
52C5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
52D6   76                     HALT      
52D7                EXPECTM_3081S158:      
52D7   E1                     POP   HL   
52D8                          ;*Macro unroll:  test "'hello'/sln",5
52D8   31 00 5B               LD   SP,STACK   
52DB   CD 4C 0D               CALL   coldInit   
52DE   CD 20 59               CALL   execStr   
52E1   27 68 65 6C 6C 6F 27 2F 73 6C 6E 00 DB   "'hello'/sln",0   
52ED   E1                     POP   HL   
52EE   E5                     PUSH   HL   
52EF   11 05 00               LD   DE,5   
52F2   B7                     OR   A   
52F3   ED 52                  SBC   HL,DE   
52F5   7D                     LD   A,L   
52F6   B4                     OR   H   
52F7   CA 5D 53               JP   Z,expectM_3082S159   
52FA   CD DE 0C               CALL   printStr   
52FD   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 2F 73 6C 6E 00 .CSTR   "Code: ","'hello'/sln"   
530F   CD DE 0C               CALL   printStr   
5312   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5321   21 05 00               LD   hl,5   
5324   E5                     PUSH   hl   
5325   E5                     PUSH   hl   
5326   CD 15 0E               CALL   run   
5329   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5335   CD DE 0C               CALL   printStr   
5338   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5345   E1                     POP   hl   
5346   E5                     PUSH   hl   
5347   E5                     PUSH   hl   
5348   CD 15 0E               CALL   run   
534B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
535C   76                     HALT      
535D                EXPECTM_3082S159:      
535D   E1                     POP   HL   
535E                          ;*Macro unroll:  test "'hello' 'hell' /scp", false
535E   31 00 5B               LD   SP,STACK   
5361   CD 4C 0D               CALL   coldInit   
5364   CD 20 59               CALL   execStr   
5367   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 70 00 DB   "'hello' 'hell' /scp",0   
537B   E1                     POP   HL   
537C   E5                     PUSH   HL   
537D   11 00 00               LD   DE,false   
5380   B7                     OR   A   
5381   ED 52                  SBC   HL,DE   
5383   7D                     LD   A,L   
5384   B4                     OR   H   
5385   CA F3 53               JP   Z,expectM_3083S160   
5388   CD DE 0C               CALL   printStr   
538B   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 70 00 .CSTR   "Code: ","'hello' 'hell' /scp"   
53A5   CD DE 0C               CALL   printStr   
53A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
53B7   21 00 00               LD   hl,false   
53BA   E5                     PUSH   hl   
53BB   E5                     PUSH   hl   
53BC   CD 15 0E               CALL   run   
53BF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
53CB   CD DE 0C               CALL   printStr   
53CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
53DB   E1                     POP   hl   
53DC   E5                     PUSH   hl   
53DD   E5                     PUSH   hl   
53DE   CD 15 0E               CALL   run   
53E1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
53F2   76                     HALT      
53F3                EXPECTM_3083S160:      
53F3   E1                     POP   HL   
53F4                          ;*Macro unroll:  test "'hello' 'hello' /scp", true
53F4   31 00 5B               LD   SP,STACK   
53F7   CD 4C 0D               CALL   coldInit   
53FA   CD 20 59               CALL   execStr   
53FD   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 70 00 DB   "'hello' 'hello' /scp",0   
5412   E1                     POP   HL   
5413   E5                     PUSH   HL   
5414   11 FF FF               LD   DE,true   
5417   B7                     OR   A   
5418   ED 52                  SBC   HL,DE   
541A   7D                     LD   A,L   
541B   B4                     OR   H   
541C   CA 8B 54               JP   Z,expectM_3084S161   
541F   CD DE 0C               CALL   printStr   
5422   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 70 00 .CSTR   "Code: ","'hello' 'hello' /scp"   
543D   CD DE 0C               CALL   printStr   
5440   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
544F   21 FF FF               LD   hl,true   
5452   E5                     PUSH   hl   
5453   E5                     PUSH   hl   
5454   CD 15 0E               CALL   run   
5457   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5463   CD DE 0C               CALL   printStr   
5466   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5473   E1                     POP   hl   
5474   E5                     PUSH   hl   
5475   E5                     PUSH   hl   
5476   CD 15 0E               CALL   run   
5479   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
548A   76                     HALT      
548B                EXPECTM_3084S161:      
548B   E1                     POP   HL   
548C                          ;*Macro unroll:  test "/sbb `=` 1. 2. 3. `=` /sbe '=1 2 3 =' /scp", TRUE
548C   31 00 5B               LD   SP,STACK   
548F   CD 4C 0D               CALL   coldInit   
5492   CD 20 59               CALL   execStr   
5495   2F 73 62 62 20 60 3D 60 20 31 2E 20 32 2E 20 33 2E 20 60 3D 60 20 2F 73 62 65 20 27 3D 31 20 32 20 33 20 3D 27 20 2F 73 63 70 00 DB   "/sbb `=` 1. 2. 3. `=` /sbe '=1 2 3 =' /scp",0   
54C0   E1                     POP   HL   
54C1   E5                     PUSH   HL   
54C2   11 FF FF               LD   DE,TRUE   
54C5   B7                     OR   A   
54C6   ED 52                  SBC   HL,DE   
54C8   7D                     LD   A,L   
54C9   B4                     OR   H   
54CA   CA 4F 55               JP   Z,expectM_3085S162   
54CD   CD DE 0C               CALL   printStr   
54D0   43 6F 64 65 3A 20 2F 73 62 62 20 60 3D 60 20 31 2E 20 32 2E 20 33 2E 20 60 3D 60 20 2F 73 62 65 20 27 3D 31 20 32 20 33 20 3D 27 20 2F 73 63 70 00 .CSTR   "Code: ","/sbb `=` 1. 2. 3. `=` /sbe '=1 2 3 =' /scp"   
5501   CD DE 0C               CALL   printStr   
5504   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5513   21 FF FF               LD   hl,TRUE   
5516   E5                     PUSH   hl   
5517   E5                     PUSH   hl   
5518   CD 15 0E               CALL   run   
551B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5527   CD DE 0C               CALL   printStr   
552A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5537   E1                     POP   hl   
5538   E5                     PUSH   hl   
5539   E5                     PUSH   hl   
553A   CD 15 0E               CALL   run   
553D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
554E   76                     HALT      
554F                EXPECTM_3085S162:      
554F   E1                     POP   HL   
5550                          ;*Macro unroll:  test "[1 2 3]** + +", 6
5550   31 00 5B               LD   SP,STACK   
5553   CD 4C 0D               CALL   coldInit   
5556   CD 20 59               CALL   execStr   
5559   5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 DB   "[1 2 3]** + +",0   
5567   E1                     POP   HL   
5568   E5                     PUSH   HL   
5569   11 06 00               LD   DE,6   
556C   B7                     OR   A   
556D   ED 52                  SBC   HL,DE   
556F   7D                     LD   A,L   
5570   B4                     OR   H   
5571   CA D9 55               JP   Z,expectM_3086S163   
5574   CD DE 0C               CALL   printStr   
5577   43 6F 64 65 3A 20 5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 .CSTR   "Code: ","[1 2 3]** + +"   
558B   CD DE 0C               CALL   printStr   
558E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
559D   21 06 00               LD   hl,6   
55A0   E5                     PUSH   hl   
55A1   E5                     PUSH   hl   
55A2   CD 15 0E               CALL   run   
55A5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
55B1   CD DE 0C               CALL   printStr   
55B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
55C1   E1                     POP   hl   
55C2   E5                     PUSH   hl   
55C3   E5                     PUSH   hl   
55C4   CD 15 0E               CALL   run   
55C7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
55D8   76                     HALT      
55D9                EXPECTM_3086S163:      
55D9   E1                     POP   HL   
55DA                          ;*Macro unroll:  test "/byt[_a [_b _c]** _d]2;", $63
55DA   31 00 5B               LD   SP,STACK   
55DD   CD 4C 0D               CALL   coldInit   
55E0   CD 20 59               CALL   execStr   
55E3   2F 62 79 74 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 3B 00 DB   "/byt[_a [_b _c]** _d]2;",0   
55FB   E1                     POP   HL   
55FC   E5                     PUSH   HL   
55FD   11 63 00               LD   DE,$63   
5600   B7                     OR   A   
5601   ED 52                  SBC   HL,DE   
5603   7D                     LD   A,L   
5604   B4                     OR   H   
5605   CA 77 56               JP   Z,expectM_3087S164   
5608   CD DE 0C               CALL   printStr   
560B   43 6F 64 65 3A 20 2F 62 79 74 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 3B 00 .CSTR   "Code: ","/byt[_a [_b _c]** _d]2;"   
5629   CD DE 0C               CALL   printStr   
562C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
563B   21 63 00               LD   hl,$63   
563E   E5                     PUSH   hl   
563F   E5                     PUSH   hl   
5640   CD 15 0E               CALL   run   
5643   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
564F   CD DE 0C               CALL   printStr   
5652   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
565F   E1                     POP   hl   
5660   E5                     PUSH   hl   
5661   E5                     PUSH   hl   
5662   CD 15 0E               CALL   run   
5665   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5676   76                     HALT      
5677                EXPECTM_3087S164:      
5677   E1                     POP   HL   
5678                          ;*Macro unroll:  test "_B [_A {1} _B {2}] /sel", 2
5678   31 00 5B               LD   SP,STACK   
567B   CD 4C 0D               CALL   coldInit   
567E   CD 20 59               CALL   execStr   
5681   5F 42 20 5B 5F 41 20 7B 31 7D 20 5F 42 20 7B 32 7D 5D 20 2F 73 65 6C 00 DB   "_B [_A {1} _B {2}] /sel",0   
5699   E1                     POP   HL   
569A   E5                     PUSH   HL   
569B   11 02 00               LD   DE,2   
569E   B7                     OR   A   
569F   ED 52                  SBC   HL,DE   
56A1   7D                     LD   A,L   
56A2   B4                     OR   H   
56A3   CA 15 57               JP   Z,expectM_3088S165   
56A6   CD DE 0C               CALL   printStr   
56A9   43 6F 64 65 3A 20 5F 42 20 5B 5F 41 20 7B 31 7D 20 5F 42 20 7B 32 7D 5D 20 2F 73 65 6C 00 .CSTR   "Code: ","_B [_A {1} _B {2}] /sel"   
56C7   CD DE 0C               CALL   printStr   
56CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
56D9   21 02 00               LD   hl,2   
56DC   E5                     PUSH   hl   
56DD   E5                     PUSH   hl   
56DE   CD 15 0E               CALL   run   
56E1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
56ED   CD DE 0C               CALL   printStr   
56F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
56FD   E1                     POP   hl   
56FE   E5                     PUSH   hl   
56FF   E5                     PUSH   hl   
5700   CD 15 0E               CALL   run   
5703   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5714   76                     HALT      
5715                EXPECTM_3088S165:      
5715   E1                     POP   HL   
5716                          ;*Macro unroll:  test "1 2 /max", 2
5716   31 00 5B               LD   SP,STACK   
5719   CD 4C 0D               CALL   coldInit   
571C   CD 20 59               CALL   execStr   
571F   31 20 32 20 2F 6D 61 78 00 DB   "1 2 /max",0   
5728   E1                     POP   HL   
5729   E5                     PUSH   HL   
572A   11 02 00               LD   DE,2   
572D   B7                     OR   A   
572E   ED 52                  SBC   HL,DE   
5730   7D                     LD   A,L   
5731   B4                     OR   H   
5732   CA 95 57               JP   Z,expectM_3089S166   
5735   CD DE 0C               CALL   printStr   
5738   43 6F 64 65 3A 20 31 20 32 20 2F 6D 61 78 00 .CSTR   "Code: ","1 2 /max"   
5747   CD DE 0C               CALL   printStr   
574A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5759   21 02 00               LD   hl,2   
575C   E5                     PUSH   hl   
575D   E5                     PUSH   hl   
575E   CD 15 0E               CALL   run   
5761   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
576D   CD DE 0C               CALL   printStr   
5770   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
577D   E1                     POP   hl   
577E   E5                     PUSH   hl   
577F   E5                     PUSH   hl   
5780   CD 15 0E               CALL   run   
5783   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5794   76                     HALT      
5795                EXPECTM_3089S166:      
5795   E1                     POP   HL   
5796                          ;*Macro unroll:  test "2 1 /max", 2
5796   31 00 5B               LD   SP,STACK   
5799   CD 4C 0D               CALL   coldInit   
579C   CD 20 59               CALL   execStr   
579F   32 20 31 20 2F 6D 61 78 00 DB   "2 1 /max",0   
57A8   E1                     POP   HL   
57A9   E5                     PUSH   HL   
57AA   11 02 00               LD   DE,2   
57AD   B7                     OR   A   
57AE   ED 52                  SBC   HL,DE   
57B0   7D                     LD   A,L   
57B1   B4                     OR   H   
57B2   CA 15 58               JP   Z,expectM_3090S167   
57B5   CD DE 0C               CALL   printStr   
57B8   43 6F 64 65 3A 20 32 20 31 20 2F 6D 61 78 00 .CSTR   "Code: ","2 1 /max"   
57C7   CD DE 0C               CALL   printStr   
57CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
57D9   21 02 00               LD   hl,2   
57DC   E5                     PUSH   hl   
57DD   E5                     PUSH   hl   
57DE   CD 15 0E               CALL   run   
57E1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
57ED   CD DE 0C               CALL   printStr   
57F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
57FD   E1                     POP   hl   
57FE   E5                     PUSH   hl   
57FF   E5                     PUSH   hl   
5800   CD 15 0E               CALL   run   
5803   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5814   76                     HALT      
5815                EXPECTM_3090S167:      
5815   E1                     POP   HL   
5816                          ;*Macro unroll:  test "1 2 /min", 1
5816   31 00 5B               LD   SP,STACK   
5819   CD 4C 0D               CALL   coldInit   
581C   CD 20 59               CALL   execStr   
581F   31 20 32 20 2F 6D 69 6E 00 DB   "1 2 /min",0   
5828   E1                     POP   HL   
5829   E5                     PUSH   HL   
582A   11 01 00               LD   DE,1   
582D   B7                     OR   A   
582E   ED 52                  SBC   HL,DE   
5830   7D                     LD   A,L   
5831   B4                     OR   H   
5832   CA 95 58               JP   Z,expectM_3091S168   
5835   CD DE 0C               CALL   printStr   
5838   43 6F 64 65 3A 20 31 20 32 20 2F 6D 69 6E 00 .CSTR   "Code: ","1 2 /min"   
5847   CD DE 0C               CALL   printStr   
584A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5859   21 01 00               LD   hl,1   
585C   E5                     PUSH   hl   
585D   E5                     PUSH   hl   
585E   CD 15 0E               CALL   run   
5861   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
586D   CD DE 0C               CALL   printStr   
5870   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
587D   E1                     POP   hl   
587E   E5                     PUSH   hl   
587F   E5                     PUSH   hl   
5880   CD 15 0E               CALL   run   
5883   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5894   76                     HALT      
5895                EXPECTM_3091S168:      
5895   E1                     POP   HL   
5896                          ;*Macro unroll:  test "2 1 /min", 1
5896   31 00 5B               LD   SP,STACK   
5899   CD 4C 0D               CALL   coldInit   
589C   CD 20 59               CALL   execStr   
589F   32 20 31 20 2F 6D 69 6E 00 DB   "2 1 /min",0   
58A8   E1                     POP   HL   
58A9   E5                     PUSH   HL   
58AA   11 01 00               LD   DE,1   
58AD   B7                     OR   A   
58AE   ED 52                  SBC   HL,DE   
58B0   7D                     LD   A,L   
58B1   B4                     OR   H   
58B2   CA 15 59               JP   Z,expectM_3092S169   
58B5   CD DE 0C               CALL   printStr   
58B8   43 6F 64 65 3A 20 32 20 31 20 2F 6D 69 6E 00 .CSTR   "Code: ","2 1 /min"   
58C7   CD DE 0C               CALL   printStr   
58CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
58D9   21 01 00               LD   hl,1   
58DC   E5                     PUSH   hl   
58DD   E5                     PUSH   hl   
58DE   CD 15 0E               CALL   run   
58E1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
58ED   CD DE 0C               CALL   printStr   
58F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
58FD   E1                     POP   hl   
58FE   E5                     PUSH   hl   
58FF   E5                     PUSH   hl   
5900   CD 15 0E               CALL   run   
5903   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5914   76                     HALT      
5915                EXPECTM_3092S169:      
5915   E1                     POP   HL   
5916                             ; ; test "$1000 0 10 1 /rng \\a{%a 1 + 10 *} /map \\a{%a.} /for", $1000
5916                             ; 
5916   CD DE 0C               CALL   printStr   
5919   44 6F 6E 65 21 00      .CSTR   "Done!"   
591F   76                     HALT      
5920                             ; executes a null teminated string (null executes exit_)
5920                             ; the string should be immedaitely following the call
5920                EXECSTR:      ; create a root stack frame
5920   C1                     POP   bc   ; bc = code*
5921   0B                     DEC   bc   ; dec to prepare for next routine
5922   11 00 00               LD   de,0   
5925   D5                     PUSH   de   ; push fake IP
5926   D5                     PUSH   de   ; push null arg_list*
5927   D5                     PUSH   de   ; push null first_arg*
5928   D5                     PUSH   de   ; push fake BP
5929   DD E9                  JP   (ix)   
592B                STKSIZE:   EQU   $100   ; Stack size
592B                TIBSIZE:   EQU   $100   ; 256 bytes
592B                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
592B                          ALIGN   $100   
5A00                          DS   STKSIZE   
5B00                STACK:       
5B00                          ALIGN   $100   
5B00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5C00                          ALIGN   $100   
5C00                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5D00                          ALIGN   $100   
5D00                VARS:        
5D00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
5DD0                RESTARTS:      
5DD0                RST08:    DS   2   
5DD2                RST10:    DS   2   
5DD4                RST18:    DS   2   
5DD6                RST20:    DS   2   
5DD8                RST28:    DS   2   
5DDA                RST30:    DS   2   ; 
5DDC                BAUD:     DS   2   ; 
5DDE                INTVEC:   DS   2   ; 
5DE0                NMIVEC:   DS   2   ; 
5DE2                GETCVEC:   DS   2   ; 
5DE4                PUTCVEC:   DS   2   ; 
5DE6                SYSVARS:      
5DE6                             ; initialised sys variables (preserved)
5DE6                VTIBPTR:   DS   2   
5DE8                VBUFPTR:   DS   2   
5DEA                VHEAPPTR:   DS   2   
5DEC                VRECURPTR:   DS   2   
5DEE                VDATAWIDTH:   DS   1   
5DEF                VNUMBASE:   DS   1   
5DF0                VHEXPREFIX:   DS   1   
5DF1                VECHO:    DS   1   
5DF2                VSTRMODE:   DS   1   
5DF3                          DS   1   
5DF4                          DS   1   
5DF5                          DS   1   
5DF6                          DS   1   
5DF7                          DS   1   
5DF8                             ; uninitialised sys variables (preserved)
5DF8                VPOINTER:   DS   2   ; 
5DFA                VREMAIN:   DS   2   ; 
5DFC                VSAVEDIP:   DS   2   ; 
5DFE                VSAVEDSP:   DS   2   ; 
5E00                VSAVEDNEXT:   DS   2   ; 
5E02                VSAVEDBP:   DS   2   ; 
5E04                             ; uninitialised sys variables (unpreserved)
5E04                VTEMP1:   DS   2   ; 
5E06                VTEMP2:   DS   2   ; 
5E08                VTEMP3:   DS   2   ; 
5E0A                          DS   2   ; 
5E0C                TBPTR:    DS   2   ; reserved for tests
5E0E                TITLEBUF:   DS   20   
5E22                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
                    > USED AT LINE 3 IN ansi.asm
                    > USED AT LINE 9 IN ansi.asm
                    > USED AT LINE 70 IN ansi.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 2372 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 2394 IN MAIN.asm
                    > USED AT LINE 2478 IN MAIN.asm
                    > USED AT LINE 21 IN ansi.asm
                    > USED AT LINE 23 IN ansi.asm
                    > USED AT LINE 35 IN ansi.asm
                    > USED AT LINE 41 IN ansi.asm
                    > USED AT LINE 54 IN ansi.asm
                    > USED AT LINE 62 IN ansi.asm
                    > USED AT LINE 64 IN ansi.asm
                    > USED AT LINE 73 IN ansi.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 2262 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 2375 IN MAIN.asm
                    > USED AT LINE 2443 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
                    > USED AT LINE 2177 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2380 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2382 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2313 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 173 IN MAIN.asm
                    > USED AT LINE 2288 IN MAIN.asm
                    > USED AT LINE 2307 IN MAIN.asm
COLON_:             0204 DEFINED AT LINE 178 IN MAIN.asm
HASH_:              0204 DEFINED AT LINE 179 IN MAIN.asm
COMMA_:             0206 DEFINED AT LINE 182 IN MAIN.asm
DOLLAR_:            0209 DEFINED AT LINE 185 IN MAIN.asm
DQUOTE_:            020C DEFINED AT LINE 188 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 189 IN MAIN.asm
DOT_:               020F DEFINED AT LINE 192 IN MAIN.asm
PERCENT_:           0212 DEFINED AT LINE 195 IN MAIN.asm
QUESTION_:          0215 DEFINED AT LINE 198 IN MAIN.asm
LPAREN_:            0218 DEFINED AT LINE 201 IN MAIN.asm
SLASH_:             021B DEFINED AT LINE 204 IN MAIN.asm
NUM_:               021E DEFINED AT LINE 207 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 210 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 211 IN MAIN.asm
NOT:                022C DEFINED AT LINE 219 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 223 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 224 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 231 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 237 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 238 IN MAIN.asm
LT_:                024C DEFINED AT LINE 246 IN MAIN.asm
LT:                 024C DEFINED AT LINE 247 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 254 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
SEMICOLON_:         025E DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025E DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 270 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
RPAREN_:            026B DEFINED AT LINE 277 IN MAIN.asm
RPAREN:             026B DEFINED AT LINE 279 IN MAIN.asm
AMPER_:             0273 DEFINED AT LINE 287 IN MAIN.asm
AMPER:              0273 DEFINED AT LINE 288 IN MAIN.asm
AND:                0273 DEFINED AT LINE 289 IN MAIN.asm
MINUS_:             027D DEFINED AT LINE 307 IN MAIN.asm
MINUS:              027D DEFINED AT LINE 308 IN MAIN.asm
SUB:                0289 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
SUB1:               0293 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
SUB2:               029A DEFINED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
SUB3:               029D DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1709 IN MAIN.asm
STAR_:              02A5 DEFINED AT LINE 338 IN MAIN.asm
STAR:               02A5 DEFINED AT LINE 339 IN MAIN.asm
MUL:                02AD DEFINED AT LINE 345 IN MAIN.asm
MUL2:               02AF DEFINED AT LINE 348 IN MAIN.asm
MUL3:               02B7 DEFINED AT LINE 353 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
PLUS_:              02C9 DEFINED AT LINE 368 IN MAIN.asm
PLUS:               02C9 DEFINED AT LINE 369 IN MAIN.asm
ADD:                02C9 DEFINED AT LINE 370 IN MAIN.asm
ADD1:               02D4 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ADD3:               02D8 DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
ADD4:               02E2 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 387 IN MAIN.asm
UPCASE_:            02E5 DEFINED AT LINE 395 IN MAIN.asm
UPCASE:             02E5 DEFINED AT LINE 396 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 405 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 406 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 422 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 423 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 424 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 439 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 440 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 441 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 461 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 462 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 463 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 479 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 515 IN MAIN.asm
CARET:              039F DEFINED AT LINE 519 IN MAIN.asm
GO:                 039F DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
                    > USED AT LINE 1301 IN MAIN.asm
                    > USED AT LINE 1471 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 536 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 537 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 538 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 546 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 553 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 560 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 561 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 562 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 573 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 577 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 580 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 581 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 589 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 590 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 591 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 603 IN MAIN.asm
PRINTARRAY:         0411 DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 607 IN MAIN.asm
PRINTCHAR:          0414 DEFINED AT LINE 620 IN MAIN.asm
                    > USED AT LINE 609 IN MAIN.asm
PRINTSTRING:        0423 DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
PRINTSTRING0:       042A DEFINED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
PRINTSTRING1:       042D DEFINED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 634 IN MAIN.asm
PRINTNUMBER:        0438 DEFINED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
PRINTDEC:           0443 DEFINED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 652 IN MAIN.asm
PRINTDEC1:          0451 DEFINED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
PRINTHEX:           0460 DEFINED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
PRINTHEX1:          046C DEFINED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 680 IN MAIN.asm
PRINTHEX2:          0477 DEFINED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 687 IN MAIN.asm
PRINTHEX3:          0486 DEFINED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 692 IN MAIN.asm
PRINTHEX4:          048F DEFINED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 722 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 723 IN MAIN.asm
ABS1:               060A DEFINED AT LINE 751 IN MAIN.asm
ABSOLUTE:           060A DEFINED AT LINE 752 IN MAIN.asm
ABSOLUTE1:          0615 DEFINED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
ALC:                0618 DEFINED AT LINE 768 IN MAIN.asm
MEMALLOCATE:        0618 DEFINED AT LINE 769 IN MAIN.asm
ALN:                061A DEFINED AT LINE 774 IN MAIN.asm
ARRAYLENGTH:        061A DEFINED AT LINE 775 IN MAIN.asm
ARRAYLENGTH1:       0620 DEFINED AT LINE 782 IN MAIN.asm
BYE:                0623 DEFINED AT LINE 787 IN MAIN.asm
CGO:                0626 DEFINED AT LINE 792 IN MAIN.asm
CURSORGO:           0626 DEFINED AT LINE 793 IN MAIN.asm
CLL:                062E DEFINED AT LINE 802 IN MAIN.asm
CLEARLINE:          062E DEFINED AT LINE 803 IN MAIN.asm
CLS:                0637 DEFINED AT LINE 812 IN MAIN.asm
CLEARSCREEN:        0637 DEFINED AT LINE 813 IN MAIN.asm
CMV:                063C DEFINED AT LINE 819 IN MAIN.asm
CURSORMOVE:         063C DEFINED AT LINE 820 IN MAIN.asm
CURSORMOVE1:        0648 DEFINED AT LINE 829 IN MAIN.asm
DEC:                064A DEFINED AT LINE 832 IN MAIN.asm
DECBASE:            064A DEFINED AT LINE 833 IN MAIN.asm
DECBASE1:           064C DEFINED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
DIV:                0651 DEFINED AT LINE 840 IN MAIN.asm
ECH:                0654 DEFINED AT LINE 845 IN MAIN.asm
ECHO:               0654 DEFINED AT LINE 846 IN MAIN.asm
FAL:                065A DEFINED AT LINE 852 IN MAIN.asm
IN:                 065D DEFINED AT LINE 858 IN MAIN.asm
INPUT:              065D DEFINED AT LINE 859 IN MAIN.asm
OUT:                0668 DEFINED AT LINE 871 IN MAIN.asm
OUTPUT:             0668 DEFINED AT LINE 872 IN MAIN.asm
REC:                0671 DEFINED AT LINE 882 IN MAIN.asm
RECUR:              0671 DEFINED AT LINE 883 IN MAIN.asm
REM:                0677 DEFINED AT LINE 889 IN MAIN.asm
REMAIN:             0677 DEFINED AT LINE 890 IN MAIN.asm
RET:                067D DEFINED AT LINE 897 IN MAIN.asm
RETURN:             067D DEFINED AT LINE 898 IN MAIN.asm
RETURN1:            0684 DEFINED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
SBB:                0687 DEFINED AT LINE 908 IN MAIN.asm
STRINGBEGIN:        0687 DEFINED AT LINE 909 IN MAIN.asm
SBE:                068F DEFINED AT LINE 916 IN MAIN.asm
STRINGEND:          068F DEFINED AT LINE 917 IN MAIN.asm
STRINGEND1:         06B6 DEFINED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
SCP:                06BE DEFINED AT LINE 941 IN MAIN.asm
SEL:                06C6 DEFINED AT LINE 950 IN MAIN.asm
SELECT:             06C6 DEFINED AT LINE 951 IN MAIN.asm
SELECT1:            06D1 DEFINED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 985 IN MAIN.asm
SELECT1A:           06E2 DEFINED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 966 IN MAIN.asm
SELECT1B:           06E3 DEFINED AT LINE 978 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
SELECT2:            06E6 DEFINED AT LINE 982 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
SLN:                06ED DEFINED AT LINE 990 IN MAIN.asm
TRU:                06F4 DEFINED AT LINE 997 IN MAIN.asm
VAR:                06F7 DEFINED AT LINE 1002 IN MAIN.asm
VARIABLES:          06F7 DEFINED AT LINE 1003 IN MAIN.asm
ADR:                0700 DEFINED AT LINE 1013 IN MAIN.asm
ADDROF:             0700 DEFINED AT LINE 1014 IN MAIN.asm
ADDROF2:            0706 DEFINED AT LINE 1019 IN MAIN.asm
WHI:                0708 DEFINED AT LINE 1025 IN MAIN.asm
WHILE:              0708 DEFINED AT LINE 1026 IN MAIN.asm
WHILE1:             070F DEFINED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1030 IN MAIN.asm
BYT:                0722 DEFINED AT LINE 1044 IN MAIN.asm
BYTEMODE:           0722 DEFINED AT LINE 1045 IN MAIN.asm
BYTEMODE1:          0724 DEFINED AT LINE 1047 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
CMT:                0729 DEFINED AT LINE 1052 IN MAIN.asm
COMMENT:            0729 DEFINED AT LINE 1053 IN MAIN.asm
                    > USED AT LINE 1057 IN MAIN.asm
HEX:                0732 DEFINED AT LINE 1061 IN MAIN.asm
ERROR1:             0737 DEFINED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 2022 IN MAIN.asm
FRE:                073D DEFINED AT LINE 1071 IN MAIN.asm
MEMFREE:            073D DEFINED AT LINE 1072 IN MAIN.asm
MEMFREE1:           073E DEFINED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
FRA:                0743 DEFINED AT LINE 1080 IN MAIN.asm
MEMFREEARRAY:       0743 DEFINED AT LINE 1081 IN MAIN.asm
MAX:                0748 DEFINED AT LINE 1089 IN MAIN.asm
MAXIMUM:            0748 DEFINED AT LINE 1090 IN MAIN.asm
MAXIMUM1:           0752 DEFINED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1096 IN MAIN.asm
MIN:                0754 DEFINED AT LINE 1104 IN MAIN.asm
MINIMUM:            0754 DEFINED AT LINE 1105 IN MAIN.asm
MINIMUM1:           075E DEFINED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 1111 IN MAIN.asm
VOI:                0760 DEFINED AT LINE 1119 IN MAIN.asm
VOID:               0760 DEFINED AT LINE 1120 IN MAIN.asm
WRD:                0768 DEFINED AT LINE 1128 IN MAIN.asm
WORDMODE:           0768 DEFINED AT LINE 1129 IN MAIN.asm
XOR:                076D DEFINED AT LINE 1134 IN MAIN.asm
XOR1:               076E DEFINED AT LINE 1136 IN MAIN.asm
CUR:                0778 DEFINED AT LINE 1148 IN MAIN.asm
CURSORSHOW:         0778 DEFINED AT LINE 1149 IN MAIN.asm
CURSORSHOW1:        0782 DEFINED AT LINE 1157 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
DIV1:               0787 DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
DIV2:               0791 DEFINED AT LINE 1174 IN MAIN.asm
                    > USED AT LINE 1171 IN MAIN.asm
COMMA:              07A2 DEFINED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
READCHAR:           07AF DEFINED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
READSTRING:         07B8 DEFINED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 44
READSTRING1:        07BD DEFINED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
READSTRING2:        07D1 DEFINED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1208 IN MAIN.asm
READNUMBER:         07DA DEFINED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
PERFORMM_1685S1225: 07E3 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER1:        0801 DEFINED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1232 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
PERFORMM_1702S1242: 0808 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER2:        080B DEFINED AT LINE 1245 IN MAIN.asm
                    > USED AT LINE 1234 IN MAIN.asm
PERFORMM_1706S1246: 0812 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER3:        0813 DEFINED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 1244 IN MAIN.asm
TILDE:              0819 DEFINED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
INVERT:             0819 DEFINED AT LINE 1256 IN MAIN.asm
DOLLAR:             0823 DEFINED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
HEXNUM:             0823 DEFINED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 44
HEXNUM1:            0826 DEFINED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1287 IN MAIN.asm
HEXNUM2:            082E DEFINED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 1274 IN MAIN.asm
QUESTION:           0840 DEFINED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
IF:                 0840 DEFINED AT LINE 1292 IN MAIN.asm
QUOTE:              084D DEFINED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
STRING:             084D DEFINED AT LINE 1306 IN MAIN.asm
STRING1:            0856 DEFINED AT LINE 1313 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
STRING2:            0859 DEFINED AT LINE 1317 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
STRING3:            085F DEFINED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 1320 IN MAIN.asm
PERCENT:            0867 DEFINED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
ARG:                0867 DEFINED AT LINE 1333 IN MAIN.asm
ARG0:               0883 DEFINED AT LINE 1352 IN MAIN.asm
                    > USED AT LINE 1358 IN MAIN.asm
ARG0A:              088C DEFINED AT LINE 1360 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
                    > USED AT LINE 1344 IN MAIN.asm
ARG1:               0891 DEFINED AT LINE 1363 IN MAIN.asm
                    > USED AT LINE 1356 IN MAIN.asm
ARG1A:              0899 DEFINED AT LINE 1370 IN MAIN.asm
                    > USED AT LINE 1362 IN MAIN.asm
NUM:                089C DEFINED AT LINE 1375 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 44
NUM0:               08A5 DEFINED AT LINE 1381 IN MAIN.asm
                    > USED AT LINE 1379 IN MAIN.asm
NUM1:               08A6 DEFINED AT LINE 1383 IN MAIN.asm
                    > USED AT LINE 1400 IN MAIN.asm
NUM2:               08BE DEFINED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
                    > USED AT LINE 1388 IN MAIN.asm
NUM3:               08C9 DEFINED AT LINE 1409 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
RBRACE:             08CC DEFINED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
BLOCKEND:           08CC DEFINED AT LINE 1415 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 1041 IN MAIN.asm
BLOCKEND1:          08FE DEFINED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 1430 IN MAIN.asm
BLOCKEND2:          090A DEFINED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 1436 IN MAIN.asm
BLOCKEND3:          091C DEFINED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 1450 IN MAIN.asm
BLOCKEND4:          0930 DEFINED AT LINE 1468 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
GOBLOCK:            0939 DEFINED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
GOBLOCK2:           095E DEFINED AT LINE 1490 IN MAIN.asm
                    > USED AT LINE 1571 IN MAIN.asm
GOBLOCK3:           0968 DEFINED AT LINE 1496 IN MAIN.asm
GOFUNC:             096C DEFINED AT LINE 1500 IN MAIN.asm
                    > USED AT LINE 532 IN MAIN.asm
GOFUNC1:            0985 DEFINED AT LINE 1519 IN MAIN.asm
                    > USED AT LINE 1529 IN MAIN.asm
GOFUNC2:            098B DEFINED AT LINE 1526 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
GOFUNC3:            0996 DEFINED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1508 IN MAIN.asm
GOFUNC4:            09AE DEFINED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 1546 IN MAIN.asm
GOFUNC5:            09B1 DEFINED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 1558 IN MAIN.asm
GOFUNC6:            09B4 DEFINED AT LINE 1556 IN MAIN.asm
                    > USED AT LINE 1551 IN MAIN.asm
GOFUNC7:            09B7 DEFINED AT LINE 1559 IN MAIN.asm
GOFUNC8:            09BB DEFINED AT LINE 1564 IN MAIN.asm
                    > USED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1548 IN MAIN.asm
ASSIGN:             09C6 DEFINED AT LINE 1575 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
ASSIGN0:            09C8 DEFINED AT LINE 1578 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ASSIGN1:            09CC DEFINED AT LINE 1581 IN MAIN.asm
ASSIGN2:            09D5 DEFINED AT LINE 1588 IN MAIN.asm
                    > USED AT LINE 1585 IN MAIN.asm
EQUALS:             09D7 DEFINED AT LINE 1593 IN MAIN.asm
                    > USED AT LINE 235 IN MAIN.asm
NOTEQUALS:          09DE DEFINED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
LESSTHANEQ:         09E5 DEFINED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
LESSTHAN:           09EA DEFINED AT LINE 1614 IN MAIN.asm
                    > USED AT LINE 258 IN MAIN.asm
LESSTHAN1:          09EF DEFINED AT LINE 1619 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
TRUE1:              09F2 DEFINED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 1602 IN MAIN.asm
NULL1:              09F8 DEFINED AT LINE 1626 IN MAIN.asm
NIL:                09F8 DEFINED AT LINE 1627 IN MAIN.asm
FALSE1:             09F8 DEFINED AT LINE 1628 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
SPREAD:             09FE DEFINED AT LINE 1633 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
SPREAD1:            0A0B DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
SPREAD2:            0A16 DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 1649 IN MAIN.asm
SPREAD3:            0A18 DEFINED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 1642 IN MAIN.asm
SHIFTLEFT:          0A22 DEFINED AT LINE 1665 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
SHIFTLEFT2:         0A2C DEFINED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
SHIFTLEFT3:         0A34 DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
SHIFTLEFT4:         0A35 DEFINED AT LINE 1681 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
SHIFTRIGHT:         0A3E DEFINED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
SHIFTRIGHT2:        0A48 DEFINED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 1695 IN MAIN.asm
SHIFTRIGHT3:        0A50 DEFINED AT LINE 1703 IN MAIN.asm
                    > USED AT LINE 1707 IN MAIN.asm
SHIFTRIGHT4:        0A54 DEFINED AT LINE 1706 IN MAIN.asm
                    > USED AT LINE 1702 IN MAIN.asm
DIVIDE:             0A5D DEFINED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
DIVIDE1:            0A62 DEFINED AT LINE 1717 IN MAIN.asm
                    > USED AT LINE 1729 IN MAIN.asm
DIVIDE2:            0A6F DEFINED AT LINE 1725 IN MAIN.asm
                    > USED AT LINE 1722 IN MAIN.asm
DIVIDE3:            0A70 DEFINED AT LINE 1727 IN MAIN.asm
                    > USED AT LINE 1724 IN MAIN.asm
DOTNEXT:            0A76 DEFINED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 697 IN MAIN.asm
DOTNEXT1:           0A7E DEFINED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
PARSEARGS:          0A90 DEFINED AT LINE 1749 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
PARSEARGS1:         0A9A DEFINED AT LINE 1756 IN MAIN.asm
                    > USED AT LINE 1777 IN MAIN.asm
PARSEARGS1A:        0AA2 DEFINED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1759 IN MAIN.asm
PARSEARGS2:         0AAA DEFINED AT LINE 1767 IN MAIN.asm
PARSEARGS3:         0AB2 DEFINED AT LINE 1775 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
                    > USED AT LINE 1773 IN MAIN.asm
PARSEARGS4:         0AB5 DEFINED AT LINE 1778 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
                    > USED AT LINE 1766 IN MAIN.asm
PARSEARGS5:         0ABB DEFINED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1782 IN MAIN.asm
PARSEBLOCK:         0AC6 DEFINED AT LINE 1797 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
PARSEBLOCK1:        0ACA DEFINED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
PARSEBLOCK2:        0AE3 DEFINED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
PARSEBLOCK3:        0AE9 DEFINED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
PARSEBLOCK4:        0B03 DEFINED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
PARSEBLOCK5:        0B06 DEFINED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
PARSEBLOCK6:        0B31 DEFINED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 1845 IN MAIN.asm
CREATEFUNC:         0B35 DEFINED AT LINE 1866 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
CREATEFUNC0:        0B54 DEFINED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
CREATEFUNC1:        0B6C DEFINED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
CREATEFUNC2:        0B7F DEFINED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
CREATEFUNC2A:       0B9E DEFINED AT LINE 1938 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
CREATEFUNC3:        0BAD DEFINED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
CREATEFUNC4:        0BB8 DEFINED AT LINE 1961 IN MAIN.asm
CREATEFUNC5:        0BB9 DEFINED AT LINE 1963 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
VARIABLE:           0BD7 DEFINED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 594 IN MAIN.asm
CONSTANT:           0BE6 DEFINED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
CHARTABLE:          0BE9 DEFINED AT LINE 2008 IN MAIN.asm
CHARTABLE1:         0BF3 DEFINED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
CHARTABLE2:         0BFD DEFINED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
CHARTABLE3:         0BFF DEFINED AT LINE 2026 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
IDENTHASH:          0C04 DEFINED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
IDENTHASH1:         0C06 DEFINED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
IDENTHASH2:         0C0F DEFINED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
COMMANDTABLE:       0C16 DEFINED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
COMMANDTABLE2:      0C21 DEFINED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
COMMANDTABLE3:      0C2A DEFINED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
GETVARADDR:         0C2C DEFINED AT LINE 2076 IN MAIN.asm
                    > USED AT LINE 1017 IN MAIN.asm
GETVARADDR1:        0C3E DEFINED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
PUTSTR0:            0C43 DEFINED AT LINE 2093 IN MAIN.asm
                    > USED AT LINE 2099 IN MAIN.asm
PUTSTR:             0C47 DEFINED AT LINE 2096 IN MAIN.asm
                    > USED AT LINE 1744 IN MAIN.asm
                    > USED AT LINE 2227 IN MAIN.asm
                    > USED AT LINE 2243 IN MAIN.asm
                    > USED AT LINE 2339 IN MAIN.asm
FORMATDEC0:         0C4C DEFINED AT LINE 2105 IN MAIN.asm
                    > USED AT LINE 2235 IN MAIN.asm
FORMATDEC:          0C4F DEFINED AT LINE 2112 IN MAIN.asm
                    > USED AT LINE 665 IN MAIN.asm
FORMATDEC2:         0C5F DEFINED AT LINE 2126 IN MAIN.asm
                    > USED AT LINE 2114 IN MAIN.asm
FORMATDEC4:         0C7F DEFINED AT LINE 2140 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 2131 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2135 IN MAIN.asm
                    > USED AT LINE 2138 IN MAIN.asm
FORMATDEC5:         0C81 DEFINED AT LINE 2142 IN MAIN.asm
                    > USED AT LINE 2145 IN MAIN.asm
FORMATDEC6:         0C91 DEFINED AT LINE 2154 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
FORMATDEC7:         0C92 DEFINED AT LINE 2156 IN MAIN.asm
                    > USED AT LINE 2153 IN MAIN.asm
NESTING:            0C98 DEFINED AT LINE 2174 IN MAIN.asm
                    > USED AT LINE 2361 IN MAIN.asm
                    > USED AT LINE 2395 IN MAIN.asm
NESTING0:           0CA6 DEFINED AT LINE 2182 IN MAIN.asm
                    > USED AT LINE 2176 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
                    > USED AT LINE 2180 IN MAIN.asm
NESTING1A:          0CAD DEFINED AT LINE 2187 IN MAIN.asm
                    > USED AT LINE 2184 IN MAIN.asm
NESTING1:           0CB0 DEFINED AT LINE 2190 IN MAIN.asm
                    > USED AT LINE 2181 IN MAIN.asm
NESTING2:           0CBF DEFINED AT LINE 2199 IN MAIN.asm
                    > USED AT LINE 2194 IN MAIN.asm
                    > USED AT LINE 2196 IN MAIN.asm
NESTING3:           0CC1 DEFINED AT LINE 2202 IN MAIN.asm
                    > USED AT LINE 2198 IN MAIN.asm
NESTING4:           0CCC DEFINED AT LINE 2209 IN MAIN.asm
                    > USED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 2206 IN MAIN.asm
PROMPT:             0CCE DEFINED AT LINE 2213 IN MAIN.asm
                    > USED AT LINE 2343 IN MAIN.asm
CRLF:               0CD7 DEFINED AT LINE 2218 IN MAIN.asm
                    > USED AT LINE 2408 IN MAIN.asm
PRINTSTR:           0CDE DEFINED AT LINE 2225 IN MAIN.asm
                    > USED AT LINE 2214 IN MAIN.asm
                    > USED AT LINE 2219 IN MAIN.asm
                    > USED AT LINE 2468 IN MAIN.asm
                    > USED AT LINE 2473 IN MAIN.asm
                    > USED AT LINE 2 IN ansi.asm
                    > USED AT LINE 8 IN ansi.asm
                    > USED AT LINE 69 IN ansi.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 175
PRINTNUM:           0CE5 DEFINED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 33 IN ansi.asm
                    > USED AT LINE 39 IN ansi.asm
                    > USED AT LINE 52 IN ansi.asm
STRINGCOMPARE:      0CFE DEFINED AT LINE 2248 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
STRINGCOMPARE1:     0CFE DEFINED AT LINE 2249 IN MAIN.asm
                    > USED AT LINE 2257 IN MAIN.asm
STRINGCOMPARE2:     0D09 DEFINED AT LINE 2258 IN MAIN.asm
                    > USED AT LINE 2252 IN MAIN.asm
STRINGCOMPARE3:     0D0E DEFINED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 2254 IN MAIN.asm
STRINGCOMPARE4:     0D11 DEFINED AT LINE 2263 IN MAIN.asm
                    > USED AT LINE 2260 IN MAIN.asm
STRINGLENGTH:       0D13 DEFINED AT LINE 2270 IN MAIN.asm
                    > USED AT LINE 992 IN MAIN.asm
STRINGLENGTH1:      0D18 DEFINED AT LINE 2273 IN MAIN.asm
                    > USED AT LINE 2279 IN MAIN.asm
STRINGLENGTH2:      0D1A DEFINED AT LINE 2276 IN MAIN.asm
                    > USED AT LINE 2272 IN MAIN.asm
STRINGLENGTH3:      0D1E DEFINED AT LINE 2280 IN MAIN.asm
INIT:               0D1F DEFINED AT LINE 2287 IN MAIN.asm
                    > USED AT LINE 2336 IN MAIN.asm
INIT1:              0D27 DEFINED AT LINE 2291 IN MAIN.asm
                    > USED AT LINE 2297 IN MAIN.asm
WARMINIT:           0D2F DEFINED AT LINE 2299 IN MAIN.asm
COLDBOOT0:          0D42 DEFINED AT LINE 2306 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
                    > USED AT LINE 2294 IN MAIN.asm
                    > USED AT LINE 2332 IN MAIN.asm
COLDINIT:           0D4C DEFINED AT LINE 2312 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0D5D DEFINED AT LINE 2321 IN MAIN.asm
                    > USED AT LINE 2324 IN MAIN.asm
COLDSTART:          0D6A DEFINED AT LINE 2330 IN MAIN.asm
START:              0D73 DEFINED AT LINE 2334 IN MAIN.asm
START1:             0D79 DEFINED AT LINE 2337 IN MAIN.asm
                    > USED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 2333 IN MAIN.asm
INTERPRET:          0D7F DEFINED AT LINE 2341 IN MAIN.asm
                    > USED AT LINE 2445 IN MAIN.asm
                    > USED AT LINE 2461 IN MAIN.asm
INTERPRET2:         0D8B DEFINED AT LINE 2349 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
                    > USED AT LINE 2466 IN MAIN.asm
                    > USED AT LINE 2470 IN MAIN.asm
                    > USED AT LINE 2488 IN MAIN.asm
INTERPRET3:         0D93 DEFINED AT LINE 2357 IN MAIN.asm
                    > USED AT LINE 2367 IN MAIN.asm
INTERPRET4:         0D99 DEFINED AT LINE 2363 IN MAIN.asm
                    > USED AT LINE 2355 IN MAIN.asm
INTERPRET5:         0D9E DEFINED AT LINE 2370 IN MAIN.asm
                    > USED AT LINE 2396 IN MAIN.asm
                    > USED AT LINE 2411 IN MAIN.asm
INTERPRET5A:        0DB7 DEFINED AT LINE 2385 IN MAIN.asm
INTERPRET6:         0DB9 DEFINED AT LINE 2388 IN MAIN.asm
                    > USED AT LINE 2374 IN MAIN.asm
INTERPRET7:         0DC7 DEFINED AT LINE 2398 IN MAIN.asm
                    > USED AT LINE 2378 IN MAIN.asm
INTERPRET8:         0DDA DEFINED AT LINE 2413 IN MAIN.asm
                    > USED AT LINE 2376 IN MAIN.asm
NEXT:               0DF5 DEFINED AT LINE 2426 IN MAIN.asm
                    > USED AT LINE 2326 IN MAIN.asm
                    > USED AT LINE 2430 IN MAIN.asm
NEXT0:              0E09 DEFINED AT LINE 2440 IN MAIN.asm
                    > USED AT LINE 2438 IN MAIN.asm
NEXT1:              0E0A DEFINED AT LINE 2442 IN MAIN.asm
                    > USED AT LINE 2431 IN MAIN.asm
EXIT:               0E11 DEFINED AT LINE 2447 IN MAIN.asm
                    > USED AT LINE 2444 IN MAIN.asm
RUN:                0E15 DEFINED AT LINE 2452 IN MAIN.asm
                    > USED AT LINE 2459 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              0E19 DEFINED AT LINE 2457 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
BACKSPACE_:         0E2B DEFINED AT LINE 2463 IN MAIN.asm
                    > USED AT LINE 2381 IN MAIN.asm
REEDIT_:            0E3B DEFINED AT LINE 2472 IN MAIN.asm
                    > USED AT LINE 2383 IN MAIN.asm
REEDIT0:            0E47 DEFINED AT LINE 2477 IN MAIN.asm
                    > USED AT LINE 2483 IN MAIN.asm
REEDIT1:            0E4B DEFINED AT LINE 2480 IN MAIN.asm
                    > USED AT LINE 2476 IN MAIN.asm
ANSIPRINTSEQ:       0E5B DEFINED AT LINE 1 IN ansi.asm
                    > USED AT LINE 19 IN ansi.asm
                    > USED AT LINE 28 IN ansi.asm
                    > USED AT LINE 47 IN ansi.asm
                    > USED AT LINE 60 IN ansi.asm
ANSICLEARSCREEN:    0E62 DEFINED AT LINE 7 IN ansi.asm
                    > USED AT LINE 814 IN MAIN.asm
ANSICLEARLINE:      0E6B DEFINED AT LINE 16 IN ansi.asm
                    > USED AT LINE 807 IN MAIN.asm
ANSIGOTO:           0E7A DEFINED AT LINE 26 IN ansi.asm
                    > USED AT LINE 797 IN MAIN.asm
ANSIMOVE:           0E97 DEFINED AT LINE 45 IN ansi.asm
                    > USED AT LINE 828 IN MAIN.asm
ANSITEXTSTYLE:      0EA7 DEFINED AT LINE 57 IN ansi.asm
ANSICURSORSHOW:     0EB6 DEFINED AT LINE 67 IN ansi.asm
                    > USED AT LINE 1158 IN MAIN.asm
F1:                 0EC5 DEFINED AT LINE 32
F1M_2942S13:        0ED0 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 0ED1 DEFINED AT LINE 32
F2M_2944S16:        0EDC DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 0EDD DEFINED AT LINE 32
F3M_2946S19:        0EE8 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 0EE9 DEFINED AT LINE 32
F4M_2948S22:        0EF4 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         0F00 DEFINED AT LINE 26
                    > USED AT LINE 8
EXPECTM_2952S28:    0F77 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2956S33:    0FF9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2957S34:    1071 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2958S35:    10E3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2959S36:    1155 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2960S37:    11C7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2961S38:    1239 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2962S39:    12AD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2963S40:    1323 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2964S41:    1397 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2965S42:    1413 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2966S43:    1487 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2967S44:    14FB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2968S45:    1571 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2969S46:    15E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2970S47:    1663 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2971S48:    16DF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2972S49:    1759 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2973S50:    17D7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2974S51:    1859 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2975S52:    18D9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2976S53:    1953 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2977S54:    19D5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2978S55:    1A53 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2979S56:    1ACD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2980S57:    1B47 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2981S58:    1BC9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2982S59:    1C43 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2983S60:    1CBD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2984S61:    1D3D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2985S62:    1DCD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2986S63:    1E43 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2987S64:    1EB9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2988S65:    1F31 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2989S66:    1FA9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2990S67:    2023 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2991S68:    20A5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2992S69:    211F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2993S70:    21A7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2994S71:    222F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2995S72:    22B7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2996S73:    2341 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2997S74:    23CF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2998S75:    245D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_2999S76:    24EB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3000S77:    2579 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3001S78:    2605 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3002S79:    2691 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3003S80:    2725 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3004S81:    27A1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3005S82:    282B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3006S83:    28B5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3007S84:    2941 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3008S85:    29C5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3009S86:    2A3F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3010S87:    2ABB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3011S88:    2B37 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3012S89:    2BB1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3013S90:    2C2B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3014S91:    2CA5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3015S92:    2D1F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3016S93:    2D99 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3017S94:    2E13 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3018S95:    2E8D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3019S96:    2F07 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3020S97:    2F83 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3021S98:    2FFF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3022S99:    307B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3023S100:   30F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3024S101:   3177 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3025S102:   31EF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3026S103:   3267 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3027S104:   32E5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3028S105:   3369 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3029S106:   33FD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3030S107:   3491 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3031S108:   350B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3032S109:   3587 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3033S110:   3609 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3034S111:   368F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3035S112:   3711 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3036S113:   379D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3037S114:   382B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3038S115:   38BF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3039S116:   3957 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3040S117:   39E1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3041S118:   3A71 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3042S119:   3B03 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3043S120:   3B97 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3044S121:   3C29 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3045S122:   3CC9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3046S123:   3D57 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3047S124:   3DF3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3048S125:   3E91 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3049S126:   3F31 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3050S127:   3FDD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3051S128:   4089 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3052S129:   4113 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3053S130:   41A7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3054S131:   4235 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3055S132:   42C9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3056S133:   435F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3057S134:   4403 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3058S135:   44AF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3059S136:   455B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3060S137:   45FB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3061S138:   46A1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3062S139:   475D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3063S140:   4813 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3064S141:   48D9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3065S142:   499F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3066S143:   4A3B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3067S144:   4AD7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3068S145:   4B5D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3069S146:   4BE3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3070S147:   4C69 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3071S148:   4CEF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3072S149:   4D6D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3073S150:   4DEB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3074S151:   4E69 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3075S152:   4EE7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3076S153:   4F6F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3077S154:   5005 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3078S155:   50A1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3079S156:   5155 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3080S157:   5209 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3081S158:   52D7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3082S159:   535D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3083S160:   53F3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3084S161:   548B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3085S162:   554F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3086S163:   55D9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3087S164:   5677 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3088S165:   5715 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3089S166:   5795 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3090S167:   5815 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3091S168:   5895 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3092S169:   5915 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            5920 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5B00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 2327 IN MAIN.asm
                    > USED AT LINE 2331 IN MAIN.asm
                    > USED AT LINE 2335 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5B00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 2346 IN MAIN.asm
                    > USED AT LINE 2354 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2400 IN MAIN.asm
                    > USED AT LINE 2415 IN MAIN.asm
                    > USED AT LINE 2418 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
                    > USED AT LINE 2484 IN MAIN.asm
BUFFER:             5C00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 936 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 2241 IN MAIN.asm
VARS:               5D00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 2318 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           5DD0 DEFINED AT LINE 18 IN ram.asm
RST08:              5DD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              5DD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              5DD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              5DD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              5DD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              5DDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               5DDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             5DDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             5DE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            5DE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            5DE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            5DE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2314 IN MAIN.asm
VTIBPTR:            5DE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 2347 IN MAIN.asm
                    > USED AT LINE 2417 IN MAIN.asm
VBUFPTR:            5DE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 696 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 2234 IN MAIN.asm
                    > USED AT LINE 2240 IN MAIN.asm
                    > USED AT LINE 2242 IN MAIN.asm
VHEAPPTR:           5DEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 1075 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 1228 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
                    > USED AT LINE 1326 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1786 IN MAIN.asm
                    > USED AT LINE 1853 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
VRECURPTR:          5DEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 885 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
VDATAWIDTH:         5DEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 267 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
                    > USED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
VNUMBASE:           5DEF DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
VHEXPREFIX:         5DF0 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 678 IN MAIN.asm
VECHO:              5DF1 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
VSTRMODE:           5DF2 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 1734 IN MAIN.asm
VPOINTER:           5DF8 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 414 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 1366 IN MAIN.asm
                    > USED AT LINE 1580 IN MAIN.asm
                    > USED AT LINE 1991 IN MAIN.asm
VREMAIN:            5DFA DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 891 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
VSAVEDIP:           5DFC DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 2300 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
VSAVEDSP:           5DFE DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 2301 IN MAIN.asm
                    > USED AT LINE 2421 IN MAIN.asm
VSAVEDNEXT:         5E00 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 2302 IN MAIN.asm
                    > USED AT LINE 2422 IN MAIN.asm
VSAVEDBP:           5E02 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 2303 IN MAIN.asm
                    > USED AT LINE 2423 IN MAIN.asm
VTEMP1:             5E04 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 1418 IN MAIN.asm
                    > USED AT LINE 1462 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 1699 IN MAIN.asm
                    > USED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 1981 IN MAIN.asm
VTEMP2:             5E06 DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 1421 IN MAIN.asm
                    > USED AT LINE 1461 IN MAIN.asm
                    > USED AT LINE 1510 IN MAIN.asm
                    > USED AT LINE 1531 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 1971 IN MAIN.asm
VTEMP3:             5E08 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
TBPTR:              5E0C DEFINED AT LINE 67 IN ram.asm
TITLEBUF:           5E0E DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 2289 IN MAIN.asm
                    > USED AT LINE 2308 IN MAIN.asm
                    > USED AT LINE 2338 IN MAIN.asm
HEAP:               5E22 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1841 IN MAIN.asm
